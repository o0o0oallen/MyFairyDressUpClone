!function() {
    "use strict";
    var EGetWay, AchievementState, ResourceType, SignState, GuideMaskType, PartType, EDrawLotsEventTriggerType, ERandomTipType;
    !function(e) {
        e[e.turn = 1] = "turn",
        e[e.gold_turn = 2] = "gold_turn",
        e[e.theature = 3] = "theature"
    }(EGetWay || (EGetWay = {})),
    function(e) {
        e[e.locked = 1] = "locked",
        e[e.unlocked = 2] = "unlocked",
        e[e.finished = 3] = "finished",
        e[e.received = 4] = "received"
    }(AchievementState || (AchievementState = {})),
    function(e) {
        e[e.sprite = 1] = "sprite",
        e[e.spine = 2] = "spine",
        e[e.particle = 3] = "particle",
        e[e.animNode = 4] = "animNode"
    }(ResourceType || (ResourceType = {})),
    function(e) {
        e[e.canSign = 1] = "canSign",
        e[e.signed = 2] = "signed",
        e[e.signOver = 3] = "signOver",
        e[e.waitGap = 4] = "waitGap"
    }(SignState || (SignState = {})),
    function(e) {
        e[e.none_passAll = 0] = "none_passAll",
        e[e.none_blockkAll = 1] = "none_blockkAll",
        e[e.none_passHole = 2] = "none_passHole",
        e[e.mask_passAll = 3] = "mask_passAll",
        e[e.mask_blockAll = 4] = "mask_blockAll",
        e[e.mask_passHole = 5] = "mask_passHole"
    }(GuideMaskType || (GuideMaskType = {})),
    function(e) {
        e[e.hair = 1] = "hair",
        e[e.headDec = 2] = "headDec",
        e[e.face = 3] = "face",
        e[e.cloth = 4] = "cloth",
        e[e.sock = 5] = "sock",
        e[e.shoe = 6] = "shoe",
        e[e.handDec = 7] = "handDec",
        e[e.wing = 8] = "wing"
    }(PartType || (PartType = {})),
    function(e) {
        e[e.after = 1] = "after",
        e[e.arrive = 2] = "arrive",
        e[e.afterAndArrive = 3] = "afterAndArrive"
    }(EDrawLotsEventTriggerType || (EDrawLotsEventTriggerType = {})),
    function(e) {
        e[e.onlineFance = 1] = "onlineFance"
    }(ERandomTipType || (ERandomTipType = {}));
    const ANIMATION_ID = {
        idle: "idle-idle",
        idle02: "idle02-idle02",
        idle03: "idle03-idle03",
        sleep_idle: "shuijiao02-shuijiao02_idle",
        wing_idle: "idle_fly",
        wing_fly: "move",
        hungry01: "ele01-ele01",
        hungry02: "ele01-ele02",
        tired01: "shuijiao01-shuijiao01",
        full01: "baole01-baole01",
        dacuo: "dacuo-dacuo",
        refuse: "dianji_body02-dianji_body02",
        shengji: "shengli-shengji",
        show01: "paihangbang-show01",
        show02: "paihangbang-show02",
        show03: "paihangbang-show03",
        float: "dianji_jiao02-dianji_jiao02",
        room: {
            head: "dianji_tou02-dianji_tou02",
            cloth: "hz_yifu-hz_yifu",
            shoes: "dianji_jiao03-dianji_jiao03",
            wing: "dianji_body01-dianji_body01"
        },
        STAGE: {
            WIN1: "shengli-shengli01",
            WIN2: "shengli-shengli02",
            FAILED1: "shibai-shibai01",
            FAILED2: "shibai-shibai02",
            SETTLEMENTTINGS: ["dianji_jiao01-dianji_jiao01", "dianji_jiao02-dianji_jiao02", "dianji_jiao03-dianji_jiao03"],
            fly_idle: "fly_idle-idle",
            flying: "fly_move-move",
            fly_zuo: "fly_zuo-zuo",
            ease_zuo: "fly_move_zuo-move_zuo",
            bianshen: "bianshen-bianshen"
        },
        PVP: {
            LIKE1: "xihuan-xihuan01",
            LIKE2: "xihuan-xihuan02",
            UNLIKE1: "buxihuan-buxihuan01",
            UNLIKE2: "buxihuan-buxihuan02",
            COME: "come02-come02",
            JOINSHOW: "dianji_body01-dianji_body01"
        },
        motion: {
            idle: "wan_yundong-wan_yundong01",
            tip: "wan_yundong-wan_yundong02",
            idle_ball: "idle_yundong-idle_qiuqiu",
            idle_rope: "idle_yundong-idle_ts",
            move_ball_left: "qiuqiu_move-qq_move01",
            move_ball_right: "qiuqiu_move-qq_move02",
            catch_ball_top: "qiuqiu_play-qq_play01",
            catch_ball_bottom: "qiuqiu_play-qq_play02"
        },
        face: {
            ele01: "face_ele-ele01",
            ele02: "face_ele-ele02",
            haixiu: "face_haixiu-haixiu",
            haqian: "face_haqian-haqian",
            idle: "face_idle-idle",
            zhayan: "face_idle-zhayan",
            jingya: "face_jingya-jingya",
            kaixin01: "face_kaixin-kaixin01",
            kaixin02: "face_kaixin-kaiin02",
            qiwang1: "face_qiwang-qiwang01",
            qiwang2: "face_qiwang-qiwang02",
            shuohua: "face_shuohua-shuohua",
            weiqu01: "face_weiqu-weiqu01",
            weiqu02: "face_weiqu-weiqu02",
            chi: "face_chi01-chi01",
            bianshen: "face_bianshen-bianshen",
            shuijiao: "face_shuijiao02-shuijiao02",
            shuijiao_idle: "face_shuijiao02-shuijiao02_idle",
            weakup: "face_shuijiao02-come01",
            baole01: "face_baole-baole01",
            baoleIdle: "face_baole-baole_idle",
            shengji: "face_shengji-shengji"
        },
        hua: {
            openIdle: "item_huabao_action-item_huabao_open_idle",
            open: "item_huabao_action-item_huabao_open",
            closeIdle: "item_huabao_action-item_huabao_close_idle",
            close: "item_huabao_action-item_huabao_close"
        },
        cardpack_open: "kabao-open",
        book_open: "hzfd-open",
        book_page_left: "hzfd-fan_zuo",
        book_page_right: "hzfd-fan_you",
        camera: {
            bianshen: "shexiangji-shexiangji"
        },
        ball_stop: "item_qiu-stop",
        ball_idle: "item_qiu-idle"
    }
      , MODEL_ID = {
        shadow: "shadow",
        role_body: "fairy_001_shenti",
        wish_cast_trail: "eff_ui_trail_bishua",
        map_hudong: "map_hudong",
        kabao_gold: "kabao_gold",
        kabao_normal: "kabao_normal",
        ka_gold: "ka_gold",
        ka_normal: "ka_normal",
        hzfd: "hzfd",
        effect: {
            kabao_open: "eff_ui_kabao_open",
            kabao_idle: "eff_ui_kabao_idle",
            ka_glow: "eff_ui_tlp_glow",
            shengji_flare: "eff_ui_shengji_flare",
            shubiao_dianji: "eff_ui_shubiao_dianji",
            eff_ui_tree_star: "eff_ui_tree_star",
            eff_ui_zhujiemian_bgstar: "eff_ui_zhujiemian_bgstar",
            eff_ui_guanka_glow: "eff_ui_guanka_glow",
            eff_ui_card_star: "eff_ui_card_star",
            eff_ui_zhoubisai_win: "eff_ui_zhoubisai_win",
            eff_ui_cansai_glow: "eff_ui_cansai_glow",
            eff_ui_zhoubisai_show: "eff_ui_zhoubisai_show",
            eff_ui_qiyuan_glow: "eff_ui_qiyuan_glow",
            eff_ui_kaideng_star: "eff_ui_kaideng_star",
            eff_ui_fz_glow: "eff_ui_fz_glow",
            eff_ui_jiesuan_bianshen: "eff_ui_jiesuan_bianshen",
            eff_ui_jinbi: "eff_ui_jinbi",
            eff_ui_zuanshi: "eff_ui_zuanshi",
            eff_ui_xuyuanchi_fz: "eff_ui_xuyuanchi_fz",
            eff_ui_xuyuanchi_bz: "eff_ui_xuyuanchi_bz",
            eff_ui_zhujiemian_night: "eff_ui_zhujiemian_night",
            eff_ui_xuyuan_bgstar: "eff_ui_xuyuan_bgstar",
            eff_ui_jiesuan_glow: "eff_ui_jiesuan_glow",
            eff_ui_jiesuan_jinbi: "eff_ui_jiesuan_jinbi",
            eff_ui_jiesuan_zuanshi: "eff_ui_jiesuan_zuanshi",
            eff_ui_jinbi_loop: "eff_ui_jinbi_loop",
            eff_ui_yindao_ring: "eff_ui_yindao_ring",
            eff_ui_good_glow: "eff_ui_good_glow",
            eff_ui_perfect_glow: "eff_ui_perfect_glow",
            e_tiaosheng_smoke: "e_tiaosheng_smoke",
            e_caidai: "e_caidai",
            e_huabao_star: "e_huabao_star",
            e_rainbow: "e_rainbow"
        },
        ball: "ball",
        rope: "item_tiaosheng_01",
        map_room: "map_room",
        camera_bianshen: "shexiangji",
        jiesuan_sky: "jiesuan_sky"
    }
      , AD_EVENT_ID = {
        VIDEO: {
            free_start_stage: "free_start_stage",
            double_level_up: "double_level_up",
            double_sign: "double_sign",
            free_gold: "free_gold",
            random_gold: "random_gold",
            stage_ad_settlement: "stage_ad_settlement",
            ropeSkippingTryAgain: "ropeSkippingTryAgain",
            playBallTryAgain: "playBallTryAgain",
            free_hungry_potion: "free_hungry_potion",
            free_food: "free_food",
            one_key_harvest: "one_key_harvest",
            free_unlock_flowerpot: "free_unlock_flowerpot",
            stage_try: "stage_try",
            open_card_with_new_part: "open_card_with_new_part",
            ad_extract_part: "ad_extract_part",
            ad_game02_reborn: "ad_game02_reborn"
        },
        BANNER: {
            luck_gold: "ba_luck_gold",
            hub_scene: "ba_hub_scene",
            rank_scene: "ba_rank_scene",
            player_detail: "ba_player_detail",
            illustrateBook: "ba_illustrateBook",
            illustratePreview: "ba_illustratePreview",
            wish_pool_main: "ba_wish_pool_main",
            wish_pool: "ba_wish_pool",
            interaction_motion: "ba_interaction_motion",
            interaction_eating: "ba_interaction_eating",
            interaction_learn: "ba_interaction_learn",
            interaction_rest: "ba_interaction_rest",
            garden_main_scene: "ba_garden_main_scene",
            story_dialog: "ba_story_dialog",
            room_scene: "ba_room_scene",
            match_main: "ba_match_main",
            sign_dialog: "ba_sign_dialog",
            setting_dialog: "ba_setting_dialog",
            daily_task_dialog: "ba_daily_task_dialog",
            shop_dialog: "ba_shop_dialog",
            garden_card_pack: "ba_garden_card_pack",
            garden_card_illustrate: "ba_garden_card_illustrate",
            garden_achievement: "ba_garden_achievement",
            motion_settlement: "ba_motion_settlement",
            food_shop_dialog: "ba_food_shop_dialog",
            nearby_rank: "ba_nearby_rank",
            get_part_dialog: "ba_get_part_dialog",
            get_item_dialog: "ba_get_item_dialog",
            weakup_dialog: "ba_weakup_dialog",
            go_garden_go_stage: "ba_go_garden_go_stage",
            eating_tip: "ba_eating",
            eating_potion: "ba_eating_potion",
            offline_reward: "ba_offline_reward",
            more_game: "ba_more_game",
            finde_me: "ba_finde_me",
            try_paly: "ba_try_paly"
        },
        INTER: {
            go_garden_go_stage: "in_go_garden_go_stage",
            weak_up_tip: "in_weak_up_tip",
            sign_dialog: "in_sign_dialog",
            player_detail: "in_player_detail",
            back_hub: "in_back_hub",
            motion_scene: "in_motion_scene",
            eating_scene: "in_eating_scene",
            learn_scene: "in_learn_scene",
            rest_scene: "in_rest_scene",
            nearby_rank: "in_nearby_rank",
            hungry_tip: "in_hungry_tip",
            energy_tip: "in_energy_tip",
            motion_settlement_dialog: "in_motion_settlement_dialog",
            hungry_potion_tip: "in_hungry_potion_tip",
            food_shop_dialog: "in_food_shop_dialog",
            task_dialog: "in_task_dialog",
            rank_scene: "in_rank_scene",
            suit_illustrate_book: "in_suit_illustrate_book",
            suit_preview_dialog: "in_suit_preview_dialog",
            part_detail_dialog: "in_part_detail_dialog",
            item_got_dialog: "in_item_got_dialog",
            part_got_dialog: "in_part_got_dialog",
            wish_main: "in_wish_main",
            wish_pool: "in_wish_pool",
            shop_dialog: "in_shop_dialog",
            pvp_scene: "in_pvp_scene",
            room_scene: "in_room_scene",
            stage_scene: "in_stage_scene",
            stage_preview: "in_stage_preview",
            garden_main: "in_garden_main",
            card_selected: "in_card_selected",
            card_illustrate: "in_card_illustrate",
            garden_achievement: "in_garden_achievement",
            more_game: "in_more_game",
            find_me: "in_find_me",
            try_play: "in_try_play",
            go_card_pack: "in_go_card_pack",
            watch_ad_get_item: "in_watch_ad_get_item",
            seed_select_dialog: "in_seed_select_dialog",
            continue_like_dialog: "in_continue_like_dialog",
            food_discount_dialog: "in_food_discount_dialog"
        },
        embed: {
            stage_preview: "em_stage_preview",
            resting_tip: "em_resting_tip",
            motion_settlement: "em_motion_settlement",
            got_card_pack: "em_got_card_pack",
            food_shop_dialog: "em_food_shop_dialog"
        }
    };
    class Const {
    }
    Const.packageVersion = "1.0.0",
    Const.sdcardPath = "",
    Const.copChannelId = "",
    Const.ulsdkVersion = "",
    Const.cdkChannelId = "",
    Const.DOWNLOAD_FRAMES = {},
    Const.ITEM_ID_DIAMONDS = 1,
    Const.ITEM_ID_GOLD = 2,
    Const.ITEM_ID_GAME_COIN = 3,
    Const.ITEM_ID_WISHPOOL_EXCHANGE = 4,
    Const.ITEM_ID_ENERGY = 5,
    Const.ITEM_ID_FANCE_COUNT = 7,
    Const.ITEM_ID_DICE_COUNT = 8,
    Const.ITEM_ID_VIDEO_SHARE_COUNT = 9,
    Const.ITEM_ID_SHARE_COUNT = 10,
    Const.ITEM_ID_ARENA_FREE_COUNT = 15,
    Const.ITEM_ID_PVP_REWARD_CURR_NUM = 16,
    Const.ITEM_ID_PVP_LIKE_COUNT = 17,
    Const.ITEM_ID_INTERACTION_EXP = 21,
    Const.ITEM_ID_GARDEN_WATER = 22,
    Const.ITEM_ID_GARDEN_FERTILIZER = 23,
    Const.ITEM_ID_GARDEN_COLLECTION = 25,
    Const.ITEM_ID_INTERACTION_ENERGY = 550,
    Const.ITEM_ID_INTERACTION_HUNGER = 551,
    Const.ITEM_ID_INTERACTION_MOTION = 552,
    Const.ITEM_ID_INTERACTION_LEARN = 553,
    Const.ITEM_FLAG_MONEY = 1,
    Const.ITEM_FLAG_PART = 2,
    Const.SHOP_FOOD_TAG = 3,
    Const.RESOLUTION_RANGE = {
        maxWidth: 768,
        minWidth: 576,
        maxHeight: 1280,
        minHeight: 1024
    },
    Const.SERVER_HOST = "https://rank.ultralisk.cn",
    Const.SERVER_URL_FORMAT = "%s/ultralisk/",
    Const.SERVER_APP_ID = 53,
    Const.SERVER_RANK_ID = 67,
    Const.OFFLINE_RANK_ID_LEVEL = 1,
    Const.OFFLINE_RANK_ID_PART = 2,
    Const.OFFLINE_RANK_ID_PVP = 3,
    Const.RADIAN2EULAR = 180 / Math.PI;
    class MsgHandler {
        constructor(e) {
            MsgHandler.globalEventDis || (MsgHandler.globalEventDis = new Laya.EventDispatcher),
            this.eventTarget = e || MsgHandler.globalEventDis,
            this.registeredListeners = {},
            this.startedListeners = {},
            this.bStarted = !1
        }
        registerListeners(e) {
            Tools.forEachMap(e, (e,t)=>{
                this.registeredListeners[e] || (this.registeredListeners[e] = []);
                let a = this.registeredListeners[e].indexOf(t);
                a >= 0 ? this.registeredListeners[e][a] = t : this.registeredListeners[e].push(t)
            }
            ),
            this.bStarted && this.startProcMsg()
        }
        startProcMsg() {
            this.bStarted = !0,
            Tools.forEachMap(this.registeredListeners, (e,t)=>{
                for (let a = 0; a < t.length; a++) {
                    const i = t[a];
                    this.eventTarget.on(e, this, i),
                    this.startedListeners[e] || (this.startedListeners[e] = []),
                    this.startedListeners[e].push(i)
                }
            }
            )
        }
        stopProcMsg() {
            Tools.forEachMap(this.startedListeners, (e,t)=>{
                for (let a = 0; a < t.length; a++) {
                    const i = t[a];
                    this.eventTarget.off(e, this, i)
                }
            }
            ),
            this.bStarted = !1,
            this.startedListeners = {},
            this.registeredListeners = {}
        }
        sendMsg(e, t) {
            try {
                this.eventTarget.event(e, t)
            } catch (e) {
                console.warn("MsgHandler.sendMsg has exception", e)
            }
        }
    }
    var ul;
    MsgHandler.globalEventDis = null,
    function(e) {
        function _convert(e, t) {
            e.sign = t ? "" : e.negative ? "-" : e.sign;
            var a = e.min - e.argument.length + 1 - e.sign.length
              , i = new Array(a < 0 ? 0 : a).join(e.pad);
            return e.left ? "0" == e.pad || t ? e.sign + e.argument + i.replace(/0/g, " ") : e.sign + e.argument + i : "0" == e.pad || t ? e.sign + i + e.argument : i + e.sign + e.argument
        }
        function getType(e) {
            return {
                "[object Boolean]": "boolean",
                "[object Number]": "number",
                "[object String]": "string",
                "[object Function]": "function",
                "[object Array]": "array",
                "[object Date]": "date",
                "[object RegExp]": "regExp",
                "[object Undefined]": "undefined",
                "[object Null]": "null",
                "[object Object]": "object"
            }[Object.prototype.toString.call(e)]
        }
        e.format = function(...e) {
            if (void 0 === e)
                return null;
            if (e.length < 1)
                return null;
            if ("string" != typeof e[0])
                return null;
            if ("undefined" == typeof RegExp)
                return null;
            for (var t = e[0], a = new RegExp(/(%([%]|(\-)?(\+|\x20)?(0)?(\d+)?(\.(\d)?)?([bcdfosxX])))/g), i = new Array, s = new Array, o = 0, n = 0, r = 0, l = 0, h = "", d = null; d = a.exec(t); )
                d[9] && (o += 1),
                n = l,
                r = a.lastIndex - d[0].length,
                s[s.length] = t.substring(n, r),
                l = a.lastIndex,
                i[i.length] = {
                    match: d[0],
                    left: !!d[3],
                    sign: d[4] || "",
                    pad: d[5] || " ",
                    min: d[6] || 0,
                    precision: d[8],
                    code: d[9] || "%",
                    negative: parseInt(e[o]) < 0,
                    argument: String(e[o])
                };
            if (s[s.length] = t.substring(l),
            0 == i.length)
                return t;
            if (e.length - 1 < o)
                return null;
            d = null;
            var c = null
              , g = null;
            for (g = 0; g < i.length; g++)
                "%" == i[g].code ? c = "%" : "b" == i[g].code ? (i[g].argument = String(Math.abs(parseInt(i[g].argument)).toString(2)),
                c = _convert(i[g], !0)) : "c" == i[g].code ? (i[g].argument = String(String.fromCharCode(Math.abs(parseInt(i[g].argument)))),
                c = _convert(i[g], !0)) : "d" == i[g].code ? (i[g].argument = String(Math.abs(parseInt(i[g].argument))),
                c = _convert(i[g])) : "f" == i[g].code ? (i[g].argument = String(Math.abs(parseFloat(i[g].argument)).toFixed(i[g].precision ? i[g].precision : 6)),
                c = _convert(i[g])) : "o" == i[g].code ? (i[g].argument = String(Math.abs(parseInt(i[g].argument)).toString(8)),
                c = _convert(i[g])) : "s" == i[g].code ? (i[g].argument = i[g].argument.substring(0, i[g].precision ? i[g].precision : i[g].argument.length),
                c = _convert(i[g], !0)) : "x" == i[g].code ? (i[g].argument = String(Math.abs(parseInt(i[g].argument)).toString(16)),
                c = _convert(i[g])) : "X" == i[g].code ? (i[g].argument = String(Math.abs(parseInt(i[g].argument)).toString(16)),
                c = _convert(i[g]).toUpperCase()) : c = i[g].match,
                h += s[g],
                h += c;
            return h += s[g]
        }
        ,
        e.formatDate = function(e, t) {
            var a = {
                "M+": e.getMonth() + 1,
                "d+": e.getDate(),
                "h+": e.getHours(),
                "m+": e.getMinutes(),
                "s+": e.getSeconds(),
                "q+": Math.floor((e.getMonth() + 3) / 3),
                S: e.getMilliseconds()
            };
            for (var i in /(y+)/.test(t) && (t = t.replace(RegExp.$1, (e.getFullYear() + "").substr(4 - RegExp.$1.length))),
            a)
                new RegExp("(" + i + ")").test(t) && (t = t.replace(RegExp.$1, 1 == RegExp.$1.length ? a[i] : ("00" + a[i]).substr(("" + a[i]).length)));
            return t
        }
        ,
        e.dump = function(e, t, a) {
            let i = function _dump(e, t) {
                var a = "";
                t || (t = 0);
                for (var i = "", s = 0; s < t + 1; s++)
                    i += "    ";
                if ("object" == typeof e)
                    for (var o in e) {
                        var n = e[o];
                        "object" == typeof n ? (a += i + "'" + o + "' ...\n",
                        a += _dump(n, t + 1)) : a += i + "'" + o + "' => \"" + n + '"\n'
                    }
                else
                    a = "===>" + e + "<===(" + typeof e + ")";
                return a
            }(e);
            console.log("dump-begin", t),
            console.log(i),
            console.log("dump-end")
        }
        ,
        e.getType = getType,
        e.clone = function clone(e) {
            let t, a = getType(e);
            if ("object" === a)
                t = {};
            else {
                if ("array" !== a)
                    return e;
                t = []
            }
            if ("array" === a)
                for (let a = 0, i = e.length; a < i; a++)
                    t.push(clone(e[a]));
            else if ("object" === a)
                for (let a in e)
                    t[a] = clone(e[a]);
            return t
        }
        ,
        e.length = function(e) {
            let t = getType(e);
            if ("array" === t)
                return e.length;
            if ("object" === t) {
                let t = 0;
                for (const a in e)
                    e[a] && t++;
                return t
            }
            return 0
        }
        ,
        e.clamp = function(e, t, a) {
            return e < t && (e = t),
            e > a && (e = a),
            e
        }
    }(ul || (ul = {}));
    class Timer {
        constructor(e, t, a) {
            this._repeatCount = -1,
            this._span = 1,
            this._callback = null,
            this._bRuning = !1,
            this._count = 0,
            this._span = e,
            this._repeatCount = t,
            this._callback = a
        }
        static callLater(e, t, a) {
            let i = new Timer(e,1,t);
            return i._bindingCaller = a,
            i._bBindCaller = !!a,
            i.start(),
            i
        }
        static callLoop(e, t, a, i=-1) {
            let s = new Timer(e,i,t);
            if ("boolean" == typeof a) {
                let e = a;
                s.start(e)
            } else
                a && "object" == typeof a ? (s._bindingCaller = a,
                s._bBindCaller = !!a,
                s.start(!0)) : s.start();
            return s
        }
        _onSpan(e) {
            if (e._count++,
            e._bBindCaller) {
                if (!e._bindingCaller)
                    return void e.stop();
                if (e._bindingCaller instanceof Laya.Node) {
                    if (!e._bindingCaller.parent)
                        return void e.stop()
                } else if (e._bindingCaller.destroyed)
                    return void e.stop()
            }
            if (e._callback)
                try {
                    e._callback(e)
                } catch (e) {
                    console.warn("[error] Timer._onSpan callback has exception", e)
                }
            e._repeatCount >= 0 && e._count >= e._repeatCount && e.stop()
        }
        isRunning() {
            return this._bRuning
        }
        get count() {
            return this._count
        }
        get span() {
            return this._span
        }
        start(e=!1) {
            return this.stop(),
            this._callback ? (!e && this._repeatCount < 0 && (console.warn("警告] Timer.start, this timer will never stop!"),
            console.warn("警告]     please use startAndBindToNode"),
            console.warn("警告]     or your can stop timer in callback. use e:stop()")),
            this._count = 0,
            this._bRuning = !0,
            Laya.timer.loop(1e3 * this.span, this, this._onSpan, [this]),
            this) : (console.warn("警告] Timer.start callback未设置！"),
            this)
        }
        stop() {
            return this._bRuning && (Laya.timer.clear(this, this._onSpan),
            this._bRuning = !1),
            this
        }
    }
    class Manager {
        static loadAllManagers(e) {
            let t = 0;
            for (let a = 0; a < this._managerInstances.length; a++) {
                let i = this._managerInstances[a];
                try {
                    i.loadedCallback = (()=>{
                        ++t == this._managerInstances.length && e()
                    }
                    ),
                    i.onLoad()
                } catch (e) {
                    console.warn("Manager.loadAllManager has error", e)
                }
            }
        }
        static __init() {
            Manager._managerInstances.push(this),
            this._msgHander = new MsgHandler,
            this._msgHander.startProcMsg()
        }
        static onLoad() {
            this.registerListeners({
                MSG_RECORD_RESET: this.loadRecord
            }),
            this._bNetworkResponseRegistered || (this._bNetworkResponseRegistered = !0,
            this.onRegisterNetworkResponseListeners()),
            this.loadedCallback()
        }
        static loadRecord() {}
        static saveRecord() {}
        static onRegisterNetworkResponseListeners() {}
        static registerListeners(e) {
            Tools.forEachMap(e, (t,a)=>{
                e[t] = a.bind(this)
            }
            ),
            this._msgHander.registerListeners(e)
        }
        static startProcMsg() {
            this._msgHander.startProcMsg()
        }
        static stopProcMsg() {
            this._msgHander.stopProcMsg()
        }
        static sendMsg(e, t) {
            this._msgHander && this._msgHander.sendMsg(e, t)
        }
    }
    Manager._managerInstances = [],
    Manager.loadedCallback = null,
    Manager._bNetworkResponseRegistered = !1;
    class CfgParser {
        static parseCfgByJsonObj(e, t, a) {
            let i = this.preprocess(e, t);
            return this.formatDb(e, i, a, t.fields)
        }
        static parseNumber(e) {
            let t = parseFloat(e);
            return isNaN(t) && (t = null),
            t
        }
        static parseString(e) {
            return e
        }
        static parseArray(e) {
            let t = null;
            try {
                (t = JSON.parse(e))instanceof Array || (t = null)
            } catch (e) {}
            return t
        }
        static parseObject(e) {
            let t = null;
            try {
                (t = JSON.parse(e))instanceof Object || (t = null)
            } catch (e) {}
            return t
        }
        static parseBoolean(e) {
            return "TRUE" == e || "true" == e
        }
        static parseValue(e, t) {
            let a = this.PARSE_FUNCTIONS[t];
            if (!a)
                return "";
            let i = a(e);
            if (null == i) {
                let a = this.PARSE_DEFAULT_VALUE_CREATORS[t]();
                return e.length > 0 && console.log(`[警告] CfgParser.parseValue 解析错误：type=${t}, srcValue=[${e}], 默认值=[${a}]]`),
                a
            }
            return i
        }
        static preprocess(e, t) {
            let a = []
              , i = t.types || []
              , s = t.fields || []
              , o = t.values || [];
            if (!(o.length <= 0)) {
                if (i.length != o[0].length || s.length != o[0].length)
                    return console.log(`[警告] CfgParser.preprocessData  ${e} 数据长度不匹配！`),
                    [];
                for (let e = 0; e < o.length; e++) {
                    const t = o[e];
                    let n = {};
                    for (let e = 0; e < t.length; e++) {
                        const a = i[e]
                          , o = s[e]
                          , r = t[e];
                        n[o] = this.parseValue(r, a)
                    }
                    a.push(n)
                }
                return a
            }
            console.log(`[警告] CfgParser.preprocessData ${e} 数据为空`)
        }
        static formatDb(e, t, a, i) {
            let s = a.split("")
              , o = {};
            for (let a = 0; a < t.length; a++) {
                const n = t[a];
                let r = o;
                for (let e = 0; e < s.length - 1; e++) {
                    let t = n[i[e]]
                      , a = r[t];
                    a || (a = e == s.length - 2 && "a" == s[s.length - 1] ? [] : {},
                    r[t] = a),
                    r = a
                }
                let l = s[s.length - 1];
                if ("m" == l) {
                    let t = n[i[s.length - 1]];
                    if (null != r[t]) {
                        let a = "db";
                        for (let e = 0; e < s.length; e++)
                            a += `[${n[i[e]]}]`;
                        console.log(`[警告] CfgParser.formatDb  ${e} 字段被覆盖！`, a, r[t])
                    }
                    r[t] = n
                } else
                    "a" == l && (r instanceof Array || 1 == s.length && (o = r = []),
                    r instanceof Array ? r.push(n) : console.log(`[警告] CfgParser.formatDb  ${e} a模式，容器不是数组！`))
            }
            return o
        }
    }
    CfgParser.PARSE_FUNCTIONS = {
        A: CfgParser.parseArray,
        O: CfgParser.parseObject,
        N: CfgParser.parseString,
        S: CfgParser.parseString,
        I: CfgParser.parseNumber,
        F: CfgParser.parseNumber,
        B: CfgParser.parseBoolean
    },
    CfgParser.PARSE_DEFAULT_VALUE_CREATORS = {
        A: ()=>[],
        O: ()=>({}),
        N: ()=>"",
        S: ()=>"",
        I: ()=>0,
        F: ()=>0,
        B: ()=>!1
    };
    class CartoonMaterial extends Laya.Material {
        constructor() {
            super(),
            this.setShaderName("CartoonShader"),
            this._shaderValues.setVector(CartoonMaterial.SHADOWCOLOR, new Laya.Vector4(.6663285,.6544118,1,1)),
            this._shaderValues.setNumber(CartoonMaterial.SHADOWRANGE, .002),
            this._shaderValues.setNumber(CartoonMaterial.SHADOWINTENSITY, .98),
            this._shaderValues.setNumber(CartoonMaterial.SHADOWBOUNDARY, .015),
            this._shaderValues.setNumber(CartoonMaterial.SPECULARRANGE, .99),
            this._shaderValues.setNumber(CartoonMaterial.SPECULARINTENSITY, .09),
            this._shaderValues.setVector(CartoonMaterial.SPECULARCOLOR, new Laya.Vector4(1,1,1,1)),
            this._shaderValues.setNumber(CartoonMaterial.OUTLINEWIDTH, .001),
            this._shaderValues.setNumber(CartoonMaterial.OUTLINELIGHTNESS, .25),
            this._shaderValues.setVector(CartoonMaterial.OUTLINECOLOR, new Laya.Vector4(1,1,1,1)),
            this._shaderValues.setNumber(CartoonMaterial.ALBEDOIDENTITY, .5),
            this._shaderValues.setVector(CartoonMaterial.ALBEDOCOLOR, new Laya.Vector4(1,1,1,1)),
            this._shaderValues.setVector(CartoonMaterial.SECOND_SHADOWCOLOR, new Laya.Vector4(1,1,1,1)),
            this._shaderValues.setNumber(CartoonMaterial.SECOND_SHADOWRANGE, 0),
            this._shaderValues.setNumber(CartoonMaterial.SECOND_SHADOWINTENSITY, .98),
            this._shaderValues.setNumber(CartoonMaterial.SECOND_SHADOWBOUNDARY, 0),
            this._shaderValues.setVector(CartoonMaterial.EDGE_HIGHLIGHT_COLOR, new Laya.Vector4(0,1,0,1)),
            this._shaderValues.setNumber(CartoonMaterial.EDGE_HIGHLIGHT_RANGE, 0),
            this._shaderValues.setNumber(CartoonMaterial.EDGE_HIGHLIGHT_INTENSITY, .98),
            this._shaderValues.setNumber(CartoonMaterial.EDGE_HIGHLIGHT_BOUNDARY, 0),
            this._shaderValues.setNumber(CartoonMaterial.RANDOM_DISCARD_FACTOR, 1)
        }
        static __init__() {
            CartoonMaterial.SHADERDEFINE_ALBEDOTEXTURE = Laya.Shader3D.getDefineByName("ALBEDOTEXTURE"),
            CartoonMaterial.SHADERDEFINE_TILINGOFFSET = Laya.Shader3D.getDefineByName("TILINGOFFSET"),
            CartoonMaterial.SHADERDEFINE_BONE = Laya.Shader3D.getDefineByName("BONE")
        }
        static initShader() {
            CartoonMaterial.__init__();
            var e = {
                s_Cull: Laya.Shader3D.RENDER_STATE_CULL,
                s_Blend: Laya.Shader3D.RENDER_STATE_BLEND,
                s_BlendSrc: Laya.Shader3D.RENDER_STATE_BLEND_SRC,
                s_BlendDst: Laya.Shader3D.RENDER_STATE_BLEND_DST,
                s_DepthTest: Laya.Shader3D.RENDER_STATE_DEPTH_TEST,
                s_DepthWrite: Laya.Shader3D.RENDER_STATE_DEPTH_WRITE
            }
              , t = {
                a_Position: Laya.VertexMesh.MESH_POSITION0,
                a_Normal: Laya.VertexMesh.MESH_NORMAL0,
                a_Texcoord0: Laya.VertexMesh.MESH_TEXTURECOORDINATE0,
                a_BoneWeights: Laya.VertexMesh.MESH_BLENDWEIGHT0,
                a_BoneIndices: Laya.VertexMesh.MESH_BLENDINDICES0
            }
              , a = {
                u_MvpMatrix: Laya.Shader3D.PERIOD_SPRITE,
                u_WorldMat: Laya.Shader3D.PERIOD_SPRITE,
                u_CameraPos: Laya.Shader3D.PERIOD_CAMERA,
                u_AlbedoTexture: Laya.Shader3D.PERIOD_MATERIAL,
                u_AlbedoIdentity: Laya.Shader3D.PERIOD_MATERIAL,
                u_AlbedoColor: Laya.Shader3D.PERIOD_MATERIAL,
                u_ShadowColor: Laya.Shader3D.PERIOD_MATERIAL,
                u_ShadowRange: Laya.Shader3D.PERIOD_MATERIAL,
                u_ShadowIntensity: Laya.Shader3D.PERIOD_MATERIAL,
                u_ShadowBoundary: Laya.Shader3D.PERIOD_MATERIAL,
                u_SpecularRange: Laya.Shader3D.PERIOD_MATERIAL,
                u_SpecularColor: Laya.Shader3D.PERIOD_MATERIAL,
                u_SpecularIntensity: Laya.Shader3D.PERIOD_MATERIAL,
                u_OutlineWidth: Laya.Shader3D.PERIOD_MATERIAL,
                u_OutlineLightness: Laya.Shader3D.PERIOD_MATERIAL,
                u_OutlineColor: Laya.Shader3D.PERIOD_MATERIAL,
                "u_SunLight.direction": Laya.Shader3D.PERIOD_SCENE,
                "u_SunLight.color": Laya.Shader3D.PERIOD_SCENE,
                u_Bones: Laya.Shader3D.PERIOD_CUSTOM,
                u_Second_ShadowColor: Laya.Shader3D.PERIOD_MATERIAL,
                u_Second_ShadowRange: Laya.Shader3D.PERIOD_MATERIAL,
                u_Second_ShadowIntensity: Laya.Shader3D.PERIOD_MATERIAL,
                u_Second_ShadowBoundary: Laya.Shader3D.PERIOD_MATERIAL,
                u_Edge_HighlightColor: Laya.Shader3D.PERIOD_MATERIAL,
                u_Edge_HighlightRange: Laya.Shader3D.PERIOD_MATERIAL,
                u_Edge_HighlightIntensity: Laya.Shader3D.PERIOD_MATERIAL,
                u_Edge_HighlightBoundary: Laya.Shader3D.PERIOD_MATERIAL,
                u_RandomDiscardFactor: Laya.Shader3D.PERIOD_MATERIAL
            }
              , i = Laya.Shader3D.add("CartoonShader")
              , s = new Laya.SubShader(t,a);
            i.addSubShader(s);
            s.addShaderPass("\n\t\tattribute vec4 a_Position; \n\t\tattribute vec3 a_Normal; \n\t\tattribute vec2 a_Texcoord0;\n\t\tuniform mat4 u_MvpMatrix; \n\t\tuniform float u_OutlineWidth; \n\t\tuniform mat4 u_WorldMat;\n\t\tuniform vec3 u_CameraPos;\n\t\tvarying vec2 v_Texcoord0;     \n\t\tvarying float outlineWidth;\n\t\tvarying vec3 v_Normal;\n\t\tvarying vec3 v_ViewDir;\n\n\t\t#ifdef BONE\n\t\t\tconst int c_MaxBoneCount = 24;\n\t\t\tattribute vec4 a_BoneIndices;\n\t\t\tattribute vec4 a_BoneWeights;\n\t\t\tuniform mat4 u_Bones[c_MaxBoneCount];\n\t\t#endif\n\n\t\tvoid main() \n\t\t{ \n\t\t\t#ifdef BONE\n\t\t\t\tmat4 skinTransform=mat4(0.0);\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\t\t\tvec4 position = skinTransform * a_Position;\n\t\t\t\tgl_Position=u_MvpMatrix * position;\n\t\t\t\tmat3 worldMat=mat3(u_WorldMat * skinTransform);\n\t\t\t#else\n\t\t\t\tgl_Position=u_MvpMatrix * a_Position;\n\t\t\t\tmat3 worldMat=mat3(u_WorldMat);\n\t\t\t#endif\n\n\t\t\tv_Normal=worldMat*a_Normal;\n\t\t\tv_Texcoord0 = a_Texcoord0;\t\n\t\t\t\n\n\t\t\t#ifdef BONE\n\t\t\t\tvec4 positionex = vec4(position.xyz + normalize(v_Normal.xyz) * (u_OutlineWidth/4.0), 1.0); \n\t\t\t#else\n\t\t\t\tvec4 positionex = vec4(a_Position.xyz + normalize(v_Normal.xyz) * (u_OutlineWidth/4.0), 1.0); \n\t\t\t#endif\n\n\t\t\tv_ViewDir = u_CameraPos - positionex.xyz; \n\n\t\t\tgl_Position = u_MvpMatrix * positionex; \n\t\t\toutlineWidth = u_OutlineWidth;\n\n\t\t\tgl_Position.z=gl_Position.z * 2.0 - gl_Position.w;\n\t\t}", "\n\t\t#ifdef FSHIGHPRECISION \n\t\t   precision highp float; \n\t\t#else \n\t\t   precision mediump float; \n\t\t#endif \n\t\n\t\tvarying vec2 v_Texcoord0; \n\t\n\t\tuniform float u_OutlineLightness; \n\t\tuniform vec4 u_OutlineColor;\n\t\tuniform float u_RandomDiscardFactor;\n\n\t\t#ifdef ALBEDOTEXTURE\n\t\tuniform sampler2D u_AlbedoTexture;\t\n\t\t#endif\n\n\t\tvarying float outlineWidth;\n\t\tvarying vec3 v_Normal;\n\t\tvarying vec3 v_ViewDir;\n\n\t\t\n\n\t\tfloat random(float x, float y){\n\t\t\treturn fract(cos(x * (12.9898) + y * (4.1414)) * 43758.5453);\n\t\t}\n\t\n\t\tvoid main() \n\t\t{ \n\n\t\t\tvec4 albedoTextureColor = vec4(1.0);\n\t\t#ifdef ALBEDOTEXTURE\n\t\t\talbedoTextureColor = texture2D(u_AlbedoTexture, v_Texcoord0);\n\t\t#endif\n\n\t\t\tvec4 outlineTextureColor = u_OutlineColor;\n\t\t\tvec3 finalColor = outlineTextureColor.rgb * u_OutlineLightness; \n\t\t\tgl_FragColor = vec4(finalColor,0.0); \n\n\t\t\tvec3 normal = normalize(v_Normal);\n\t\t\tvec3 viewdir = normalize(v_ViewDir);\n\t\t\tfloat nv = dot(normal,viewdir);\n\n\t\t\t// if(nv > cos(3.1415926 / 180.0 * 110.0)){\n\t\t\t// \t//保留\n\t\t\t// }\n\t\t\t// else{\n\t\t\t// \tdiscard;\n\t\t\t// }\n\n\t\t\tif(outlineWidth<0.0001){\n\t\t\t\tdiscard;\n\t\t\t}\n\n\t\t\tif(random(gl_FragCoord.x, gl_FragCoord.y) > u_RandomDiscardFactor){\n\t\t\t\tdiscard;\n\t\t\t}\n\n\t\t\tif(albedoTextureColor.a <= 0.1){\n\t\t\t\tdiscard;\n\t\t\t}\n\t\t}").renderState.cull = Laya.RenderState.CULL_FRONT;
            s.addShaderPass("\n\t\tattribute vec4 a_Position; \n\t\tattribute vec3 a_Normal;\n\t\tattribute vec2 a_Texcoord0;\t\n\t\tuniform mat4 u_MvpMatrix;\n\t\tuniform mat4 u_WorldMat;\n\t\tuniform vec3 u_CameraPos;\t\n\t\tvarying vec2 v_Texcoord0;\n\t\tvarying vec3 v_Normal;\n\t\tvarying vec3 v_PositionWorld;\n\t\tvarying vec3 v_ViewDir;\n\n\t\t#ifdef BONE\n\t\t\tconst int c_MaxBoneCount = 24;\n\t\t\tattribute vec4 a_BoneIndices;\n\t\t\tattribute vec4 a_BoneWeights;\n\t\t\tuniform mat4 u_Bones[c_MaxBoneCount];\n\t\t#endif\n\t\t\n\t\tvoid main()\n\t\t{\n\t\t\t#ifdef BONE\n\t\t\t\tmat4 skinTransform=mat4(0.0);\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\t\t\tvec4 position = skinTransform * a_Position;\n\t\t\t\tgl_Position=u_MvpMatrix * position;\n\t\t\t\tmat3 worldMat=mat3(u_WorldMat * skinTransform);\n\t\t\t#else\n\t\t\t\tgl_Position=u_MvpMatrix * a_Position;\n\t\t\t\tmat3 worldMat=mat3(u_WorldMat);\n\t\t\t#endif\n\n\t\t\tv_Normal=worldMat*a_Normal;\n\t\t\tv_Texcoord0 = a_Texcoord0;\t\t\n\t\t\t\n\t\t\t#ifdef BONE\n\t\t\t\tv_PositionWorld=(u_WorldMat*position).xyz;\n\t\t\t#else\n\t\t\t\tv_PositionWorld=(u_WorldMat*a_Position).xyz;\n\t\t\t#endif\n\t\t\tv_ViewDir = u_CameraPos - v_PositionWorld; \n\n\t\t\tgl_Position.z=gl_Position.z * 2.0 - gl_Position.w;\n\t\t}", "\n\t\t#ifdef FSHIGHPRECISION\n\t\t\tprecision highp float;\n\t\t#else\n\t\t\tprecision mediump float;\n\t\t#endif\n\t\n\t\tstruct DirectionLight\n\t\t{\n\t\t\tvec3 color;\n\t\t\tvec3 direction;\n\t\t};\n\t\n\t\tvarying vec2 v_Texcoord0;\n\t\tvarying vec3 v_Normal;\n\t\tvarying vec3 v_PositionWorld;\n\t\tvarying vec3 v_ViewDir;\n\t\n\t\t#ifdef ALBEDOTEXTURE\n\t\tuniform sampler2D u_AlbedoTexture;\t\n\t\t#endif\n\t\t\n\t\tuniform float u_AlbedoIdentity;\n\t\tuniform vec4 u_AlbedoColor;\n\t\tuniform vec4 u_ShadowColor;\n\t\tuniform float u_ShadowRange;\n\t\tuniform float u_ShadowIntensity;\n\t\tuniform float u_ShadowBoundary;\n\t\tuniform float u_SpecularRange;\n\t\tuniform float u_SpecularIntensity;\n\t\tuniform vec4 u_SpecularColor;\n\t\t//双重阴影参数\n\t\tuniform vec4 u_Second_ShadowColor;\n\t\tuniform float u_Second_ShadowRange;\n\t\tuniform float u_Second_ShadowIntensity;\n\t\tuniform float u_Second_ShadowBoundary;\n\t\tuniform float u_RandomDiscardFactor;\n\t\t//边缘高亮参数\n\t\tuniform vec4 u_Edge_HighlightColor;\n\t\tuniform float u_Edge_HighlightRange;\n\t\tuniform float u_Edge_HighlightIntensity;\n\t\tuniform float u_Edge_HighlightBoundary;\n\t\n\t\tuniform DirectionLight u_SunLight;\n\n\t\tfloat random(float x, float y){\n\t\t\treturn fract(cos(x * (12.9898) + y * (4.1414)) * 43758.5453);\n\t\t}\n\t\n\t\tvoid main()\n\t\t{\n\t\t\tvec3 normal = normalize(v_Normal);\n\t\t\tvec3 viewdir = normalize(v_ViewDir);\n\t\t\tvec3 lightDir = normalize(u_SunLight.direction);\n\t\t\n\t\t\tvec4 albedoTextureColor = vec4(1.0);\n\t\t#ifdef ALBEDOTEXTURE\n\t\t\talbedoTextureColor = texture2D(u_AlbedoTexture, v_Texcoord0);\n\t\t#endif\n\t\t\n\t\t\t//屏蔽掉卡通色转换, 使用模型原始颜色\n\t\t\tvec3 albedoColor;\n\t\t\talbedoColor.rgb = albedoTextureColor.rgb;\n\t\t\t\n\t\t\talbedoColor = clamp(albedoColor, 0.0, 1.0);\n\t\t\t\n\t\t\tfloat nl = max(dot(normal, -lightDir), 0.0);\n\t\t\t\n\t\t\tfloat shadow;\n\t\t\tif(nl < u_ShadowRange - u_ShadowBoundary*0.5){\n\t\t\t\tshadow = 1.0;\n\t\t\t}\n\t\t\telse if(nl < u_ShadowRange + u_ShadowBoundary*0.5){\n\t\t\t\tshadow = 1.0*(u_ShadowRange + u_ShadowBoundary*0.5 - nl)/u_ShadowBoundary;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tshadow = 0.0;\n\t\t\t}\n\t\t\tshadow = clamp(shadow, 0.0, 1.0);\n\t\t\t\n\n\t\t\tfloat specular = clamp(pow(nl,u_SpecularRange*10.0), 0.0, 1.0);\n\t\t\t\n\t\t\tvec3 albedoAreaColor = (1.0 - shadow) * albedoColor;\n\t\t\tvec3 shadowAreaColor = shadow * albedoColor * u_ShadowColor.rgb * u_ShadowIntensity;\n\t\t\tvec3 speculAreaColor = (1.0 - shadow) * albedoColor * u_SpecularIntensity * specular * u_SpecularColor.rgb;\n\t\t\t\n\t\t\tvec3 finalColor = albedoAreaColor + speculAreaColor + shadowAreaColor;\n\n\t\t\t//双重阴影计算\n\t\t\tfloat shadow_second;\n\t\t\tfloat nv = max(dot(normal, viewdir), 0.0);\n\t\t\tif(nv < u_Second_ShadowRange - u_Second_ShadowBoundary*0.5 && nl <= 0.0){\n\t\t\t\tshadow_second = 1.0;\n\t\t\t}\n\t\t\telse if(nv < u_Second_ShadowRange + u_Second_ShadowBoundary*0.5 && nl <= 0.0){\n\t\t\t\tshadow_second = 1.0*(u_Second_ShadowRange + u_Second_ShadowBoundary*0.5 - nv)/u_Second_ShadowBoundary;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tshadow_second = 0.0;\n\t\t\t}\n\t\t\tshadow_second = clamp(shadow_second, 0.0, 1.0);\n\t\t\tvec3 secondShadowArenaColor = shadow_second*albedoColor*u_Second_ShadowColor.rgb*u_Second_ShadowIntensity;\n\t\t\tfinalColor = (1.0 - shadow_second) * finalColor + secondShadowArenaColor;\n\t\t\t//边缘高光计算(附加条件， 光照方向才有)\n\t\t\t// float nv = max(dot(normal, viewdir), 0.0);\n\t\t\tfloat edgehf;\n\t\t\tif(nv < u_Edge_HighlightRange - u_Edge_HighlightBoundary*0.5 && nl > 0.5){\n\t\t\t\tedgehf = 1.0;\n\t\t\t}\n\t\t\telse if(nv < u_Edge_HighlightRange + u_Edge_HighlightBoundary*0.5 && nl > 0.5){\n\t\t\t\tedgehf = 1.0*(u_Edge_HighlightRange + u_Edge_HighlightBoundary*0.5 - nv)/u_Edge_HighlightBoundary;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tedgehf = 0.0;\n\t\t\t}\n\t\t\tvec3 edgeHighlightColor = edgehf *albedoColor* u_Edge_HighlightColor.rgb*u_Edge_HighlightIntensity*2.0;\n\t\t\tfinalColor = (1.0 - edgehf) * finalColor + edgeHighlightColor;\n\n\t\t\t//叠加环境光\n\t\t\tfinalColor *= (0.5+u_AlbedoIdentity);\n\n\t\t\t\n\t\t\tgl_FragColor = vec4(finalColor.rgb, albedoTextureColor.a);\n\t\t\tgl_FragColor *= u_AlbedoColor;\n\n\t\t\t//全透  直接丢到像素\n\t\t\t#ifdef ALPHATEST\n\t\t\tif(gl_FragColor.a <= 0.1){\n\t\t\t\tdiscard;\n\t\t\t}\n\t\t\t#endif\n\t\t\t\n\t\t\tif(random(gl_FragCoord.x, gl_FragCoord.y) > u_RandomDiscardFactor){\n\t\t\t\tdiscard;\n\t\t\t}\n\t\t}", e)
        }
        get albedoTexture() {
            return this._shaderValues.getTexture(CartoonMaterial.ALBEDOTEXTURE)
        }
        set albedoTexture(e) {
            e ? this._defineDatas.add(CartoonMaterial.SHADERDEFINE_ALBEDOTEXTURE) : this._defineDatas.remove(CartoonMaterial.SHADERDEFINE_ALBEDOTEXTURE),
            this._shaderValues.setTexture(CartoonMaterial.ALBEDOTEXTURE, e)
        }
        get albedoColor() {
            return this._shaderValues.getVector(CartoonMaterial.ALBEDOCOLOR)
        }
        set albedoColor(e) {
            this._shaderValues.setVector(CartoonMaterial.ALBEDOCOLOR, e)
        }
        get albedoIdentity() {
            return this._shaderValues.getNumber(CartoonMaterial.ALBEDOIDENTITY)
        }
        set albedoIdentity(e) {
            e = Math.max(0, Math.min(1, e)),
            this._shaderValues.setNumber(CartoonMaterial.ALBEDOIDENTITY, e)
        }
        get shadowColor() {
            return this._shaderValues.getVector(CartoonMaterial.SHADOWCOLOR)
        }
        set shadowColor(e) {
            this._shaderValues.setVector(CartoonMaterial.SHADOWCOLOR, e)
        }
        get shadowRange() {
            return this._shaderValues.getNumber(CartoonMaterial.SHADOWRANGE)
        }
        set shadowRange(e) {
            e = Math.max(0, Math.min(1, e)),
            this._shaderValues.setNumber(CartoonMaterial.SHADOWRANGE, e)
        }
        get shadowIntensity() {
            return this._shaderValues.getNumber(CartoonMaterial.SHADOWINTENSITY)
        }
        set shadowIntensity(e) {
            e = Math.max(0, Math.min(1, e)),
            this._shaderValues.setNumber(CartoonMaterial.SHADOWINTENSITY, e)
        }
        get shadowBoundary() {
            return this._shaderValues.getNumber(CartoonMaterial.SHADOWBOUNDARY)
        }
        set shadowBoundary(e) {
            e = Math.max(0, Math.min(1, e)),
            this._shaderValues.setNumber(CartoonMaterial.SHADOWBOUNDARY, e)
        }
        get specularRange() {
            return this._shaderValues.getNumber(CartoonMaterial.SPECULARRANGE)
        }
        set specularRange(e) {
            e = Math.max(.9, Math.min(1, e)),
            this._shaderValues.setNumber(CartoonMaterial.SPECULARRANGE, e)
        }
        set specularIntensity(e) {
            e = Math.max(0, Math.min(1, e)),
            this._shaderValues.setNumber(CartoonMaterial.SPECULARINTENSITY, e)
        }
        get specularIntensity() {
            return this._shaderValues.getNumber(CartoonMaterial.SPECULARINTENSITY)
        }
        get specularColor() {
            return this._shaderValues.getVector(CartoonMaterial.SPECULARCOLOR)
        }
        set specularColor(e) {
            this._shaderValues.setVector(CartoonMaterial.SPECULARCOLOR, e)
        }
        get outlineWidth() {
            return this._shaderValues.getNumber(CartoonMaterial.OUTLINEWIDTH)
        }
        set outlineWidth(e) {
            e = Math.max(0, Math.min(.05, e)),
            this._shaderValues.setNumber(CartoonMaterial.OUTLINEWIDTH, e)
        }
        get outlineColor() {
            return this._shaderValues.getVector(CartoonMaterial.OUTLINECOLOR)
        }
        set outlineColor(e) {
            this._shaderValues.setVector(CartoonMaterial.OUTLINECOLOR, e)
        }
        get outlineLightness() {
            return this._shaderValues.getNumber(CartoonMaterial.OUTLINELIGHTNESS)
        }
        set outlineLightness(e) {
            e = Math.max(0, Math.min(1, e)),
            this._shaderValues.setNumber(CartoonMaterial.OUTLINELIGHTNESS, e)
        }
        get secondShadowColor() {
            return this._shaderValues.getVector(CartoonMaterial.SECOND_SHADOWCOLOR)
        }
        set secondShadowColor(e) {
            this._shaderValues.setVector(CartoonMaterial.SECOND_SHADOWCOLOR, e)
        }
        get secondShadowRange() {
            return this._shaderValues.getNumber(CartoonMaterial.SECOND_SHADOWRANGE)
        }
        set secondShadowRange(e) {
            e = Math.max(0, Math.min(1, e)),
            this._shaderValues.setNumber(CartoonMaterial.SECOND_SHADOWRANGE, e)
        }
        get secondShadowIntensity() {
            return this._shaderValues.getNumber(CartoonMaterial.SECOND_SHADOWINTENSITY)
        }
        set secondShadowIntensity(e) {
            e = Math.max(0, Math.min(1, e)),
            this._shaderValues.setNumber(CartoonMaterial.SECOND_SHADOWINTENSITY, e)
        }
        get secondShadowBoundary() {
            return this._shaderValues.getNumber(CartoonMaterial.SECOND_SHADOWBOUNDARY)
        }
        set secondShadowBoundary(e) {
            e = Math.max(0, Math.min(1, e)),
            this._shaderValues.setNumber(CartoonMaterial.SECOND_SHADOWBOUNDARY, e)
        }
        get EdgeHightColor() {
            return this._shaderValues.getVector(CartoonMaterial.EDGE_HIGHLIGHT_COLOR)
        }
        set EdgeHightColor(e) {
            this._shaderValues.setVector(CartoonMaterial.EDGE_HIGHLIGHT_COLOR, e)
        }
        get EdgeHightRange() {
            return this._shaderValues.getNumber(CartoonMaterial.EDGE_HIGHLIGHT_RANGE)
        }
        set EdgeHightRange(e) {
            e = Math.max(0, Math.min(1, e)),
            this._shaderValues.setNumber(CartoonMaterial.EDGE_HIGHLIGHT_RANGE, e)
        }
        get EdgeHightIntensity() {
            return this._shaderValues.getNumber(CartoonMaterial.EDGE_HIGHLIGHT_INTENSITY)
        }
        set EdgeHightIntensity(e) {
            e = Math.max(0, Math.min(1, e)),
            this._shaderValues.setNumber(CartoonMaterial.EDGE_HIGHLIGHT_INTENSITY, e)
        }
        get EdgeHightBoundary() {
            return this._shaderValues.getNumber(CartoonMaterial.EDGE_HIGHLIGHT_BOUNDARY)
        }
        set EdgeHightBoundary(e) {
            e = Math.max(0, Math.min(1, e)),
            this._shaderValues.setNumber(CartoonMaterial.EDGE_HIGHLIGHT_BOUNDARY, e)
        }
        get tilingOffset() {
            return this._shaderValues.getVector(CartoonMaterial.TILINGOFFSET)
        }
        set tilingOffset(e) {
            e && (1 != e.x || 1 != e.y || 0 != e.z || 0 != e.w) ? this._defineDatas.add(CartoonMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.remove(CartoonMaterial.SHADERDEFINE_TILINGOFFSET),
            this._shaderValues.setVector(CartoonMaterial.TILINGOFFSET, e)
        }
        get cull() {
            return this._shaderValues.getInt(CartoonMaterial.CULL)
        }
        set cull(e) {
            this._shaderValues.setInt(CartoonMaterial.CULL, e)
        }
        get blend() {
            return this._shaderValues.getInt(CartoonMaterial.BLEND)
        }
        set blend(e) {
            this._shaderValues.setInt(CartoonMaterial.BLEND, e)
        }
        get blendSrc() {
            return this._shaderValues.getInt(CartoonMaterial.BLEND_SRC)
        }
        set blendSrc(e) {
            this._shaderValues.setInt(CartoonMaterial.BLEND_SRC, e)
        }
        get blendDst() {
            return this._shaderValues.getInt(CartoonMaterial.BLEND_DST)
        }
        set blendDst(e) {
            this._shaderValues.setInt(CartoonMaterial.BLEND_DST, e)
        }
        get depthTest() {
            return this._shaderValues.getInt(CartoonMaterial.DEPTH_TEST)
        }
        set depthTest(e) {
            this._shaderValues.setInt(CartoonMaterial.DEPTH_TEST, e)
        }
        get depthWrite() {
            return this._shaderValues.getBool(CartoonMaterial.DEPTH_WRITE)
        }
        set depthWrite(e) {
            this._shaderValues.setBool(CartoonMaterial.DEPTH_WRITE, e)
        }
        get randomDiscardFactor() {
            return this._shaderValues.getNumber(CartoonMaterial.RANDOM_DISCARD_FACTOR)
        }
        set randomDiscardFactor(e) {
            this._shaderValues.setNumber(CartoonMaterial.RANDOM_DISCARD_FACTOR, e)
        }
        set renderMode(e) {
            switch (e) {
            case CartoonMaterial.RENDERMODE_OPAQUE:
                this.alphaTest = !1,
                this.renderQueue = Laya.Material.RENDERQUEUE_OPAQUE,
                this.depthWrite = !0,
                this.cull = Laya.RenderState.CULL_BACK,
                this.blend = Laya.RenderState.BLEND_DISABLE,
                this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
                break;
            case CartoonMaterial.RENDERMODE_CUTOUT:
                this.renderQueue = Laya.Material.RENDERQUEUE_ALPHATEST,
                this.alphaTest = !0,
                this.depthWrite = !0,
                this.cull = Laya.RenderState.CULL_BACK,
                this.blend = Laya.RenderState.BLEND_DISABLE,
                this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
                break;
            case CartoonMaterial.RENDERMODE_CUTOUT_CULL_NONE:
                this.renderQueue = Laya.Material.RENDERQUEUE_ALPHATEST,
                this.alphaTest = !0,
                this.depthWrite = !0,
                this.cull = Laya.RenderState.CULL_NONE,
                this.blend = Laya.RenderState.BLEND_DISABLE,
                this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
                break;
            case CartoonMaterial.RENDERMODE_TRANSPARENT:
                this.renderQueue = Laya.Material.RENDERQUEUE_TRANSPARENT,
                this.alphaTest = !1,
                this.depthWrite = !1,
                this.cull = Laya.RenderState.CULL_BACK,
                this.blend = Laya.RenderState.BLEND_ENABLE_ALL,
                this.blendSrc = Laya.RenderState.BLENDPARAM_SRC_ALPHA,
                this.blendDst = Laya.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA,
                this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
                break;
            case CartoonMaterial.RENDERMODE_TRANSPARENT_CULL_NONE:
                this.renderQueue = Laya.Material.RENDERQUEUE_TRANSPARENT,
                this.alphaTest = !1,
                this.depthWrite = !1,
                this.cull = Laya.RenderState.CULL_NONE,
                this.blend = Laya.RenderState.BLEND_ENABLE_ALL,
                this.blendSrc = Laya.RenderState.BLENDPARAM_SRC_ALPHA,
                this.blendDst = Laya.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA,
                this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
                break;
            default:
                throw new Error("CartoonMaterial : renderMode value error.")
            }
        }
    }
    CartoonMaterial.ALBEDOTEXTURE = Laya.Shader3D.propertyNameToID("u_AlbedoTexture"),
    CartoonMaterial.ALBEDOIDENTITY = Laya.Shader3D.propertyNameToID("u_AlbedoIdentity"),
    CartoonMaterial.ALBEDOCOLOR = Laya.Shader3D.propertyNameToID("u_AlbedoColor"),
    CartoonMaterial.OUTLINEWIDTH = Laya.Shader3D.propertyNameToID("u_OutlineWidth"),
    CartoonMaterial.OUTLINELIGHTNESS = Laya.Shader3D.propertyNameToID("u_OutlineLightness"),
    CartoonMaterial.OUTLINECOLOR = Laya.Shader3D.propertyNameToID("u_OutlineColor"),
    CartoonMaterial.SHADOWCOLOR = Laya.Shader3D.propertyNameToID("u_ShadowColor"),
    CartoonMaterial.SHADOWRANGE = Laya.Shader3D.propertyNameToID("u_ShadowRange"),
    CartoonMaterial.SHADOWINTENSITY = Laya.Shader3D.propertyNameToID("u_ShadowIntensity"),
    CartoonMaterial.SHADOWBOUNDARY = Laya.Shader3D.propertyNameToID("u_ShadowBoundary"),
    CartoonMaterial.SECOND_SHADOWCOLOR = Laya.Shader3D.propertyNameToID("u_Second_ShadowColor"),
    CartoonMaterial.SECOND_SHADOWRANGE = Laya.Shader3D.propertyNameToID("u_Second_ShadowRange"),
    CartoonMaterial.SECOND_SHADOWINTENSITY = Laya.Shader3D.propertyNameToID("u_Second_ShadowIntensity"),
    CartoonMaterial.SECOND_SHADOWBOUNDARY = Laya.Shader3D.propertyNameToID("u_Second_ShadowBoundary"),
    CartoonMaterial.EDGE_HIGHLIGHT_COLOR = Laya.Shader3D.propertyNameToID("u_Edge_HighlightColor"),
    CartoonMaterial.EDGE_HIGHLIGHT_RANGE = Laya.Shader3D.propertyNameToID("u_Edge_HighlightRange"),
    CartoonMaterial.EDGE_HIGHLIGHT_INTENSITY = Laya.Shader3D.propertyNameToID("u_Edge_HighlightIntensity"),
    CartoonMaterial.EDGE_HIGHLIGHT_BOUNDARY = Laya.Shader3D.propertyNameToID("u_Edge_HighlightBoundary"),
    CartoonMaterial.SPECULARRANGE = Laya.Shader3D.propertyNameToID("u_SpecularRange"),
    CartoonMaterial.SPECULARINTENSITY = Laya.Shader3D.propertyNameToID("u_SpecularIntensity"),
    CartoonMaterial.SPECULARCOLOR = Laya.Shader3D.propertyNameToID("u_SpecularColor"),
    CartoonMaterial.RANDOM_DISCARD_FACTOR = Laya.Shader3D.propertyNameToID("u_RandomDiscardFactor"),
    CartoonMaterial.DIRECTIONLIGHTDIRECTION = Laya.Shader3D.propertyNameToID("u_SunLight.direction"),
    CartoonMaterial.DIRECTIONLIGHTCOLOR = Laya.Shader3D.propertyNameToID("u_SunLight.color"),
    CartoonMaterial.CULL = Laya.Shader3D.propertyNameToID("s_Cull"),
    CartoonMaterial.BLEND = Laya.Shader3D.propertyNameToID("s_Blend"),
    CartoonMaterial.BLEND_SRC = Laya.Shader3D.propertyNameToID("s_BlendSrc"),
    CartoonMaterial.BLEND_DST = Laya.Shader3D.propertyNameToID("s_BlendDst"),
    CartoonMaterial.DEPTH_TEST = Laya.Shader3D.propertyNameToID("s_DepthTest"),
    CartoonMaterial.DEPTH_WRITE = Laya.Shader3D.propertyNameToID("s_DepthWrite"),
    CartoonMaterial.RENDERMODE_OPAQUE = 1,
    CartoonMaterial.RENDERMODE_CUTOUT = 2,
    CartoonMaterial.RENDERMODE_CUTOUT_CULL_NONE = 3,
    CartoonMaterial.RENDERMODE_TRANSPARENT = 4,
    CartoonMaterial.RENDERMODE_TRANSPARENT_CULL_NONE = 5;
    var Vector3 = Laya.Vector3, Quaternion = Laya.Quaternion, Script3D = Laya.Script3D, BoneColliderPart;
    !function(e) {
        e[e.NONE = 1] = "NONE",
        e[e.UP = 2] = "UP",
        e[e.DOWN = 3] = "DOWN"
    }(BoneColliderPart || (BoneColliderPart = {}));
    class Bone extends Script3D {
        constructor() {
            super(...arguments),
            this.parm1 = .6,
            this.parm2 = .9,
            this.radius = .03,
            this.part = BoneColliderPart.NONE,
            this.colliders = [],
            this.threshold = .01,
            this.deepth = 1,
            this.boneLength = .1
        }
        onAwake() {
            this.transfom = this.owner.transform,
            this.originLocalRotation = this.transfom.localRotation.clone(),
            this.lastWorldRotation = this.transfom.rotation.clone(),
            this.originLocalPosition = this.transfom.localPosition.clone(),
            this.deepth = 1;
            let e = this.owner;
            for (; e.parent && e.getComponent(Bone); )
                this.deepth++,
                e = e.parent
        }
        onStart() {
            this.Init()
        }
        Init() {
            this.child && (this.boneLength = Vector3.distance(this.transfom.position, this.child.position)),
            this.preRadius = this.radius
        }
        setScale(e) {
            this.radius = this.preRadius * e
        }
        setManager(e) {
            this.managerRef = e
        }
        UpdateBone(e) {
            this.transfom.localRotation = this.originLocalRotation.clone();
            let t = this.transfom.rotation.clone();
            Quaternion.lerp(this.lastWorldRotation, t, this.parm1 / (this.deepth * this.parm2), this.lastWorldRotation),
            this.transfom.rotation = this.lastWorldRotation,
            this.transfom.localPosition = this.originLocalPosition.clone();
            let a = this.transfom.position.clone()
              , i = new Vector3;
            for (let e = 0; e < this.colliders.length; e++) {
                const t = this.colliders[e];
                if (Vector3.distance(a, t.transform.position) <= this.radius + t.radius) {
                    let s = new Vector3;
                    Vector3.subtract(a, t.transform.position, s),
                    Vector3.normalize(s, s),
                    Vector3.scale(s, this.radius + this.colliders[e].radius, s),
                    Vector3.add(s, t.transform.position, s),
                    Vector3.subtract(s, a, s),
                    i.x = Math.max(i.x, s.x),
                    i.y = Math.max(i.y, s.y),
                    i.z = Math.max(i.z, s.z)
                }
            }
            if (Vector3.scalarLength(i) > this.parentBoneLength) {
                let e = new Laya.Vector3;
                Vector3.normalize(i, e),
                Vector3.scale(e, this.parentBoneLength, i)
            }
            a.x += i.x,
            a.y += i.y,
            a.z += i.z,
            this.transfom.position = a
        }
        get parentBoneLength() {
            return this.owner && this.owner.parent && this.owner.parent.getComponent(Bone) ? this.owner.parent.getComponent(Bone).boneLength : .1
        }
    }
    var Script3D$1 = Laya.Script3D;
    class BoneCollider extends Script3D$1 {
        constructor() {
            super(...arguments),
            this.radius = .1,
            this.part = BoneColliderPart.NONE
        }
        onAwake() {
            this.transform = this.owner.transform
        }
        onStart() {
            /1/.test(this.owner.name) && (this.radius *= .5),
            /2/.test(this.owner.name) && (this.radius *= .8),
            /3/.test(this.owner.name) && (this.radius *= .7),
            this.preRadius = this.radius
        }
        SetScale(e) {
            this.radius = this.preRadius * e
        }
    }
    var Script3D$2 = Laya.Script3D;
    class BoneManager extends Script3D$2 {
        constructor() {
            super(...arguments),
            this.dynamicRaito = 1,
            this.stiffnessFore = .2,
            this.dragForce = .4,
            this.bones = [],
            this.allColliders = [],
            this.isInit = !1,
            this.isRefresh = !1,
            this.boneParm1 = .6,
            this.boneParm2 = .9,
            this.boneScale = 1,
            this.COLLIDER_REPXS = [/PZ_/],
            this.BONE_REPXS = [/qun/, /tf_/, /toufa/, /beibu_/, /CB/, /cb/, /chibang/, /beishi/, /Pifeng/, /shoushi/, /toushi/],
            this.COLLIDER_RADIUS = .05,
            this.BONE_RADIUS = .02,
            this.B_SHOW_GIMOS = !1
        }
        onAwake() {
            this.transform = this.owner.transform
        }
        onStart() {
            this.AddComponentsInChildren(this.owner, BoneCollider, this.COLLIDER_REPXS, {
                part: BoneColliderPart.DOWN,
                radius: this.COLLIDER_RADIUS
            }),
            this.AddBoneInChildren(this.owner),
            this.allColliders = [];
            let e = this.GetComponentsInChildren(this.owner, BoneCollider);
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                this.allColliders[a.part] || (this.allColliders[a.part] = []),
                this.allColliders[a.part].push(a)
            }
            this.prePos = this.transform.position,
            this.isInit = !0,
            this.CheckBone()
        }
        CheckBone() {
            if (this.isInit) {
                this.bones = this.GetComponentsInChildren(this.owner, Bone);
                for (let e = 0; e < this.bones.length; e++) {
                    this.bones[e].setManager(this),
                    this.bones[e].part != BoneColliderPart.UP && this.bones[e].part != BoneColliderPart.DOWN || (this.bones[e].colliders = this.allColliders[this.bones[e].part] || [],
                    this.bones[e].parm1 = this.boneParm1,
                    this.bones[e].parm2 = this.boneParm2,
                    this.bones[e].radius = this.BONE_RADIUS * this.boneScale)
                }
            }
        }
        onLateUpdate() {
            if (this.prePos = this.transform.position,
            0 != this.dynamicRaito)
                for (let e = 0; e < this.bones.length; e++) {
                    const t = this.bones[e];
                    t && this.dynamicRaito > t.threshold && t.UpdateBone(Tools.delta())
                }
            this.isRefresh && (this.isRefresh = !1,
            this.CheckBone())
        }
        GetComponentsInChildren(e, t) {
            let a = [];
            for (let i = 0; i < e.numChildren; i++) {
                let s = e.getChildAt(i);
                if (s) {
                    let e = s.getComponent(t);
                    e && a.push(e);
                    let i = this.GetComponentsInChildren(s, t);
                    for (let e = 0; e < i.length; e++) {
                        const t = i[e];
                        a.push(t)
                    }
                }
            }
            return a
        }
        AddComponentsInChildren(e, t, a, i) {
            for (let s = 0; s < e.numChildren; s++) {
                let o = e.getChildAt(s);
                if (o) {
                    let e = !1;
                    for (let t = 0; t < a.length; t++) {
                        const i = a[t];
                        e = e || i.test(o.name)
                    }
                    if (e) {
                        let e = o.addComponent(t);
                        if (i)
                            for (const t in i)
                                i[t] && (e[t] = i[t])
                    }
                    this.AddComponentsInChildren(o, t, a, i),
                    this.B_SHOW_GIMOS && e && o.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(.05, 20, 20)))
                }
            }
        }
        AddBoneInChildren(e) {
            for (let t = 0; t < e.numChildren; t++) {
                let a = e.getChildAt(t)
                  , i = !1;
                for (let e = 0; e < this.BONE_REPXS.length; e++) {
                    const t = this.BONE_REPXS[e];
                    i = i || t.test(a.name)
                }
                i ? this.AddBoneFromRoot(a) : this.AddBoneInChildren(a)
            }
        }
        AddBoneFromRoot(e) {
            let t = e.getChildAt(0);
            if (t) {
                let a = e.addComponent(Bone);
                a.child = t.transform,
                a.part = BoneColliderPart.DOWN,
                a.radius = this.BONE_RADIUS,
                this.AddBoneFromRoot(t)
            }
        }
        Refresh() {
            this.isRefresh = !0
        }
        onUpdate() {}
        setBoneRidus(e) {
            for (let t = 0; t < this.bones.length; t++)
                null != this.bones[t] && (this.bones[t].radius = e)
        }
        setColliderRidus(e) {
            for (let t = 0; t < this.allColliders.length; t++)
                if (null != this.allColliders[t])
                    for (let a = 0; a < this.allColliders[t].length; a++) {
                        const i = this.allColliders[t][a];
                        i && (i.radius = e)
                    }
        }
        setBoneParm1(e) {
            for (let t = 0; t < this.bones.length; t++)
                null != this.bones[t] && (this.bones[t].parm1 = e)
        }
        setBoneParm2(e) {
            for (let t = 0; t < this.bones.length; t++)
                null != this.bones[t] && (this.bones[t].parm2 = e)
        }
    }
    class mgrMaterial extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord()
        }
        static loadRecord() {
            super.loadRecord()
        }
        static saveRecord() {
            super.saveRecord()
        }
        static setMaterialInfos(e) {
            this.materialInfos = e
        }
        static setDynamicBoneInfos(e) {
            this.dynamicBoneInfos = e
        }
        static setMaterial(e, t, a) {
            this.materialInfos[e] || (this.materialInfos[e] = {}),
            this.materialInfos[e][t] = a
        }
        static getMaterial(e, t) {
            return this.materialInfos[e] || (this.materialInfos[e] = {}),
            this.materialInfos[e][t] || (this.materialInfos[e][t] = {
                modelId: e,
                skinName: t,
                aldobeColor: [1, 1, 1, 1],
                aldobeIdensity: .5,
                shadowRange: 0,
                shadowIdensity: 0,
                shadowColor: [0, 0, 0, 0],
                shadowBoundaryValue: 0,
                specularRange: 0,
                specularIdensity: 0,
                specularColor: [1, 1, 1, 1],
                outlineWidth: 0,
                outlineIdensity: 1,
                outlineColor: [0, 0, 0, 0],
                secondShadowRange: 0,
                secondShadowIntensity: 1,
                secondShadowBoundary: 0,
                secondShadowColor: [1, 1, 1, 1],
                EdgeHightRange: 0,
                EdgeHightBoundary: 0,
                EdgeHightColor: [1, 1, 1, 1],
                EdgeHightIntensity: 1,
                renderMode: CartoonMaterial.RENDERMODE_OPAQUE
            }),
            this.materialInfos[e][t]
        }
        static setCartonShader(e, t) {
            if (!e)
                return [];
            let a = [];
            for (let i = 0; i < e.numChildren; i++) {
                let s = e.getChildAt(i)
                  , o = s.skinnedMeshRenderer || s.meshRenderer;
                if (o) {
                    let e = this.__setCartonMaterial(o, t, s.name);
                    a = a.concat(e)
                }
            }
            return a
        }
        static __setCartonMaterial(e, t, a) {
            let i = [];
            for (let s = e.sharedMaterials.length - 1; s >= 0; s--) {
                const o = e.sharedMaterials[s];
                let n = new CartoonMaterial;
                n.albedoTexture = o.albedoTexture;
                let r = mgrMaterial.getMaterial(t, a);
                n.shadowIntensity = r.shadowIdensity,
                n.shadowRange = r.shadowRange,
                r.shadowColor && r.shadowColor.length > 0 && (n.shadowColor = new Laya.Vector4(r.shadowColor[0],r.shadowColor[1],r.shadowColor[2],1)),
                n.shadowBoundary = r.shadowBoundaryValue,
                n.albedoIdentity = r.aldobeIdensity,
                r.aldobeColor && r.aldobeColor.length > 0 && (n.albedoColor = new Laya.Vector4(r.aldobeColor[0],r.aldobeColor[1],r.aldobeColor[2],1)),
                n.specularRange = r.specularRange,
                n.specularIntensity = r.specularIdensity,
                r.specularColor && r.specularColor.length > 0 && (n.specularColor = new Laya.Vector4(r.specularColor[0],r.specularColor[1],r.specularColor[2],1)),
                n.outlineLightness = r.outlineIdensity,
                n.outlineWidth = r.outlineWidth,
                r.outlineColor && r.outlineColor.length > 0 && (n.outlineColor = new Laya.Vector4(r.outlineColor[0],r.outlineColor[1],r.outlineColor[2],1)),
                n.secondShadowIntensity = r.secondShadowIntensity,
                n.secondShadowRange = r.secondShadowRange,
                r.secondShadowColor && r.secondShadowColor.length > 0 && (n.secondShadowColor = new Laya.Vector4(r.secondShadowColor[0],r.secondShadowColor[1],r.secondShadowColor[2],1)),
                n.secondShadowBoundary = r.secondShadowBoundary,
                n.EdgeHightIntensity = r.EdgeHightIntensity,
                n.EdgeHightRange = r.EdgeHightRange,
                r.EdgeHightColor && r.EdgeHightColor.length > 0 && (n.EdgeHightColor = new Laya.Vector4(r.EdgeHightColor[0],r.EdgeHightColor[1],r.EdgeHightColor[2],1)),
                n.EdgeHightBoundary = r.EdgeHightBoundary,
                n.renderMode = 0 == s ? r.renderMode : CartoonMaterial.RENDERMODE_TRANSPARENT,
                i[s] = n
            }
            return e.sharedMaterials = i,
            i
        }
        static playAnimation(e, t, a, i, s) {
            let o = mgrCfg.get_from_animation_db(t)
              , n = e.getControllerLayer(0).getAnimatorState(t);
            if (n) {
                let o = e.getControllerLayer(0).getAnimatorState(t).clip;
                if (e.getCurrentAnimatorPlayState(0).animatorState.name == t && 1 == o.islooping)
                    return;
                0 == a ? e.play(t, 0, 0) : e.crossFade(t, a),
                i && i(),
                Timer.callLater(o.duration(), ()=>{
                    s && s()
                }
                , e.owner)
            } else
                Laya.AnimationClip.load(o.path, new Laya.Handler(this,o=>{
                    e.getControllerLayer(0).getAnimatorState(t) || ((n = new Laya.AnimatorState).clip = o,
                    n.clipStart = 0,
                    n.clipEnd = 1,
                    n.name = t,
                    e.getControllerLayer(0).addState(n),
                    0 == a ? e.play(t, 0, 0) : e.crossFade(t, a),
                    i && i(),
                    Timer.callLater(o.duration(), ()=>{
                        s && s()
                    }
                    , e.owner))
                }
                ))
        }
        static setDynamicBone(e, t) {
            this.dynamicBoneInfos[e] || (this.dynamicBoneInfos[e] = []);
            for (let a = 0; a < this.dynamicBoneInfos[e].length; a++) {
                if (this.dynamicBoneInfos[e][a].route == t.route)
                    return void (this.dynamicBoneInfos[e][a] = t)
            }
            this.dynamicBoneInfos[e].push(t)
        }
        static getDynamicBone(e, t) {
            this.dynamicBoneInfos[e] || (this.dynamicBoneInfos[e] = []);
            for (let a = 0; a < this.dynamicBoneInfos[e].length; a++) {
                const i = this.dynamicBoneInfos[e][a];
                if (i.route == t)
                    return i
            }
            return this.dynamicBoneInfos[e].push({
                route: t,
                br: .02,
                cr: .05,
                p1: .6,
                p2: .9
            }),
            this.dynamicBoneInfos[e][this.dynamicBoneInfos[e].length - 1]
        }
        static hasDynamicBone(e, t) {
            if (!this.dynamicBoneInfos[e])
                return !1;
            for (let a = 0; a < this.dynamicBoneInfos[e].length; a++) {
                if (this.dynamicBoneInfos[e][a].route == t)
                    return !0
            }
            return !1
        }
        static removeDynamicBone(e, t) {
            this.dynamicBoneInfos[e] || (this.dynamicBoneInfos[e] = []);
            for (let a = 0; a < this.dynamicBoneInfos[e].length; a++) {
                if (this.dynamicBoneInfos[e][a].route == t)
                    return void this.dynamicBoneInfos[e].splice(a, 1)
            }
        }
        static useDynamicBone(e, t) {
            let a = this.dynamicBoneInfos[t];
            if (a)
                for (let t = 0; t < a.length; t++) {
                    const i = a[t];
                    let s = Tools.findChild(e, i.route)
                      , o = s.getComponent(BoneManager);
                    o || (o = s.addComponent(BoneManager)),
                    o.boneParm1 = i.p1,
                    o.boneParm2 = i.p2,
                    o.COLLIDER_RADIUS = i.cr,
                    o.BONE_RADIUS = i.br
                }
        }
    }
    const TASKS = [["achievement_db", "m"], ["achievement_target_db", "m"], ["ad_event_db", "m"], ["alu_db", "m"], ["cop_db", "m"], ["cop_process_db", "m"], ["guide_db", "m"], ["item_template_db", "m"], ["item_recover_db", "m"], ["sign_db", "ma"], ["sound_db", "m"], ["shop_template_db", "m"], ["random_name_db", "a"], ["stage_chapter_db", "m"], ["stage_db", "m"], ["model_db", "m"], ["online_reward_db", "ma"], ["random_tip_db", "a"], ["animation_db", "m"], ["part_type_db", "m"], ["part_db", "m"], ["part_tag_db", "m"], ["suit_db", "m"], ["suit_type_db", "m"], ["part_animation_change_db", "m"], ["story_db", "m"], ["story_play_db", "m"], ["movie_db", "m"], ["designer_db", "ma"], ["arena_config_db", "m"], ["arena_level_db", "m"], ["daily_task_db", "m"], ["daily_task_config_db", "m"], ["wish_pool_db", "ma"], ["guess_score_db", "m"], ["guess_part_db", "m"], ["interaction_db", "m"], ["interaction_story_db", "m"], ["interaction_config_db", "m"], ["pvp_offline_subject_db", "a"], ["pvp_offline_db", "m"], ["draw_lots_db", "m"], ["draw_lots_chapter_db", "m"], ["draw_lots_event_db", "m"], ["draw_lots_event_house_db", "m"], ["house_up_grade_db", "ma"], ["turn_plate_db", "m"], ["smash_egg_db", "m"], ["flip_card_db", "m"], ["story_score_reward_db", "m"], ["role_level_db", "m"], ["interaction_config_db", "m"], ["food_db", "m"], ["question_db", "m"], ["click_feedback_db", "ma"], ["spine_db", "m"], ["seed_db", "m"], ["flowerpot_db", "m"], ["plant_db", "ma"], ["flower_harvest_db", "m"], ["random_box_db", "ma"], ["card_flagment_db", "m"], ["card_db", "m"], ["card_pack_db", "m"], ["garden_title_db", "m"], ["ad_banner_int_ui_db", "m"], ["extract_db", "ma"], ["small_game_center_config_db", "m"], ["random_name_part1_db", "a"], ["random_name_part2_db", "a"], ["en_random_name_part1_db", "a"], ["en_random_name_part2_db", "a"], ["hi_random_name_part1_db", "a"], ["hi_random_name_part2_db", "a"], ["vi_random_name_part1_db", "a"], ["vi_random_name_part2_db", "a"], ["id_random_name_part1_db", "a"], ["id_random_name_part2_db", "a"], ["pt_random_name_part1_db", "a"], ["pt_random_name_part2_db", "a"]];
    class mgrCfg extends Manager {
        static onLoad() {
            super.onLoad(),
            console.log("mgrCfg.onLoad")
        }
        static getLoadUrls() {
            return ["res/cfg/mergeForm.json", "res/cfg/materialInfo.json", "res/cfg/dynamicBoneInfo.json"]
        }
        static processDb() {
            let e = Laya.loader.getRes("res/cfg/mergeForm.json");
            for (let t = 0; t < TASKS.length; t++) {
                const a = TASKS[t]
                  , i = a[0]
                  , s = a[1];
                let o = e[i];
                if (!o) {
                    console.warn(`mgrCfg processDb error, data is null, url:${i}`);
                    continue
                }
                let n = CfgParser.parseCfgByJsonObj(i, o, s);
                n ? (console.log("配置表加载成功：", i),
                this.allDbs[i] = n) : console.warn("警告] 配置表加载失败！", i)
            }
            mgrMaterial.setMaterialInfos(Laya.loader.getRes("res/cfg/materialInfo.json")),
            mgrMaterial.setDynamicBoneInfos(Laya.loader.getRes("res/cfg/dynamicBoneInfo.json")),
            this._combineItemTemplatedb(),
            this._processTextDb(),
            this._processAchievementDb(),
            this._processStageDb()
        }
        static getDb(e) {
            let t = this.allDbs[e || ""];
            return t || console.warn(`[警告] mgrCfg.getDb db not found! dbName=[${e}]`),
            t
        }
        static getDbAndSortByField(e, t) {
            let a = this.getDb(e);
            if (!a)
                return [];
            let i = [];
            return Tools.forEachMap(a, (e,t)=>{
                i.push(t)
            }
            ),
            t = "string" == typeof t ? [t] : t,
            Tools.sortArrayByField(i, t)
        }
        static get(e, t, a=null, i=null, s=!0) {
            let o = this.getDb(e);
            if (!o)
                return null;
            let n = o[t];
            return null == n ? (s || console.warn(`[警告] mgrCfg.get [${e}.csv]中数据未找到, key1=[${t}]`),
            n) : null != a && null == (n = n[a]) ? (s || console.warn(`[警告] mgrCfg.get [${e}.csv]中数据未找到, key1=[${t}], key2=[${a}]`),
            n) : null != i && null == (n = n[i]) ? (s || console.warn(`[警告] mgrCfg.get [${e}.csv]中数据未找到, key1=[${t}], key2=[${a}], key3=[${i}]`),
            n) : n
        }
        static quietGet(e, t, a=null, i=null) {
            return this.get(e, t, a, i, !0)
        }
        static forDb(e, t) {
            let a = this.getDb(e);
            a && Tools.forEachMap(a, t)
        }
        static _processStageDb() {}
        static _combineItemTemplatedb() {
            let e = this.getDb("item_template_db");
            mgrCfg.forDb_from_part_db((t,a)=>{
                e[a.id] ? console.warn("部件id与物品id冲突: ", a.id) : e[a.id] = {
                    id: a.id,
                    name: a.name,
                    icon: a.icon,
                    flag: 0,
                    defaultAmount: a.bDefaultHave ? 1 : 0,
                    sellItemId: a.sellItemId,
                    sellItemAmount: a.sellItemAmount
                }
            }
            ),
            mgrCfg.forDb_from_food_db((t,a)=>{
                e[a.id] ? console.warn("食物id与物品id冲突: ", a.id) : e[a.id] = {
                    id: a.id,
                    name: a.name,
                    icon: a.icon,
                    flag: 0,
                    defaultAmount: a.defaultAmount
                }
            }
            ),
            mgrCfg.forDb_from_seed_db((t,a)=>{
                e[a.id] ? console.warn("种子id与物品id冲突", a.id) : e[a.id] = {
                    id: a.id,
                    name: a.name,
                    icon: a.icon,
                    flag: 0,
                    defaultAmount: a.defaultAmount
                }
            }
            ),
            mgrCfg.forDb_from_card_pack_db((t,a)=>{
                e[a.id] ? console.warn("卡包id与物品id冲突:", a.id) : e[a.id] = {
                    id: a.id,
                    name: a.name,
                    icon: a.icon,
                    flag: 0,
                    defaultAmount: 0
                }
            }
            ),
            mgrCfg.forDb_from_card_flagment_db((t,a)=>{
                e[a.id] ? console.warn("卡牌碎片id与物品id冲突", a.id) : e[a.id] = {
                    id: a.id,
                    name: a.name,
                    icon: a.pic,
                    flag: 0,
                    defaultAmount: 0
                }
            }
            ),
            mgrCfg.forDb_from_card_db((t,a)=>{
                e[a.id] ? console.warn("卡牌id与物品id冲突", a.id) : e[a.id] = {
                    id: a.id,
                    name: a.name,
                    icon: "",
                    flag: 0,
                    defaultAmount: 0
                }
            }
            )
        }
        static _processTextDb() {
            this.allDbs.badword_db = []
        }
        static _processAchievementDb() {
            Tools.forEachMap(this.getDb("achievement_target_db"), (e,t)=>{
                let a = {};
                for (let e = 0; e < t.cmds.length; e++) {
                    a[t.cmds[e]] = !0
                }
                t.cmdHash = a
            }
            )
        }
        static get_from_alu_db(e, t, a) {
            return this.get("alu_db", e, t, a)
        }
        static forDb_from_alu_db(e) {
            this.forDb("alu_db", e)
        }
        static get_from_cop_db(e, t, a) {
            return this.get("cop_db", e, t, a)
        }
        static forDb_from_cop_db(e) {
            this.forDb("cop_db", e)
        }
        static get_from_cop_process_db(e, t, a) {
            return this.get("cop_process_db", e, t, a)
        }
        static forDb_from_cop_process_db(e) {
            this.forDb("cop_process_db", e)
        }
        static get_from_achievement_db(e, t, a) {
            return this.get("achievement_db", e, t, a)
        }
        static forDb_from_achievement_db(e) {
            this.forDb("achievement_db", e)
        }
        static get_from_achievement_target_db(e, t, a) {
            return this.get("achievement_target_db", e, t, a)
        }
        static forDb_from_achievement_target_db(e) {
            this.forDb("achievement_target_db", e)
        }
        static get_from_stage_db(e, t, a) {
            return this.get("stage_db", e, t, a)
        }
        static forDb_from_stage_db(e) {
            this.forDb("stage_db", e)
        }
        static get_from_ad_event_db(e, t, a) {
            return this.get("ad_event_db", e, t, a)
        }
        static forDb_from_ad_event_db(e) {
            this.forDb("ad_event_db", e)
        }
        static get_from_sign_db(e, t, a) {
            return this.get("sign_db", e, t, a)
        }
        static forDb_from_sign_db(e) {
            this.forDb("sign_db", e)
        }
        static get_from_item_template_db(e, t, a) {
            return this.get("item_template_db", e, t, a)
        }
        static forDb_from_item_template_db(e) {
            this.forDb("item_template_db", e)
        }
        static get_from_item_recover_db(e, t, a) {
            return this.get("item_recover_db", e, t, a)
        }
        static forDb_from_item_recover_db(e) {
            this.forDb("item_recover_db", e)
        }
        static get_from_guide_db(e, t, a) {
            return this.get("guide_db", e, t, a)
        }
        static forDb_from_guide_db(e) {
            this.forDb("guide_db", e)
        }
        static get_from_sound_db(e, t, a) {
            return this.get("sound_db", e, t, a)
        }
        static forDb_from_sound_db(e) {
            this.forDb("sound_db", e)
        }
        static get_from_stage_chapter_db(e, t, a) {
            return this.get("stage_chapter_db", e, t, a)
        }
        static forDb_from_stage_chapter_db(e) {
            this.forDb("stage_chapter_db", e)
        }
        static get_from_shop_template_db(e, t, a) {
            return this.get("shop_template_db", e, t, a)
        }
        static forDb_from_shop_template_db(e) {
            this.forDb("shop_template_db", e)
        }
        static get_from_skill_db(e, t, a) {
            return this.get("skill_db", e, t, a)
        }
        static forDb_from_skill_db(e) {
            this.forDb("skill_db", e)
        }
        static get_from_skill_upgrade_db(e, t, a) {
            return this.get("skill_upgrade_db", e, t, a)
        }
        static forDb_from_skill_upgrade_db(e) {
            this.forDb("skill_upgrade_db", e)
        }
        static get_from_role_db(e, t, a) {
            return this.get("role_db", e, t, a)
        }
        static forDb_from_role_db(e) {
            this.forDb("role_db", e)
        }
        static get_from_weapon_db(e, t, a) {
            return this.get("weapon_db", e, t, a)
        }
        static forDb_from_weapon_db(e) {
            this.forDb("weapon_db", e)
        }
        static get_from_weapon_upgrade_db(e, t, a) {
            return this.get("weapon_upgrade_db", e, t, a)
        }
        static forDb_from_weapon_upgrade_db(e) {
            this.forDb("weapon_upgrade_db", e)
        }
        static get_from_skill_middle_db(e, t, a) {
            return this.get("skill_middle_db", e, t, a)
        }
        static forDb_from_skill_middle_db(e) {
            this.forDb("skill_middle_db", e)
        }
        static get_from_model_db(e, t, a) {
            return this.get("model_db", e, t, a)
        }
        static forDb_from_model_db(e) {
            this.forDb("model_db", e)
        }
        static get_from_role_animation_db(e, t, a) {
            return this.get("role_animation_db", e, t, a)
        }
        static forDb_from_role_animation_db(e) {
            this.forDb("role_animation_db", e)
        }
        static get_from_online_reward_db(e, t, a) {
            return this.get("online_reward_db", e, t, a)
        }
        static forDb_from_online_reward_db(e) {
            this.forDb("online_reward_db", e)
        }
        static get_from_random_name_db(e, t, a) {
            return this.get("random_name_db", e, t, a)
        }
        static forDb_from_random_name_db(e) {
            this.forDb("random_name_db", e)
        }
        static get_from_turn_plate_db(e, t, a) {
            return this.get("turn_plate_db", e, t, a)
        }
        static forDb_from_turn_plate_db(e) {
            this.forDb("turn_plate_db", e)
        }
        static get_from_treature_map_db(e, t, a) {
            return this.get("treature_map_db", e, t, a)
        }
        static forDb_from_treature_map_db(e) {
            this.forDb("treature_map_db", e)
        }
        static get_from_random_tip_db(e, t, a) {
            return this.get("random_tip_db", e, t, a)
        }
        static forDb_from_random_tip_db(e) {
            this.forDb("random_tip_db", e)
        }
        static get_from_role_upgrade_db(e, t, a) {
            return this.get("role_upgrade_db", e, t, a)
        }
        static forDb_from_role_upgrade_db(e) {
            this.forDb("role_upgrade_db", e)
        }
        static get_from_gold_turn_plate_db(e, t, a) {
            return this.get("gold_turn_plate_db", e, t, a)
        }
        static forDb_from_gold_turn_plate_db(e) {
            this.forDb("gold_turn_plate_db", e)
        }
        static get_from_gold_turn_plate_config_db(e, t, a) {
            return this.get("gold_turn_plate_config_db", e, t, a)
        }
        static forDb_from_gold_turn_plate_config_db(e) {
            this.forDb("gold_turn_plate_config_db", e)
        }
        static get_from_animation_db(e, t, a) {
            return this.get("animation_db", e, t, a)
        }
        static forDb_from_animation_db(e) {
            this.forDb("animation_db", e)
        }
        static get_from_part_db(e, t, a) {
            return this.get("part_db", e, t, a)
        }
        static forDb_from_part_db(e) {
            this.forDb("part_db", e)
        }
        static get_from_part_type_db(e, t, a) {
            return this.get("part_type_db", e, t, a)
        }
        static forDb_from_part_type_db(e) {
            this.forDb("part_type_db", e)
        }
        static get_from_draw_lots_db(e, t, a) {
            return this.get("draw_lots_db", e, t, a)
        }
        static forDb_from_draw_lots_db(e) {
            this.forDb("draw_lots_db", e)
        }
        static get_from_draw_lots_chapter_db(e, t, a) {
            return this.get("draw_lots_chapter_db", e, t, a)
        }
        static forDb_from_draw_lots_chapter_db(e) {
            this.forDb("draw_lots_chapter_db", e)
        }
        static get_from_part_tag_db(e, t, a) {
            return this.get("part_tag_db", e, t, a)
        }
        static forDb_from_part_tag_db(e) {
            this.forDb("part_tag_db", e)
        }
        static get_from_draw_lots_event_db(e, t, a) {
            return this.get("draw_lots_event_db", e, t, a)
        }
        static forDb_from_draw_lots_event_db(e) {
            this.forDb("draw_lots_event_db", e)
        }
        static get_from_draw_lots_event_house_db(e, t, a) {
            return this.get("draw_lots_event_house_db", e, t, a)
        }
        static forDb_from_draw_lots_event_house_db(e) {
            this.forDb("draw_lots_event_house_db", e)
        }
        static get_from_house_up_grade_db(e, t, a) {
            return this.get("house_up_grade_db", e, t, a)
        }
        static forDb_from_house_up_grade_db(e) {
            this.forDb("house_up_grade_db", e)
        }
        static get_from_story_db(e, t, a) {
            return this.get("story_db", e, t, a)
        }
        static forDb_from_story_db(e) {
            this.forDb("story_db", e)
        }
        static get_from_story_play_db(e, t, a) {
            return this.get("story_play_db", e, t, a)
        }
        static forDb_from_story_play_db(e) {
            this.forDb("story_play_db", e)
        }
        static get_from_movie_db(e, t, a) {
            return this.get("movie_db", e, t, a)
        }
        static forDb_from_movie_db(e) {
            this.forDb("movie_db", e)
        }
        static get_from_designer_db(e, t, a) {
            return this.get("designer_db", e, t, a)
        }
        static forDb_from_designer_db(e) {
            this.forDb("designer_db", e)
        }
        static get_from_arena_config_db(e, t, a) {
            return this.get("arena_config_db", e, t, a)
        }
        static forDb_from_arena_config_db(e) {
            this.forDb("arena_config_db", e)
        }
        static get_from_arena_level_db(e, t, a) {
            return this.get("arena_level_db", e, t, a)
        }
        static forDb_from_arena_level_db(e) {
            this.forDb("arena_level_db", e)
        }
        static get_from_wish_pool_db(e, t, a) {
            return this.get("wish_pool_db", e, t, a)
        }
        static forDb_from_wish_pool_db(e) {
            this.forDb("wish_pool_db", e)
        }
        static get_from_suit_db(e, t, a) {
            return this.get("suit_db", e, t, a)
        }
        static forDb_from_suit_db(e) {
            this.forDb("suit_db", e)
        }
        static get_from_daily_task_db(e, t, a) {
            return this.get("daily_task_db", e, t, a)
        }
        static forDb_from_daily_task_db(e) {
            this.forDb("daily_task_db", e)
        }
        static get_from_daily_task_config_db(e, t, a) {
            return this.get("daily_task_config_db", e, t, a)
        }
        static forDb_from_daily_task_config_db(e) {
            this.forDb("daily_task_config_db", e)
        }
        static get_from_guess_score_db(e, t, a) {
            return this.get("guess_score_db", e, t, a)
        }
        static forDb_from_guess_score_db(e) {
            this.forDb("guess_score_db", e)
        }
        static get_from_guess_part_db(e, t, a) {
            return this.get("guess_part_db", e, t, a)
        }
        static forDb_from_guess_part_db(e) {
            this.forDb("guess_part_db", e)
        }
        static get_from_smash_egg_db(e, t, a) {
            return this.get("smash_egg_db", e, t, a)
        }
        static forDb_from_smash_egg_db(e) {
            this.forDb("smash_egg_db", e)
        }
        static get_from_interaction_db(e, t, a) {
            return this.get("interaction_db", e, t, a)
        }
        static forDb_from_interaction_db(e) {
            this.forDb("interaction_db", e)
        }
        static get_from_interaction_story_db(e, t, a) {
            return this.get("interaction_story_db", e, t, a)
        }
        static forDb_from_interaction_story_db(e) {
            this.forDb("interaction_story_db", e)
        }
        static get_from_suit_type_db(e, t, a) {
            return this.get("suit_type_db", e, t, a)
        }
        static forDb_from_suit_type_db(e) {
            this.forDb("suit_type_db", e)
        }
        static get_from_flip_card_db(e, t, a) {
            return this.get("flip_card_db", e, t, a)
        }
        static forDb_from_flip_card_db(e) {
            this.forDb("flip_card_db", e)
        }
        static get_from_part_animation_change_db(e, t, a) {
            return this.get("part_animation_change_db", e, t, a)
        }
        static forDb_from_part_animation_change_db(e) {
            this.forDb("part_animation_change_db", e)
        }
        static get_from_story_score_reward_db(e, t, a) {
            return this.get("story_score_reward_db", e, t, a)
        }
        static forDb_from_story_score_reward_db(e) {
            this.forDb("story_score_reward_db", e)
        }
        static get_from_pvp_offline_db(e, t, a) {
            return this.get("pvp_offline_db", e, t, a)
        }
        static forDb_from_pvp_offline_db(e) {
            this.forDb("pvp_offline_db", e)
        }
        static get_from_pvp_offline_subject_db(e, t, a) {
            return this.get("pvp_offline_subject_db", e, t, a)
        }
        static forDb_from_pvp_offline_subject_db(e) {
            this.forDb("pvp_offline_subject_db", e)
        }
        static get_from_interaction_config_db(e, t, a) {
            return this.get("interaction_config_db", e, t, a)
        }
        static forDb_from_interaction_config_db(e) {
            this.forDb("interaction_config_db", e)
        }
        static get_from_role_level_db(e, t, a) {
            return this.get("role_level_db", e, t, a)
        }
        static forDb_from_role_level_db(e) {
            this.forDb("role_level_db", e)
        }
        static get_from_food_db(e, t, a) {
            return this.get("food_db", e, t, a)
        }
        static forDb_from_food_db(e) {
            this.forDb("food_db", e)
        }
        static get_from_question_db(e, t, a) {
            return this.get("question_db", e, t, a)
        }
        static forDb_from_question_db(e) {
            this.forDb("question_db", e)
        }
        static get_from_click_feedback_db(e, t, a) {
            return this.get("click_feedback_db", e, t, a)
        }
        static forDb_from_click_feedback_db(e) {
            this.forDb("click_feedback_db", e)
        }
        static get_from_card_pack_db(e, t, a) {
            return this.get("card_pack_db", e, t, a)
        }
        static forDb_from_card_pack_db(e) {
            this.forDb("card_pack_db", e)
        }
        static get_from_card_db(e, t, a) {
            return this.get("card_db", e, t, a)
        }
        static forDb_from_card_db(e) {
            this.forDb("card_db", e)
        }
        static get_from_card_flagment_db(e, t, a) {
            return this.get("card_flagment_db", e, t, a)
        }
        static forDb_from_card_flagment_db(e) {
            this.forDb("card_flagment_db", e)
        }
        static get_from_flower_harvest_db(e, t, a) {
            return this.get("flower_harvest_db", e, t, a)
        }
        static forDb_from_flower_harvest_db(e) {
            this.forDb("flower_harvest_db", e)
        }
        static get_from_random_box_db(e, t, a) {
            return this.get("random_box_db", e, t, a)
        }
        static forDb_from_random_box_db(e) {
            this.forDb("random_box_db", e)
        }
        static get_from_spine_db(e, t, a) {
            return this.get("spine_db", e, t, a)
        }
        static forDb_from_spine_db(e) {
            this.forDb("spine_db", e)
        }
        static get_from_plant_db(e, t, a) {
            return this.get("plant_db", e, t, a)
        }
        static forDb_from_plant_db(e) {
            this.forDb("plant_db", e)
        }
        static get_from_seed_db(e, t, a) {
            return this.get("seed_db", e, t, a)
        }
        static forDb_from_seed_db(e) {
            this.forDb("seed_db", e)
        }
        static get_from_flowerpot_db(e, t, a) {
            return this.get("flowerpot_db", e, t, a)
        }
        static forDb_from_flowerpot_db(e) {
            this.forDb("flowerpot_db", e)
        }
        static get_from_garden_title_db(e, t, a) {
            return this.get("garden_title_db", e, t, a)
        }
        static forDb_from_garden_title_db(e) {
            this.forDb("garden_title_db", e)
        }
        static get_from_ad_banner_int_ui_db(e, t, a) {
            return this.get("ad_banner_int_ui_db", e, t, a)
        }
        static forDb_from_ad_banner_int_ui_db(e) {
            this.forDb("ad_banner_int_ui_db", e)
        }
        static get_from_extract_db(e, t, a) {
            return this.get("extract_db", e, t, a)
        }
        static forDb_from_extract_db(e) {
            this.forDb("extract_db", e)
        }
        static get_from_small_game_center_config_db(e, t, a) {
            return this.get("small_game_center_config_db", e, t, a)
        }
        static forDb_from_small_game_center_config_db(e) {
            this.forDb("small_game_center_config_db", e)
        }
        static get_from_random_name_part1_db(e, t, a) {
            return this.get("random_name_part1_db", e, t, a)
        }
        static forDb_from_random_name_part1_db(e) {
            this.forDb("random_name_part1_db", e)
        }
        static get_from_pt_random_name_part1_db(e, t, a) {
            return this.get("pt_random_name_part1_db", e, t, a)
        }
        static forDb_from_pt_random_name_part1_db(e) {
            this.forDb("pt_random_name_part1_db", e)
        }
        static get_from_pt_random_name_part2_db(e, t, a) {
            return this.get("pt_random_name_part2_db", e, t, a)
        }
        static forDb_from_pt_random_name_part2_db(e) {
            this.forDb("pt_random_name_part2_db", e)
        }
        static get_from_random_name_part2_db(e, t, a) {
            return this.get("random_name_part2_db", e, t, a)
        }
        static forDb_from_random_name_part2_db(e) {
            this.forDb("random_name_part2_db", e)
        }
        static get_from_hi_random_name_part2_db(e, t, a) {
            return this.get("hi_random_name_part2_db", e, t, a)
        }
        static forDb_from_hi_random_name_part2_db(e) {
            this.forDb("hi_random_name_part2_db", e)
        }
        static get_from_id_random_name_part2_db(e, t, a) {
            return this.get("id_random_name_part2_db", e, t, a)
        }
        static forDb_from_id_random_name_part2_db(e) {
            this.forDb("id_random_name_part2_db", e)
        }
        static get_from_id_random_name_part1_db(e, t, a) {
            return this.get("id_random_name_part1_db", e, t, a)
        }
        static forDb_from_id_random_name_part1_db(e) {
            this.forDb("id_random_name_part1_db", e)
        }
        static get_from_hi_random_name_part1_db(e, t, a) {
            return this.get("hi_random_name_part1_db", e, t, a)
        }
        static forDb_from_hi_random_name_part1_db(e) {
            this.forDb("hi_random_name_part1_db", e)
        }
        static get_from_en_random_name_part2_db(e, t, a) {
            return this.get("en_random_name_part2_db", e, t, a)
        }
        static forDb_from_en_random_name_part2_db(e) {
            this.forDb("en_random_name_part2_db", e)
        }
        static get_from_vi_random_name_part2_db(e, t, a) {
            return this.get("vi_random_name_part2_db", e, t, a)
        }
        static forDb_from_vi_random_name_part2_db(e) {
            this.forDb("vi_random_name_part2_db", e)
        }
        static get_from_vi_random_name_part1_db(e, t, a) {
            return this.get("vi_random_name_part1_db", e, t, a)
        }
        static forDb_from_vi_random_name_part1_db(e) {
            this.forDb("vi_random_name_part1_db", e)
        }
        static get_from_en_random_name_part1_db(e, t, a) {
            return this.get("en_random_name_part1_db", e, t, a)
        }
        static forDb_from_en_random_name_part1_db(e) {
            this.forDb("en_random_name_part1_db", e)
        }
    }
    mgrCfg.allDbs = {},
    mgrCfg.dbRules = {};
    class CustomTween {
        constructor() {
            this.tweenList = []
        }
        static to(e, t, a, i=Laya.Ease.linearNone) {
            let s = new CustomTween;
            return s._node = e,
            s.to(t, a, i),
            s
        }
        static from(e, t, a, i=Laya.Ease.linearNone) {
            let s = new CustomTween;
            return s._node = e,
            s.from(t, a, i),
            s
        }
        static delayTime(e, t) {
            let a = new CustomTween;
            return a._node = e,
            a.delayTime(t),
            a
        }
        static scaleForever(e, t, a, i, s=Laya.Ease.linearNone) {
            return CustomTween.to(e, {
                scaleX: t,
                scaleY: t
            }, i).to({
                scaleX: a,
                scaleY: a
            }, i).start(0)
        }
        static roke(e, t=5, a=200, i=1500, s=0) {
            return CustomTween.to(e, {
                rotation: t
            }, a / 2).to({
                rotation: -t
            }, a).to({
                rotation: t
            }, a).to({
                rotation: 0
            }, a / 2).to({
                rotation: 0
            }, i).start(s)
        }
        static rotateForever(e, t=5e3, a=!0) {
            return CustomTween.to(e, {
                rotation: 360 * (a ? 1 : -1)
            }, t).callback(()=>{
                e.rotation = 0
            }
            ).start(0)
        }
        static actionFloat(e, t, a, i, s, o=Laya.Ease.linearNone) {
            let n = new CustomTween;
            return n._node = e,
            n.actionFloat(t, a, i, s, o),
            n
        }
        static bezierCurveMotion(e, t, a, i, s) {
            let o = new CustomTween;
            return o._node = i,
            o.bezierCurveMotion(e, t, a, s),
            o
        }
        static heartBeat(e) {
            return CustomTween.to(e, {
                scaleX: 1.1 * e.scaleX,
                scaleY: 1.1 * e.scaleY
            }, 100).to({
                scaleX: e.scaleX,
                scaleY: e.scaleY
            }, 100).delayTime(50).to({
                scaleX: 1.15 * e.scaleX,
                scaleY: 1.15 * e.scaleY
            }, 100).to({
                scaleX: e.scaleX,
                scaleY: e.scaleY
            }, 100).delayTime(1300).start(0)
        }
        static jumpTo(e, t, a, i=300, s) {
            let o = e.x
              , n = e.y
              , r = e.parent.globalToLocal(t)
              , l = new Laya.Vector2((o + r.x) / 2,(n + r.y) / 2 - 200);
            return CustomTween.bezierCurveMotion(new Laya.Vector2(o,n), l, r, e, i).start(1),
            CustomTween.to(e, {
                scaleX: a,
                scaleY: a
            }, i, Laya.Ease.sineOut).callback(()=>{
                s && s()
            }
            ).start(1)
        }
        to(e, t, a=Laya.Ease.linearNone) {
            return this.tweenList.push(()=>{
                this._curTween = Laya.Tween.to(this._node, e, t, a, new Laya.Handler(this,this._onComplete.bind(this)), 0, !0, !0)
            }
            ),
            this
        }
        from(e, t, a=Laya.Ease.linearNone) {
            return this.tweenList.push(()=>{
                this._curTween = Laya.Tween.from(this._node, e, t, a, new Laya.Handler(this,this._onComplete.bind(this)), 0, !0, !0)
            }
            ),
            this
        }
        callback(e) {
            return this.tweenList.push(()=>{
                e(),
                this._onComplete()
            }
            ),
            this
        }
        delayTime(e) {
            return this._node.__delay_time__ = 0,
            this.to({
                __delay_time__: e
            }, e),
            this
        }
        bezierCurveMotion(e, t, a, i) {
            return this.tweenList.push(()=>{
                let s = 0;
                i /= 1e3,
                Timer.callLoop(.016, o=>{
                    let n = s / i
                      , r = e.x * (1 - n) + t.x * n
                      , l = e.y * (1 - n) + t.y * n
                      , h = r * (1 - n) + (t.x * (1 - n) + a.x * n) * n
                      , d = l * (1 - n) + (t.y * (1 - n) + a.y * n) * n;
                    this._node.x = h,
                    this._node.y = d,
                    (s += .016) >= i && (this._node.x = a.x,
                    this._node.y = a.y,
                    o.stop(),
                    this._onComplete())
                }
                , this._node)
            }
            ),
            this
        }
        static bezierCurveMotionV3(e, t, a, i, s) {
            let o = 0;
            i /= 1e3,
            Timer.callLoop(.016, n=>{
                let r = o / i
                  , l = e.x * (1 - r) + t.x * r
                  , h = e.y * (1 - r) + t.y * r
                  , d = e.z * (1 - r) + t.z * r
                  , c = l * (1 - r) + (t.x * (1 - r) + a.x * r) * r
                  , g = h * (1 - r) + (t.y * (1 - r) + a.y * r) * r
                  , _ = d * (1 - r) + (t.z * (1 - r) + a.z * r) * r;
                s(new Laya.Vector3(c,g,_)),
                (o += Tools.delta()) >= i && n.stop()
            }
            )
        }
        actionFloat(e, t, a, i, s=Laya.Ease.linearNone) {
            return this.tweenList.push(()=>{
                this._node.__action_float_value = e,
                this._onComplete()
            }
            ),
            this.to({
                __action_float_value: t,
                update: new Laya.Handler(this._node,()=>{
                    i(this._node.__action_float_value)
                }
                )
            }, a, s),
            this
        }
        repeat(e) {
            let t = [];
            for (let a = 1; a < e; a++)
                for (let e = 0; e < this.tweenList.length; e++) {
                    const a = this.tweenList[e];
                    t.push(a)
                }
            return this.tweenList = this.tweenList.concat(t),
            this
        }
        start(e=1) {
            return this.repeatCount = e,
            this._curIndex = -1,
            this._count = 0,
            this._onComplete(),
            this
        }
        _onComplete() {
            this._node && !this._node.destroyed && (this._curIndex++,
            this.tweenList[this._curIndex] ? this.tweenList[this._curIndex].call(this) : (this._count++,
            (0 == this.repeatCount || this._count < this.repeatCount) && (this._curIndex = this._curIndex % this.tweenList.length,
            this.tweenList[this._curIndex] && this.tweenList[this._curIndex].call(this))))
        }
        stop() {
            this.clear()
        }
        resume() {}
        clear() {
            this.tweenList = []
        }
    }
    class Base64 {
        static encodeForUrl(e) {
            let t = this.encode(e);
            return t ? t = (t = t.replace("+", "-")).replace("/", "*") : null
        }
        static decodeForUrl(e) {
            return e ? (e = (e = e.replace("-", "+")).replace("*", "/"),
            this.decode(e)) : null
        }
        static encode(e) {
            var t, a, i, s, o, n, r, l = "", h = 0;
            for (e = this._utf8_encode(e); h < e.length; )
                s = (t = e.charCodeAt(h++)) >> 2,
                o = (3 & t) << 4 | (a = e.charCodeAt(h++)) >> 4,
                n = (15 & a) << 2 | (i = e.charCodeAt(h++)) >> 6,
                r = 63 & i,
                isNaN(a) ? n = r = 64 : isNaN(i) && (r = 64),
                l = l + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(n) + this._keyStr.charAt(r);
            return l
        }
        static decode(e) {
            var t, a, i, s, o, n, r = "", l = 0;
            for (e = e.replace(/[^A-Za-z0-9\+\/\=]/g, ""); l < e.length; )
                t = this._keyStr.indexOf(e.charAt(l++)) << 2 | (s = this._keyStr.indexOf(e.charAt(l++))) >> 4,
                a = (15 & s) << 4 | (o = this._keyStr.indexOf(e.charAt(l++))) >> 2,
                i = (3 & o) << 6 | (n = this._keyStr.indexOf(e.charAt(l++))),
                r += String.fromCharCode(t),
                64 != o && (r += String.fromCharCode(a)),
                64 != n && (r += String.fromCharCode(i));
            return r = this._utf8_decode(r)
        }
        static _utf8_encode(e) {
            e = e.replace(/\r\n/g, "\n");
            for (var t = "", a = 0; a < e.length; a++) {
                var i = e.charCodeAt(a);
                i < 128 ? t += String.fromCharCode(i) : i > 127 && i < 2048 ? (t += String.fromCharCode(i >> 6 | 192),
                t += String.fromCharCode(63 & i | 128)) : (t += String.fromCharCode(i >> 12 | 224),
                t += String.fromCharCode(i >> 6 & 63 | 128),
                t += String.fromCharCode(63 & i | 128))
            }
            return t
        }
        static _utf8_decode(e) {
            for (var t = "", a = 0, i = 0, s = 0, o = 0; a < e.length; )
                (i = e.charCodeAt(a)) < 128 ? (t += String.fromCharCode(i),
                a++) : i > 191 && i < 224 ? (s = e.charCodeAt(a + 1),
                t += String.fromCharCode((31 & i) << 6 | 63 & s),
                a += 2) : (s = e.charCodeAt(a + 1),
                o = e.charCodeAt(a + 2),
                t += String.fromCharCode((15 & i) << 12 | (63 & s) << 6 | 63 & o),
                a += 3);
            return t
        }
    }
    Base64._keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    let systemConsole = console;
    var ULSDK$1;
    !function(e) {
        class t {
            static info(...t) {
                e.console.allowConsole && systemConsole.info(...t)
            }
            static log(...t) {
                e.console.allowConsole && systemConsole.log(...t)
            }
            static warn(...t) {
                e.console.allowConsole && systemConsole.warn(...t)
            }
            static error(...t) {
                e.console.allowConsole && systemConsole.error(...t)
            }
        }
        t.allowConsole = !0,
        e.console = t
    }(ULSDK$1 || (ULSDK$1 = {})),
    window.ULSDK = ULSDK$1;
    class ULEventListener {
        constructor(e, t, a, i) {
            this.type = e,
            this.priority = t,
            this.callback = a,
            this.bDispatchOnce = i,
            this.bNeedRemove = !1
        }
        isDispatchOnce() {
            return !!this.bDispatchOnce
        }
        isNeedRemove() {
            return !!this.bNeedRemove
        }
        markNeedRemove() {
            this.bNeedRemove = !0
        }
        triggerCallback(e) {
            if (this.callback instanceof Function) {
                try {
                    this.callback(e)
                } catch (e) {
                    return ULSDK.console.error("ULEventListener.triggerCallback has exception!", e),
                    !1
                }
                return !0
            }
            return !1
        }
    }
    class ULEvent {
        constructor(e, t) {
            this.bPropagationStoped = !1,
            this.type = e,
            this.data = t,
            this.bPropagationStoped = !1,
            this.returnValue = null
        }
        stopImmediatePropagation() {
            this.bPropagationStoped = !0
        }
        setReturnValue(e, t) {
            null != e && (this.returnValue = e,
            t || this.stopImmediatePropagation())
        }
        getReturnValue() {
            return this.returnValue
        }
        isPropagationStoped() {
            return !!this.bPropagationStoped
        }
    }
    class ULConst {
    }
    ULConst.CMD_GET_BASE_CHANNEL_INFO = "/c/getBaseChannelInfo",
    ULConst.CMD_SET_VERSION = "/c/setVersion",
    ULConst.CMD_OPEN_MORE_GAME = "/c/openMoreGame",
    ULConst.CMD_OPEN_UL_MORE_GAME = "/c/openUlMoreGame",
    ULConst.CMD_OPEN_PAY = "/c/openPay",
    ULConst.CMD_OPEN_JF = "/c/openJf",
    ULConst.CMD_OPEN_SHARE = "/c/openShare",
    ULConst.CMD_CALL_PHONE = "/c/callPhone",
    ULConst.CMD_UL_WEB_VIEW = "/c/ulWebView",
    ULConst.CMD_EXIT_GAME = "/c/exitGame",
    ULConst.CMD_MEGADATA_SERVER = "/c/megadataServer",
    ULConst.CMD_POST_MEGADATA = "/c/postMegadata",
    ULConst.CMD_USE_CDKEY = "/c/useCdkey",
    ULConst.CMD_OPEN_ADV = "/c/openAdv",
    ULConst.CMD_CLICK_NATIVE_ADV = "/c/clickNativeAdv",
    ULConst.CMD_CLOSE_ADV = "/c/closeAdv",
    ULConst.CMD_CLOSE_NATIVE_ADV = "/c/closeNativeAdv",
    ULConst.CMD_USER_LOGIN = "/c/userLogin",
    ULConst.CMD_USER_LOGIN_REPORT = "/c/userLoginReport",
    ULConst.CMD_USER_IS_LOGIN = "/c/userIsLogin",
    ULConst.CMD_LOGIN_OUT = "/c/loginOut",
    ULConst.CMD_SAVE_RANK_DATA = "/c/saveRankData",
    ULConst.CMD_GET_RANK_DATA = "/c/getRankData",
    ULConst.CMD_RECORDER_GAME_VIDEO = "/c/recorderGameVideo",
    ULConst.CMD_SHARE_GAME_VIDEO = "/c/shareGameVideo",
    ULConst.CMD_OPEN_JUMP = "/c/openJump",
    ULConst.CMD_JUMP_OTHER_GAME = "/c/jumpOtherGame",
    ULConst.CMD_OPEN_RECOMMENDATION = "/c/openRecommendation",
    ULConst.CMD_CLOSE_RECOMMENDATION = "/c/closeRecommendation",
    ULConst.CMD_SAVE_USER_DATA = "/c/saveUserData",
    ULConst.CMD_GET_USER_DATA = "/c/getUserData",
    ULConst.CMD_ADD_GAME_TO_MY_FAVORITE = "/c/addGameToMyFavorite",
    ULConst.CMD_GET_USER_INFO_MSG = "/c/getUserInfoMsg",
    ULConst.CMD_OPEN_USERINFO_ACCREDIT_BUTTON = "/c/openUserInfoAccreditButton",
    ULConst.CMD_CLOSE_USERINFO_ACCREDIT_BUTTON = "/c/closeUserInfoAccreditButton",
    ULConst.CMD_INSTALL_SHORTCUT = "/c/installShortcut",
    ULConst.CMD_SET_CLIPBOARD_DATA = "/c/setClipboardData",
    ULConst.CMD_GET_CLIPBOARD_DATA = "/c/getClipboardData",
    ULConst.CMD_SET_ULSDKDEMO_DEBUG_MODE = "/c/setUlsdkdemoDebugMode",
    ULConst.CMD_MPSDK_AD_HANDLER = "/c/mpsdkAdHandler",
    ULConst.CMD_CREATE_GAME_ICON = "/c/createGameIcon",
    ULConst.CMD_GAME_ICON_HANDLER = "/c/gameIconHandler",
    ULConst.CMD_OPEN_CHANNEL_MORE_GAME_BOX = "/c/openChannelMoreGameBox",
    ULConst.CMD_OPEN_BLOCK_AD = "/c/openBlockAd",
    ULConst.CMD_CLOSE_BLOCK_AD = "/c/closeBlockAd",
    ULConst.CMD_GET_SHORTCUT_STATE = "/c/getShortcutState",
    ULConst.CMD_ADD_SUBSCRIBE = "/c/addSubscribe",
    ULConst.CMD_ADD_COLOR_SIGN = "/c/addColorSign",
    ULConst.CMD_OPEN_GRID_AD = "/c/openGridAd",
    ULConst.CMD_CLOSE_GRID_AD = "/c/closeGridAd",
    ULConst.CMD_JUMP_TO_VIDEO_VIEW = "/c/jumpToVideoView",
    ULConst.CMD_FOLLOW_OFFICIAL_ACCOUNT = "/c/followOfficialAccount",
    ULConst.CMD_GET_FOLLOW_OFFICIAL_ACCOUNT_STATE = "/c/getFollowOfficialAccountState",
    ULConst.CMD_CONTENT_SECURITY_CHECK = "/c/contentSecurityCheck",
    ULConst.CMD_JUMP_LEISURE_SUBJECT = "/c/jumpLeisureSubject",
    ULConst.CMD_PHONE_VIBRATE = "/c/phoneVibrate",
    ULConst.CMD_OPEN_URL = "/c/openUrl",
    ULConst.CMD_SHOW_CHANNEL_MASK = "/c/showChannelMask",
    ULConst.CMD_CLOSE_CHANNEL_MASK = "/c/closeChannelMask",
    ULConst.CMD_OPEN_ADVANCED_SETTING = "/c/openAdvancedSetting",
    ULConst.CMD_RANKLIST_GET_USER_NUM = "/c/getUserNumInRank",
    ULConst.CMD_RANKLIST_GET_USER_INFO_BY_ID = "/c/getUserInfoByIdInRank",
    ULConst.CMD_RANKLIST_GET_USER_INFO_BY_LIST = "/c/getUserInfoListByRankId",
    ULConst.CMD_RANKLIST_REPORT_USER_INFO = "/c/reportUserInfoInRank",
    ULConst.CMD_RANKLIST_MODIFY_SCORE_BY_ARRAY = "/c/modifyScoreByArray",
    ULConst.CMD_CHANNEL_INFO_RESULT = "/c/channelInfoResult",
    ULConst.CMD_GET_BASE_CHANNEL_INFO_RESULT = "/c/getBaseChannelInfoResult",
    ULConst.CMD_PAY_RESULT = "/c/payResult",
    ULConst.CMD_PRE_PAY_RESULT = "/c/prePayResult",
    ULConst.CMD_SHARE_RESULT = "/c/shareResult",
    ULConst.CMD_LIFE_CYCLE_RESULT = "/c/lifeCycle",
    ULConst.CMD_PAUSE_SOUND_RESULT = "/c/pauseSound",
    ULConst.CMD_RESUME_SOUND_RESULT = "/c/resumeSound",
    ULConst.CMD_COP_INFO_RESULT = "/c/copInfoResult",
    ULConst.CMD_MEGADATA_SERVER_RESULT = "/c/megadataServer",
    ULConst.CMD_POST_MEGADATA_RESULT = "/c/postMegadataResult",
    ULConst.CMD_USE_CDKEY_RESULT = "/c/useCdkey",
    ULConst.CMD_OPEN_ADV_RESULT = "/c/openAdvResult",
    ULConst.CMD_OPEN_NATIVE_ADV_RESULT = "/c/openNativeAdvResult",
    ULConst.CMD_CLICK_NATIVE_ADV_RESULT = "/c/clickNativeAdvResult",
    ULConst.CMD_CLICK_ADV_RESULT = "/c/clickAdvResult",
    ULConst.CMD_CLOSE_ADV_RESULT = "/c/closeAdvResult",
    ULConst.CMD_CLOSE_NATIVE_ADV_RESULT = "/c/closeNativeAdvResult",
    ULConst.CMD_USER_LOGIN_RESULT = "/c/userLoginResult",
    ULConst.CMD_USER_IS_LOGIN_RESULT = "/c/userIsLoginResult",
    ULConst.CMD_USER_LOGIN_REPORT_RESULT = "/c/userLoginReportResult",
    ULConst.CMD_LOGIN_OUT_RESULT = "/c/loginOutResult",
    ULConst.CMD_ADV_VALID_COUNT_RESULT = "/c/advValidCountResult",
    ULConst.CMD_SAVE_RANK_DATA_RESULT = "/c/saveRankDataResult",
    ULConst.CMD_GET_RANK_DATA_RESULT = "/c/getRankDataResult",
    ULConst.CMD_RECORDER_GAME_VIDEO_RESULT = "/c/recorderGameVideoResult",
    ULConst.CMD_SHARE_GAME_VIDEO_RESULT = "/c/shareGameVideoResult",
    ULConst.CMD_OPEN_JUMP_RESULT = "/c/openJumpResult",
    ULConst.CMD_JUMP_OTHER_GAME_RESULT = "/c/jumpOtherGameResult",
    ULConst.CMD_JUMP_OTHER_GAME_REWARD_RESULT = "/c/jumpOtherGameRewardResult",
    ULConst.CMD_EXTRA_BONUS_RESULT = "/c/extraBonus",
    ULConst.CMD_OPEN_RECOMMENDATION_RESULT = "/c/openRecommendationResult",
    ULConst.CMD_CLOSE_RECOMMENDATION_RESULT = "/c/closeRecommendationResult",
    ULConst.CMD_SAVE_USER_DATA_RESULT = "/c/saveUserDataResult",
    ULConst.CMD_GET_USER_DATA_RESULT = "/c/getUserDataResult",
    ULConst.CMD_ADD_GAME_TO_MY_FAVORITE_RESULT = "/c/addGameToMyFavoriteResult",
    ULConst.CMD_GET_USER_INFO_MSG_RESULT = "/c/getUserInfoMsgResult",
    ULConst.CMD_OPEN_USERINFO_ACCREDIT_BUTTON_RESULT = "/c/openUserInfoAccreditButtonResult",
    ULConst.CMD_CLOSE_USERINFO_ACCREDIT_BUTTON_RESULT = "/c/closeUserInfoAccreditButtonResult",
    ULConst.CMD_APP_SHARE_RESULT = "/c/appShareResult",
    ULConst.CMD_INSTALL_SHORTCUT_RESULT = "/c/installShortcutResult",
    ULConst.CMD_SET_CLIPBOARD_DATA_RESULT = "/c/setClipboardDataResult",
    ULConst.CMD_GET_CLIPBOARD_DATA_RESULT = "/c/getClipboardDataResult",
    ULConst.CMD_MPSDK_AD_HANDLER_RESULT = "/c/mpsdkAdHandlerResult",
    ULConst.CMD_CREATE_GAME_ICON_RESULT = "/c/createGameIconResult",
    ULConst.CMD_GAME_ICON_HANDLER_RESULT = "/c/gameIconHandlerResult",
    ULConst.CMD_OPEN_CHANNEL_MORE_GAME_BOX_RESULT = "/c/openChannelMoreGameBoxResult",
    ULConst.CMD_OPEN_BLOCK_AD_RESULT = "/c/openBlockAdResult",
    ULConst.CMD_CLOSE_BLOCK_AD_RESULT = "/c/closeBlockAdResult",
    ULConst.CMD_GET_SHORTCUT_STATE_RESULT = "/c/getShortcutStateResult",
    ULConst.CMD_ADD_SUBSCRIBE_RESULT = "/c/addSubscribeResult",
    ULConst.CMD_ADD_COLOR_SIGN_RESULT = "/c/addColorSignResult",
    ULConst.CMD_OPEN_GRID_AD_RESULT = "/c/openGridAdResult",
    ULConst.CMD_CLOSE_GRID_AD_RESULT = "/c/closeGridAdResult",
    ULConst.CMD_JUMP_TO_VIDEO_VIEW_RESULT = "/c/jumpToVideoViewResult",
    ULConst.CMD_FOLLOW_OFFICIAL_ACCOUNT_RESULT = "/c/followOfficialAccountResult",
    ULConst.CMD_GET_FOLLOW_OFFICIAL_ACCOUNT_STATE_RESULT = "/c/getFollowOfficialAccountStateResult",
    ULConst.CMD_CONTENT_SECURITY_CHECK_RESULT = "/c/contentSecurityCheckResult",
    ULConst.CMD_JUMP_LEISURE_SUBJECT_RESULT = "/c/jumpLeisureSubjectResult",
    ULConst.CMD_PHONE_VIBRATE_RESULT = "/c/phoneVibrateResult",
    ULConst.CMD_JUMP_NEW_USER_GUIDE = "/c/jumpNewGuide",
    ULConst.CMD_OPEN_URL_RESULT = "/c/openUrlResult",
    ULConst.CMD_CLEAN_UP_GAME_ARCHIVE = "/c/cleanUpGameArchive",
    ULConst.CMD_SHOW_POINT_DEBUG_INFO = "/c/showPointDebugInfo",
    ULConst.CMD_MOYANG_QQ_NET_EARNED_QUERY = "/c/qqNetEarnedQuery",
    ULConst.CMD_MOYANG_QQ_NET_EARNED_RECHARGE = "/c/qqNetEarnedRecharge",
    ULConst.CMD_MOYANG_QQ_NET_EARNED_CASH = "/c/qqNetEarnedCash",
    ULConst.CMD_MOYANG_QQ_NET_EARNED_QUERY_RESULT = "/c/qqNetEarnedQueryResult",
    ULConst.CMD_MOYANG_QQ_NET_EARNED_RECHARGE_RESULT = "/c/qqNetEarnedRechargeResult",
    ULConst.CMD_MOYANG_QQ_NET_EARNED_CASH_RESULT = "/c/qqNetEarnedCashResult",
    ULConst.CMD_RANKLIST_GET_USER_NUM_RESULT = "/c/getUserNumInRankResult",
    ULConst.CMD_RANKLIST_GET_USER_INFO_BY_ID_RESULT = "/c/getUserInfoByIdInRankResult",
    ULConst.CMD_RANKLIST_GET_USER_INFO_BY_LIST_RESULT = "/c/getUserInfoListByRankIdResult",
    ULConst.CMD_RANKLIST_REPORT_USER_INFO_RESULT = "/c/reportUserInfoInRankResult",
    ULConst.CMD_RANKLIST_MODIFY_SCORE_BY_ARRAY_RESULT = "/c/modifyScoreByArrayResult",
    ULConst.CMD_SDK_ON_COP_CHANGED = "/sdk/onCopChanged",
    ULConst.CMD_SDK_PREPARE_SHOW_VIDEO_ADV = "/sdk/prepareShowVideoAdv",
    ULConst.CMD_SDK_PREPARE_SHOW_INTER_ADV = "/sdk/prepareShowInterAdv",
    ULConst.CMD_SDK_PREPARE_SHOW_BANNER_ADV = "/sdk/prepareShowBannerAdv",
    ULConst.CMD_SDK_PREPARE_SHOW_EMBEDDED_ADV = "/sdk/prepareShowEmbeddedAdv",
    ULConst.CMD_SDK_PREPARE_SHOW_URL_ADV = "/sdk/prepareShowUrlAdv",
    ULConst.CMD_SDK_PREPARE_SHOW_PASTER_ADV = "/sdk/prepareShowPasterAdv",
    ULConst.CMD_SDK_SHOW_VIDEO_ADV = "/sdk/showVideoAdv",
    ULConst.CMD_SDK_SHOW_INTER_ADV = "/sdk/showInterAdv",
    ULConst.CMD_SDK_SHOW_BANNER_ADV = "/sdk/showBannerAdv",
    ULConst.CMD_SDK_SHOW_EMBEDDED_ADV = "/sdk/showEmbeddedAdv",
    ULConst.CMD_SDK_SHOW_URL_ADV = "/sdk/showUrlAdv",
    ULConst.CMD_SDK_SHOW_PASTER_ADV = "/sdk/showPasterAdv",
    ULConst.CMD_SDK_CLOSE_VIDEO_ADV = "/sdk/closeVideoAdv",
    ULConst.CMD_SDK_CLOSE_INTER_ADV = "/sdk/closeInterAdv",
    ULConst.CMD_SDK_CLOSE_BANNER_ADV = "/sdk/closeBannerAdv",
    ULConst.CMD_SDK_CLOSE_EMBEDDED_ADV = "/sdk/closeEmbeddedAdv",
    ULConst.CMD_SDK_CLOSE_URL_ADV = "/sdk/closeUrlAdv",
    ULConst.CMD_SDK_CLOSE_Paster_ADV = "/sdk/closePasterAdv",
    ULConst.CMD_SDK_CLOSE_NATIVE_ADV = "/sdk/closeNativeAdv",
    ULConst.CMD_SDK_CLICK_NATIVE_ADV = "/sdk/clickNativeAdv",
    ULConst.CMD_SDK_GET_STORAGE = "/sdk/getStorge",
    ULConst.CMD_SDK_SET_STORAGE = "/sdk/setStorge",
    ULConst.CMD_SDK_GET_CLIPBOARD_DATA = "/sdk/getClipboardData",
    ULConst.CMD_SDK_SET_CLIPBOARD_DATA = "/sdk/setClipboardData",
    ULConst.CMD_SDK_IS_SUPPORT_CLIPBOARD = "/sdk/isSupportClipboard",
    ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG = "/sdk/collectionModuleCheckerConfig",
    ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_MORE_GAME_AB_TEST_CONFIG = "/sdk/collectionModuleCheckerMoreGameAbTestConfig",
    ULConst.CMD_SDK_TOUCH_SCREEN_END = "/sdk/touchScreenEnd",
    ULConst.CMD_SDK_ON_GAME_START = "/sdk/onGameStart",
    ULConst.CMD_SDK_ON_GAME_PAUSE = "/sdk/onGamePause",
    ULConst.CMD_SDK_ON_GAME_RESUME = "/sdk/onGameResume",
    ULConst.CMD_SDK_ON_SHARE_SHOW = "/sdk/onShareShow",
    ULConst.CMD_SDK_ON_SAHRE_APP_MESSAGE = "/sdk/onShareAppMessage",
    ULConst.CMD_SDK_ON_REPORT_ULSDK_EVENT = "/sdk/ulsdkMegadataUpload",
    ULConst.CMD_SDK_OPEN_SHARE_DURING_ADV = "/sdk/openShareDuringAdv",
    ULConst.CMD_SDK_CHANNEL_MEGADATA_POST = "/sdk/channelMegadataPost",
    ULConst.CMD_SDK_SET_UP_WEBVIEW_JAVASCRIPT_BRIDGE = "/sdk/setUpWebViewJavascriptBridge",
    ULConst.CMD_SDK_EXPRESS_NATIVE_ADV_STATUS_CHANGE = "/sdk/expressNativeAdvStatusChange",
    ULConst.CMD_MOYANG_QQ_REWARD_VIDEO_PLAY = "/sdk/moyangQQRewardVideoPlay",
    ULConst.CMD_MOYANG_QQ_REWARD_VIDEO_CLOSE = "/sdk/moyangQQRewardVideoClose",
    ULConst.CMD_FACEBOOK_INIT_COMPLETE = "/sdk/facebookInitComplete",
    ULConst.CMD_SDK_INIT_USER_LOGIN = "/sdk/initUserLogin",
    ULConst.CMD_SDK_QM_LOGIN_REPORT = "/qmsdk/loginReport",
    ULConst.CMD_SDK_QM_REPORT_EVENT = "/qmsdk/reportEvent",
    ULConst.CMD_SDK_QM_REPORT_GOLD = "/qmsdk/reportGold",
    ULConst.CMD_SDK_QM_SET_ACCOUNT_INFO = "/qmsdk/setAccountInfo",
    ULConst.CMD_SDK_QM_GET_OPEN_LEVEL = "/qmsdk/getOpenLevel",
    ULConst.CMD_SDK_QM_GET_RECOMMEND_INFO = "/qmsdk/getRecommendInfo",
    ULConst.CMD_SDK_QM_GET_SUGGEST_LIST = "/qmsdk/getSuggestList",
    ULConst.CMD_SDK_QM_GET_EXCITATION_LIST = "/qmsdk/getExcitationList",
    ULConst.CMD_SDK_QM_MPSDK_AD_CLICK = "/qmsdk/mpsdkAdClick",
    ULConst.CMD_SDK_QM_MPSDK_CLICK_SYNC = "/qmsdk/mpsdkClickSync",
    ULConst.CMD_SDK_QM_GET_USER_DATA_VERSION = "/qmsdk/getUserDataVersion",
    ULConst.CMD_SDK_QM_IS_STRONG_FISSION = "/qmsdk/isStrongFission",
    ULConst.CMD_SDK_QM_REPORT_VIDEO_TIME_EVENT = "/qmsdk/reportVideoTimeEvent",
    ULConst.CMD_SDK_OPPOQG_MARK_MANUAL_CLOSE_BANNER_COUNT = "/sdk/oppoqg/markManualCloseBannerCount",
    ULConst.CMD_SDK_OPPOQG_GET_MANUAL_CLOSE_BANNER_COUNT = "/sdk/oppoqg/getManualCloseBannerCount",
    ULConst.CMD_SDK_OPPOQG_HAS_BANNER_SHOWING = "/sdk/oppoqg/hasBannerShowing",
    ULConst.PRIORITY_DISABLE = -2,
    ULConst.PRIORITY_NONE = -1,
    ULConst.CONSOLE_OUTPUT_LEVEL_WARN = 1,
    ULConst.CONSOLE_OUTPUT_LEVEL_ERROR = 1,
    ULConst.CONSOLE_OUTPUT_LEVEL_LOG = 2,
    ULConst.CONSOLE_OUTPUT_LEVEL_INNER_DEBUG = 3,
    ULConst.B_INNER_DEBUG = !1,
    ULConst.COP_RETRY_TIME_SEC = 30,
    ULConst.STATIS_TYPE_BASE_INFO = "1",
    ULConst.STATIS_TYPE_PAY_INFO = "2",
    ULConst.STATIS_TYPE_ADV_INFO = "3",
    ULConst.STATIS_TYPE_COP_REQUEST = "4",
    ULConst.STATIS_TYPE_USER_EVENT = "5",
    ULConst.STATIS_TYPE_ONLINE_TIME = "6",
    ULConst.STATIS_TYPE_POINT_EVENT = "7",
    ULConst.STATIS_TYPE_COIN_CHANGE_EVENT = "5",
    ULConst.STATIS_TYPE_COMMON_EVENT = "7",
    ULConst.STATIS_TYPE_LEVEL_START_EVENT = "8",
    ULConst.STATIS_TYPE_LEVEL_COMPLETE_EVENT = "9",
    ULConst.STATIS_TYPE_ITEM_BUY = "10",
    ULConst.STATIS_TYPE_BUY_ACTION = "11",
    ULConst.STATIS_TYPE_VIDEO_POINT_EVENT = "12",
    ULConst.DEFAULT_REFERANCE_BANNER_HEIGHT = 200,
    ULConst.STATIS_USER_EVENT_GAME_LEVEL_START = "gameLevelStart",
    ULConst.STATIS_USER_EVENT_GAME_LEVEL_COMPLETE = "gameLevelComplete",
    ULConst.STATIS_USER_EVENT_GAME_COIN_ADD = "gameCoinAdd",
    ULConst.STATIS_USER_EVENT_GAME_COIN_LOST = "gameCoinLost",
    ULConst.STATIS_USER_EVENT_BUY_ACTION = "buyAction",
    ULConst.STATIS_USER_EVENT_ITEM_BUY = "itemBuy",
    ULConst.STATIS_USER_EVENT_COMMON_EVENT = "commonEvent",
    ULConst.STATIS_USER_EVENT_COMMON_EVENT_MULTI_FIELD = "commonEventMultiField",
    ULConst.STATIS_USER_EVENT_POINT_EVENT = "pointEvent",
    ULConst.STATIS_USER_ACTION_EVENT_LEVEL_START = "levelStart",
    ULConst.STATIS_USER_ACTION_EVENT_LEVEL_COMPLETE = "levelComplete",
    ULConst.STATIS_USER_ACTION_EVENT_COIN_CHANGE = "coinChange",
    ULConst.STATIS_USER_ACTION_EVENT_ITEM_BUY = "itemBuy",
    ULConst.STATIS_USER_ACTION_EVENT_BUY_ACTION = "buyAction",
    ULConst.STATIS_USER_ACTION_EVENT_COMMON_EVENT = "commonEvent",
    ULConst.STATIS_USER_ACTION_EVENT_VIDEO_POINT_EVENT = "videoPointEvent",
    ULConst.STATIS_UPLOAD_SPAN = 60,
    ULConst.STATIS_UPLOAD_SINGLE_REQUEST_MAX_COUNT = 100,
    ULConst.ADV_FAIL_TIP_NOAD = "暂时无法播放广告，请稍后再试",
    ULConst.ADV_FAIL_TIP_BUSY = "广告准备中，请稍后再试",
    ULConst.ADV_ERR_CODE_CONSECUTIVE_FAIL = -100,
    ULConst.ADV_ERR_CODE_CDING = -101,
    ULConst.ADV_ERR_CODE_NATIVE_ID_ERROR = -102,
    ULConst.ADV_ERR_CODE_NATIVE_DATA_ERROR = -102,
    ULConst.ADV_ERR_CODE_CAN_NOT_PLAY = -103,
    ULConst.ADV_ERR_CODE_NOT_INITED = -104,
    ULConst.ADV_ERR_CODE_UNKNOWN = -105,
    ULConst.ADV_ERR_CODE_SHARE_NO_CALLBACK = -106,
    ULConst.ADV_ERR_CODE_SHARE_FAIL = -107,
    ULConst.ADV_ERR_CODE_ADOBJ_NULL = -108,
    ULConst.ADV_ERR_CODE_ADV_TYPE_CD = -109,
    ULConst.ADV_ERR_CODE_ADV_TYPE_DAILY_LIMIT = -110;
    class ULEventDispatcher {
        constructor() {
            this.allListeners = {}
        }
        static getInstance() {
            return this._instance || (this._instance = new ULEventDispatcher),
            this._instance
        }
        addListener(e, t, a) {
            return this._addListener(e, t, a, !1)
        }
        once(e, t, a) {
            return this._addListener(e, t, a, !0)
        }
        _addListener(e, t, a, i) {
            if (t < ULConst.PRIORITY_NONE)
                return void this.removeListenerByCallback(e, a);
            let s = this.allListeners[e];
            s || (s = [],
            this.allListeners[e] = s);
            let o = -1;
            for (let i = 0; i < s.length; i++) {
                let n = s[i];
                if (n.callback == a)
                    return ULSDK.console.warn("ULEventDispatcher._addListener callback already exists:", e),
                    !1;
                -1 == o && n.priority < t && (o = i)
            }
            let n = new ULEventListener(e,t,a,i);
            return -1 != o ? s.splice(o, 0, n) : s.push(n),
            !0
        }
        removeListenerByCallback(e, t) {
            let a = this.allListeners[e];
            if (a)
                for (let e = a.length - 1; e >= 0; e--) {
                    a[e].callback == t && a.splice(e, 1)
                }
        }
        removeListenersByType(e) {
            delete this.allListeners[e]
        }
        dispatch(e, t) {
            let a = null;
            return a = e instanceof ULEvent ? e : new ULEvent(e,t),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("ULEventDispatcher.dispatch", a.type, a.data),
            this._inner_dispatch(a).bCalled
        }
        dispatchWithReturn(e, t) {
            let a = null;
            return a = e instanceof ULEvent ? e : new ULEvent(e,t),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("ULEventDispatcher.dispatchWithReturn", a.type, a.data),
            this._inner_dispatch(a).returnValue
        }
        _inner_dispatch(e) {
            let t = !1
              , a = this.allListeners[e.type];
            if (!a)
                return ULConst.B_INNER_DEBUG && ULSDK.console.log("  listeners not found"),
                {
                    bCalled: !1,
                    returnValue: null
                };
            for (let i = 0; i < a.length; i++) {
                const s = a[i];
                if (!s.isNeedRemove() && (s.isDispatchOnce() && s.markNeedRemove(),
                s.triggerCallback(e) && (t = !0),
                e.isPropagationStoped()))
                    break
            }
            for (let e = a.length - 1; e >= 0; e--) {
                a[e].isNeedRemove() && a.splice(e, 1)
            }
            return {
                bCalled: t,
                returnValue: e.getReturnValue()
            }
        }
    }
    ULEventDispatcher._instance = null;
    var cConfig = JSON.parse('{\n    "b_sdk_oppoqg_debug": false,\n    "b_sdk_vivo_debug": false,\n    "creatorVersion": "",\n    "i_channel_info_timeout": 3000,\n    "i_game_start_ready_timeout": 10000,\n    "i_net_timeout": 5000,\n    "i_sdk_adv_banner_cd": 0,\n    "i_sdk_adv_banner_timeout": 30000,\n    "i_sdk_adv_embedded_timeout": 30000,\n    "i_sdk_adv_inter_cd": 0,\n    "i_sdk_adv_inter_timeout": 30000,\n    "i_sdk_adv_native_clicked_report_mode": 0,\n    "i_sdk_adv_native_life_time": 15000,\n    "i_sdk_adv_native_request_cd": 10000,\n    "i_sdk_adv_oppoqg_native_exposure_cd": 0,\n    "i_sdk_adv_paster_timeout": 30000,\n    "i_sdk_adv_type_banner_cd": 0,\n    "i_sdk_adv_type_banner_daily_limit": 0,\n    "i_sdk_adv_type_embedded_cd": 0,\n    "i_sdk_adv_type_embedded_daily_limit": 0,\n    "i_sdk_adv_type_interstitial_cd": 40000,\n    "i_sdk_adv_type_interstitial_daily_limit": 0,\n    "i_sdk_adv_type_paster_cd": 0,\n    "i_sdk_adv_type_paster_daily_limit": 0,\n    "i_sdk_adv_type_url_cd": 0,\n    "i_sdk_adv_type_url_daily_limit": 0,\n    "i_sdk_adv_type_video_cd": 0,\n    "i_sdk_adv_type_video_daily_limit": 0,\n    "i_sdk_adv_url_timeout": 30000,\n    "i_sdk_adv_video_timeout": 30000,\n    "i_sdk_age_level_info_mode": 0,\n    "i_sdk_baidu_ad_failed_share_reward_success_count_limit": 3,\n    "i_sdk_baidu_add_game_to_my_favorite_mode": 0,\n    "i_sdk_baidu_auto_upload": 1,\n    "i_sdk_baidu_banner_timeout": 30000,\n    "i_sdk_baidu_debug_mode": 0,\n    "i_sdk_baidu_jump_game_reward_time": 20000,\n    "i_sdk_baidu_qrcode_preview": 1,\n    "i_sdk_channel_user_id_mode": 0,\n    "i_sdk_compress_res_mode": 1,\n    "i_sdk_content_security_check_support": 1,\n    "i_sdk_debug_mode": 0,\n    "i_sdk_facebook_megadata_mode": 0,\n    "i_sdk_find_mini_game_mode": 1,\n    "i_sdk_hago_banner_id": 0,\n    "i_sdk_hago_user": 1,\n    "i_sdk_hago_video_id": 10367,\n    "i_sdk_headline_ad_failed_share_reward_success_count_limit": 3,\n    "i_sdk_headline_auto_upload": 1,\n    "i_sdk_headline_cuttemplate_default_interval": 2000,\n    "i_sdk_headline_favorite_mode": 0,\n    "i_sdk_headline_follow_support": 1,\n    "i_sdk_headline_getUserInfo_force": 1,\n    "i_sdk_headline_installShortcut_support": 0,\n    "i_sdk_headline_qrcode_preview": 1,\n    "i_sdk_headline_record_delay_time": 500,\n    "i_sdk_headline_record_support": 1,\n    "i_sdk_headline_subscribe_use_temleteIds_mode": 0,\n    "i_sdk_installShortcut_mode": 1,\n    "i_sdk_jkplay_gameid": 610718001,\n    "i_sdk_jkplay_sdkversion": 1,\n    "i_sdk_jump_game_resource_mode": 0,\n    "i_sdk_jump_single_random_length": 5,\n    "i_sdk_jumplist_mode": 1,\n    "i_sdk_megadata_encrypt": 1,\n    "i_sdk_megadata_mode": 0,\n    "i_sdk_megadata_upload_span": 5000,\n    "i_sdk_moreWonderful_mode": 0,\n    "i_sdk_moregame_mode": 1,\n    "i_sdk_oppoqg_ad_ecd": 0,\n    "i_sdk_oppoqg_banner_mode": 0,\n    "i_sdk_oppoqg_jump_game_reward_time": 20000,\n    "i_sdk_oppoqg_not_show_banner_after_user_close_count_limit": 5,\n    "i_sdk_pay_mode": 0,\n    "i_sdk_phone_vibrate": 0,\n    "i_sdk_qq_ad_failed_share_reward_confirm_success_cycle": 72000,\n    "i_sdk_qq_ad_failed_share_reward_fail_count": 2,\n    "i_sdk_qq_ad_failed_share_reward_success_count_limit": 3,\n    "i_sdk_qq_ad_failed_share_reward_success_radios": 70,\n    "i_sdk_qq_ad_failed_share_reward_success_time_interval": 5000,\n    "i_sdk_qq_appbox_cd": 30000,\n    "i_sdk_qq_appbox_suc_ratios": 0,\n    "i_sdk_qq_auto_upload": 1,\n    "i_sdk_qq_block_cd": 30000,\n    "i_sdk_qq_qrcode_preview": 1,\n    "i_sdk_sdk_rank_mode": 0,\n    "i_sdk_share_mode": 0,\n    "i_sdk_support_open_url": 0,\n    "i_sdk_support_record_share": 1,\n    "i_sdk_trim_adv_err_switch": 1,\n    "i_sdk_weixin_ad_failed_share_reward_confirm_success_cycle": 72000,\n    "i_sdk_weixin_ad_failed_share_reward_fail_count": 2,\n    "i_sdk_weixin_ad_failed_share_reward_success_count_limit": 3,\n    "i_sdk_weixin_ad_failed_share_reward_success_radios": 70,\n    "i_sdk_weixin_ad_failed_share_reward_success_time_interval": 5000,\n    "i_sdk_weixin_auto_upload": 1,\n    "i_sdk_weixin_banner_autoRefresh_mode": 0,\n    "i_sdk_weixin_banner_intervals": 30,\n    "i_sdk_weixin_currency_ratio": 10,\n    "i_sdk_weixin_env": 0,\n    "i_sdk_weixin_jump_game_reward_time": 2000,\n    "i_sdk_weixin_jump_game_reward_type": 0,\n    "i_sdk_weixin_qrcode_preview": 1,\n    "i_sdk_weixin_replace_grid_with_custom": 1,\n    "i_sdk_weixin_subscribe_use_temleteIds_mode": 1,\n    "layaVersion": "",\n    "s_game_name": "我的小花仙",\n    "s_prj_name": "prj.game80",\n    "s_sdk_2345_game_code": "leishou_xhx",\n    "s_sdk_2345_gameres_url": "https://gamesres.ultralisk.cn/h5_games_res/game80/2345/v0",\n    "s_sdk_4399GameBox_remote_server_root": "https://gamesres.ultralisk.cn/h5_games_res/game80/4399GameBox/v1",\n    "s_sdk_4399gamebox_app_key": "",\n    "s_sdk_4399gamebox_game_id": "",\n    "s_sdk_4399minigame_gameres_url": "https://gamesres.ultralisk.cn/h5_games_res/game80/4399minigame/v0",\n    "s_sdk_adv_info": {\n        "1": {\n            "group": [\n                "1"\n            ],\n            "type": "interstitial"\n        },\n        "2": {\n            "group": [\n                "2"\n            ],\n            "type": "banner"\n        },\n        "3": {\n            "group": [\n                "3"\n            ],\n            "type": "embedded"\n        },\n        "4": {\n            "group": [\n                "4"\n            ],\n            "type": "video"\n        },\n        "5": {\n            "group": [\n                "5"\n            ],\n            "type": "url"\n        }\n    },\n    "s_sdk_adv_show_banner_list": "ULAdvFaceBook",\n    "s_sdk_adv_show_embedded_list": "0",\n    "s_sdk_adv_show_inter_list": "ULAdvFaceBook",\n    "s_sdk_adv_show_paster_list": "0",\n    "s_sdk_adv_show_url_list": "0",\n    "s_sdk_adv_show_video_list": "ULAdvFaceBook",\n    "s_sdk_age_level_info": "",\n    "s_sdk_baidu_adv_app_sid": "f4032a72",\n    "s_sdk_baidu_app_id": "19364906",\n    "s_sdk_baidu_banner_id": "7025279",\n    "s_sdk_baidu_change_log": "",\n    "s_sdk_baidu_deal_id": "",\n    "s_sdk_baidu_min_swan_version": "1.0.8",\n    "s_sdk_baidu_pay_app_key": "EkVaIkAWsaHWWD0Rks1uvEHrYv1OClFq",\n    "s_sdk_baidu_pay_private_key": "-----BEGIN RSA PRIVATE KEY-----MIICXgIBAAKBgQC46Giy1S4Zuys/c3QO6VZVWAOo1tussbIpqI0M7edU9OC732leFej2DmG3O9XRh9NlYjoAq4hyt7DxiZ6MyN8IdStZn4b0/e/CZKQA5WaCI5h71hUTwCJTzHZHvO+woDWaE2mOSsBfjAdwTsHUr32eCPzju/1zatys02W7ai4v+wIDAQABAoGAGjbAmRHF3ln9kJpCitajqae3pRkIvZvXgTZnAL09fXrV3WyX2IHMrA1v5vUxo+nYm1foly26Q2EtUaDL/HOBwshbwEtR5TR0g+kZBpA+S4wt/ujZPlALmZiGuQjjqwWFo9OfeskXer7vA5UWYemDMvy7XQ2TWoLNOzI+LaVvEPECQQDpEgY7XmrKeq8qkUFPsDjcEa7SZ2eEEOps0NKmewGvAaiavm7+8yCdS/ZPS7ZD6590TanFWy3gJtugw/vPa2tpAkEAyxlj8u+EYKchPBYehuRjm4W5SlJNAGrABqrJjM50jQ4aRVr1LbS6R0S77kTaZLTV/w8eYk1LS9cTCaY+JB+HwwJBAIXrlmscmG4ZynbCGe4JCtLg0jwRsHhBJAI8hx2jxlbhtBieXbbeypm3YSM1FNi4FdpFGczN1HFcwowAsLsBNSkCQQC9YgywQKYI1m+ILvwCPr+fCt/PrNS+mcw7q0/Lq8xEp6zZlUpgd1DoGfC/6pZXJ8UQVFG5ymd27bOD4O+7EWevAkEAzYHfclV/kP3V1aCR0KoXBHA4WIHKa+JaVuFMIDZqd/SsfsoKDn+Stsajl/e8LAwt9XXctYWNvGsVfCSfZ5Y3tw==-----END RSA PRIVATE KEY-----",\n    "s_sdk_baidu_remote_server_root": "https://gamesres.ultralisk.cn/h5_games_res/game80/baidu/v1",\n    "s_sdk_baidu_version_name": "1.0.6.0",\n    "s_sdk_baidu_video_id": "7025280",\n    "s_sdk_cdk_app_id": "91",\n    "s_sdk_cdk_url": "https://cdkey.ultralisk.cn/commoncdk/usecdk",\n    "s_sdk_cop_addr": "https://copv7.ultralisk.cn/h5/getdata/",\n    "s_sdk_cop_game_id": "0",\n    "s_sdk_facebook_appId": "571410776854464",\n    "s_sdk_facebook_interId": "571410776854464_571472676848274",\n    "s_sdk_facebook_videoId": "571410776854464_571472060181669",\n    "s_sdk_facebook_bannerId": "",\n    "s_sdk_funheadline_app_id": "a3UeSUmV6ANU",\n    "s_sdk_funheadline_app_key": "UxQ3j4eei3K6zVoKz3JGNFFKzE2VBAxFbTzvj2JFV22RoMMBOK2gBGFSKooKUY1o",\n    "s_sdk_funheadline_gameres_url": "https://gamesres.ultralisk.cn/h5_games_res/game80/funheadline/v0/",\n    "s_sdk_googleAnalytics_appid": "G-JZRTXVBKKS",\n    "s_sdk_hago_country_code": "ID",\n    "s_sdk_hago_env": "ProDuct",\n    "s_sdk_hago_game_id": "yeluolijinglingmeng",\n    "s_sdk_hago_language": "id",\n    "s_sdk_headline_app_secret": "54810e8ca1760b0977893ea5abc0b4d457e7dde6",\n    "s_sdk_headline_appid": "tt286b5ed6b74165b2",\n    "s_sdk_headline_banner_adunit": "1hn39o1dno1336112m",\n    "s_sdk_headline_change_log": "",\n    "s_sdk_headline_douyin_find_me_url": "https://gamesres.ultralisk.cn/h5_games_res/common/find_me/douyin_icon/80.png",\n    "s_sdk_headline_get_token_url": "https://sdkserver.ultralisk.cn/ttgettoken",\n    "s_sdk_headline_get_video_info_url": "https://gate.snssdk.com/developer/api/get_video_info",\n    "s_sdk_headline_inter_adunit": "7ae8i0ahi3f161jrpg",\n    "s_sdk_headline_remote_server_root": "https://gamesres.ultralisk.cn/h5_games_res/game80/headline/v1",\n    "s_sdk_headline_share_video_tag": "",\n    "s_sdk_headline_sub_context": "0",\n    "s_sdk_headline_subscribe_url": "https://subscrible.ultralisk.cn/hdsubscrible/posthdsubscribleusermsg",\n    "s_sdk_headline_top_video_by_like_url": "https://gate.snssdk.com/developer/api/get_top_video_ids_by_like",\n    "s_sdk_headline_top_video_by_time_url": "https://gate.snssdk.com/developer/api/get_top_video_ids_by_time",\n    "s_sdk_headline_toutiao_find_me_url": "https://gamesres.ultralisk.cn/h5_games_res/common/find_me/toutiao_icon/80.png",\n    "s_sdk_headline_version_name": "1.2.9",\n    "s_sdk_headline_video_adunit": "340dg0j7j7c19h3bmi",\n    "s_sdk_jkplay_banner_id": "23481679",\n    "s_sdk_jkplay_game_key": "",\n    "s_sdk_jkplay_interstitial_id": "375960824",\n    "s_sdk_jkplay_tiny_package_server": "https://gamesres.ultralisk.cn/h5_games_res/game80/jkplay/v0",\n    "s_sdk_jkplay_video_id": "695824730",\n    "s_sdk_jump_game_statis_game_indexes": "",\n    "s_sdk_lan_debug_address": "",\n    "s_sdk_megadata_close_table_type_ids": "",\n    "s_sdk_megadata_game_id": "92",\n    "s_sdk_megadata_point_event_open_category_ids": "0;1;2;3;4;5;6;7;8;9;10",\n    "s_sdk_megadata_server_jump_game_type_id": "jumpabtest",\n    "s_sdk_megadata_server_type_id": "92",\n    "s_sdk_megadata_test_url": "https://megadatav7.ultralisk.cn/batchtestmodedataupload",\n    "s_sdk_megadata_url": "https://megadatav7.ultralisk.cn/batchdataupload",\n    "s_sdk_meizu_gameres_url": "https://gamesres.ultralisk.cn/h5_games_res/game80/meizu/v1",\n    "s_sdk_meizuqg_banner_id": "NyTaCh7m",\n    "s_sdk_meizuqg_inter_id": "iZdEVzQ2",\n    "s_sdk_meizuqg_package_name": null,\n    "s_sdk_meizuqg_tiny_package_server": null,\n    "s_sdk_meizuqg_version_code": "7",\n    "s_sdk_meizuqg_version_name": "1.5.2",\n    "s_sdk_meizuqg_video_id": "nAZyol90",\n    "s_sdk_mgc_bannerId": "0",\n    "s_sdk_mgc_gameres_url": "0",\n    "s_sdk_mgc_interId": "0",\n    "s_sdk_mgc_videoId": "0",\n    "s_sdk_oppoqg_app_key": "2T3C0r2M7JMSgc4c00ckGoo0C",\n    "s_sdk_oppoqg_appid": "30261868",\n    "s_sdk_oppoqg_appsecret": "24FF0adD509BC15e1C135F1b27484ee8",\n    "s_sdk_oppoqg_banner_box_id": "218392",\n    "s_sdk_oppoqg_banner_id": "176239",\n    "s_sdk_oppoqg_inter_box_id": "218385",\n    "s_sdk_oppoqg_interstitial_id": "176240",\n    "s_sdk_oppoqg_native_ids": {\n        "1": "176243",\n        "2": "176243",\n        "3": "176243"\n    },\n    "s_sdk_oppoqg_package_name": "com.ultralisk.game80.nearme.gamecenter",\n    "s_sdk_oppoqg_pre_order_url": "https://jits.open.oppomobile.com/jitsopen/api/pay/v1.0/preOrder",\n    "s_sdk_oppoqg_private_key": "-----BEGIN RSA PRIVATE KEY-----MIICXgIBAAKBgQC46Giy1S4Zuys/c3QO6VZVWAOo1tussbIpqI0M7edU9OC732leFej2DmG3O9XRh9NlYjoAq4hyt7DxiZ6MyN8IdStZn4b0/e/CZKQA5WaCI5h71hUTwCJTzHZHvO+woDWaE2mOSsBfjAdwTsHUr32eCPzju/1zatys02W7ai4v+wIDAQABAoGAGjbAmRHF3ln9kJpCitajqae3pRkIvZvXgTZnAL09fXrV3WyX2IHMrA1v5vUxo+nYm1foly26Q2EtUaDL/HOBwshbwEtR5TR0g+kZBpA+S4wt/ujZPlALmZiGuQjjqwWFo9OfeskXer7vA5UWYemDMvy7XQ2TWoLNOzI+LaVvEPECQQDpEgY7XmrKeq8qkUFPsDjcEa7SZ2eEEOps0NKmewGvAaiavm7+8yCdS/ZPS7ZD6590TanFWy3gJtugw/vPa2tpAkEAyxlj8u+EYKchPBYehuRjm4W5SlJNAGrABqrJjM50jQ4aRVr1LbS6R0S77kTaZLTV/w8eYk1LS9cTCaY+JB+HwwJBAIXrlmscmG4ZynbCGe4JCtLg0jwRsHhBJAI8hx2jxlbhtBieXbbeypm3YSM1FNi4FdpFGczN1HFcwowAsLsBNSkCQQC9YgywQKYI1m+ILvwCPr+fCt/PrNS+mcw7q0/Lq8xEp6zZlUpgd1DoGfC/6pZXJ8UQVFG5ymd27bOD4O+7EWevAkEAzYHfclV/kP3V1aCR0KoXBHA4WIHKa+JaVuFMIDZqd/SsfsoKDn+Stsajl/e8LAwt9XXctYWNvGsVfCSfZ5Y3tw==-----END RSA PRIVATE KEY-----",\n    "s_sdk_oppoqg_tiny_package_server": "https://gamesres.ultralisk.cn/h5_games_res/game80/oppoqg/v1",\n    "s_sdk_oppoqg_version_code": "21",\n    "s_sdk_oppoqg_version_name": "21",\n    "s_sdk_oppoqg_video_id": "176244",\n    "s_sdk_qq_app_id": "1110421913",\n    "s_sdk_qq_appbox_id": "53a6ae3ee092afe04109a8317bd08b55",\n    "s_sdk_qq_banner_id": "d1904195daa934fecc4e4eeab94f447b",\n    "s_sdk_qq_block_id": "0",\n    "s_sdk_qq_change_log": "",\n    "s_sdk_qq_inter_id": "aa8390eadf918d76efbf656b154f1c53",\n    "s_sdk_qq_remote_server_root": "https://gamesres.ultralisk.cn/h5_games_res/game80/qq/v1",\n    "s_sdk_qq_sub_context": "",\n    "s_sdk_qq_version_name": "1.6.2",\n    "s_sdk_qq_video_id": "aa5a6fca6b1aece192ab15a0bf2b47cf",\n    "s_sdk_sdkdemo_gameres_url": "",\n    "s_sdk_uc_banner_id": null,\n    "s_sdk_uc_gameres_url": "https://gamesres.ultralisk.cn/h5_games_res/game80/uc/v0",\n    "s_sdk_uc_video_id": null,\n    "s_sdk_user_data_get_url": "https://h5gameserver.ultralisk.cn/getuserdata",\n    "s_sdk_user_data_save_url": "https://h5gameserver.ultralisk.cn/savealluserdata",\n    "s_sdk_version": "8acb1a290",\n    "s_sdk_vivo_app_id": "100005671",\n    "s_sdk_vivo_app_secret": "0",\n    "s_sdk_vivo_banner_box_id": "0",\n    "s_sdk_vivo_banner_id": "f906ba9bdffe4d9683cf3212ca16ae5a",\n    "s_sdk_vivo_custom_adv_minSize": "720*630",\n    "s_sdk_vivo_custom_id": "0",\n    "s_sdk_vivo_inter_box_id": "0",\n    "s_sdk_vivo_interstitial_id": "e2cb1f04bb6b4016a3aa9362759d9457",\n    "s_sdk_vivo_native_ids": {\n        "1": "379b9df264bf4a26bc0abb5cafc96250",\n        "2": "379b9df264bf4a26bc0abb5cafc96250",\n        "3": "379b9df264bf4a26bc0abb5cafc96250"\n    },\n    "s_sdk_vivo_package_name": "com.ultralisk.game80.vivominigame",\n    "s_sdk_vivo_qg_url": "https://pay.vivo.com.cn/vivopay/order/request",\n    "s_sdk_vivo_tiny_package_server": "https://gamesres.ultralisk.cn/h5_games_res/game80/vivo/v1",\n    "s_sdk_vivo_version_code": "48",\n    "s_sdk_vivo_version_name": "1.4.8",\n    "s_sdk_vivo_video_id": "80c112f121f341b097b813c8c598be54",\n    "s_sdk_webreview_gameres_url": "https://gamesres.ultralisk.cn/h5_games_res/md5test/62850c79d4f4bda780/",\n    "s_sdk_webreview_test_gameres_url": "0",\n    "s_sdk_weixin_appid": "wx242593952fb2df7a",\n    "s_sdk_weixin_appsecret": "f1e6eee255a06e946e5c2b6bd35f56c7",\n    "s_sdk_weixin_banner_adunit_ids": {\n        "2": "adunit-4d9c2bd6c975227e"\n    },\n    "s_sdk_weixin_change_log": "",\n    "s_sdk_weixin_find_me_url": "https://gamesres.ultralisk.cn/h5_games_res/common/find_me/weixin_icon/80.png",\n    "s_sdk_weixin_grid_adunit_id": "0",\n    "s_sdk_weixin_interstitial_ids": {\n        "1": "adunit-c7565c4cc7ed974b"\n    },\n    "s_sdk_weixin_login_url": "https://sdkserver.ultralisk.cn/wxuserlogin",\n    "s_sdk_weixin_mch_id": "0",\n    "s_sdk_weixin_offer_id": "0",\n    "s_sdk_weixin_remote_server_root": "https://gamesres.ultralisk.cn/h5_games_res/game80/weixin/v1",\n    "s_sdk_weixin_sub_context": "",\n    "s_sdk_weixin_subscribe_url": "https://subscrible.ultralisk.cn/wxsubscrible/postwxsubscribleusermsg",\n    "s_sdk_weixin_version_name": "1.1.15",\n    "s_sdk_weixin_video_adunit_ids": {\n        "4": "adunit-be299c98a7b7f87f"\n    },\n    "srcRootPath": "src/script/",\n    "t_customer_service_info": [\n        "kefu@ultralisk.cn"\n    ],\n    "t_sdk_baidu_jump_games": [\n        {\n            "id": "gVPpWFaCDbKoC2VKawlPsMCjWMuoYObk",\n            "index": "70",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/70.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/70.png"\n            ]\n        },\n        {\n            "id": "vhAHSZ2oCteEEtf8C6HiQeUZgWTj5F1M",\n            "index": "75",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/75.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/75.png"\n            ]\n        },\n        {\n            "id": "3B10fP8fRsHpjlOprdW89c2y8U313ps9",\n            "index": "73",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/73.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/73.png"\n            ]\n        },\n        {\n            "id": "cA5GKqcGBGEgXmSXpNjxjOqDt0IB9boY",\n            "index": "74",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/74.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/74.png"\n            ]\n        },\n        {\n            "id": "WMIhnYCNyOcWP4TISwlEbZ04RtYwviL1",\n            "index": "79",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/79.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/79.png"\n            ]\n        },\n        {\n            "id": "xV0P9UXGP2APaDTi7CXHFuIiKYmtkPMg",\n            "index": "78",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/78.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/78.png"\n            ]\n        },\n        {\n            "id": "2w4vuOxXbFGA1GqVYBI41kG1Atd3FVbw",\n            "index": "76",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/76.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/76.png"\n            ]\n        },\n        {\n            "id": "rHLWLgOdeaaWCgVea07awxLcGOVEWIOf",\n            "index": "56",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/56.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/56.png"\n            ]\n        },\n        {\n            "id": "9YTDrCKInzLR01Mh2qLyp5GT5gkPUlCz",\n            "index": "69",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/69.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/69.png"\n            ]\n        },\n        {\n            "id": "G3Co4nKxv2rvToCBdKuaBLcmRaFqPSe8",\n            "index": "55",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/55.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/55.png"\n            ]\n        },\n        {\n            "id": "lCrh6dpPbTAFPMjMfhEvU0Ex9kn6KGG9",\n            "index": "55v2",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/55v2.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/55v2.png"\n            ]\n        }\n    ],\n    "t_sdk_baidu_pay_code": {\n        \n    },\n    "t_sdk_baidu_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game80/share1.jpg",\n            "title": "撒娇卖萌样样精通，可爱的小花仙在等你回家~"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game80/share2.jpg",\n            "title": "我为小花仙准备的晚餐，是不是很丰盛呢~"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game80/share3.jpg",\n            "title": "用小花仙的声音唱歌也太好听了吧，快来试试！"\n        }\n    ],\n    "t_sdk_common_event_ids": {\n        "add_subscrible": "102",\n        "click_more_game_icon_list": "106",\n        "click_more_game_icon_reward": "105",\n        "click_more_game_icon_single": "104",\n        "click_share": "101",\n        "click_subscrible": "103",\n        "open_cdk": "107",\n        "open_share": "100"\n    },\n    "t_sdk_common_modify_tag_afterBuild": [\n        \n    ],\n    "t_sdk_common_modify_tag_beforeBuild": [\n        \n    ],\n    "t_sdk_compress_json_includes": [\n        "**/version*.json"\n    ],\n    "t_sdk_compress_json_includes_rem": "",\n    "t_sdk_compress_res_config": [\n        {\n            "cmds": "",\n            "rep": "ui/common/mask.*"\n        },\n        {\n            "cmds": "truepng /o max /cq c=1024 d=75 | optipng -strip all -o7 | zopflipng -y --lossy_8bit --lossy_transparent",\n            "minFileSize": 2048,\n            "rep": "nofilematch_just_for_example"\n        },\n        {\n            "cmds": "jpeg-recompress --strip -t 0.4 --min 80 | guetzil --quality 85",\n            "minFileSize": 2048,\n            "rep": ".*//.jpg"\n        },\n        {\n            "cmds": "autopng --quality 40-80 | optipng -strip all -o7 | zopflipng -y --lossy_8bit --lossy_transparent",\n            "minFileSize": 2048,\n            "rep": ".*//.png"\n        }\n    ],\n    "t_sdk_cop_default_cop": {\n        "ad_insert_cd": 30,\n        "ad_insert_ratios": "50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50",\n        "ad_mode": "3",\n        "ad_video_ratios": "100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100",\n        "b_room_try_ad_tip": 0,\n        "cloth_function": "15;15;1",\n        "guide_mode": 1\n    },\n    "t_sdk_cop_simulate_city_data": {\n        "0": "未知城市",\n        "1001": "海南藏族自治州",\n        "1002": "西宁",\n        "1003": "海东",\n        "1004": "黄南藏族自治州",\n        "1005": "海西蒙古族藏族自治州",\n        "1006": "海北藏族自治州",\n        "1007": "果洛藏族自治州",\n        "1008": "玉树藏族自治州",\n        "101": "北京",\n        "1101": "临夏回族自治州",\n        "1102": "甘南藏族自治州",\n        "1103": "白银",\n        "1104": "陇南",\n        "1105": "定西",\n        "1106": "平凉",\n        "1107": "金昌",\n        "1108": "酒泉",\n        "1109": "张掖",\n        "1110": "庆阳",\n        "1111": "兰州",\n        "1112": "武威",\n        "1113": "嘉峪关",\n        "1114": "天水",\n        "1201": "银川",\n        "1202": "固原",\n        "1203": "吴忠",\n        "1204": "中卫",\n        "1205": "石嘴山",\n        "1301": "商洛",\n        "1302": "安康",\n        "1303": "榆林",\n        "1304": "铜川",\n        "1305": "咸阳",\n        "1306": "西安",\n        "1307": "渭南",\n        "1308": "汉中",\n        "1309": "宝鸡",\n        "1310": "延安",\n        "1401": "长春",\n        "1402": "白城",\n        "1403": "松原",\n        "1404": "白山",\n        "1405": "吉林",\n        "1406": "延边朝鲜族自治州",\n        "1407": "四平",\n        "1408": "辽源",\n        "1409": "通化",\n        "1501": "铜陵",\n        "1502": "亳州",\n        "1503": "黄山",\n        "1504": "池州",\n        "1505": "合肥",\n        "1506": "淮北",\n        "1507": "滁州",\n        "1508": "宿州",\n        "1509": "淮南",\n        "1510": "蚌埠",\n        "1511": "六安",\n        "1512": "阜阳",\n        "1513": "芜湖",\n        "1514": "宣城",\n        "1515": "安庆",\n        "1516": "马鞍山",\n        "1601": "恩施土家族苗族自治州",\n        "1602": "仙桃",\n        "1603": "武汉",\n        "1604": "孝感",\n        "1605": "咸宁",\n        "1606": "十堰",\n        "1607": "天门",\n        "1608": "黄冈",\n        "1609": "宜昌",\n        "1610": "襄阳",\n        "1611": "黄石",\n        "1612": "荆门",\n        "1613": "随州",\n        "1614": "荆州",\n        "1615": "鄂州",\n        "1616": "神农架林区",\n        "1617": "潜江",\n        "1701": "株洲",\n        "1702": "邵阳",\n        "1703": "岳阳",\n        "1704": "张家界",\n        "1705": "怀化",\n        "1706": "衡阳",\n        "1707": "长沙",\n        "1708": "常德",\n        "1709": "郴州",\n        "1710": "永州",\n        "1711": "湘西土家族苗族自治州",\n        "1712": "湘潭",\n        "1713": "益阳",\n        "1714": "娄底",\n        "1801": "安顺",\n        "1802": "黔南布依族苗族自治州",\n        "1803": "铜仁",\n        "1804": "六盘水",\n        "1805": "贵阳",\n        "1806": "黔东南苗族侗族自治州",\n        "1807": "毕节",\n        "1808": "遵义",\n        "1809": "黔西南布依族苗族自治州",\n        "1901": "太原",\n        "1902": "长治",\n        "1903": "运城",\n        "1904": "晋中",\n        "1905": "忻州",\n        "1906": "朔州",\n        "1907": "晋城",\n        "1908": "阳泉",\n        "1909": "大同",\n        "1910": "临汾",\n        "1911": "吕梁",\n        "2001": "来宾",\n        "2002": "柳州",\n        "2003": "崇左",\n        "2004": "百色",\n        "2005": "河池",\n        "2006": "防城港",\n        "2007": "贺州",\n        "2008": "贵港",\n        "2009": "北海",\n        "201": "上海",\n        "2010": "南宁",\n        "2011": "桂林",\n        "2012": "玉林",\n        "2013": "钦州",\n        "2014": "梧州",\n        "2101": "凉山彝族自治州",\n        "2102": "攀枝花",\n        "2103": "乐山",\n        "2104": "遂宁",\n        "2105": "资阳",\n        "2106": "绵阳",\n        "2107": "自贡",\n        "2108": "德阳",\n        "2109": "雅安",\n        "2110": "达州",\n        "2111": "广元",\n        "2112": "广安",\n        "2113": "阿坝藏族羌族自治州",\n        "2114": "甘孜藏族自治州",\n        "2115": "成都",\n        "2116": "南充",\n        "2117": "泸州",\n        "2118": "内江",\n        "2119": "宜宾",\n        "2120": "巴中",\n        "2121": "眉山",\n        "2201": "郑州",\n        "2202": "三门峡",\n        "2203": "洛阳",\n        "2204": "开封",\n        "2205": "信阳",\n        "2206": "焦作",\n        "2207": "许昌",\n        "2208": "濮阳",\n        "2209": "济源",\n        "2210": "鹤壁",\n        "2211": "安阳",\n        "2212": "驻马店",\n        "2213": "新乡",\n        "2214": "南阳",\n        "2215": "漯河",\n        "2216": "平顶山",\n        "2217": "商丘",\n        "2218": "周口",\n        "2301": "石家庄",\n        "2302": "保定",\n        "2303": "沧州",\n        "2304": "衡水",\n        "2305": "唐山",\n        "2306": "邯郸",\n        "2307": "廊坊",\n        "2308": "秦皇岛",\n        "2309": "邢台",\n        "2310": "张家口",\n        "2311": "承德",\n        "2401": "福州",\n        "2402": "厦门",\n        "2403": "宁德",\n        "2404": "莆田",\n        "2405": "龙岩",\n        "2406": "三明",\n        "2407": "南平",\n        "2408": "泉州",\n        "2409": "漳州",\n        "2501": "南昌",\n        "2502": "上饶",\n        "2503": "赣州",\n        "2504": "新余",\n        "2505": "鹰潭",\n        "2506": "抚州",\n        "2507": "萍乡",\n        "2508": "宜春",\n        "2509": "景德镇",\n        "2510": "吉安",\n        "2511": "九江",\n        "2601": "珠海",\n        "2602": "东莞",\n        "2603": "江门",\n        "2604": "阳江",\n        "2605": "惠州",\n        "2606": "汕尾",\n        "2607": "梅州",\n        "2608": "清远",\n        "2609": "湛江",\n        "2610": "揭阳",\n        "2611": "广州",\n        "2612": "云浮",\n        "2613": "潮州",\n        "2614": "汕头",\n        "2615": "韶关",\n        "2616": "深圳",\n        "2617": "佛山",\n        "2618": "中山",\n        "2619": "肇庆",\n        "2620": "茂名",\n        "2621": "河源",\n        "2701": "呼和浩特",\n        "2702": "锡林郭勒盟",\n        "2703": "乌兰察布",\n        "2704": "通辽",\n        "2705": "包头",\n        "2706": "阿拉善盟",\n        "2707": "巴彦淖尔",\n        "2708": "兴安盟",\n        "2709": "鄂尔多斯",\n        "2710": "乌海",\n        "2711": "呼伦贝尔",\n        "2712": "赤峰",\n        "2801": "鹤岗",\n        "2802": "鸡西",\n        "2803": "哈尔滨",\n        "2804": "黑河",\n        "2805": "七台河",\n        "2806": "伊春",\n        "2807": "大兴安岭地区",\n        "2808": "牡丹江",\n        "2809": "绥化",\n        "2810": "齐齐哈尔",\n        "2811": "双鸭山",\n        "2812": "大庆",\n        "2813": "佳木斯",\n        "2901": "葫芦岛",\n        "2902": "营口",\n        "2903": "丹东",\n        "2904": "沈阳",\n        "2905": "抚顺",\n        "2906": "辽阳",\n        "2907": "大连",\n        "2908": "鞍山",\n        "2909": "盘锦",\n        "2910": "阜新",\n        "2911": "本溪",\n        "2912": "锦州",\n        "2913": "铁岭",\n        "2914": "朝阳",\n        "3001": "淄博",\n        "3002": "临沂",\n        "3003": "威海",\n        "3004": "莱芜",\n        "3005": "日照",\n        "3006": "济南",\n        "3007": "泰安",\n        "3008": "烟台",\n        "3009": "聊城",\n        "301": "天津",\n        "3010": "东营",\n        "3011": "菏泽",\n        "3012": "滨州",\n        "3013": "潍坊",\n        "3014": "德州",\n        "3015": "青岛",\n        "3016": "济宁",\n        "3017": "枣庄",\n        "3101": "南京",\n        "3102": "常州",\n        "3103": "苏州",\n        "3104": "无锡",\n        "3105": "盐城",\n        "3106": "镇江",\n        "3107": "连云港",\n        "3108": "宿迁",\n        "3109": "南通",\n        "3110": "徐州",\n        "3111": "淮安",\n        "3112": "扬州",\n        "3113": "泰州",\n        "401": "重庆",\n        "501": "宁波",\n        "502": "金华",\n        "503": "嘉兴",\n        "504": "绍兴",\n        "505": "湖州",\n        "506": "衢州",\n        "507": "舟山",\n        "508": "杭州",\n        "509": "温州",\n        "510": "丽水",\n        "511": "台州",\n        "601": "儋州",\n        "602": "定安县",\n        "603": "东方",\n        "604": "五指山",\n        "605": "屯昌县",\n        "606": "琼海",\n        "607": "澄迈县",\n        "608": "琼中黎族苗族自治县",\n        "609": "三亚",\n        "610": "白沙黎族自治县",\n        "611": "文昌",\n        "612": "陵水黎族自治县",\n        "613": "昌江黎族自治县",\n        "614": "保亭黎族苗族自治县",\n        "615": "临高县",\n        "616": "海口",\n        "617": "万宁",\n        "618": "乐东黎族自治县",\n        "701": "迪庆藏族自治州",\n        "702": "西双版纳傣族自治州",\n        "703": "临沧",\n        "704": "保山",\n        "705": "玉溪",\n        "706": "德宏傣族景颇族自治州",\n        "707": "红河哈尼族彝族自治州",\n        "708": "大理白族自治州",\n        "709": "丽江",\n        "710": "怒江傈僳族自治州",\n        "711": "普洱",\n        "712": "楚雄彝族自治州",\n        "713": "文山壮族苗族自治州",\n        "714": "昆明",\n        "715": "曲靖",\n        "716": "昭通",\n        "801": "拉萨",\n        "802": "昌都",\n        "803": "山南",\n        "804": "阿里地区",\n        "805": "林芝",\n        "806": "日喀则",\n        "807": "那曲地区",\n        "901": "喀什地区",\n        "902": "阿克苏地区",\n        "903": "和田地区",\n        "904": "哈密",\n        "905": "石河子",\n        "906": "吐鲁番",\n        "907": "博尔塔拉蒙古自治州",\n        "908": "巴音郭楞蒙古自治州",\n        "909": "昌吉回族自治州",\n        "910": "塔城地区",\n        "911": "克孜勒苏柯尔克孜自治州",\n        "912": "阿勒泰地区",\n        "913": "乌鲁木齐",\n        "914": "克拉玛依",\n        "915": "伊犁哈萨克自治州"\n    },\n    "t_sdk_hago_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game80/share1.jpg",\n            "title": "Play with me in Hago! https://go.onelink.me/7pHf/7dc6e868"\n        }\n    ],\n    "t_sdk_headline_jump_games": [\n        {\n            "id": "ttce78b8c5514341ba",\n            "index": "83",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/83.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/83.png"\n            ]\n        },\n        {\n            "id": "tt0ed0786d91eb92cc",\n            "index": "86",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/86.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/86.png"\n            ]\n        },\n        {\n            "id": "tt347f42c2ab55ec48",\n            "index": "70",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/70.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/70.png"\n            ]\n        },\n        {\n            "id": "tt3321459cac1b2a8e",\n            "index": "55v2",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/55v2.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/55v2.png"\n            ]\n        },\n        {\n            "id": "tt9e56e8eb017c109e",\n            "index": "56",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/56.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/56.png"\n            ]\n        },\n        {\n            "id": "tt4e2a3897d110084b",\n            "index": "82",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/82.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/82.png"\n            ]\n        },\n        {\n            "id": "ttbeffc84221d594a2",\n            "index": "75",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/75.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/75.png"\n            ]\n        },\n        {\n            "id": "tt2c515aecb37b1973",\n            "index": "74",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/74.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/74.png"\n            ]\n        },\n        {\n            "id": "tt78120eafe73835d4",\n            "index": "79",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/79.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/79.png"\n            ]\n        },\n        {\n            "id": "ttb51ec3a32a3476ce",\n            "index": "69",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/69.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/69.png"\n            ]\n        }\n    ],\n    "t_sdk_headline_jump_games_video_type": [\n        \n    ],\n    "t_sdk_headline_pay_code": {\n        \n    },\n    "t_sdk_headline_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_gammes_res/shareimage/game80/headline/share1.jpg",\n            "templateId": "1ebmm85ekci2lute0c",\n            "title": "快来拥有属于你的超萌小花仙~"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game80/headline/share2.jpg",\n            "templateId": "8dd2t2cnd6c1hbb2b0",\n            "title": "我为小花仙准备的晚餐，是不是很丰盛呢~"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game80/headline/share3.jpg",\n            "templateId": "act3i05n3nfeb2lfld",\n            "title": "原来小花仙还会唱歌呢~快来听听吧！"\n        }\n    ],\n    "t_sdk_headline_share_recorder_video_desc": [\n        [\n            "我的小花仙",\n            "抖音小游戏",\n            "我也想住在小花仙的花朵房子里！"\n        ],\n        [\n            "我的小花仙",\n            "抖音小游戏",\n            "我发现小花仙的衣服和动画片里一样！"\n        ],\n        [\n            "我的小花仙",\n            "抖音小游戏",\n            "领养一只小花仙，太幸福咯~"\n        ]\n    ],\n    "t_sdk_headline_share_video_cuttemplateid": {\n        \n    },\n    "t_sdk_headline_subscribe_templete_ids": {\n        "1": "MSG57438947d983961bd9a8fcc2ea78818fbd5f113718"\n    },\n    "t_sdk_headline_tt_navigate_to_mini_game_app_id_list": [\n        "ttce78b8c5514341ba",\n        "tt0ed0786d91eb92cc",\n        "tt347f42c2ab55ec48",\n        "tt3321459cac1b2a8e",\n        "tt9e56e8eb017c109e",\n        "tt4e2a3897d110084b",\n        "ttbeffc84221d594a2",\n        "tt2c515aecb37b1973",\n        "tt78120eafe73835d4",\n        "ttb51ec3a32a3476ce"\n    ],\n    "t_sdk_oppoqg_adv_tag_2_native_index": {\n        \n    },\n    "t_sdk_oppoqg_jump_games": [\n        {\n            "id": "com.ultralisk.game83.nearme.gamecenter",\n            "index": "83",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo1/83.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo2/83.png"\n            ]\n        },\n        {\n            "id": "com.ultralisk.game70.nearme.gamecenter",\n            "index": "70",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo1/70.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo2/70.png"\n            ]\n        },\n        {\n            "id": "com.ultralisk.game86.nearme.gamecenter",\n            "index": "86",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo1/86.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo2/86.png"\n            ]\n        },\n        {\n            "id": "cn.ultralisk.game56.kyx.nearme.gamecenter",\n            "index": "56",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo1/56.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo2/56.png"\n            ]\n        },\n        {\n            "id": "com.ultralisk.game75.nearme.gamecenter",\n            "index": "75",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo1/75.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo2/75.png"\n            ]\n        },\n        {\n            "id": "com.ultralisk.game74.nearme.gamecenter",\n            "index": "74",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo1/74.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo2/74.png"\n            ]\n        }\n    ],\n    "t_sdk_oppoqg_native_index_2_native_id": {\n        \n    },\n    "t_sdk_oppoqg_pay_code": {\n        \n    },\n    "t_sdk_oppoqg_show_banner_box_adv_tags": [\n        \n    ],\n    "t_sdk_oppoqg_show_inter_box_adv_tags": [\n        \n    ],\n    "t_sdk_privacyPolicy_dataArray": [\n        {\n            "name": "隐私政策",\n            "url": "https://gamesres.ultralisk.cn/notice/policy/oppoleishoupolicy.json"\n        }\n    ],\n    "t_sdk_qq_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game80/share1.jpg",\n            "title": "撒娇卖萌样样精通，可爱的小花仙在等你回家~"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game80/share2.jpg",\n            "title": "我为小花仙准备的晚餐，是不是很丰盛呢~"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game80/share3.jpg",\n            "title": "用小花仙的声音唱歌也太好听了吧，快来试试！"\n        }\n    ],\n    "t_sdk_record_duration_limit_object": {\n        "*": {\n            "max": 300,\n            "min": 3\n        },\n        "2": {\n            "max": 300,\n            "min": 15\n        }\n    },\n    "t_sdk_trim_adv_err_object": {\n        "*": "广告播放失败了，重新试试看吧！",\n        "baidu": {\n            "code||errCode": {\n                "3010003": "您的网络好像不够流畅，请更换到良好的网络环境再播放广告。",\n                "3010005||3010006": "正在为您播放广告，请稍等一会儿，不要重复点击。"\n            }\n        },\n        "headline||weixin||qq": {\n            "code||errCode": {\n                "1004": "暂时没有适合您观看的广告，请稍等一会儿再试吧！"\n            }\n        },\n        "oppoqg": {\n            "(this.errCode==1001 || this.errCode == 1004)&&errMsg": {\n                "/10001/||/10100/||/10101/||/10403/": "您的网络好像不够流畅，请更换到良好的网络环境再播放广告。",\n                "/10405/": "您的操作系统版本太低，不能播放广告。",\n                "/10406/": "需要连接到 Wifi 网络",\n                "/11002/": "这个广告只能在OPPO手机上播放，请确认您的机型。",\n                "/11003/": "暂时无法播放广告，请稍等一会儿再试吧1！"\n            }\n        },\n        "vivo": {\n            "code||errCode": {\n                "-100||101||500": "您的网络好像不够流畅，请更换到良好的网络环境再播放广告。",\n                "-3||108||30005": "暂时无法播放广告，请稍等一会儿再试吧！",\n                "30007": "暂时无法播放广告，请稍等一会儿再试吧！",\n                "30010": "广告播放失败了，可能是是由于您经常关闭广告造成的，稍等一会儿再试吧。"\n            }\n        }\n    },\n    "t_sdk_uc_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game80/share1.jpg",\n            "title": "撒娇卖萌样样精通，可爱的小花仙在等你回家~"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game80/share2.jpg",\n            "title": "我为小花仙准备的晚餐，是不是很丰盛呢~"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game80/share3.jpg",\n            "title": "用小花仙的声音唱歌也太好听了吧，快来试试！"\n        }\n    ],\n    "t_sdk_vivo_pay_code": {\n        \n    },\n    "t_sdk_vivo_share_list": [\n        ""\n    ],\n    "t_sdk_vivo_show_banner_box_adv_tags": [\n        \n    ],\n    "t_sdk_webreview_cdk_goodsid": [\n        {\n            "count": 100,\n            "goodsid": 2\n        }\n    ],\n    "t_sdk_weixin_grid_adunits": {\n        "list": "",\n        "list_roll": "",\n        "single": "",\n        "table": ""\n    },\n    "t_sdk_weixin_jump_games": [\n        {\n            "id": "wxe22e720e831505df",\n            "index": "110",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/110.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/110.png"\n            ]\n        },\n        {\n            "id": "wxe6ff4d6d0f759a9e",\n            "index": "100",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/100.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/100.png"\n            ]\n        },\n        {\n            "id": "wxc22ab8a3dd9ba848",\n            "index": "83",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/83.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/83.png"\n            ]\n        },\n        {\n            "id": "wx2ec0b7f791ec8c25",\n            "index": "86",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/86.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/86.png"\n            ]\n        },\n        {\n            "id": "wx64bd4e57ca56d886",\n            "index": "55v2",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/55v2.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/55v2.png"\n            ]\n        },\n        {\n            "id": "wxce3aa2f3beb320cd",\n            "index": "114",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/114.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/114.png"\n            ]\n        },\n        {\n            "id": "wxa0ba65844f626111",\n            "index": "82",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/82.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/82.png"\n            ]\n        },\n        {\n            "id": "wx7b9b74c53dd576ac",\n            "index": "74",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/74.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/74.png"\n            ]\n        },\n        {\n            "id": "wxe96631b5cbe4ffc1",\n            "index": "79",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/79.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/79.png"\n            ]\n        },\n        {\n            "id": "wx4f87cd56ed816382",\n            "index": "55",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/55.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/55.png"\n            ]\n        },\n        {\n            "id": "wx1189f4046873d2d9",\n            "index": "69",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/69.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/69.png"\n            ]\n        },\n        {\n            "id": "wx6e4c7afc700917fc",\n            "index": "78",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/78.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/78.png"\n            ]\n        },\n        {\n            "id": "wx34cddecc3621aa58",\n            "index": "76",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/76.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/76.png"\n            ]\n        },\n        {\n            "id": "wx0fb566f4c045797b",\n            "index": "73",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/73.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/73.png"\n            ]\n        },\n        {\n            "id": "wxa743a1981387bc73",\n            "index": "85",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/85.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/85.png"\n            ]\n        },\n        {\n            "id": "wx43a316abd6205af7",\n            "index": "63",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/63.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/63.png"\n            ]\n        },\n        {\n            "id": "wxeab8875f495561a5",\n            "index": "53",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/53.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/53.png"\n            ]\n        },\n        {\n            "id": "wxc9595ac3ee5ac49f",\n            "index": "105",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/105.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/105.png"\n            ]\n        }\n    ],\n    "t_sdk_weixin_navigate_to_mini_game_app_id_list": [\n        \n    ],\n    "t_sdk_weixin_pay_code": {\n        \n    },\n    "t_sdk_weixin_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game80/share1.jpg",\n            "title": "撒娇卖萌样样精通，可爱的小花仙在等你回家~"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game80/share2.jpg",\n            "title": "我为小花仙准备的晚餐，是不是很丰盛呢~"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game80/share3.jpg",\n            "title": "用小花仙的声音唱歌也太好听了吧，快来试试！"\n        }\n    ],\n    "t_sdk_weixin_subscribe_templete_ids": {\n        "1": "quiV82Xv1lP_YfrOPQJZ52fziJIs_K35lM5rbJ-FUz8",\n        "2": "84SZe_hSBMLDWF-ODmIX1nyT_Ye_n3Kd__RGqmcRM_0",\n        "3": "va4ND_a0qCe4DWwHqCbp2TTxgjaLBE6gojVTxc8pmLc"\n    },\n    "targetCreatorBranch": "",\n    "targetCreatorExePath": "",\n    "targetCreatorGitAddr": "",\n    "targetProjectBranch": "v1_i18n_h5_release",\n    "targetProjectGitAddr": "ude2/prj.game80",\n    "tempCreatorProjectPaths": [\n        [\n            ".laya/",\n            ".laya/"\n        ],\n        [\n            "bin/",\n            "bin/",\n            [\n                "**/vconsole.*"\n            ]\n        ],\n        [\n            "declare/",\n            "declare/"\n        ],\n        [\n            "laya/",\n            "laya/"\n        ],\n        [\n            "libs/",\n            "libs/"\n        ],\n        [\n            "node_modules/",\n            "node_modules/"\n        ],\n        [\n            "src/",\n            "src/"\n        ],\n        [\n            "package-lock.json",\n            ""\n        ],\n        [\n            "prj.game80.laya",\n            ""\n        ],\n        [\n            "tsconfig.json",\n            ""\n        ]\n    ],\n    "tempProjectName": "laya_proj",\n    "autoUploadPack": false,\n    "B_OBFUSCATOR_CCONFIG": false,\n    "B_SHOW_LICENCE_INFO_ON_LOADING": false,\n    "build_laya_web_module_config": {\n        "embedWebDebugger": false,\n        "title": "我的小花仙"\n    },\n    "i_sdk_licence_info_mode": 1,\n    "s_sdk_cop_channel_id": "169",\n    "s_sdk_licence_info": "",\n    "t_sdk_increment_fields": [\n        \n    ],\n    "s_sdk_cop_version": "0",\n    "_target_project_branch": "v1_i18n_h5_release",\n    "_target_project_log": "2021-03-16 16:21:17 +0800-gengxiaoxiao-4040be285",\n    "_target_last_commit_time": 1615882877,\n    "prjVersion": "4040be285",\n    "rootPath": "D:/ulwork/ulsdk/",\n    "rootSdkPath": "D:/ulwork/ulsdk/prj.sdk.html5/",\n    "gitRepoPath": "D:/ulwork/ulsdk/h5_games_res/",\n    "taskDate": "2021_12_21",\n    "taskTick": "2021_12_21_11_06_59",\n    "taskTickShort": "1221_110659",\n    "taskName": "weiyou",\n    "configName": "task_game80_wdxhx_v1",\n    "targetPath": "D:/ulwork/ulsdk/h5_out/80_weiyou_1221_110659/",\n    "resCachePath": "D:/ulwork/ulsdk/h5_res_cache/prj.game80/",\n    "packagePath": "D:/ulwork/ulsdk/prj.games.html5.channels.packages/prj.game80/prj.game80_v1_i18n_h5_release_weiyou_1221_110659/",\n    "buildDisabled": false,\n    "creatorExePath": "",\n    "taskJsonPath": "D:/ulwork/ulsdk/prj.games.html5.channels.tasks/task_game80_wdxhx_v1/task.json",\n    "tempProjPath": "D:/ulwork/ulsdk/h5_out/80_weiyou_1221_110659/laya_proj/",\n    "moduleList": "common,build_laya_web,weiyou",\n    "envCheckResult": [\n        \n    ]\n}'), ULErrorRuleLogic, AdvLifeCycle;
    class ULTimer {
        constructor(e, t, a) {
            this._repeatCount = -1,
            this._span = 1,
            this._callback = null,
            this._intervalId = null,
            this._count = 0,
            this._beginTime = -1,
            this._usedTime = 0,
            this._span = e,
            this._repeatCount = t,
            this._callback = a
        }
        static callLater(e, t) {
            new ULTimer(e,1,t).start()
        }
        static callLoop(e, t) {
            new ULTimer(e,-1,t).start()
        }
        _onSpan() {
            if (this._count++,
            this._usedTime = ULTools.time() - this._beginTime,
            this._callback)
                try {
                    this._callback(this)
                } catch (e) {
                    ULSDK.console.warn("警告] ULTimer._onSpan callback has error", e)
                }
            this._repeatCount >= 0 && this._count >= this._repeatCount && this.stop()
        }
        isRunning() {
            return null != this._intervalId
        }
        get count() {
            return this._count
        }
        get span() {
            return this._span
        }
        get usedTime() {
            return this._usedTime
        }
        start() {
            return this.stop(),
            this._callback ? (this._beginTime = ULTools.time(),
            this._count = 0,
            this._intervalId = setInterval(this._onSpan.bind(this), 1e3 * this.span),
            this) : (ULSDK.console.warn("警告] ULTimer.start callback未设置！"),
            this)
        }
        stop() {
            return null != this._intervalId && (clearInterval(this._intervalId),
            this._intervalId = null),
            this
        }
    }
    class ULStorageManager {
        constructor() {
            this.cacheStorage = {}
        }
        static getInstance() {
            return this._instance || (this._instance = new ULStorageManager),
            this._instance
        }
        getStorage(e) {
            let t = ULEventDispatcher.getInstance().dispatchWithReturn(ULConst.CMD_SDK_GET_STORAGE, {
                key: e
            });
            return ULSDK.console.log(ULTools.format("ULStorageManager.getStorage(%s) => [%s]", e, t)),
            null == t ? t = this.cacheStorage[e] : this.cacheStorage[e] = t,
            t
        }
        setStorage(e, t) {
            this.cacheStorage[e] = t,
            ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_SET_STORAGE, {
                key: e,
                data: t
            }) || ULSDK.console.warn("ULStorageManager.setStorage 未找到实现！")
        }
    }
    ULStorageManager._instance = null;
    class ULWebSocket {
        constructor(e) {
            if (this.socketingWS = null,
            this.isOpening = !1,
            this.socketMsgCache = [],
            this._isAutoClearCache = !1,
            "WebSocket"in window) {
                var t = new WebSocket(e);
                this.socketingWS = t;
                let a = this;
                t.onopen = function(e) {
                    a.isOpening = !0,
                    a.onopen(e)
                }
                ,
                t.onmessage = function(e) {
                    a.onmessage(e)
                }
                ,
                t.onclose = function(e) {
                    a.isOpening = !1,
                    a.socketingWS = null,
                    a.socketMsgCache = [],
                    a.onclose(e)
                }
                ,
                t.onerror = function(e) {
                    a.isOpening = !1,
                    a.socketingWS = null,
                    a.socketMsgCache = [],
                    a.onerror(e)
                }
            }
        }
        set isAutoClearCache(e) {
            e != this._isAutoClearCache && (this._isAutoClearCache = e,
            this._isAutoClearCache ? this.intervalId = setInterval(()=>{
                this.clearCache()
            }
            , 30) : clearInterval(this.intervalId))
        }
        close(e, t) {
            this.isOpening && this.socketingWS && (this.socketingWS.close(),
            this.isOpening = !1,
            this.socketingWS = null)
        }
        send(e) {
            if (!this.socketingWS)
                return;
            let t = null;
            try {
                t = JSON.stringify(e)
            } catch (e) {
                t = JSON.stringify({
                    type: 3,
                    data: e
                })
            } finally {
                !this.isOpening || this._isAutoClearCache ? (this.socketMsgCache.push(t),
                this.isAutoClearCache = !0) : this.socketingWS.send(t)
            }
        }
        clearCache() {
            if (this.socketingWS && this.socketMsgCache.length) {
                if (this.isOpening) {
                    let e = this.socketMsgCache.shift();
                    this.socketingWS.send(e)
                }
            } else
                this.isAutoClearCache = !1
        }
    }
    class ULTools {
        static time() {
            return (new Date).getTime() / 1e3
        }
        static timeInDay() {
            let e = this.time()
              , t = new Date(1e3 * e);
            return t.setHours(0),
            t.setMinutes(0),
            t.setSeconds(0),
            t.setMilliseconds(0),
            e - t.getTime() / 1e3
        }
        static isOneDay(e, t) {
            var a = new Date(1e3 * e)
              , i = new Date(1e3 * t);
            return a.getFullYear() == i.getFullYear() && a.getMonth() == i.getMonth() && a.getDate() == i.getDate()
        }
        static isOneMonth(e, t) {
            var a = new Date(1e3 * e)
              , i = new Date(1e3 * t);
            return a.getFullYear() == i.getFullYear() && a.getMonth() == i.getMonth()
        }
        static getObjSize(e) {
            if (!e)
                return 0;
            if (Array.isArray(e))
                return e.length;
            let t = 0;
            return this.forEachMap(e, (e,a)=>{
                t++
            }
            ),
            t
        }
        static random(e, t) {
            return null == e && null == t ? Math.random() : null == t ? Math.floor(Math.random() * e + 1) : Math.floor(Math.random() * (t - e + 1) + e)
        }
        static scaleInRange(e, t, a, i, s) {
            return t < a ? (e < t && (e = t),
            e > a && (e = a)) : (e < a && (e = a),
            e > t && (e = t)),
            (e - t) / (a - t) * (s - i) + i
        }
        static clampf(e, t, a) {
            return e < t ? t : e > a ? a : e
        }
        static calcWheelTarget(e, t) {
            let a = 0;
            for (let i = 0; i < e.length; i++) {
                const s = e[i];
                let o = parseInt(s[t]);
                if (isNaN(o))
                    return ULSDK.console.warn(this.format("Tools.calcWheelTarget weight field not found! key=[%s]", t)),
                    null;
                a += o
            }
            let i = this.random(a);
            for (let a = 0; a < e.length; a++) {
                const s = e[a];
                let o = parseInt(s[t]);
                if (i <= o)
                    return s;
                i -= o
            }
            return null
        }
        static sortArrayByField(e, t) {
            t = "string" == typeof t ? [t] : t;
            let a = [];
            for (let e in t) {
                let i = t[e];
                if (i && "" != i)
                    if ("-" === i.substring(0, 1)) {
                        let e = i.substring(1, i.length);
                        e && "" != e && a.push([e, !0])
                    } else
                        a.push([i, !1])
            }
            let i = [];
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                i.push(a)
            }
            return i.sort((e,t)=>{
                let i = 0;
                for (let s in a) {
                    let o = a[s]
                      , n = o[0]
                      , r = o[1]
                      , l = e[n]
                      , h = t[n];
                    if (null != l && 0 != (i = r ? h - l : l - h))
                        return i
                }
                return i
            }
            ),
            i
        }
        static bubbleSort(e, t) {
            for (var a = e.length, i = 0; i < a; i++)
                for (var s = 0; s < a - 1 - i; s++) {
                    if (t(e[s], e[s + 1]) > 0) {
                        var o = e[s + 1];
                        e[s + 1] = e[s],
                        e[s] = o
                    }
                }
            return e
        }
        static forEachMap(e, t) {
            if (!e)
                return;
            let a = Object.keys(e);
            for (let i = 0; i < a.length; i++) {
                let s = a[i]
                  , o = e[s];
                if (null != o && t(s, o))
                    break
            }
        }
        static formatTime(e, t) {
            let a = Math.floor(e / 3600)
              , i = Math.floor(e / 60) % 60
              , s = Math.ceil(e) % 60;
            return t.match("%h") && (t = t.replace("%h", a.toString())),
            t.match("%H") && (t = t.replace("%H", this.format("%02d", a))),
            t.match("%m") && (t = t.replace("%m", i.toString())),
            t.match("%M") && (t = t.replace("%M", this.format("%02d", i))),
            t.match("%s") && (t = t.replace("%s", s.toString())),
            t.match("%S") && (t = t.replace("%S", this.format("%02d", s))),
            t
        }
        static formatDate(e, t) {
            let a = {
                "M+": e.getMonth() + 1,
                "d+": e.getDate(),
                "H+": e.getHours(),
                "m+": e.getMinutes(),
                "s+": e.getSeconds(),
                "q+": Math.floor((e.getMonth() + 3) / 3),
                "S+": e.getMilliseconds()
            }
              , i = t;
            for (var s in /(y+)/.test(i) && (i = i.replace(RegExp.$1, (e.getFullYear() + "").substr(4 - RegExp.$1.length))),
            a)
                new RegExp("(" + s + ")").test(i) && (i = i.replace(RegExp.$1, 1 == RegExp.$1.length ? a[s] : ("00" + a[s]).substr(("" + a[s]).length)));
            return i
        }
        static generateUUID() {
            let e = (new Date).getTime();
            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, t=>{
                var a = (e + 16 * Math.random()) % 16 | 0;
                return e = Math.floor(e / 16),
                ("x" == t ? a : 3 & a | 8).toString(16)
            }
            )
        }
        static compressUuid(e) {
            let t = "0123456789abcdef".split("")
              , a = {};
            for (let e = 0; e < t.length; e++)
                a[t[e]] = e;
            let i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split("")
              , s = {};
            for (let e = 0; e < i.length; e++)
                s[i[e]] = e;
            let o = (e = e.replace(/-/g, "")).split("")
              , n = [];
            n.push(o[0]),
            n.push(o[1]);
            for (let e = 2; e < o.length; e += 3) {
                let t = a[o[e]]
                  , s = a[o[e + 1]]
                  , r = a[o[e + 2]];
                n.push(i[t << 2 | s >> 2]),
                n.push(i[(3 & s) << 4 | r])
            }
            return n.join("")
        }
        static decompressUuid(e) {
            let t = e.split("");
            if (t.length < 22)
                return e;
            let a = "0123456789abcdef".split("")
              , i = {};
            for (let e = 0; e < a.length; e++)
                i[a[e]] = e;
            let s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split("")
              , o = {};
            for (let e = 0; e < s.length; e++)
                o[s[e]] = e;
            let n = [];
            n.push(t[0]),
            n.push(t[1]);
            for (let e = 2; e < t.length; e += 2) {
                let i = o[t[e]]
                  , s = o[t[e + 1]];
                n.push(a[i >> 2]),
                n.push(a[(3 & i) << 2 | s >> 4]),
                n.push(a[15 & s])
            }
            return n.splice(8, 0, "-"),
            n.splice(13, 0, "-"),
            n.splice(18, 0, "-"),
            n.splice(23, 0, "-"),
            n.join("")
        }
        static getType(e) {
            return {
                "[object Boolean]": "boolean",
                "[object Number]": "number",
                "[object String]": "string",
                "[object Function]": "function",
                "[object Array]": "array",
                "[object Date]": "date",
                "[object RegExp]": "regExp",
                "[object Undefined]": "undefined",
                "[object Null]": "null",
                "[object Object]": "object"
            }[Object.prototype.toString.call(e)]
        }
        static clone(e) {
            let t, a = this.getType(e);
            if (window.cc && e instanceof window.cc.Node)
                return e;
            if ("object" === a)
                t = {};
            else {
                if ("array" !== a)
                    return e;
                t = []
            }
            if ("array" === a)
                for (let a = 0, i = e.length; a < i; a++)
                    t.push(this.clone(e[a]));
            else if ("object" === a)
                for (let a in e)
                    t[a] = this.clone(e[a]);
            return t
        }
        static toArray(e) {
            return Array.isArray(e) ? e : []
        }
        static sumNumberArray(e) {
            if (!Array.isArray(e))
                return 0;
            let t = 0;
            for (let a = 0; a < e.length; a++) {
                const i = e[a];
                isNaN(i) || (t += i)
            }
            return t
        }
        static getRandomValueInArray(e) {
            return Array.isArray(e) ? e[this.random(e.length) - 1] : null
        }
        static _convert(e, t) {
            e.sign = t ? "" : e.negative ? "-" : e.sign;
            var a = e.min - e.argument.length + 1 - e.sign.length
              , i = new Array(a < 0 ? 0 : a).join(e.pad);
            return e.left ? "0" == e.pad || t ? e.sign + e.argument + i.replace(/0/g, " ") : e.sign + e.argument + i : "0" == e.pad || t ? e.sign + i + e.argument : i + e.sign + e.argument
        }
        static format(...e) {
            if (void 0 === arguments)
                return null;
            if (arguments.length < 1)
                return null;
            if ("string" != typeof arguments[0])
                return null;
            if ("undefined" == typeof RegExp)
                return null;
            for (var t = arguments[0], a = new RegExp(/(%([%]|(\-)?(\+|\x20)?(0)?(\d+)?(\.(\d)?)?([bcdfosxX])))/g), i = new Array, s = new Array, o = 0, n = 0, r = 0, l = 0, h = "", d = null; d = a.exec(t); )
                d[9] && (o += 1),
                n = l,
                r = a.lastIndex - d[0].length,
                s[s.length] = t.substring(n, r),
                l = a.lastIndex,
                i[i.length] = {
                    match: d[0],
                    left: !!d[3],
                    sign: d[4] || "",
                    pad: d[5] || " ",
                    min: d[6] || 0,
                    precision: d[8],
                    code: d[9] || "%",
                    negative: parseInt(arguments[o]) < 0,
                    argument: String(arguments[o])
                };
            if (s[s.length] = t.substring(l),
            0 == i.length)
                return t;
            if (arguments.length - 1 < o)
                return null;
            d = null;
            var c = null
              , g = null;
            for (g = 0; g < i.length; g++)
                "%" == i[g].code ? c = "%" : "b" == i[g].code ? (i[g].argument = String(Math.abs(parseInt(i[g].argument)).toString(2)),
                c = this._convert(i[g], !0)) : "c" == i[g].code ? (i[g].argument = String(String.fromCharCode(Math.abs(parseInt(i[g].argument)))),
                c = this._convert(i[g], !0)) : "d" == i[g].code ? (i[g].argument = String(Math.abs(parseInt(i[g].argument))),
                c = this._convert(i[g])) : "f" == i[g].code ? (i[g].argument = String(Math.abs(parseFloat(i[g].argument)).toFixed(i[g].precision ? i[g].precision : 6)),
                c = this._convert(i[g])) : "o" == i[g].code ? (i[g].argument = String(Math.abs(parseInt(i[g].argument)).toString(8)),
                c = this._convert(i[g])) : "s" == i[g].code ? (i[g].argument = i[g].argument.substring(0, i[g].precision ? i[g].precision : i[g].argument.length),
                c = this._convert(i[g], !0)) : "x" == i[g].code ? (i[g].argument = String(Math.abs(parseInt(i[g].argument)).toString(16)),
                c = this._convert(i[g])) : "X" == i[g].code ? (i[g].argument = String(Math.abs(parseInt(i[g].argument)).toString(16)),
                c = this._convert(i[g]).toUpperCase()) : c = i[g].match,
                h += s[g],
                h += c;
            return h += s[g]
        }
        static httpGet(e) {
            let t = new XMLHttpRequest
              , a = new ULTimer(e.timeoutMillisecond / 1e3,1,a=>{
                if (t) {
                    let a = t;
                    t = null,
                    a.abort(),
                    e.fail instanceof Function && e.fail("timeout")
                }
            }
            );
            t.onreadystatechange = function(i) {
                if (t && 4 == t.readyState)
                    if (a.stop(),
                    200 == t.status) {
                        let a = t.responseText;
                        e.success instanceof Function && e.success(a)
                    } else
                        ULSDK.console.warn("ULTools.httpGet on error:", t.readyState, t.status),
                        e.fail instanceof Function && e.fail(t.status.toString())
            }
            ,
            t.ontimeout = function(a) {
                if (t) {
                    let a = t;
                    t = null,
                    a.abort(),
                    e.fail instanceof Function && e.fail("timeout")
                }
            }
            ,
            t.onerror = function(a) {
                if (t) {
                    let i = t;
                    t = null,
                    i.abort(),
                    e.fail instanceof Function && e.fail("on error :" + a)
                }
            }
            ,
            a.start(),
            t.open("get", e.url),
            t.send()
        }
        static httpPost(e) {
            e.contentType = e.contentType || "application/x-www-form-urlencoded;charset=utf-8";
            let t = new XMLHttpRequest
              , a = new ULTimer(e.timeoutMillisecond / 1e3,1,a=>{
                if (t) {
                    let a = t;
                    t = null,
                    a.abort(),
                    e.fail instanceof Function && e.fail("timeout")
                }
            }
            );
            t.onreadystatechange = function(i) {
                if (t && 4 == t.readyState)
                    if (a.stop(),
                    200 == t.status) {
                        let a = t.responseText;
                        e.success instanceof Function && e.success(a)
                    } else
                        ULSDK.console.warn("ULTools.httpPost on error:", t.readyState, t.status),
                        e.fail instanceof Function && e.fail(t.status.toString())
            }
            ,
            t.ontimeout = function(a) {
                if (t) {
                    let a = t;
                    t = null,
                    a.abort(),
                    e.fail instanceof Function && e.fail("timeout")
                }
            }
            ,
            t.onerror = function(a) {
                if (t) {
                    let i = t;
                    t = null,
                    i.abort(),
                    e.fail instanceof Function && e.fail("on error :" + a)
                }
            }
            ,
            a.start(),
            t.open("post", e.url, !0),
            t.setRequestHeader("Content-Type", e.contentType),
            t.send(e.postData)
        }
        static stringToByte(e) {
            var t, a, i = new Array;
            t = e.length;
            for (var s = 0; s < t; s++)
                (a = e.charCodeAt(s)) >= 65536 && a <= 1114111 ? (i.push(a >> 18 & 7 | 240),
                i.push(a >> 12 & 63 | 128),
                i.push(a >> 6 & 63 | 128),
                i.push(63 & a | 128)) : a >= 2048 && a <= 65535 ? (i.push(a >> 12 & 15 | 224),
                i.push(a >> 6 & 63 | 128),
                i.push(63 & a | 128)) : a >= 128 && a <= 2047 ? (i.push(a >> 6 & 31 | 192),
                i.push(63 & a | 128)) : i.push(255 & a);
            return i
        }
        static httpPostEncryption(e) {
            let t = new XMLHttpRequest
              , a = new ULTimer(e.timeoutMillisecond / 1e3,1,a=>{
                if (t) {
                    let a = t;
                    t = null,
                    a.abort(),
                    e.fail instanceof Function && e.fail("timeout")
                }
            }
            );
            t.onreadystatechange = function(i) {
                if (t && 4 == t.readyState)
                    if (a.stop(),
                    200 == t.status) {
                        let a = t.responseText;
                        e.success instanceof Function && e.success(a)
                    } else
                        console.warn("ULTools.httpPost on error:", t.readyState, t.status),
                        e.fail instanceof Function && e.fail(t.status.toString())
            }
            ,
            t.ontimeout = function(a) {
                if (t) {
                    let a = t;
                    t = null,
                    a.abort(),
                    e.fail instanceof Function && e.fail("timeout")
                }
            }
            ,
            t.onerror = function(a) {
                if (t) {
                    let i = t;
                    t = null,
                    i.abort(),
                    e.fail instanceof Function && e.fail("on error :" + a)
                }
            }
            ;
            let i = this.stringToByte(e.postString)
              , s = i.length % 127 || 127;
            var o = new ArrayBuffer(i.length)
              , n = new Uint8Array(o);
            for (let e = 0; e < i.length; e++)
                i[e] = i[e] ^ s,
                n[e] = i[e];
            a.start(),
            t.open("post", e.url, !0),
            t.setRequestHeader("isEncrypt", "1"),
            t.send(o)
        }
        static httpJsonp(e) {
            if (!e || !e.url)
                throw new Error("参数不合法");
            let t = ULTools.format("jsonp_%d", ULTools.random(1e6));
            e.data.callback = t;
            let a = document.getElementsByTagName("head")[0]
              , i = [];
            this.forEachMap(e.data, (e,t)=>{
                i.push(ULTools.format("%s=%s", encodeURIComponent(e), encodeURIComponent(t)))
            }
            );
            let s = i.join("&")
              , o = document.createElement("script");
            a.appendChild(o);
            let n = new ULTimer(e.timeoutMillisecond / 1e3,1,i=>{
                window[t] && (window[t] = null,
                a.removeChild(o),
                e.fail && e.fail("timeout"))
            }
            );
            window[t] = function(i) {
                window[t] && (a.removeChild(o),
                n.stop(),
                window[t] = null,
                e.success && e.success(i))
            }
            ,
            o.src = e.url + "?" + s
        }
        static loadJs(e, t, a) {
            let i = document.createElement("script");
            i.type = "text/javascript",
            i.addEventListener("load", e=>{
                t instanceof Function && t()
            }
            ),
            i.src = e,
            i.defer = "defer",
            a && (i.crossOrigin = "anonymous"),
            document.getElementsByTagName("head")[0].appendChild(i)
        }
        static getQueryString(e) {
            var t = new RegExp("(^|&)" + e + "=([^&]*)(&|$)")
              , a = window.location.search.substr(1).match(t);
            return null != a ? decodeURI(a[2]) : null
        }
        static createRandomString(e) {
            e = e || 32;
            let t = "ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz123456789"
              , a = t.length
              , i = "";
            for (let s = 0; s < e; s++)
                i += t.charAt(Math.floor(Math.random() * a));
            return i
        }
        static createRandomUserId() {
            let e = this.generateUUID();
            return this.compressUuid(e)
        }
        static createRandomOrderId() {
            return (new Date).getTime() + this.createRandomString(7)
        }
        static compareVersion(e, t) {
            let a = e.split(".")
              , i = t.split(".");
            const s = Math.max(a.length, i.length);
            for (; a.length < s; )
                a.push("0");
            for (; i.length < s; )
                i.push("0");
            for (let e = 0; e < s; e++) {
                const t = parseInt(a[e])
                  , s = parseInt(i[e]);
                if (t > s)
                    return 1;
                if (t < s)
                    return -1
            }
            return 0
        }
        static _hack_console_print_method() {
            let e = function(e, t) {
                return function(...a) {
                    t(...a),
                    ULTools.socketingWS && ULTools.socketingWS.send({
                        type: e,
                        data: a
                    })
                }
            };
            this._console_log || (this._console_log = e(1, console.log)),
            this._console_warn || (this._console_warn = e(2, console.warn)),
            this._console_error || (this._console_error = e(3, console.error)),
            window.cc && (this._cc_log || (this._cc_log = e(1, window.cc.log)),
            this._cc_warn || (this._cc_warn = e(2, window.cc.warn)),
            this._cc_error || (this._cc_error = e(3, window.cc.error)));
            let t = ULConfig.getConfig();
            console.log = t.i_sdk_debug_mode < ULConst.CONSOLE_OUTPUT_LEVEL_LOG ? ()=>{}
            : this._console_log,
            console.warn = t.i_sdk_debug_mode < ULConst.CONSOLE_OUTPUT_LEVEL_WARN ? ()=>{}
            : this._console_warn,
            console.error = t.i_sdk_debug_mode < ULConst.CONSOLE_OUTPUT_LEVEL_ERROR ? ()=>{}
            : this._console_error,
            window.cc && (window.cc.log = t.i_sdk_debug_mode < ULConst.CONSOLE_OUTPUT_LEVEL_LOG ? ()=>{}
            : this._cc_log,
            window.cc.warn = t.i_sdk_debug_mode < ULConst.CONSOLE_OUTPUT_LEVEL_WARN ? ()=>{}
            : this._cc_warn,
            window.cc.error = t.i_sdk_debug_mode < ULConst.CONSOLE_OUTPUT_LEVEL_ERROR ? ()=>{}
            : this._cc_error)
        }
        static _start_console_print_LAN() {
            if (ULTools.socketingWS)
                return;
            let e = ULConfig.getConfig().s_sdk_lan_debug_address.length > 10 ? ULConfig.getConfig().s_sdk_lan_debug_address : ""
              , t = localStorage.getItem("console_lan_id") || ULStorageManager.getInstance().getStorage("console_lan_id") || e;
            if (ULSDK.console.log("console_lan_id:", t),
            t && t.length && "WebSocket"in window) {
                ULSDK.console.log("支持WebSocket局域网调试");
                var a = `ws://${t}:3002/websocket/test`
                  , i = null;
                try {
                    (i = new ULWebSocket(a)).onopen = function() {
                        ULSDK.console.log("Connection open ..."),
                        ULSdkManager.getInstance().moduleCheckerManager.addDebugInfo("console_lan_id", "已开启局域网调试")
                    }
                    ,
                    i.onmessage = function(e) {
                        ULSDK.console.log("Received Message:" + e.data)
                    }
                    ,
                    i.onclose = function() {
                        ULSDK.console.log("Connection closed"),
                        ULSdkManager.getInstance().moduleCheckerManager.removeDebugInfo("console_lan_id"),
                        ULTools.socketingWS = null
                    }
                    ,
                    i.onerror = function(e) {
                        ULSDK.console.error("Connection onerror:", e),
                        ULSdkManager.getInstance().moduleCheckerManager.removeDebugInfo("console_lan_id"),
                        ULTools.socketingWS = null
                    }
                } catch (e) {
                    i = null,
                    ULSDK.console.log("局域网调试错误:", JSON.stringify(e))
                } finally {
                    if (null == i)
                        return;
                    ULTools.socketingWS = i
                }
            } else
                ULSDK.console.log("不支持WebSocket局域网调试")
        }
        static _close_console_print_LAN() {
            ULTools.socketingWS && (ULTools.socketingWS.close(),
            ULTools.socketingWS = null)
        }
        static jsonValToStr(e) {
            if (!e)
                return e;
            let t = {}
              , a = Object.keys(e);
            for (let i = 0; i < a.length; i++) {
                let s = a[i]
                  , o = e[s];
                o = "object" == typeof o ? JSON.stringify(o) : String(o),
                t[s] = o
            }
            return t
        }
        static recordVideoTimeLimit(e, t) {
            let a = ULConfig.getConfig().t_sdk_record_duration_limit_object || {}
              , i = a["string" == typeof e ? e : "number" == typeof e ? e.toString() : ""] || a["*"] || {}
              , s = i.min || 0
              , o = i.max || 1e4;
            return s > t ? {
                isConform: !1,
                msg: `录屏时间少于 ${s}秒`
            } : o < t ? {
                isConform: !1,
                msg: `录屏时间大于 ${o}秒`
            } : {
                isConform: !0,
                msg: ""
            }
        }
    }
    ULTools.socketingWS = null;
    class ULConfig {
        static init() {
            this.bInit = !0,
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, ULConst.PRIORITY_NONE, this.onCmdSdkCollectionModuleCheckerConfig.bind(this))
        }
        static getConfig() {
            return this.bInit || this.init(),
            this.currConfig || (this.currConfig = ULTools.clone(cConfig)),
            this.currConfig
        }
        static get(e) {
            return this.getConfig()[e]
        }
        static updateValueByCop(e) {
            let t = ULTools.clone(cConfig);
            ULTools.forEachMap(e, (e,a)=>{
                "nil" == a && (a = ""),
                t[e] = a
            }
            ),
            this.currConfig = t,
            ULConst.B_INNER_DEBUG = this.getConfig().i_sdk_debug_mode >= ULConst.CONSOLE_OUTPUT_LEVEL_INNER_DEBUG
        }
        static onCmdSdkCollectionModuleCheckerConfig(e) {
            let t = e.getReturnValue() || [];
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "cConfig:"
            }),
            t.push({
                type: "button",
                text: "显示cConfig",
                onClick: ()=>{
                    let e = this.currConfig
                      , t = Object.keys(e);
                    t.sort();
                    let a = [];
                    for (let i = 0; i < t.length; i++) {
                        const s = t[i];
                        let o = JSON.stringify(e[s])
                          , n = ULTools.format("[%s] = [%s]\n", s, o);
                        n.length >= 64 && (n = n.substr(0, 62) + ".."),
                        a.push({
                            text: n,
                            value: {
                                k: s,
                                v: o
                            }
                        })
                    }
                    ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("cConfig", a, e=>{
                        ULSdkManager.getInstance().moduleCheckerManager.alertPrompt(e.k, e.v, "关闭", null)
                    }
                    , !0)
                }
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: ULTools.format("i_sdk_debug_mode=[%s]", this.getConfig().i_sdk_debug_mode),
                name: "labelDebugMode"
            }),
            t.push({
                type: "button",
                text: "切换调试模式",
                onClick: ()=>{
                    ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("选择调试模式", [{
                        text: "0: 全关",
                        value: 0
                    }, {
                        text: "1: warn + error",
                        value: 1
                    }, {
                        text: "2: log + warn + error",
                        value: 2
                    }, {
                        text: "3: 开启各模块的DEBUG + log + warn + error",
                        value: 3
                    }], e=>{
                        cConfig.i_sdk_debug_mode = e,
                        this.currConfig.i_sdk_debug_mode = e,
                        ULTools._hack_console_print_method(),
                        ULConst.B_INNER_DEBUG = this.getConfig().i_sdk_debug_mode >= ULConst.CONSOLE_OUTPUT_LEVEL_INNER_DEBUG,
                        ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelDebugMode", ULTools.format("i_sdk_debug_mode=[%s]", this.getConfig().i_sdk_debug_mode))
                    }
                    )
                }
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "局域网调试：",
                name: "labelSocketDebugMode"
            }),
            t.push({
                type: "inputBox",
                text: ULStorageManager.getInstance().getStorage("console_lan_id"),
                name: "console_lan_id"
            }),
            t.push({
                type: "button",
                text: "切换局域网调试模式",
                onClick: ()=>{
                    let e = ULSdkManager.getInstance().moduleCheckerManager.getItemText("console_lan_id")
                      , t = [{
                        text: "关闭调试",
                        value: 0
                    }, {
                        text: "开启调试: " + e,
                        value: 1
                    }];
                    ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("选择调试模式", t, t=>{
                        0 == t ? (ULStorageManager.getInstance().setStorage("console_lan_id", null),
                        ULTools._close_console_print_LAN()) : (ULStorageManager.getInstance().setStorage("console_lan_id", e),
                        ULTools._start_console_print_LAN())
                    }
                    )
                }
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: `SDK log 开关：(${this.sdkLogSwitch ? "已开启" : "已关闭"})`,
                name: "SDK_LOG_MODE"
            }),
            t.push({
                type: "button",
                text: "切换状态",
                onClick: ()=>{
                    this.sdkLogSwitch ? (this.sdkLogSwitch = !1,
                    ULSDK.console.allowConsole = !1) : (this.sdkLogSwitch = !0,
                    ULSDK.console.allowConsole = !0),
                    ULSdkManager.getInstance().moduleCheckerManager.setItemText("SDK_LOG_MODE", `SDK log 开关：(${this.sdkLogSwitch ? "已开启" : "已关闭"})`)
                }
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "显示sdk通信记录:"
            }),
            t.push({
                type: "button",
                text: "查看...",
                onClick: ()=>{
                    let e = ULSdkManager.getInstance().getSdkCommunicationLog()
                      , t = [];
                    for (let a = 0; a < e.length; a++) {
                        const i = e[a];
                        try {
                            let e = JSON.parse(i);
                            ULSDK.console.log(a, i, e),
                            t.push({
                                text: ULTools.format("%d: %s", a, e.cmd),
                                value: i
                            })
                        } catch (e) {}
                    }
                    ULSDK.console.log("conf", t),
                    ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("sdk通信记录（最近100条）", t, e=>{
                        ULSdkManager.getInstance().moduleCheckerManager.showBigTextWithPickerDialog("详情", e, 40)
                    }
                    , !0)
                }
            }),
            t.push({
                type: "newLine"
            }),
            e.setReturnValue(t, !0)
        }
    }
    ULConfig.bInit = !1,
    ULConfig.sdkLogSwitch = !0;
    class ULModuleBase {
        init() {
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, this.getCollectionModuleCheckerPriority(), this.onCmdSdkCollectionModuleCheckerConfig.bind(this))
        }
        loadSubModules() {
            return []
        }
        loadModuleCheckerConfig() {
            return []
        }
        onCmdSdkCollectionModuleCheckerConfig(e) {
            let t = e.getReturnValue() || []
              , a = this.loadModuleCheckerConfig();
            for (let e = 0; e < a.length; e++) {
                const i = a[e];
                t.push(i)
            }
            e.setReturnValue(t, !0)
        }
        getCollectionModuleCheckerPriority() {
            return ULConst.PRIORITY_NONE
        }
    }
    class ULModuleCdk extends ULModuleBase {
        init() {
            super.init(),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_USE_CDKEY, 1, this.onCmdUseCdkey.bind(this))
        }
        requestUseCdk(e, t, a) {
            let i = ULConfig.getConfig()
              , s = i.s_sdk_cdk_app_id
              , o = i.i_net_timeout
              , n = ULTools.format("%s?userId=%s&cdkStr=%s&appId=%s&channelId=%s", i.s_sdk_cdk_url, e, t, s, a);
            ULSDK.console.log("ULModuleCdk.requestUseCdk", n),
            ULTools.httpGet({
                url: n,
                timeoutMillisecond: o,
                success: e=>{
                    e = (e = (e = (e = e.replace('"[', "[")).replace(']"', "]")).replace('"0"', '"1"')).replace("message", "data");
                    let t = JSON.parse(e);
                    ULSdkManager.getInstance().statisManager.reportOpenCdk(t.code),
                    1 == t.code ? ULSdkManager.getInstance().response(ULConst.CMD_USE_CDKEY_RESULT, {
                        code: 1,
                        data: t.data,
                        message: "兑换成功"
                    }) : ULSdkManager.getInstance().response(ULConst.CMD_USE_CDKEY_RESULT, {
                        code: 0,
                        data: [],
                        message: t.data
                    })
                }
                ,
                fail: ()=>{
                    ULSdkManager.getInstance().statisManager.reportOpenCdk(0),
                    ULSdkManager.getInstance().response(ULConst.CMD_USE_CDKEY_RESULT, {
                        code: 0,
                        message: "请求超时"
                    })
                }
            })
        }
        onCmdUseCdkey(e) {
            e.stopImmediatePropagation();
            ULConfig.getConfig();
            let t = e.data
              , a = t.userId
              , i = t.cdkStr
              , s = t.channelId;
            this.requestUseCdk(a, i, s)
        }
    }
    class ULModuleMegadata extends ULModuleBase {
        init() {
            super.init(),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_MEGADATA_SERVER, 1, this.onCmdMegadataServer.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_POST_MEGADATA, 1, this.onCmdPostMegadata.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_RESUME, ULConst.PRIORITY_NONE, this.onCmdSdkOnGameResume.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_PAUSE, ULConst.PRIORITY_NONE, this.onCmdSdkOnGamePause.bind(this)),
            this.gameLevelStartMsgList = {}
        }
        onCmdMegadataServer(e) {
            e.stopImmediatePropagation();
            let t = ULConfig.getConfig()
              , a = e.data;
            Array.isArray(a) && a.length > 0 ? ULSdkManager.getInstance().response(ULConst.CMD_MEGADATA_SERVER_RESULT, {
                code: 1,
                message: "上报成功"
            }) : ULSdkManager.getInstance().response(ULConst.CMD_MEGADATA_SERVER_RESULT, {
                code: 0,
                message: "数据异常"
            });
            let i = t.s_sdk_megadata_url;
            if (ULSdkManager.getInstance().statisManager.getPostMegadataMode() && (i = t.s_sdk_megadata_test_url),
            -1 != i.search(/megadatav7/gi))
                return void ULSDK.console.warn("应用确定使用v7版本统计，/c/megadataServer接口数据不再进行上报");
            let s = ULTools.clone(a)
              , o = s[0];
            if (o != ULConst.STATIS_USER_EVENT_POINT_EVENT) {
                if (o == ULConst.STATIS_USER_EVENT_GAME_LEVEL_START) {
                    let e = ULTools.time()
                      , t = s[1] + "";
                    this.gameLevelStartMsgList[t] = e
                }
                if (o == ULConst.STATIS_USER_EVENT_GAME_LEVEL_COMPLETE) {
                    let e = s[1] + ""
                      , t = ULTools.time() - this.gameLevelStartMsgList[e];
                    this.gameLevelStartMsgList[e] = void 0,
                    delete this.gameLevelStartMsgList[e],
                    isNaN(t) && (t = 0),
                    (t < 0 || t > 1e4) && (t = 0),
                    s.push(Math.floor(t).toString())
                }
                ULSdkManager.getInstance().statisManager.reportUserEvent(s)
            } else
                ULSdkManager.getInstance().statisManager.reportPointEvent(s[1], s[2])
        }
        onCmdPostMegadata(e) {
            e.stopImmediatePropagation();
            let t = ULConfig.getConfig()
              , a = e.data;
            Array.isArray(a) && a.length > 0 ? ULSdkManager.getInstance().response(ULConst.CMD_POST_MEGADATA_RESULT, {
                code: 1,
                message: "上报成功"
            }) : ULSdkManager.getInstance().response(ULConst.CMD_POST_MEGADATA_RESULT, {
                code: 0,
                message: "数据异常"
            });
            let i = ULTools.clone(a)
              , s = i[0]
              , o = "";
            if (s == ULConst.STATIS_USER_ACTION_EVENT_LEVEL_START) {
                let e = ULTools.time()
                  , a = i[1] + "";
                this.gameLevelStartMsgList[a] = e,
                o = ULTools.format("%s-%s", t.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_LEVEL_START_EVENT)
            }
            if (s == ULConst.STATIS_USER_ACTION_EVENT_LEVEL_COMPLETE) {
                let e = i[1] + ""
                  , a = ULTools.time() - this.gameLevelStartMsgList[e];
                this.gameLevelStartMsgList[e] = void 0,
                delete this.gameLevelStartMsgList[e],
                isNaN(a) && (a = 0),
                (a < 0 || a > 1e4) && (a = 0),
                i.push(Math.floor(a).toString()),
                o = ULTools.format("%s-%s", t.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_LEVEL_COMPLETE_EVENT),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, ["levelComplete", e])
            }
            if (s == ULConst.STATIS_USER_ACTION_EVENT_COIN_CHANGE && (o = ULTools.format("%s-%s", t.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_COIN_CHANGE_EVENT)),
            s == ULConst.STATIS_USER_ACTION_EVENT_ITEM_BUY && (o = ULTools.format("%s-%s", t.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_ITEM_BUY)),
            s == ULConst.STATIS_USER_ACTION_EVENT_BUY_ACTION && (o = ULTools.format("%s-%s", t.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_BUY_ACTION)),
            s == ULConst.STATIS_USER_ACTION_EVENT_COMMON_EVENT) {
                o = ULTools.format("%s-%s", t.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_COMMON_EVENT);
                let e = ULTools.clone(i);
                e.shift(),
                ULSDK.console.log("ULModuleMegadta.onCmdPostMegadatapostData postData:", e),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, e)
            }
            s == ULConst.STATIS_USER_ACTION_EVENT_VIDEO_POINT_EVENT && (o = ULTools.format("%s-%s", t.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_VIDEO_POINT_EVENT),
            ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, ["videoPointShow", i[1]])),
            "" != o && (i.shift(),
            ULSDK.console.log("ULModuleMegadta.onCmdPostMegadatapostData typeId:", o, " rawDatas:", i),
            ULSdkManager.getInstance().statisManager.reportUserActionEvent(i, o))
        }
        onCmdSdkOnGameResume(e) {
            ULConfig.getConfig();
            for (let e in this.gameLevelStartMsgList)
                this.gameLevelStartMsgList[e] = ULTools.time();
            ULSDK.console.log("ULModuleMegadta.onCmdSdkOnGameResume gameLevelStartTime:", this.gameLevelStartMsgList)
        }
        onCmdSdkOnGamePause(e) {
            let t = ULConfig.getConfig();
            for (let e in this.gameLevelStartMsgList) {
                ULSDK.console.log("ULModuleMegadta.onCmdSdkOnGamePause currentGameLevelName:", e);
                let a = ULTools.time() - this.gameLevelStartMsgList[e];
                isNaN(a) && (a = 0),
                (a < 0 || a > 1e4) && (a = 0);
                let i = new Array;
                i.push(e),
                i.push("2"),
                i.push("pause"),
                i.push("0"),
                i.push("0"),
                i.push("0"),
                i.push("0"),
                i.push("0"),
                i.push("0"),
                i.push(Math.floor(a).toString());
                let s = ULTools.format("%s-%s", t.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_LEVEL_COMPLETE_EVENT);
                ULSdkManager.getInstance().statisManager.reportUserActionEvent(i, s)
            }
        }
    }
    class ULModuleUserData extends ULModuleBase {
        init() {
            super.init(),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SAVE_USER_DATA, ULConst.PRIORITY_DISABLE, this.onCmdSaveUserData.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_GET_USER_DATA, ULConst.PRIORITY_DISABLE, this.onCmdGetUserData.bind(this))
        }
        requestUploadUserData(e, t) {
            let a = ULConfig.getConfig()
              , i = a.s_sdk_user_data_save_url
              , s = {
                userId: e,
                data: t
            };
            ULTools.httpPost({
                url: i,
                postData: s,
                timeoutMillisecond: a.i_net_timeout,
                success: e=>{
                    let t = JSON.parse(e);
                    t && 0 == t.code ? ULSdkManager.getInstance().response(ULConst.CMD_SAVE_USER_DATA_RESULT, {
                        code: 1,
                        msg: "存档成功"
                    }) : ULSdkManager.getInstance().response(ULConst.CMD_SAVE_USER_DATA_RESULT, {
                        code: 0,
                        msg: "存档失败"
                    })
                }
                ,
                fail: ()=>{
                    ULSdkManager.getInstance().response(ULConst.CMD_SAVE_USER_DATA_RESULT, {
                        code: 0,
                        msg: "存档超时"
                    })
                }
            })
        }
        requestDownloadUserData(e) {
            let t = ULConfig.getConfig()
              , a = ULTools.format("%s?userId=%s", t.s_sdk_user_data_get_url, e);
            ULSDK.console.log("ULModuleUserData.requestDownloadUserData", e),
            ULSDK.console.log("  url", a),
            ULTools.httpGet({
                url: a,
                timeoutMillisecond: t.i_net_timeout,
                success: e=>{
                    let t = JSON.parse(e);
                    ULSDK.console.log("  ULModuleUserData.requestDownloadUserData success", e),
                    t && 0 == t.code ? ULSdkManager.getInstance().response(ULConst.CMD_GET_USER_DATA_RESULT, {
                        code: 1,
                        userData: t.data,
                        msg: "模拟成功"
                    }) : ULSdkManager.getInstance().response(ULConst.CMD_GET_USER_DATA_RESULT, {
                        code: 0,
                        userData: {},
                        msg: "读取存档失败"
                    })
                }
                ,
                fail: e=>{
                    ULSDK.console.log("  ULModuleUserData.requestDownloadUserData fail", e),
                    ULSdkManager.getInstance().response(ULConst.CMD_GET_USER_DATA_RESULT, {
                        code: 0,
                        userData: {},
                        msg: "读取存档超时"
                    })
                }
            })
        }
        onCmdSaveUserData(e) {
            e.stopImmediatePropagation();
            ULConfig.getConfig();
            let t = ULSdkManager.getInstance().channelInfo
              , a = e.data
              , i = t.uuid
              , s = a.userData;
            i ? this.requestUploadUserData(i, s) : ULSDK.console.log("ULModuleUserData.onCmdSaveUserData userId not found!")
        }
        onCmdGetUserData(e) {
            e.stopImmediatePropagation();
            ULConfig.getConfig();
            let t = ULSdkManager.getInstance().channelInfo
              , a = (e.data,
            t.uuid);
            this.requestDownloadUserData(a)
        }
    }
    class ULClipboardManager {
        static getInstance() {
            return this._instance || (this._instance = new ULClipboardManager),
            this._instance
        }
        getClipboardData(e) {
            if (!(e instanceof Function))
                return void ULSDK.console.warn("ULClipboardManager.getClipboardData finishCallback not a function");
            ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_GET_CLIPBOARD_DATA, {
                finishCallback: e
            }) || e(null)
        }
        setClipboardData(e, t) {
            if (!(t instanceof Function))
                return void ULSDK.console.warn("ULClipboardManager.setClipboardData finishCallback not a function");
            ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_SET_CLIPBOARD_DATA, {
                data: e,
                finishCallback: t
            }) || t(!1)
        }
        isSupport() {
            return !!ULEventDispatcher.getInstance().dispatchWithReturn(ULConst.CMD_SDK_IS_SUPPORT_CLIPBOARD, {})
        }
    }
    ULClipboardManager._instance = null;
    class ULModuleClipboard extends ULModuleBase {
        init() {
            super.init(),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SET_CLIPBOARD_DATA, 1, this.onCmdSetClipboardData.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_GET_CLIPBOARD_DATA, 1, this.onCmdGetClipboardData.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SET_VERSION, 1, this.onCmdSetVersion.bind(this))
        }
        onCmdSetClipboardData(e) {
            e.stopImmediatePropagation();
            ULConfig.getConfig();
            let t = e.data
              , a = t.clipboardData
              , i = t.userData;
            ULClipboardManager.getInstance().setClipboardData(a, e=>{
                e ? ULSdkManager.getInstance().response(ULConst.CMD_SET_CLIPBOARD_DATA_RESULT, {
                    code: 1,
                    msg: "保存成功",
                    clipboardData: a,
                    userData: i
                }) : ULSdkManager.getInstance().response(ULConst.CMD_SET_CLIPBOARD_DATA_RESULT, {
                    code: 0,
                    msg: "保存失败",
                    clipboardData: a,
                    userData: i
                })
            }
            )
        }
        onCmdGetClipboardData(e) {
            e.stopImmediatePropagation();
            ULConfig.getConfig();
            let t = e.data.userData;
            ULClipboardManager.getInstance().getClipboardData(e=>{
                e ? ULSdkManager.getInstance().response(ULConst.CMD_GET_CLIPBOARD_DATA_RESULT, {
                    code: 1,
                    msg: "获取成功",
                    clipboardData: e,
                    userData: t
                }) : ULSdkManager.getInstance().response(ULConst.CMD_GET_CLIPBOARD_DATA_RESULT, {
                    code: 0,
                    msg: "获取失败",
                    clipboardData: null,
                    userData: t
                })
            }
            )
        }
        onCmdSetVersion(e) {
            let t = ULSdkManager.getInstance().channelInfo;
            t.isSupportClipboardData = ULClipboardManager.getInstance().isSupport(),
            ULSDK.console.log(ULTools.format("ULModuleClipboard.onCmdSetVersion mark isSupportClipboardData = %s", t.isSupportClipboardData))
        }
    }
    class ULChannelModuleBase extends ULModuleBase {
        init() {
            super.init(),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_GET_STORAGE, ULConst.PRIORITY_NONE, this.onCmdSdkGetStorage.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_SET_STORAGE, ULConst.PRIORITY_NONE, this.onCmdSdkSetStorage.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_GET_CLIPBOARD_DATA, ULConst.PRIORITY_NONE, this.onCmdSdkGetClipboardData.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_SET_CLIPBOARD_DATA, ULConst.PRIORITY_NONE, this.onCmdSdkSetClipboardData.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_IS_SUPPORT_CLIPBOARD, ULConst.PRIORITY_NONE, this.onCmdSdkIsSupportClipboard.bind(this)),
            this.genSdkUserId(),
            ULSdkManager.getInstance().channelInfo._sdkUserId = this.sdkUserId,
            ULSdkManager.getInstance().channelInfo.isNewUser = this.isNewUser,
            ULSDK.console.log("ULChannelModuleBase.init isNewUser:", this.isNewUser)
        }
        genSdkUserId() {
            let e = ULConfig.getConfig()
              , t = ULTools.format("mUserId_%s", e.s_sdk_megadata_game_id);
            this.isNewUser = !1,
            this.sdkUserId = ULStorageManager.getInstance().getStorage(t),
            this.sdkUserId || (this.sdkUserId = ULTools.format("%s_%s_%s", e.s_sdk_cop_game_id, ULTools.createRandomUserId(), e.s_sdk_cop_channel_id),
            ULStorageManager.getInstance().setStorage(t, this.sdkUserId),
            this.isNewUser = !0)
        }
        onCmdSdkGetStorage(e) {
            let t = e.data.key;
            e.setReturnValue(this._hook_getStorage(t))
        }
        onCmdSdkSetStorage(e) {
            let t = e.data.key
              , a = e.data.data;
            this._hook_setStorage(t, a),
            e.stopImmediatePropagation()
        }
        onCmdSdkGetClipboardData(e) {
            let t = e.data.finishCallback;
            this._hook_getClipboardData(t),
            e.stopImmediatePropagation()
        }
        onCmdSdkSetClipboardData(e) {
            let t = e.data.data
              , a = e.data.finishCallback;
            this._hook_setClipboardData(t, a),
            e.stopImmediatePropagation()
        }
        onCmdSdkIsSupportClipboard(e) {
            e.data;
            e.setReturnValue(this._hook_isSupportClipboard()),
            e.stopImmediatePropagation()
        }
    }
    class ULChannelModuleWebmobileBase extends ULChannelModuleBase {
        _hook_getStorage(e) {
            return localStorage ? localStorage.getItem(e) : null
        }
        _hook_setStorage(e, t) {
            localStorage && localStorage.setItem(e, t)
        }
        _hook_isSupportClipboard() {
            return !1
        }
        _hook_getClipboardData(e) {
            e(null)
        }
        _hook_setClipboardData(e, t) {
            if (!document)
                return void t(!1);
            ULSDK.console.log("webmobile --- copy 2");
            const a = document.createElement("input");
            document.body.appendChild(a),
            a.value = e,
            a.focus(),
            a.select();
            var i = !1;
            try {
                i = document.execCommand("copy")
            } catch (e) {
                i = !1
            }
            document.body.removeChild(a),
            t(i)
        }
    }
    class ULAdvBase extends ULModuleBase {
        constructor() {
            super(...arguments),
            this.videoPriority = -1,
            this.interPriority = -1,
            this.bannerPriority = -1,
            this.embeddedPriority = -1,
            this.urlPriority = -1,
            this.pasterPriority = -1
        }
        init() {
            "ULAdvBase" == this.name && ULSDK.console.warn("ULAdvBase.init 请在子类中修改this.name!"),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_COP_CHANGED, 1, this.onCopChanged.bind(this)),
            this.refreshPriority(),
            this.registerListeners()
        }
        refreshPriority() {
            let e = ULConfig.getConfig();
            this.videoPriority = this.calcPriority(e.s_sdk_adv_show_video_list, this.name),
            this.interPriority = this.calcPriority(e.s_sdk_adv_show_inter_list, this.name),
            this.bannerPriority = this.calcPriority(e.s_sdk_adv_show_banner_list, this.name),
            this.embeddedPriority = this.calcPriority(e.s_sdk_adv_show_embedded_list, this.name),
            this.urlPriority = this.calcPriority(e.s_sdk_adv_show_url_list, this.name),
            this.pasterPriority = this.calcPriority(e.s_sdk_adv_show_paster_list, this.name),
            this.fShowVideoCallback = this.processShowAdvCallback("video", this.showVideoAdv.bind(this)),
            /*this.fShowInterCallback = this.processShowAdvCallback("interstitial", this.showInterAdv.bind(this)),*/
            /*this.fShowBannerCallback = this.processShowAdvCallback("banner", this.showBannerAdv.bind(this)),*/
            this.fShowEmbeddedCallback = this.processShowAdvCallback("embedded", this.showEmbeddedAdv.bind(this)),
            this.fShowUrlCallback = this.processShowAdvCallback("url", this.showUrlAdv.bind(this)),
            this.fShowPasterCallback = this.processShowAdvCallback("paster", this.showPasterAdv.bind(this)),
            ULSDK.console.log("ULAdvBase.refreshPriority", this.name),
            this.videoPriority <= ULConst.PRIORITY_DISABLE ? ULSDK.console.warn(ULTools.format("  %s_视频广告被禁用！配置[s_sdk_adv_show_video_list]=[%s]", this.name, e.s_sdk_adv_show_video_list)) : ULSDK.console.log("  videoPriority", this.videoPriority),
            this.interPriority <= ULConst.PRIORITY_DISABLE ? ULSDK.console.warn(ULTools.format("  %s_插屏广告被禁用！配置[s_sdk_adv_show_inter_list]=[%s]", this.name, e.s_sdk_adv_show_inter_list)) : ULSDK.console.log("  interPriority", this.interPriority),
            this.bannerPriority <= ULConst.PRIORITY_DISABLE ? ULSDK.console.warn(ULTools.format("  %s_横幅广告被禁用！配置[s_sdk_adv_show_banner_list]=[%s]", this.name, e.s_sdk_adv_show_banner_list)) : ULSDK.console.log("  bannerPriority", this.bannerPriority),
            this.embeddedPriority <= ULConst.PRIORITY_DISABLE ? ULSDK.console.warn(ULTools.format("  %s_嵌入广告被禁用！配置[s_sdk_adv_show_embedded_list]=[%s]", this.name, e.s_sdk_adv_show_embedded_list)) : ULSDK.console.log("  embeddedPriority", this.embeddedPriority),
            this.urlPriority <= ULConst.PRIORITY_DISABLE ? ULSDK.console.warn(ULTools.format("  %s_互动广告被禁用！配置[s_sdk_adv_show_url_list]=[%s]", this.name, e.s_sdk_adv_show_url_list)) : ULSDK.console.log("  urlPriority", this.urlPriority),
            this.pasterPriority <= ULConst.PRIORITY_DISABLE ? ULSDK.console.warn(ULTools.format("  %s_互动广告被禁用！配置[s_sdk_adv_show_paster_list]=[%s]", this.name, e.s_sdk_adv_show_paster_list)) : ULSDK.console.log("  urlPriority", this.pasterPriority)
        }
        processShowAdvCallback(e, t) {
            return a=>{
                let i = a.data;
                i ? (i.showAdvType = e,
                i.showChannelName = this.name || "",
                t(a)) : ULSDK.console.warn("ULAdvBase.on showAdvCallback advItem not found!", e)
            }
        }
        registerListeners() {
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_PREPARE_SHOW_VIDEO_ADV, ULConst.PRIORITY_NONE, e=>{
                ULSDK.console.log("ULAdvBase on prepare video", this.name, this.videoPriority),
                ULEventDispatcher.getInstance().once(ULConst.CMD_SDK_SHOW_VIDEO_ADV, this.videoPriority, this.fShowVideoCallback)
            }
            ),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_PREPARE_SHOW_INTER_ADV, ULConst.PRIORITY_NONE, e=>{
                ULSDK.console.log("ULAdvBase on prepare inter", this.name, this.interPriority),
                ULEventDispatcher.getInstance().once(ULConst.CMD_SDK_SHOW_INTER_ADV, this.interPriority, this.fShowInterCallback)
            }
            ),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_PREPARE_SHOW_BANNER_ADV, ULConst.PRIORITY_NONE, e=>{
                ULSDK.console.log("ULAdvBase on prepare banner", this.name, this.bannerPriority),
                ULEventDispatcher.getInstance().once(ULConst.CMD_SDK_SHOW_BANNER_ADV, this.bannerPriority, this.fShowBannerCallback)
            }
            ),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_PREPARE_SHOW_EMBEDDED_ADV, ULConst.PRIORITY_NONE, e=>{
                ULSDK.console.log("ULAdvBase on prepare embedded", this.name, this.embeddedPriority),
                ULEventDispatcher.getInstance().once(ULConst.CMD_SDK_SHOW_EMBEDDED_ADV, this.embeddedPriority, this.fShowEmbeddedCallback)
            }
            ),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_PREPARE_SHOW_URL_ADV, ULConst.PRIORITY_NONE, e=>{
                ULSDK.console.log("ULAdvBase on prepare url", this.name, this.urlPriority),
                ULEventDispatcher.getInstance().once(ULConst.CMD_SDK_SHOW_URL_ADV, this.urlPriority, this.fShowUrlCallback)
            }
            ),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_PREPARE_SHOW_PASTER_ADV, ULConst.PRIORITY_NONE, e=>{
                ULSDK.console.log("ULAdvBase on prepare paster", this.name, this.pasterPriority),
                ULEventDispatcher.getInstance().once(ULConst.CMD_SDK_SHOW_PASTER_ADV, this.pasterPriority, this.fShowPasterCallback)
            }
            ),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_CLOSE_VIDEO_ADV, ULConst.PRIORITY_NONE, this.closeVideoAdv.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_CLOSE_INTER_ADV, ULConst.PRIORITY_NONE, this.closeInterAdv.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_CLOSE_BANNER_ADV, ULConst.PRIORITY_NONE, this.closeBannerAdv.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_CLOSE_EMBEDDED_ADV, ULConst.PRIORITY_NONE, this.closeEmbeddedAdv.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_CLOSE_URL_ADV, ULConst.PRIORITY_NONE, this.closeUrlAdv.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_CLOSE_Paster_ADV, ULConst.PRIORITY_NONE, this.closePasterAdv.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_CLICK_NATIVE_ADV, ULConst.PRIORITY_NONE, this.onClickNativeAdv.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_CLOSE_NATIVE_ADV, ULConst.PRIORITY_NONE, this.onCloseNativeAdv.bind(this))
        }
        calcPriority(e, t) {
            if (!e)
                return ULConst.PRIORITY_DISABLE;
            let a = e.split("_");
            for (let e = 0; e < a.length; e++) {
                if (a[e] == t)
                    return a.length - e
            }
            return ULConst.PRIORITY_DISABLE
        }
        onCopChanged(e) {
            this.refreshPriority()
        }
        showVideoAdv(e) {
            ULSDK.console.log("ULAdvBase.showVideoAdv", this.name)
        }
        showInterAdv(e) {
            ULSDK.console.log("ULAdvBase.showInterAdv", this.name)
        }
        showBannerAdv(e) {
            ULSDK.console.log("ULAdvBase.showBannerAdv", this.name)
        }
        showEmbeddedAdv(e) {
            ULSDK.console.log("ULAdvBase.showEmbeddedAdv", this.name)
        }
        showUrlAdv(e) {
            ULSDK.console.log("ULAdvBase.showUrlAdv", this.name)
        }
        showPasterAdv(e) {
            ULSDK.console.log("ULAdvBase.showPasterAdv", this.name)
        }
        closeVideoAdv(e) {
            ULSDK.console.log("ULAdvBase.closeVideoAdv", this.name)
        }
        closeInterAdv(e) {
            ULSDK.console.log("ULAdvBase.closeInterAdv", this.name)
        }
        closeBannerAdv(e) {
            ULSDK.console.log("ULAdvBase.closeBannerAdv", this.name)
        }
        closeEmbeddedAdv(e) {
            ULSDK.console.log("ULAdvBase.closeEmbeddedAdv", this.name)
        }
        closeUrlAdv(e) {
            ULSDK.console.log("ULAdvBase.closeUrlAdv", this.name)
        }
        closePasterAdv(e) {
            ULSDK.console.log("ULAdvBase.closePasterAdv", this.name)
        }
        onClickNativeAdv(e) {
            ULSDK.console.log("ULAdvBase.onClickNativeAdv", this.name)
        }
        onCloseNativeAdv(e) {
            ULSDK.console.log("ULAdvBase.onCloseNativeAdv", this.name)
        }
    }
    class ULAdvFaceBook extends ULAdvBase {
        constructor() {
            super(...arguments),
            this.name = "ULAdvFaceBook",
            this.interAdPreloadArray = [],
            this.videoAdPreloadArray = [],
            this.interAdArray = [],
            this.videoAdArray = [],
            this.bannerIsShowing = !1
        }
        init() {
            super.init(),
            this.startTime = ULTools.time(),
            ULSDK.console.log("ULAdvFaceBook.init....即将开始广告预加载"),
            setTimeout(()=>{
                this.preLoadAd()
            }
            , 1e4)
        }
        preLoadAd() {
            this.videoAdArray.length + this.videoAdPreloadArray.length < 3 && this.getVideoAd(),
            this.interAdArray.length + this.interAdPreloadArray.length < 3 && this.getInterAd(),
            setTimeout(()=>{
                this.preLoadAd()
            }
            , 3e4)
        }
        getVideoAd() {
            let e = ULConfig.getConfig();
            0 != (e.s_sdk_facebook_videoId || "").replace(/(^\s*)|(\s*$)/g, "").length ? window.FBInstant && window.FBInstant.getRewardedVideoAsync(e.s_sdk_facebook_videoId).then(e=>{
                ULSDK.console.log("ULAdvFaceBook.getVideoAd....实例加载成功: "),
                this.videoAdPreloadArray.push(e),
                this.videoADLoadData(e, 0)
            }
            ).catch(e=>{
                ULSDK.console.error("ULAdvFaceBook.getVideoAd....加载失败: ", e, e.message)
            }
            ) : ULSDK.console.log("ULAdvFaceBook s_sdk_facebook_videoId 为空")
        }
        getInterAd() {
            let e = ULConfig.getConfig();
            0 != (e.s_sdk_facebook_interId || "").replace(/(^\s*)|(\s*$)/g, "").length ? window.FBInstant && window.FBInstant.getInterstitialAdAsync(e.s_sdk_facebook_interId).then(e=>{
                ULSDK.console.log("ULAdvFaceBook.getInterAd....实例加载成功 "),
                this.interAdPreloadArray.push(e),
                this.interADLoadData(e, 0)
            }
            ).catch(e=>{
                ULSDK.console.error("ULAdvFaceBook.getInterAd....加载失败: " + e.message)
            }
            ) : ULSDK.console.log("ULAdvFaceBook s_sdk_facebook_interId 为空")
        }
        videoADLoadData(e, t) {
            e.loadAsync().then(()=>{
                ULSDK.console.log("ULAdvFaceBook.videoADLoadData.videoAd.loadAsync.then 加载成功 "),
                this.videoAdArray.push(e);
                let t = this.videoAdPreloadArray.indexOf(e);
                t >= 0 && this.videoAdPreloadArray.splice(t, 1)
            }
            ).catch(a=>{
                if (ULSDK.console.error("ULAdvFaceBook.videoADLoadData....加载失败: " + a.message),
                t > 3) {
                    let t = this.videoAdPreloadArray.indexOf(e);
                    t >= 0 && this.videoAdPreloadArray.splice(t, 1)
                } else
                    setTimeout(()=>{
                        this.videoADLoadData(e, t + 1)
                    }
                    , 2e4)
            }
            )
        }
        interADLoadData(e, t) {
            e.loadAsync().then(()=>{
                ULSDK.console.log("ULAdvFaceBook.interADLoadData.videoAd.loadAsync.then 加载成功 "),
                this.interAdArray.push(e);
                let t = this.interAdPreloadArray.indexOf(e);
                t >= 0 && this.interAdPreloadArray.splice(t, 1)
            }
            ).catch(a=>{
                if (ULSDK.console.error("ULAdvFaceBook.interADLoadData....加载失败: " + a.message),
                t > 3) {
                    let t = this.interAdPreloadArray.indexOf(e);
                    t >= 0 && this.interAdPreloadArray.splice(t, 1)
                } else
                    setTimeout(()=>{
                        this.interADLoadData(e, t + 1)
                    }
                    , 2e4)
            }
            )
        }
        showVideoAdv(e) {
            e.stopImmediatePropagation();
            let t = e.data
              , a = ULConfig.getConfig();
            var i = a.s_sdk_facebook_videoId || "";
            ULSDK.console.log("ULAdvFaceBook.showVideoAdv", t.advId, t.advType, t.serialId),
            ULSdkManager.getInstance().statisManager.reportAdvBranchRequest(t, this.name, i);
            ULSdkManager.getInstance().advManager.onAdvClose(t);
            /*var s = this.videoAdArray.shift();
            if (!s)
                return ULSDK.console.log("ULAdvFaceBook.showVideoAdv......未预加载好"),
                void ULSdkManager.getInstance().advManager.showNextAdv(t, ULConst.ADV_FAIL_TIP_NOAD);
            ULSdkManager.getInstance().advManager.onAdvShow(t),
            s.showAsync().then(()=>{
                ULSDK.console.log("ULAdvFaceBook.showVideoAdv....show.then....激励视频展示成功"),
                this.getVideoAd(),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, [a.s_sdk_miniplay_user_open_video_event_id, "1"]),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, [a.s_sdk_miniplay_video_success_show_event_id]),
                ULSdkManager.getInstance().advManager.onAdvClose(t)
            }
            ).catch(e=>{
                ULSDK.console.error("ULAdvFaceBook.showVideoAdv....show.catch....视频展示失败....err: ", e.message),
                this.getVideoAd(),
                ULSdkManager.getInstance().advManager.showNextAdv(t, null, e),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, [a.s_sdk_miniplay_user_open_video_event_id, "2"])
            }
            )*/
        }
        showInterAdv(e) {
            e.stopImmediatePropagation();
            let t = e.data
              , a = ULConfig.getConfig();
            var i = a.s_sdk_facebook_interId || "";
            let s = ULTools.time()
              , o = a.i_sdk_adv_inter_launch_cd || 0
              , n = Math.max(30, o / 1e3);
            if (s - this.startTime < n)
                return ULSDK.console.log("ULAdvFaceBook.showInterAdv:未达到请求启动cd限制，无法展示广告"),
                void ULSdkManager.getInstance().advManager.showNextAdv(t, "请求cd限制中");
            let r = a.i_sdk_adv_inter_cd || 0
              , l = Math.max(30, r / 1e3);
            if (s - this.lastShowInterTime < l)
                return ULSDK.console.log("ULAdvFaceBook.showInterAdv:未达到展示cd限制，无法展示广告"),
                void ULSdkManager.getInstance().advManager.showNextAdv(t, "请求cd限制中");
            ULSDK.console.log("ULAdvFaceBook.showInterAdv", t.advId, t.advType, t.serialId),
            ULSdkManager.getInstance().statisManager.reportAdvBranchRequest(t, this.name, i);
            var h = this.interAdArray.shift();
            if (!h)
                return ULSDK.console.log("ULAdvFaceBook.showInterAdv......未预加载好"),
                void ULSdkManager.getInstance().advManager.showNextAdv(t, ULConst.ADV_FAIL_TIP_NOAD);
            h.showAsync().then(()=>{
                ULSDK.console.log("ULAdvFaceBook.showInterAdv....show.then....插屏展示成功"),
                this.getInterAd(),
                ULSdkManager.getInstance().advManager.onAdvShow(t),
                this.lastShowInterTime = ULTools.time()
            }
            ).catch(e=>{
                ULSDK.console.error("ULAdvFaceBook.showInterAdv....show.catch....插屏展示失败....err: ", e.message),
                this.getInterAd(),
                ULSdkManager.getInstance().advManager.showNextAdv(t, null, e)
            }
            )
        }
        showBannerAdv(e) {
            e.stopImmediatePropagation();
            let t = e.data
              , a = ULConfig.getConfig();
            var i = a.s_sdk_facebook_bannerId || "";
            if (this.bannerIsShowing)
                return void ULSdkManager.getInstance().advManager.onAdvFailed(t, "已经在展示中");
            let s = ULTools.time()
              , o = a.i_sdk_adv_banner_cd || 0
              , n = Math.max(30, o / 1e3);
            if (s - this.lastShowBannerTime < n)
                return ULSDK.console.log("ULAdvFaceBook.showBannerAdv:未达到展示cd限制，无法展示广告"),
                void ULSdkManager.getInstance().advManager.showNextAdv(t, "请求cd限制中");
            let r = window.FBInstant;
            r && null != r && r.loadBannerAdAsync ? (this.bannerIsShowing = !0,
            r.loadBannerAdAsync(i).then(()=>{
                ULSDK.console.error("ULAdvFaceBook.loadBannerAdAsync then"),
                ULSdkManager.getInstance().advManager.onAdvShow(t),
                this.lastShowBannerTime = ULTools.time(),
                this.bannerIsShowing || r.hideBannerAdAsync()
            }
            ).catch(e=>{
                ULSDK.console.error("ULAdvFaceBook.loadBannerAdAsync cath err: ", e),
                ULSdkManager.getInstance().advManager.showNextAdv(t, null, e)
            }
            )) : ULSdkManager.getInstance().advManager.showNextAdv(t, "FBInstant 为空或者不支持 loadBannerAdAsync")
        }
        closeBannerAdv(e) {
            e.data;
            this.bannerIsShowing = !1;
            let t = window.FBInstant;
            t && null != t && t.hideBannerAdAsync && t.hideBannerAdAsync()
        }
    }
    class ULModuleFaceBook extends ULChannelModuleWebmobileBase {
        constructor() {
            super(...arguments),
            this.reportCacheArray = []
        }
        init() {
            super.init(),
            ULSDK.console.log("ULModuleFaceBook.init()"),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SET_VERSION, 1, this.onCmdSetVersion.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_REPORT_ULSDK_EVENT, 1, this.reportEvent.bind(this)),
            this.initSdk()
        }
        initSdk() {
            let e = ULConfig.getConfig()
              , t = ULSdkManager.getInstance().channelInfo;
            t.channelName = "facebook",
            t.uuid = this.sdkUserId,
            t.isSupportRecordShare = !1,
            t.isShareEnabled = !!e.i_sdk_share_mode,
            t.copChannelId = e.s_sdk_cop_channel_id,
            t.isPayEnabled = !!e.i_sdk_pay_mode,
            t.isUseSdkRank = !!e.i_sdk_sdk_rank_mode,
            t.appName = "facebook",
            t.payInfo = {};
            let a = this;
            ULSDK.console.log("ULModuleFaceBook.initSdk 加载facebook广告SDK的js成功！");
            let i = window.FBInstant;
            i.initializeAsync().then(()=>{
                FBInstant.setLoadingProgress(100),
                FBInstant.startGameAsync(),
                FBInstant.getSupportedAPIs(),
                a.initGoogleAnalytics()
            }
            )
        }
        initGoogleAnalytics() {
            let e = window.FBInstant
              , t = this;
            this.googleReport("event", "fb_inited"),
            e.getEntryPointAsync().then(function(e) {
                ULSDK.console.info("ULModuleGoogleAnalytics.initSdk：Entry Point: ", e),
                t.googleReport("event", "fb_entrypoint", {
                    entrypoint: e
                })
            });
            const a = e.context.getType();
            ULSDK.console.info("ULModuleGoogleAnalytics.initSdk：contextType: ", a),
            this.googleReport("event", "fb_context", {
                type: a
            }),
            this.googleReport("event", "fb_started"),
            this.cleanUpReportCache()
        }
        loadSubModules() {
            return [new ULAdvFaceBook]
        }
        googleReport(e, ...t) {
            let a = window.gtag;
            a ? a(arguments) : this.reportCacheArray.push(arguments)
        }
        cleanUpReportCache() {
            for (; this.reportCacheArray.length; ) {
                let e = this.reportCacheArray.shift();
                (window.dataLayer || []).push(e)
            }
        }
        onCmdSetVersion(e) {
            ULSDK.console.log("ULModuleGoogleAnalytics.onCmdSetVersion........."),
            this.googleReport("event", "enter_first_scene")
        }
        reportEvent(e) {
            let t = ULConfig.getConfig()
              , a = e.data.parameter
              , i = a.typeid
              , s = a.updata;
            ULSDK.console.log("ULModuleGoogleAnalytics type:", i),
            ULSDK.console.log("ULModuleGoogleAnalytics updata:", s);
            let o = t.s_sdk_megadata_server_type_id;
            switch (i = i.replace(o + "-", "")) {
            case ULConst.STATIS_TYPE_LEVEL_START_EVENT:
                {
                    let e = s[3] || ""
                      , t = s[4] || "";
                    this.googleReport("event", "level_start", {
                        levelName: e,
                        reason: t
                    });
                    break
                }
            case ULConst.STATIS_TYPE_LEVEL_COMPLETE_EVENT:
                {
                    let e = s[3] || ""
                      , t = s[4] || ""
                      , a = s[5] || ""
                      , i = s[11] || "";
                    this.googleReport("event", "level_complete", {
                        levelName: e,
                        state: t,
                        reason: a,
                        time: i
                    });
                    break
                }
            case ULConst.STATIS_TYPE_COIN_CHANGE_EVENT:
                {
                    let e = s[3] || ""
                      , t = s[4] || ""
                      , a = s[5] || ""
                      , i = s[6] || "";
                    this.googleReport("event", "coin_change", {
                        coinType: e,
                        changeType: t,
                        num: a,
                        reason: i
                    });
                    break
                }
            case ULConst.STATIS_TYPE_ITEM_BUY:
                {
                    let e = s[4] || ""
                      , t = s[5] || ""
                      , a = s[3] || "";
                    this.googleReport("event", "goods_buy", {
                        goods: e,
                        state: t,
                        reason: a
                    });
                    break
                }
            case ULConst.STATIS_TYPE_PAY_INFO:
                {
                    let e = s[4] || ""
                      , t = s[5] || ""
                      , a = s[6] || "";
                    this.googleReport("event", "pay_info", {
                        payType: e,
                        price: t,
                        result: a
                    });
                    break
                }
            case ULConst.STATIS_TYPE_ONLINE_TIME:
                {
                    let e = s[4] || "";
                    this.googleReport("event", "online_time", {
                        time: e
                    });
                    break
                }
            case ULConst.STATIS_TYPE_VIDEO_POINT_EVENT:
                {
                    let e = s[3] || ""
                      , t = s[4] || "";
                    this.googleReport("event", "video_point_event", {
                        advName: e,
                        state: t
                    });
                    break
                }
            case ULConst.STATIS_TYPE_COMMON_EVENT:
                {
                    let e = s[3] || ""
                      , t = s[4] || ""
                      , a = s[5] || ""
                      , i = s[9] || "";
                    this.googleReport("event", "user_common_event", {
                        eventId: e,
                        parm1: t,
                        parm2: a,
                        parm3: i
                    });
                    break
                }
            case ULConst.STATIS_TYPE_ADV_INFO:
                {
                    let e = s[4] || ""
                      , t = s[5] || ""
                      , a = s[6] || ""
                      , i = s[7] || "";
                    this.googleReport("event", "adv_event", {
                        advType: e,
                        state: t,
                        reason: a,
                        cop: i
                    });
                    break
                }
            }
        }
    }
    class ULSdkModuleLoader {
        static initAllModules() {
            let e = [];
            e.push(new ULModuleCdk),
            e.push(new ULModuleMegadata),
            e.push(new ULModuleUserData),
            e.push(new ULModuleClipboard),
            e.push(new ULModuleFaceBook);
            for (let t = 0; t < e.length; t++) {
                let a = e[t].loadSubModules();
                for (let i = 0; i < a.length; i++) {
                    const s = a[i];
                    e.splice(t + 1, 0, s),
                    t++
                }
            }
            ULSDK.console.log("ULSdkModuleLoader--modules:", e);
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                try {
                    a.init()
                } catch (e) {
                    ULSDK.console.error(e)
                }
            }
            return e
        }
    }
    class ULChannelInfo {
        constructor() {
            this.preparationFlags = {},
            this.copInfo = "{}",
            this.payInfo = {},
            this.jumpInfo = [],
            this.isSupportRecordShare = !1,
            this.channelName = "default",
            this.isPayEnabled = !1,
            this.isShareEnabled = !1,
            this.isUseSdkRank = !1,
            this.isShowUrlAdIcon = !1,
            this.appName = "",
            this.equipmentModel = "",
            this.platformVersionMessage = "",
            this.osVersionMessage = "",
            this.cardType = 0,
            this.isThirdExit = !1,
            this.isAbout = !1,
            this.isMoreGame = !1,
            this.isULMoreGame = !1,
            this.isSupportClipboardData = !1,
            this.isSupportInstallShortcut = !1,
            this.isSupportFindMinigames = !1,
            this.findMinigamesImageUrl = "",
            this.isSupportRecommendationBtn = !1,
            this.isSupportJumpList = !1,
            this.is4399Watermark = !1,
            this.uuid = "",
            this.sdcardPath = "",
            this.packageVersion = "",
            this.copChannelId = "",
            this.ulsdkVersion = "",
            this.cdkChannelId = "",
            this.channelUserId = "",
            this.referenceBannerHeight = ULConst.DEFAULT_REFERANCE_BANNER_HEIGHT,
            this.isNewUser = !0,
            this.loginDays = 0,
            this._sdkUserId = "",
            this.isSupportPasterAdv = !1,
            this.gameLanguage = "",
            this.isSupportChannelMoreGameBox = !1,
            this.isSupportChannelBlockAd = !1,
            this.isSupportSubscribe = !1,
            this.isSupportColorSign = !1,
            this.isSupportGridAd = !1,
            this.isSupportVideoRank = !1,
            this.isSupportFavoriteGuide = !1,
            this.isSupportFollowOfficialAccount = !1,
            this.appIdOrPkgName = "",
            this.isSupportContentSecurityCheck = !1,
            this.isJumpLeisureEnabled = !1,
            this.isSupportVibrate = !0,
            this.isSupportOpenUrl = !1,
            this.isSupportJumpInfoVideoType = !1,
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, ULConst.PRIORITY_NONE, this.onCmdSdkCollectionModuleCheckerConfig.bind(this))
        }
        toBaseChannelInfoData() {
            let e = ULConfig.getConfig();
            ULSDK.console.log("config", e);
            let t = null == e.s_sdk_licence_info ? "" : e.s_sdk_licence_info;
            t = t.replace(/\/n/g, "\\n");
            let a = !!e.i_sdk_age_level_info_mode
              , i = e.s_sdk_age_level_info || ""
              , s = {
                gameName: e.s_game_name,
                gameLanguage: this.gameLanguage,
                channelName: this.channelName,
                appName: this.appName,
                isShowLicenceInfo: 1 == e.i_sdk_licence_info_mode,
                licenceInfo: t,
                isShowAgeLevelInfo: a
            };
            return i && (s.ageLevelInfo = i),
            s
        }
        toResponseData() {
            let e = [];
            for (let t = 0; t < this.jumpInfo.length; t++) {
                const a = this.jumpInfo[t];
                a.index && a.url ? e.push({
                    index: a.index,
                    url: a.url,
                    rewards: a.rewards || [],
                    bReceived: a.bReceived || !1,
                    appName: a.appName || ""
                }) : ULSDK.console.warn("ULChannelInfo.toResponseData jump data error!", a)
            }
            let t = ULConfig.getConfig();
            return null != t.i_sdk_adv_reference_banner_height && (this.referenceBannerHeight = t.i_sdk_adv_reference_banner_height),
            this.isJumpLeisureEnabled = this.isJumpLeisureEnabled && !!t.i_sdk_moreWonderful_mode,
            this.isSupportInstallShortcut = this.isSupportInstallShortcut && !!t.i_sdk_installShortcut_mode,
            this.isSupportRecommendationBtn = this.isSupportRecommendationBtn && !!t.i_sdk_moregame_mode,
            this.isSupportJumpList = this.isSupportJumpList && !!t.i_sdk_jumplist_mode,
            this.isSupportVibrate = this.isSupportVibrate && !!t.i_sdk_phone_vibrate,
            this.isSupportOpenUrl = this.isSupportOpenUrl && !!t.i_sdk_support_open_url,
            this.isSupportRecordShare = this.isSupportRecordShare && !!t.i_sdk_support_record_share,
            {
                copInfo: this.copInfo,
                cardType: this.cardType,
                isThirdExit: this.isThirdExit,
                isAbout: this.isAbout,
                payInfo: this.payInfo,
                isMoreGame: this.isMoreGame,
                isULMoreGame: this.isULMoreGame,
                uuid: this.uuid,
                sdcardPath: this.sdcardPath,
                packageVersion: this.packageVersion,
                copChannelId: this.copChannelId,
                ulsdkVersion: this.ulsdkVersion,
                isShowUrlAdIcon: this.isShowUrlAdIcon,
                cdkChannelId: this.cdkChannelId,
                isPayEnabled: this.isPayEnabled,
                isShareEnabled: this.isShareEnabled,
                isUseSdkRank: this.isUseSdkRank,
                isSupportRecordShare: this.isSupportRecordShare,
                isSupportInstallShortcut: this.isSupportInstallShortcut,
                isSupportClipboardData: this.isSupportClipboardData,
                isSupportFindMinigames: this.isSupportFindMinigames,
                findMinigamesImageUrl: this.findMinigamesImageUrl,
                isSupportRecommendationBtn: this.isSupportRecommendationBtn,
                isSupportJumpList: this.isSupportJumpList,
                is4399Watermark: this.is4399Watermark,
                appName: this.appName.toLocaleLowerCase(),
                jumpInfo: e,
                channelUserId: this.channelUserId,
                referenceBannerHeight: this.referenceBannerHeight,
                isNewUser: this.isNewUser,
                loginDays: this.loginDays,
                isSupportPasterAdv: this.isSupportPasterAdv,
                gameLanguage: this.gameLanguage,
                isSupportChannelMoreGameBox: this.isSupportChannelMoreGameBox,
                isSupportChannelBlockAd: this.isSupportChannelBlockAd,
                isSupportSubscribe: this.isSupportSubscribe,
                isSupportGridAd: this.isSupportGridAd,
                isSupportVideoRank: this.isSupportVideoRank,
                isSupportFavoriteGuide: this.isSupportFavoriteGuide,
                isSupportFollowOfficialAccount: this.isSupportFollowOfficialAccount,
                customerServiceInfo: t.t_customer_service_info,
                appIdOrPkgName: this.appIdOrPkgName,
                isSupportContentSecurityCheck: this.isSupportContentSecurityCheck,
                isJumpLeisureEnabled: this.isJumpLeisureEnabled,
                isSupportVibrate: this.isSupportVibrate,
                isSupportOpenUrl: this.isSupportOpenUrl,
                isSupportJumpInfoVideoType: this.isSupportJumpInfoVideoType
            }
        }
        isReady() {
            return ULTools.getObjSize(this.preparationFlags) <= 0
        }
        getPreparationFlags() {
            let e = [];
            return ULTools.forEachMap(this.preparationFlags, (t,a)=>{
                e.push(t)
            }
            ),
            e
        }
        addPreparationFlag(e) {
            this.preparationFlags[e] = !0
        }
        removePreparationFlag(e) {
            delete this.preparationFlags[e]
        }
        onCmdSdkCollectionModuleCheckerConfig(e) {
            let t = e.getReturnValue() || [];
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "渠道信息:"
            }),
            t.push({
                type: "newLine"
            });
            let a = ""
              , i = this.toResponseData()
              , s = Object.keys(i);
            s.sort();
            for (let e = 0; e < s.length; e++) {
                const t = s[e];
                let o = i[t];
                a += ULTools.format("[%s] = [%s]\n", t, JSON.stringify(o))
            }
            t.push({
                type: "labelArea",
                text: a
            }),
            t.push({
                type: "newLine"
            }),
            e.setReturnValue(t, !0)
        }
    }
    class MCConsts {
    }
    MCConsts.COP_CITY_ID_2_NAME = {
        "": "关闭城市模拟"
    };
    class ULCopManager {
        constructor() {
            this.localCop = {},
            this.serverCop = {},
            this.cop = {},
            this.simulateCityId = "",
            this.simulateTemplateId = ""
        }
        init() {
            this.loadRecord();
            let e = ULConfig.getConfig();
            this.localCop = e.t_sdk_cop_default_cop,
            this.localCop = ULTools.jsonValToStr(this.localCop),
            ULSDK.console.log(`ULCopManager-init-localCop:${JSON.stringify(this.localCop)}`),
            this.processCop(),
            this.requestServerCop(!1),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, 10, this.onCmdSdkCollectionModuleCheckerConfig.bind(this))
        }
        loadRecord() {
            let e, t = ULStorageManager.getInstance().getStorage(this._getRecordKey()) || "{}";
            try {
                e = JSON.parse(t)
            } catch (t) {
                e = {}
            }
            this.setSimulateCityId(e.simulateCityId || ""),
            this.setSimulateTemplateId(e.simulateTemplateId || "")
        }
        saveRecord() {
            let e = {
                simulateCityId: this.simulateCityId || "",
                simulateTemplateId: this.simulateTemplateId || ""
            }
              , t = JSON.stringify(e);
            ULStorageManager.getInstance().setStorage(this._getRecordKey(), t)
        }
        _getRecordKey() {
            let e = ULConfig.getConfig();
            return ULTools.format("ULCopManager_record_%d", e.s_sdk_megadata_game_id)
        }
        requestServerCop(e) {
            let t = ULConfig.getConfig();
            if (!t.s_sdk_cop_game_id || "0" == t.s_sdk_cop_game_id)
                return void ULSDK.console.log("禁用cop");
            e || ULSdkManager.getInstance().channelInfo.addPreparationFlag("cop");
            let a = t.s_sdk_cop_addr
              , i = t.s_sdk_cop_game_id
              , s = t.s_sdk_cop_channel_id
              , o = t.s_sdk_cop_version
              , n = t.i_net_timeout
              , r = ULTools.format("%s?gameid=%d&qudao=%d&version=%d", a, i, s, o);
            (this.simulateCityId || this.simulateTemplateId) && (ULSDK.console.warn("使用debug模式cop地址"),
            r = r.replace("getdata/", "getdatadebug"),
            this.simulateCityId && (r += "&carrierid=0&zoneid=" + this.simulateCityId),
            this.simulateTemplateId && (r += "&templateId=" + this.simulateTemplateId)),
            ULSDK.console.log("ULCopManager.requestServerCop:", r),
            ULTools.httpGet({
                url: r,
                timeoutMillisecond: n,
                success: t=>{
                    let a = null;
                    try {
                        a = JSON.parse(t),
                        ULSdkManager.getInstance().statisManager.reportCopSuccess(t)
                    } catch (e) {
                        ULSDK.console.error(e),
                        ULSdkManager.getInstance().statisManager.reportCopFail(e.message)
                    }
                    ULSDK.console.log("copJsonData", a),
                    this.serverCop = a || {},
                    this.processCop(),
                    this.triggerCopInfoResult(),
                    e || ULSdkManager.getInstance().channelInfo.removePreparationFlag("cop")
                }
                ,
                fail: t=>{
                    ULSDK.console.warn("ULCopManager.requestServerCop http fail!", t),
                    e || ULSdkManager.getInstance().channelInfo.removePreparationFlag("cop"),
                    ULSdkManager.getInstance().statisManager.reportCopFail("timeout"),
                    ULTimer.callLater(ULConst.COP_RETRY_TIME_SEC, ()=>{
                        ULSDK.console.log(ULTools.format("ULCopManager.requestServerCop 失败后，等待%d秒重新请求cop", ULConst.COP_RETRY_TIME_SEC)),
                        this.requestServerCop(!0)
                    }
                    )
                }
            })
        }
        processCop() {
            let e = {};
            ULTools.forEachMap(this.localCop, (t,a)=>{
                e[t] = a
            }
            ),
            ULTools.forEachMap(this.serverCop, (t,a)=>{
                if ("i_" != t.substr(0, 2) || isNaN(parseFloat(a)) || (a = parseFloat(a)),
                "t_" == t.substr(0, 2))
                    try {
                        a = JSON.parse(a)
                    } catch (e) {
                        ULSDK.console.log("processCop error --key:", t, " val:", a),
                        a = ""
                    }
                e[t] = a
            }
            ),
            ULSDK.console.log("processCop.copresult cop:", e),
            this.cop = e;
            let t = ULConfig.getConfig()
              , a = ULTools.clone(this.cop);
            a.cop_game_id = t.s_sdk_cop_game_id || "unknown",
            a.cop_channel_id = t.s_sdk_cop_channel_id || "unknown",
            a.cop_version = t.s_sdk_cop_version || "unknown",
            ULSdkManager.getInstance().channelInfo.copInfo = JSON.stringify(a),
            ULConfig.updateValueByCop(this.cop),
            ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_COP_CHANGED, {})
        }
        get(e, t) {
            let a = this.cop[e];
            return null == a && (a = t),
            a
        }
        getNumberValue(e, t) {
            let a = this.get(e, t)
              , i = parseFloat(a);
            return isNaN(i) ? 0 : i
        }
        getNumberValueInRange(e, t, a, i) {
            let s = this.getNumberValue(e, t);
            return s = ULTools.clampf(s, a, i)
        }
        getBooleanValue(e, t) {
            return 1 == this.get(e, t)
        }
        setSimulateCityId(e) {
            if (this.simulateCityId = e,
            this.saveRecord(),
            "" != e) {
                let t = ULTools.format("已开启COP调试模式，模拟城市：%s_%s", e, ULConfig.getConfig().t_sdk_cop_simulate_city_data[e]);
                ULSdkManager.getInstance().moduleCheckerManager.addDebugInfo("cop", t)
            } else
                ULSdkManager.getInstance().moduleCheckerManager.removeDebugInfo("cop")
        }
        setSimulateTemplateId(e) {
            if (this.simulateTemplateId = e,
            this.saveRecord(),
            "" != e) {
                let t = ULTools.format("已开启COP调试模式，模板id：%s", e);
                ULSdkManager.getInstance().moduleCheckerManager.addDebugInfo("cop_templateId", t)
            } else
                ULSdkManager.getInstance().moduleCheckerManager.removeDebugInfo("cop_templateId")
        }
        triggerCopInfoResult() {
            let e = ULConst.DEFAULT_REFERANCE_BANNER_HEIGHT
              , t = ULConfig.getConfig();
            null != t.i_sdk_adv_reference_banner_height && (e = t.i_sdk_adv_reference_banner_height),
            ULSdkManager.getInstance().response(ULConst.CMD_COP_INFO_RESULT, {
                copInfo: ULSdkManager.getInstance().channelInfo.copInfo,
                referenceBannerHeight: e
            })
        }
        onCmdSdkCollectionModuleCheckerConfig(e) {
            let t = e.getReturnValue() || []
              , a = ULTools.clone(MCConsts.COP_CITY_ID_2_NAME)
              , i = ULConfig.getConfig();
            i.t_sdk_cop_simulate_city_data && (ULSDK.console.log("t_sdk_cop_simulate_city_data", i.t_sdk_cop_simulate_city_data),
            ULTools.forEachMap(i.t_sdk_cop_simulate_city_data, (e,t)=>{
                a[e] = t
            }
            )),
            ULSDK.console.log("cityId_2_name", a),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "Cop模块信息:"
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "cop调试模式 模板id："
            }),
            t.push({
                type: "label",
                text: this.simulateTemplateId ? ULTools.format("%s(已开启) ", this.simulateTemplateId) : "已关闭 ",
                name: "labelCopTemplate"
            }),
            t.push({
                type: "inputBox",
                name: "inputCopTemplate"
            }),
            t.push({
                type: "button",
                text: "切换开关",
                onClick: ()=>{
                    let e = "";
                    if (this.simulateTemplateId)
                        e = "";
                    else if (!(e = ULSdkManager.getInstance().moduleCheckerManager.getItemText("inputCopTemplate")))
                        return void ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("请先设置 模板id");
                    this.setSimulateTemplateId(e),
                    ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelCopTemplate", e ? ULTools.format("%s(已开启) ", e) : "已关闭 "),
                    ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("已开启cop调试模式，策略将在下次启动游戏时生效")
                }
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "cop调试模式 城市id："
            }),
            t.push({
                type: "label",
                text: ULTools.format("%s_%s", this.simulateCityId, a[this.simulateCityId]),
                name: "labelCopCity"
            }),
            t.push({
                type: "button",
                text: "选择城市..",
                onClick: ()=>{
                    let e = Object.keys(a)
                      , t = [];
                    for (let a = 0; a < e.length; a++) {
                        const i = e[a];
                        let s = parseInt(i);
                        isNaN(s) || t.push(s)
                    }
                    t.sort((e,t)=>e - t),
                    t.unshift("");
                    let i = [];
                    for (let e = 0; e < Math.min(15, t.length); e++) {
                        const s = t[e];
                        i.push({
                            text: ULTools.format("%s_%s", s, a[s]),
                            value: s
                        })
                    }
                    i.push({
                        text: "加载其他城市...",
                        value: "more"
                    });
                    let s = [];
                    for (let e = 0; e < t.length; e++) {
                        const i = t[e];
                        s.push({
                            text: ULTools.format("%s_%s", i, a[i]),
                            value: i
                        })
                    }
                    let o = e=>{
                        "more" != e ? (ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelCopCity", ULTools.format("%s_%s", e, a[e])),
                        this.setSimulateCityId(e),
                        "" != e ? ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("已开启cop调试模式，策略将在下次启动游戏时生效") : ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("cop调试模式已关闭")) : ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("选择需要模拟的城市：", s, o)
                    }
                    ;
                    ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("选择需要模拟的城市：", i, o)
                }
            }),
            t.push({
                type: "button",
                text: "重新请求cop",
                onClick: ()=>{
                    ULSdkManager.getInstance().moduleCheckerManager.alertPrompt("温馨提示", "重新请求cop不能保证所有功能生效，仅供查看cop使用。切换cop城市模拟后，请重新启动游戏测试功能", "知道了", ()=>{
                        ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("已重新请求cop，不能保证所有功能生效"),
                        this.requestServerCop(!1)
                    }
                    )
                }
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "查看cop："
            }),
            t.push({
                type: "button",
                text: "默认cop",
                onClick: ()=>{
                    let e = this.localCop
                      , t = Object.keys(e);
                    t.sort();
                    let a = "默认cop：\n";
                    for (let i = 0; i < t.length; i++) {
                        const s = t[i];
                        let o = e[s];
                        a += ULTools.format("[%s] = [%s]\n", s, o)
                    }
                    ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelCop", a)
                }
            }),
            t.push({
                type: "button",
                text: "远程cop",
                onClick: ()=>{
                    let e = this.serverCop
                      , t = Object.keys(e);
                    t.sort();
                    let a = "远程cop：\n";
                    for (let i = 0; i < t.length; i++) {
                        const s = t[i];
                        let o = e[s];
                        a += ULTools.format("[%s] = [%s]\n", s, o)
                    }
                    ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelCop", a)
                }
            }),
            t.push({
                type: "button",
                text: "生效cop",
                onClick: ()=>{
                    let e = this.cop
                      , t = Object.keys(e);
                    t.sort();
                    let a = "生效cop：\n";
                    for (let i = 0; i < t.length; i++) {
                        const s = t[i];
                        let o = e[s];
                        a += ULTools.format("[%s] = [%s]\n", s, o)
                    }
                    ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelCop", a)
                }
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "labelArea",
                text: "<<这里显示cop信息>>",
                name: "labelCop"
            }),
            t.push({
                type: "newLine"
            }),
            e.setReturnValue(t, !0)
        }
    }
    class ULAdvItem {
        constructor(e, t, a) {
            this.advId = e,
            this.advType = ULSdkManager.getInstance().advManager.searchAdvTypeByAdvId(e),
            this.advGroupId = ULSdkManager.getInstance().advManager.searchAdvGroupIdByAdvId(e),
            this.userData = t,
            this.tag = a,
            this.serialId = ULAdvItem.SERIAL_ID++,
            this.bOpenAdvResultResponsed = !1,
            this.bClickAdvResultResponsed = !1,
            this.lifeCycleLog = {},
            this.bRequesting = !0,
            this.statisChannelName = "",
            this.statisSdkAdvId = "",
            this.statisNativeAdTitle = ""
        }
        startimeoutTimer(e) {
            this.timeoutTimer || (this.timeoutTimer = new ULTimer(e,1,()=>{
                ULSdkManager.getInstance().advManager.onAdvTimeout(this)
            }
            ),
            this.timeoutTimer.start())
        }
        stopTimeoutTimer() {
            this.timeoutTimer && (this.timeoutTimer.stop(),
            this.timeoutTimer = null)
        }
        setLifeCycleLogAllCycle() {
            this.lifeCycleLog = {
                0: !0,
                1: !0,
                2: !0,
                3: !0,
                4: !0,
                5: !0
            }
        }
        set advData(e) {
            this._advData = e
        }
        get advData() {
            return this._advData
        }
    }
    ULAdvItem.SERIAL_ID = 0,
    function(e) {
        e[e.ordinary = 0] = "ordinary",
        e[e.or = 1] = "or",
        e[e.with = 2] = "with",
        e[e.error = 3] = "error"
    }(ULErrorRuleLogic || (ULErrorRuleLogic = {}));
    class ULErrorRuleItem {
        constructor(e=null) {
            this.ruleString = null,
            this.logic = ULErrorRuleLogic.ordinary,
            this.rule = null,
            this.rules = [],
            this.ruleString = e,
            e && 0 != e.length ? this.initWithRule(this.ruleString) : this.logic = ULErrorRuleLogic.error
        }
        get isWildcard() {
            return "*" == this.rule
        }
        initWithErrRule() {
            this.logic = ULErrorRuleLogic.error,
            this.rule = null,
            this.rules = []
        }
        initWithRule(e) {
            e = e.replace(/\s/g, "");
            let t = 0
              , a = 0
              , i = "";
            for (; e.length; ) {
                let s = e.charAt(0)
                  , o = e.length > 0 ? e.charAt(1) : "";
                switch (e = e.slice(1),
                s) {
                case "(":
                    t++,
                    "" == i.replace(/\(/g, "") && a++;
                    break;
                case ")":
                    if ("" == e.replace(/\)/g, "") && 0 != a)
                        return i = i.substring(a),
                        this.initWithRule(i);
                    a = --t > a ? a : t;
                    break;
                case "|":
                    if (0 == t) {
                        if (s + o == "||") {
                            if (this.logic != ULErrorRuleLogic.or && this.logic != ULErrorRuleLogic.ordinary)
                                return this.initWithErrRule();
                            this.logic = ULErrorRuleLogic.or,
                            this.rules.push(new ULErrorRuleItem(i)),
                            i = ""
                        }
                        continue
                    }
                    break;
                case "&":
                    if (0 == t) {
                        if (s + o == "&&") {
                            if (this.logic != ULErrorRuleLogic.with && this.logic != ULErrorRuleLogic.ordinary)
                                return this.initWithErrRule();
                            this.logic = ULErrorRuleLogic.with,
                            this.rules.push(new ULErrorRuleItem(i)),
                            i = ""
                        }
                        continue
                    }
                }
                i += s
            }
            i.length > 0 && (this.logic == ULErrorRuleLogic.ordinary ? this.rule = i : this.rules.push(new ULErrorRuleItem(i)))
        }
        complianceTheRules(e, t=null) {
            switch (this.logic) {
            case ULErrorRuleLogic.ordinary:
                return this.judgmentStandard(e, t);
            case ULErrorRuleLogic.or:
                for (let a of this.rules)
                    if (a.complianceTheRules(e, t))
                        return !0;
                return !1;
            case ULErrorRuleLogic.with:
                for (let a of this.rules)
                    if (!a.complianceTheRules(e, t))
                        return !1;
                return !0
            }
            return !1
        }
        judgmentStandard(key, customData=null) {
            if (null == this.rule)
                return !1;
            if ("*" == this.rule)
                return !0;
            if (this.rule == key)
                return !0;
            if (this.rule.length > 2) {
                let e = this.rule
                  , t = e.charAt(0)
                  , a = e.charAt(this.rule.length - 1);
                if (t + a == "//") {
                    e = e.substring(1, e.length - 1);
                    var reg = RegExp(e);
                    if (reg.exec(key))
                        return !0
                }
            }
            var patrn = /(?==|!=|>=|>|<|<=)/;
            if (customData && patrn.exec(this.rule)) {
                let trimRule = this.rule.replace("this.", "customData.")
                  , string = "if (" + trimRule + ") { judge = true } else { judge = false }";
                try {
                    var judge = !1;
                    return eval(string),
                    judge
                } catch (e) {
                    return ULSDK.console.log(e),
                    !1
                }
            }
            return !1
        }
    }
    class ULAdvTrimErrorManager {
        static trimErrMessage(e, t) {
            let a = ULConfig.getConfig();
            if (!a.i_sdk_trim_adv_err_switch)
                return t && ULTools.format("%s %d", ULConst.ADV_FAIL_TIP_NOAD, t.code || t.errCode) || e || ULTools.format(ULConst.ADV_FAIL_TIP_NOAD, ULConst.ADV_ERR_CODE_UNKNOWN);
            let i = a.t_sdk_trim_adv_err_object || {};
            if (!t)
                return e || ULTools.format(ULConst.ADV_FAIL_TIP_NOAD, ULConst.ADV_ERR_CODE_UNKNOWN);
            let s = {};
            s[ULSdkManager.getInstance().channelInfo.channelName || ""] = t;
            let o = null;
            try {
                o = this.getCustomMsgFromRules(i, s)
            } catch (t) {
                ULSDK.console.error("ULAdvTrimErrorManager:错误整理报错-------------请检查配置"),
                ULSDK.console.error("ULAdvTrimErrorManager:errJson：", i),
                ULSDK.console.error("ULAdvTrimErrorManager:channelNameErrJson：", s)
            }
            return o && (o = ULTools.format("%s %d", o, t.code || t.errCode)),
            o || e || ULTools.format(ULConst.ADV_FAIL_TIP_NOAD, ULConst.ADV_ERR_CODE_UNKNOWN)
        }
        static getCustomMsgFromRules(e, t) {
            let a = []
              , i = [];
            if ("object" != typeof e)
                return "string" == typeof e ? e : "";
            if (a = Object.keys(e),
            !t)
                return "";
            "object" == typeof t ? i = Object.keys(t) : i.push(t);
            let s = a.length;
            for (; a.length; ) {
                let o = a.shift();
                s--;
                let n = this.trimRules[o];
                if (n || (n = new ULErrorRuleItem(o),
                this.trimRules[o] = n),
                n.isWildcard && s > 0) {
                    a.join(o);
                    continue
                }
                let r = e[o];
                for (let e of i)
                    if (n.complianceTheRules(e, t)) {
                        let a = t[e] || null
                          , i = this.getCustomMsgFromRules(r, a);
                        if (i)
                            return i
                    }
            }
            return ""
        }
    }
    ULAdvTrimErrorManager.trimRules = {},
    function(e) {
        e[e.loading = 0] = "loading",
        e[e.ready = 1] = "ready",
        e[e.show = 2] = "show",
        e[e.clicked = 3] = "clicked",
        e[e.close = 4] = "close",
        e[e.failed = 5] = "failed",
        e[e.timeout = 6] = "timeout"
    }(AdvLifeCycle || (AdvLifeCycle = {}));
    const LIFE_CYCLE_2_NAME = {
        [AdvLifeCycle.loading]: "loading",
        [AdvLifeCycle.ready]: "ready",
        [AdvLifeCycle.show]: "show",
        [AdvLifeCycle.clicked]: "clicked",
        [AdvLifeCycle.close]: "close",
        [AdvLifeCycle.failed]: "failed",
        [AdvLifeCycle.timeout]: "timeout"
    };
    class ULAdvManager {
        constructor() {
            this.serialId = 0,
            this.advTypeLastTriggerTimeLog = {}
        }
        init() {
            this.loadRecord(),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, ULConst.PRIORITY_NONE, this.onCmdSdkCollectionModuleCheckerConfig.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_OPEN_ADV, ULConst.PRIORITY_NONE, this.onCmdOpenAdv.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_CLOSE_ADV, ULConst.PRIORITY_NONE, this.onCmdCloseAdv.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_CLOSE_NATIVE_ADV, ULConst.PRIORITY_NONE, this.onCmdCloseNativeAdv.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_CLICK_NATIVE_ADV, ULConst.PRIORITY_NONE, this.onCmdClickNativeAdv.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_RESUME, ULConst.PRIORITY_NONE, this.onCmdSdkOnGameResume.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_PAUSE, ULConst.PRIORITY_NONE, this.onCmdSdkOnGamePause.bind(this)),
            this.sdkInitTime = ULTools.time(),
            this.isFirstPlayVideo = !0,
            this.playingAdvItems = {}
        }
        loadRecord() {
            let e, t = ULStorageManager.getInstance().getStorage(this._getRecordKey()) || "{}";
            try {
                e = JSON.parse(t)
            } catch (t) {
                e = {}
            }
            this.advTypeDailyCountLog = e.advTypeDailyCountLog || {},
            this.advTypeDailyRefreshTime = e.advTypeDailyRefreshTime || 0,
            this.tryDailyRefresh()
        }
        saveRecord() {
            let e = {
                advTypeDailyCountLog: this.advTypeDailyCountLog || {},
                advTypeDailyRefreshTime: this.advTypeDailyRefreshTime || 0
            }
              , t = JSON.stringify(e);
            ULStorageManager.getInstance().setStorage(this._getRecordKey(), t)
        }
        _getRecordKey() {
            let e = ULConfig.getConfig();
            return ULTools.format("ULAdvManager_record_%d", e.s_sdk_megadata_game_id)
        }
        searchAdvGroupIdByAdvId(e) {
            let t = ULConfig.getConfig().s_sdk_adv_info
              , a = null;
            return ULTools.forEachMap(t, (t,i)=>{
                if (i.group.indexOf(e) >= 0)
                    return a = t,
                    !0
            }
            ),
            a || (ULSDK.console.warn("ULAdvBase.calcAdvGroupIdByAdvId adbGroupId not found! advId: ", e),
            a = e),
            a
        }
        searchAdvTypeByAdvId(e) {
            let t = ULConfig.getConfig().s_sdk_adv_info
              , a = null;
            return ULTools.forEachMap(t, (t,i)=>{
                if (i.group.indexOf(e) >= 0)
                    return a = i.type,
                    !0
            }
            ),
            a || ULSDK.console.warn("ULAdvBase.searchAdvTypeByAdvId advType not found! advId: ", e),
            a
        }
        tryDailyRefresh() {
            ULTools.isOneDay(this.advTypeDailyRefreshTime, ULTools.time()) || (ULSDK.console.log("ULAdvManager.tryDailyRefresh 进行日常刷新"),
            this.advTypeDailyCountLog = {},
            this.advTypeDailyRefreshTime = ULTools.time(),
            this.saveRecord())
        }
        getAdvTypeDailyLimit(e) {
            let t = ULConfig.getConfig()
              , a = 0;
            switch (e) {
            case "interstitial":
                a = t.i_sdk_adv_type_interstitial_daily_limit;
                break;
            case "banner":
                a = t.i_sdk_adv_type_banner_daily_limit;
                break;
            case "embedded":
                a = t.i_sdk_adv_type_embedded_daily_limit;
                break;
            case "video":
                a = t.i_sdk_adv_type_video_daily_limit;
                break;
            case "url":
                a = t.i_sdk_adv_type_url_daily_limit;
                break;
            case "paster":
                a = t.i_sdk_adv_type_paster_daily_limit
            }
            return null == a ? 0 : isNaN(a) ? 0 : a
        }
        getAdvTypeCd(e) {
            let t = ULConfig.getConfig()
              , a = 0;
            switch (e) {
            case "interstitial":
                a = t.i_sdk_adv_type_interstitial_cd;
                break;
            case "banner":
                a = t.i_sdk_adv_type_banner_cd;
                break;
            case "embedded":
                a = t.i_sdk_adv_type_embedded_cd;
                break;
            case "video":
                a = t.i_sdk_adv_type_video_cd;
                break;
            case "url":
                a = t.i_sdk_adv_type_url_cd;
                break;
            case "paster":
                a = t.i_sdk_adv_type_paster_cd
            }
            return null == a ? 0 : isNaN(a) ? 0 : a
        }
        getLaunchCdByType(e) {
            let t = ULConfig.getConfig()
              , a = 0;
            switch (e) {
            case "interstitial":
                a = t.i_sdk_adv_inter_launch_cd;
                break;
            case "banner":
                a = t.i_sdk_adv_banner_launch_cd;
                break;
            case "embedded":
                a = t.i_sdk_adv_embed_launch_cd;
                break;
            case "video":
                a = t.i_sdk_adv_video_launch_cd;
                break;
            case "url":
                a = t.i_sdk_adv_url_launch_cd;
                break;
            case "paster":
                a = t.i_sdk_adv_paster_launch_cd
            }
            return null == a ? 0 : isNaN(a) ? 0 : a
        }
        responseOpenAdvResult(e, t, a) {
            let i = this.playingAdvItems[a.advId];
            i ? i.serialId == a.serialId ? (i.stopTimeoutTimer(),
            i.bRequesting = !1,
            i.bOpenAdvResultResponsed ? ULSDK.console.log("ULAdvManager.responseOpenAdvResult /c/openAdvResult alredy responsed", a.advId, a.serialId) : (i.bOpenAdvResultResponsed = !0,
            1 == e && (ULSDK.console.log("advTypeLastTriggerTimeLog", i.advType, ULTools.time()),
            this.advTypeLastTriggerTimeLog[i.advType] = ULTools.time(),
            this.advTypeDailyCountLog[i.advType] = (this.advTypeDailyCountLog[i.advType] || 0) + 1,
            this.saveRecord()),
            ULSdkManager.getInstance().response(ULConst.CMD_OPEN_ADV_RESULT, {
                code: e,
                msg: t || ULConst.ADV_FAIL_TIP_NOAD,
                advId: a.advId,
                userData: a.userData
            }))) : ULSDK.console.warn(ULTools.format("ULAdvManager.responseOpenAdvResult playing advItem serialId not match! advId=[%s], arg serialId=[%d], playing serialId=[%d]", a.advId, a.serialId, i.serialId)) : ULSDK.console.warn(ULTools.format("ULAdvManager.responseOpenAdvResult playing advItem not found! advId=[%s]", a.advId))
        }
        responseClickAdvResult(e, t, a) {
            let i = this.playingAdvItems[a.advId];
            i ? i.serialId == a.serialId ? i.bClickAdvResultResponsed ? ULSDK.console.log("ULAdvManager.responseClickAdvResult /c/clickAdvResult alredy responsed", a.advId, a.serialId) : (i.bClickAdvResultResponsed = !0,
            ULSdkManager.getInstance().response(ULConst.CMD_CLICK_ADV_RESULT, {
                code: e,
                msg: t,
                advId: a.advId,
                userData: a.userData
            })) : ULSDK.console.warn(ULTools.format("ULAdvManager.responseClickAdvResult playing advItem serialId not match! advId=[%s], arg serialId=[%d], playing serialId=[%d]", a.advId, a.serialId, i.serialId)) : ULSDK.console.warn(ULTools.format("ULAdvManager.responseClickAdvResult playing advItem not found! advId=[%s]", a.advId))
        }
        showNextAdv(e, t, a) {
            let i = e.advType;
            if (e.bOpenAdvResultResponsed)
                ULSDK.console.log("ULAdvManager.showNextAdv /c/openAdvResult alredy responsed", e.advId, e.serialId);
            else
                switch (e.lifeCycleLog = {},
                i) {
                case "video":
                    ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_SHOW_VIDEO_ADV, e) || this.onAdvFailed(e, t, a);
                    break;
                case "banner":
                    ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_SHOW_BANNER_ADV, e) || this.onAdvFailed(e, t, a);
                    break;
                case "interstitial":
                    ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_SHOW_INTER_ADV, e) || this.onAdvFailed(e, t, a);
                    break;
                case "embedded":
                    ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_SHOW_EMBEDDED_ADV, e) || this.onAdvFailed(e, t, a);
                    break;
                case "url":
                    ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_SHOW_URL_ADV, e) || this.onAdvFailed(e, t, a);
                    break;
                case "paster":
                    ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_SHOW_PASTER_ADV, e) || this.onAdvFailed(e, t, a);
                    break;
                default:
                    ULSDK.console.warn(ULTools.format("ULAdvManager.showNextAdv unknown advType! advId=[%s]", e.advId)),
                    this.onAdvFailed(e, t, a)
                }
        }
        onAdvLoad(e, t) {
            this.onAdvLifeCycle(e, AdvLifeCycle.loading, t)
        }
        onAdvReady(e, t) {
            this.onAdvLifeCycle(e, AdvLifeCycle.ready, t)
        }
        onAdvShow(e, t, a) {
            e.statisNativeAdTitle = a,
            this.onAdvLifeCycle(e, AdvLifeCycle.show, t)
        }
        onAdvClicked(e, t) {
            this.onAdvLifeCycle(e, AdvLifeCycle.clicked, t)
        }
        onAdvClose(e, t) {
            this.onAdvLifeCycle(e, AdvLifeCycle.close, t)
        }
        onAdvFailed(e, t, a) {
            this.onAdvLifeCycle(e, AdvLifeCycle.failed, t, a)
        }
        onAdvTimeout(e, t) {
            this.onAdvLifeCycle(e, AdvLifeCycle.timeout, t)
        }
        onAdvLifeCycle(e, t, a, i) {
            if (e.lifeCycleLog[t])
                ULSDK.console.log("ULAdvManager.onAdvLifeCycle lifeCycle已触发，跳过", e.advId, e.serialId, t, LIFE_CYCLE_2_NAME[t]);
            else
                switch (ULSDK.console.log("ULAdvManager.onAdvLifeCycle", e.advId, e.serialId, t, LIFE_CYCLE_2_NAME[t]),
                ULSDK.console.log("ULAdvManager.onAdvLifeCycle advItem", e, t),
                e.lifeCycleLog[t] = !0,
                e.showAdvType) {
                case "video":
                    switch (t) {
                    case AdvLifeCycle.loading:
                        ULSdkManager.getInstance().statisManager.reportAdvLoadAdvRequest(e);
                        break;
                    case AdvLifeCycle.ready:
                        e.lifeCycleLog[AdvLifeCycle.loading] && ULSdkManager.getInstance().statisManager.reportAdvLoadAdvSuccess(e);
                        break;
                    case AdvLifeCycle.show:
                        e.stopTimeoutTimer(),
                        ULSdkManager.getInstance().statisManager.reportAdvPlayStart(e);
                        break;
                    case AdvLifeCycle.clicked:
                        e.bFinished = !0,
                        this.responseClickAdvResult(1, a || "点击成功", e),
                        this.responseOpenAdvResult(1, a || "播放完成", e),
                        ULSdkManager.getInstance().statisManager.reportAdvSuccess(e);
                        break;
                    case AdvLifeCycle.close:
                        e.bFinished = !0,
                        e.lifeCycleLog[AdvLifeCycle.show] ? (this.responseOpenAdvResult(1, a || "播放完成", e),
                        ULSdkManager.getInstance().statisManager.reportAdvSuccess(e),
                        ULSdkManager.getInstance().statisManager.reportAdvPlayCompletion(e)) : (this.responseOpenAdvResult(0, a || "未播放完成", e),
                        ULSdkManager.getInstance().statisManager.reportAdvFail(e, a || "未播放完成"));
                        break;
                    case AdvLifeCycle.timeout:
                    case AdvLifeCycle.failed:
                        {
                            e.bFinished = !0;
                            let t = ULAdvTrimErrorManager.trimErrMessage(a, i);
                            this.responseOpenAdvResult(0, t, e);
                            let s = i && JSON.stringify(i) || a || ULTools.format(ULConst.ADV_FAIL_TIP_NOAD, ULConst.ADV_ERR_CODE_UNKNOWN);
                            ULSdkManager.getInstance().statisManager.reportAdvFail(e, s),
                            e.lifeCycleLog[AdvLifeCycle.loading] && !e.lifeCycleLog[AdvLifeCycle.ready] && ULSdkManager.getInstance().statisManager.reportAdvLoadAdvFailed(e, s);
                            break
                        }
                    default:
                        ULSDK.console.log("ULAdvManager.onAdvLifeCycle 其他生命周期忽略", e, t)
                    }
                    break;
                default:
                    switch (t) {
                    case AdvLifeCycle.loading:
                        ULSdkManager.getInstance().statisManager.reportAdvLoadAdvRequest(e);
                        break;
                    case AdvLifeCycle.ready:
                        e.lifeCycleLog[AdvLifeCycle.loading] && ULSdkManager.getInstance().statisManager.reportAdvLoadAdvSuccess(e);
                        break;
                    case AdvLifeCycle.show:
                        this.responseOpenAdvResult(1, a || "播放成功", e),
                        ULSdkManager.getInstance().statisManager.reportAdvSuccess(e),
                        "banner" == e.showAdvType && (this.bannerStartShowTime = ULTools.time(),
                        this.bannerIsShowing = !0,
                        this.currentShowBannerAdvItem = e);
                        break;
                    case AdvLifeCycle.clicked:
                        this.responseClickAdvResult(1, a || "点击成功", e),
                        ULSdkManager.getInstance().statisManager.reportAdvClicked(e);
                        break;
                    case AdvLifeCycle.timeout:
                    case AdvLifeCycle.failed:
                        {
                            let t = ULAdvTrimErrorManager.trimErrMessage(a, i);
                            this.responseOpenAdvResult(0, t, e);
                            let s = i && JSON.stringify(i) || a || ULTools.format(ULConst.ADV_FAIL_TIP_NOAD, ULConst.ADV_ERR_CODE_UNKNOWN);
                            ULSdkManager.getInstance().statisManager.reportAdvFail(e, s),
                            e.lifeCycleLog[AdvLifeCycle.loading] && !e.lifeCycleLog[AdvLifeCycle.ready] && ULSdkManager.getInstance().statisManager.reportAdvLoadAdvFailed(e, s);
                            break
                        }
                    }
                }
        }
        onCmdOpenAdv(e) {
            e.stopImmediatePropagation();
            let t = e.data
              , a = ULConfig.getConfig();
            this.tryDailyRefresh(),
            t.serialId = this.serialId++;
            let i = t.advId
              , s = t.userData
              , o = t.tag
              , n = this.searchAdvTypeByAdvId(i);
            this.searchAdvGroupIdByAdvId(i);
            if (ULSDK.console.log(ULTools.format("ULAdvManager.onCmdOpenAdv advId:[%s] advType:[%s] serialId:[%s]", i, n, this.serialId)),
            !n)
                return void this.responseOpenAdvResult(0, "advType not found", t);
            let r = new ULAdvItem(i,s,o);
            if (r.advData = t,
            this.playingAdvItems[i] && this.playingAdvItems[i].bRequesting)
                return ULSDK.console.log("广告请求中，请勿重复请求"),
                void this.responseOpenAdvResult(0, "广告请求中，请勿重复请求", r);
            this.playingAdvItems[r.advId] = r,
            ULSdkManager.getInstance().statisManager.reportAdvTotalRequest(r);
            let l = a.i_sdk_adv_all_launch_cd;
            if (ULTools.time() - this.sdkInitTime < l / 1e3)
                return ULSDK.console.log("广告处于启动请求cd中"),
                void this.responseOpenAdvResult(0, "in all adv launch cd", t);
            let h = this.getLaunchCdByType(n);
            if (ULTools.time() - this.sdkInitTime < h / 1e3)
                return ULSDK.console.log("广告处于启动请求cd中"),
                void this.responseOpenAdvResult(0, `in ${n} adv launch cd`, t);
            let d = this.getAdvTypeCd(n);
            if (d > 0) {
                let e = this.advTypeLastTriggerTimeLog[n] || 0
                  , t = ULTools.time() - e;
                if (ULSDK.console.log(ULTools.format("检查广告类型cd。上次播放间隔%d秒，cd%d秒", t, d / 1e3)),
                t <= d / 1e3)
                    return ULSDK.console.log(ULTools.format("广告类型[%s]cd中，请%d后再试", n, d / 1e3 - t)),
                    void this.responseOpenAdvResult(0, ULTools.format("%s %d", ULConst.ADV_FAIL_TIP_BUSY, ULConst.ADV_ERR_CODE_ADV_TYPE_CD), r)
            }
            let c = this.getAdvTypeDailyLimit(n);
            if (c > 0) {
                let e = this.advTypeDailyCountLog[n] || 0;
                if (ULSDK.console.log(ULTools.format("检查广告日限。今日已播放%d次，日限制%d次", e, c)),
                e >= c)
                    return ULSDK.console.log(ULTools.format("广告类型[%s]今日已播放%d次，限制%d次。无法播放。", n, e, c)),
                    void this.responseOpenAdvResult(0, ULTools.format("%s %d", ULConst.ADV_FAIL_TIP_NOAD, ULConst.ADV_ERR_CODE_ADV_TYPE_DAILY_LIMIT), r)
            }
            switch (n) {
            case "video":
                if (r.startimeoutTimer(a.i_sdk_adv_video_timeout / 1e3),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_PREPARE_SHOW_VIDEO_ADV, r),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_SHOW_VIDEO_ADV, r) || this.responseOpenAdvResult(0, "无模块响应", r),
                this.isFirstPlayVideo) {
                    this.isFirstPlayVideo = !1;
                    let e = ULTools.time() - this.sdkInitTime;
                    e = Math.floor(e),
                    isNaN(e) && (e = 0),
                    e < a.t_sdk_miniplay_game_adv_point_first_click_event_report_time_limit && ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, [a.s_sdk_miniplay_game_adv_point_first_click_event_id, o, e.toString()])
                }
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, [a.s_sdk_miniplay_game_click_video_event_id, o]);
                break;
            case "banner":
                r.startimeoutTimer(a.i_sdk_adv_banner_timeout / 1e3),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_PREPARE_SHOW_BANNER_ADV, r),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_SHOW_BANNER_ADV, r) || this.responseOpenAdvResult(0, "无模块响应", r);
                break;
            case "interstitial":
                r.startimeoutTimer(a.i_sdk_adv_inter_timeout / 1e3),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_PREPARE_SHOW_INTER_ADV, r),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_SHOW_INTER_ADV, r) || this.responseOpenAdvResult(0, "无模块响应", r);
                break;
            case "embedded":
                r.startimeoutTimer(a.i_sdk_adv_embedded_timeout / 1e3),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_PREPARE_SHOW_EMBEDDED_ADV, r),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_SHOW_EMBEDDED_ADV, r) || this.responseOpenAdvResult(0, "无模块响应", r);
                break;
            case "url":
                r.startimeoutTimer(a.i_sdk_adv_url_timeout / 1e3),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_PREPARE_SHOW_URL_ADV, r),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_SHOW_URL_ADV, r) || this.responseOpenAdvResult(0, "无模块响应", r);
                break;
            case "paster":
                r.startimeoutTimer(a.i_sdk_adv_paster_timeout / 1e3),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_PREPARE_SHOW_PASTER_ADV, r),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_SHOW_PASTER_ADV, r) || this.responseOpenAdvResult(0, "无模块响应", r);
                break;
            default:
                ULSDK.console.warn(ULTools.format("ULAdvManager.onCmdOpenAdv unknown advType! advId=[%s]", i)),
                this.responseOpenAdvResult(0, "unknown advType", r)
            }
        }
        onCmdCloseAdv(e) {
            e.stopImmediatePropagation();
            let t = e.data
              , a = t.advId
              , i = t.userData
              , s = this.searchAdvTypeByAdvId(a);
            ULSDK.console.log(ULTools.format("ULAdvManager.onCmdCloseAdv advId:[%s] advType:[%s]", a, s));
            let o = this.playingAdvItems[a];
            if (o) {
                switch (s) {
                case "video":
                    ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CLOSE_VIDEO_ADV, o);
                    break;
                case "banner":
                    if (ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CLOSE_BANNER_ADV, o),
                    this.bannerIsShowing) {
                        this.bannerIsShowing = !1;
                        let e = ULTools.time() - this.bannerStartShowTime;
                        isNaN(e) && (e = 0),
                        ULSdkManager.getInstance().statisManager.reportAdvClose(o, Math.round(e).toString())
                    }
                    break;
                case "interstitial":
                    ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CLOSE_INTER_ADV, o);
                    break;
                case "embedded":
                    ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CLOSE_EMBEDDED_ADV, o);
                    break;
                case "url":
                    ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CLOSE_URL_ADV, o);
                    break;
                case "paster":
                    ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CLOSE_Paster_ADV, o);
                    break;
                default:
                    ULSDK.console.warn(ULTools.format("ULAdvManager.onCmdCloseAdv unknown advType! advId=[%s]", a))
                }
                ULSdkManager.getInstance().response(ULConst.CMD_CLOSE_ADV_RESULT, {
                    code: 1,
                    msg: "关闭成功",
                    advId: a,
                    userData: i
                })
            } else
                ULSdkManager.getInstance().response(ULConst.CMD_CLOSE_ADV_RESULT, {
                    code: 0,
                    msg: "adv not found!",
                    advId: a,
                    userData: i
                })
        }
        onCmdCloseNativeAdv(e) {
            e.stopImmediatePropagation();
            let t = e.data
              , a = t.advId
              , i = t.userData
              , s = this.playingAdvItems[a];
            s ? (ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CLOSE_NATIVE_ADV, {
                advItem: s,
                closeType: t.closeType
            }),
            ULSdkManager.getInstance().response(ULConst.CMD_CLOSE_NATIVE_ADV_RESULT, {
                code: 1,
                msg: "关闭成功",
                advId: a,
                userData: i
            })) : ULSdkManager.getInstance().response(ULConst.CMD_CLOSE_NATIVE_ADV_RESULT, {
                code: 0,
                msg: "adv not found!",
                advId: a,
                userData: i
            })
        }
        onCmdClickNativeAdv(e) {
            e.stopImmediatePropagation();
            let t = e.data
              , a = t.advId
              , i = t.userData
              , s = this.playingAdvItems[a];
            ULSDK.console.log("ULAdvManager.onCmdClickNativeAdv", a, s),
            s ? (ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CLICK_NATIVE_ADV, s),
            ULSdkManager.getInstance().response(ULConst.CMD_CLICK_NATIVE_ADV_RESULT, {
                code: 1,
                msg: "汇报成功",
                advId: a,
                userData: i
            })) : ULSdkManager.getInstance().response(ULConst.CMD_CLICK_NATIVE_ADV_RESULT, {
                code: 0,
                msg: "adv not found!",
                advId: a,
                userData: i
            })
        }
        onCmdSdkOnGameResume(e) {
            ULConfig.getConfig();
            ULSDK.console.log("ULAdvManager.onCmdSdkOnGameResume bannerIsShowing:", this.bannerIsShowing, " this.bannerStartShowTime:", this.bannerStartShowTime),
            this.bannerIsShowing && (this.bannerStartShowTime = ULTools.time())
        }
        onCmdSdkOnGamePause(e) {
            ULConfig.getConfig();
            if (ULSDK.console.log("ULAdvManager.onCmdSdkOnGamePause bannerIsShowing:", this.bannerIsShowing, " this.bannerStartShowTime:", this.bannerStartShowTime),
            this.bannerIsShowing) {
                let e = ULTools.time() - this.bannerStartShowTime;
                isNaN(e) && (e = 0),
                ULSdkManager.getInstance().statisManager.reportAdvClose(this.currentShowBannerAdvItem, Math.round(e).toString())
            }
        }
        onCmdSdkCollectionModuleCheckerConfig(e) {
            let t = e.getReturnValue() || []
              , a = ["interstitial", "banner", "embedded", "video", "url", "paster"];
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "广告cd限制:"
            }),
            t.push({
                type: "newLine"
            });
            for (let e = 0; e < a.length; e++) {
                const i = a[e];
                let s = "未配置CD"
                  , o = "未触发"
                  , n = this.getAdvTypeCd(i);
                n > 0 && (s = ULTools.format("CD%d秒", n / 1e3));
                let r = this.advTypeLastTriggerTimeLog[i] || 0;
                r > 0 && (o = ULTools.formatDate(new Date(1e3 * r), "触发时间：HH:mm:ss")),
                t.push({
                    type: "label",
                    text: ULTools.format("%s: %s %s", i, s, o)
                }),
                t.push({
                    type: "newLine"
                })
            }
            t.push({
                type: "label",
                text: "广告次数限制:"
            }),
            t.push({
                type: "newLine"
            });
            for (let e = 0; e < a.length; e++) {
                const i = a[e];
                let s = "未配置次数限制"
                  , o = "未触发"
                  , n = this.getAdvTypeDailyLimit(i);
                n > 0 && (s = ULTools.format("日限制%d次", n));
                let r = this.advTypeDailyCountLog[i] || 0;
                r > 0 && (o = ULTools.format("今日已触发%d次", r)),
                t.push({
                    type: "label",
                    text: ULTools.format("%s: %s %s", i, s, o)
                }),
                t.push({
                    type: "newLine"
                })
            }
            e.setReturnValue(t, !0)
        }
    }
    class ULStatisManager {
        constructor() {
            this.bUploading = !1,
            this.lastTimerLoopTime = null,
            this.pointEventLog = {},
            this.pointEventCategoryId_2_enabled = null,
            this.gameStartDataPreparationFlags = {},
            this.commonEventLog = {},
            this.levelStartLog = {},
            this.levelCompletetLog = {},
            this.videoPointLog = {},
            this.buyActionLog = {},
            this.coinChangeLog = {}
        }
        init() {
            this.channelInfoUuid = ULSdkManager.getInstance().channelInfo.uuid,
            this.megadataId = ULConfig.getConfig().s_sdk_megadata_server_type_id,
            this.loadRecord(),
            ULTimer.callLoop(ULConfig.getConfig().i_sdk_megadata_upload_span / 1e3, this.onTimerLoop.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_START, ULConst.PRIORITY_NONE, this.onCmdSdkOnGameStart.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_PAUSE, ULConst.PRIORITY_NONE, this.onCmdSdkOnGamePause.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_RESUME, ULConst.PRIORITY_NONE, this.onCmdSdkOnGameResume.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_COP_CHANGED, ULConst.PRIORITY_NONE, this.onCmdSdkOnCopChanged.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, 9, this.onCmdSdkCollectionModuleCheckerConfig.bind(this))
        }
        loadRecord() {
            let e, t = ULStorageManager.getInstance().getStorage(this._getRecordKey()) || "{}";
            try {
                e = JSON.parse(t)
            } catch (t) {
                e = {}
            }
            this.cacheItems = e.cacheItems || [];
            let a = e.postMegadataTestMode || 0;
            this.postMegadataTestUserId = e.postMegadataTestUserId,
            this.setPostMegadataMode(a)
        }
        saveRecord() {
            let e = {
                cacheItems: this.cacheItems || [],
                postMegadataTestUserId: this.postMegadataTestUserId,
                postMegadataTestMode: this.postMegadataTestMode
            }
              , t = JSON.stringify(e);
            ULStorageManager.getInstance().setStorage(this._getRecordKey(), t)
        }
        _getRecordKey() {
            let e = ULConfig.getConfig();
            return ULTools.format("ULStatisManager_record_%d", e.s_sdk_megadata_game_id)
        }
        onTimerLoop(e) {
            this.cacheItems.length <= 0 ? ULConst.B_INNER_DEBUG && ULSDK.console.log("ULStatisManager.onTimerLoop no cacheItems") : this.tryUploadToServer()
        }
        setPostMegadataMode(e) {
            if (this.postMegadataTestMode = e,
            this.saveRecord(),
            this.postMegadataTestMode) {
                this.channelInfoUuid = this.postMegadataTestUserId;
                let e = "数据上传已开启测试模式\n测试用户id:" + this.postMegadataTestUserId;
                ULSdkManager.getInstance().moduleCheckerManager.addDebugInfo("postMegadataTestModeInfo", e)
            } else
                this.channelInfoUuid = ULSdkManager.getInstance().channelInfo.uuid,
                ULSdkManager.getInstance().moduleCheckerManager.removeDebugInfo("postMegadataTestModeInfo")
        }
        getPostMegadataMode() {
            return this.postMegadataTestMode
        }
        _report(e, t) {
            let a = ULConfig.getConfig()
              , i = (a.s_sdk_megadata_close_table_type_ids || "").split(";");
            for (let t = 0; t < i.length; t++) {
                let a = ULTools.format("%s-%s", this.megadataId, i[t]);
                if (a == e)
                    return void ULSDK.console.log("ULStatisManager._report 大数据分表控制表数据上传closeId:", a)
            }
            ULSDK.console.log("ULStatisManager._report i_sdk_megadata_mode 1 ", a.i_sdk_megadata_mode);
            try {
                let a = {
                    typeid: e,
                    updata: t
                };
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_REPORT_ULSDK_EVENT, {
                    parameter: a
                })
            } catch (e) {
                ULSDK.console.log("ULStatisManager.CMD_SDK_ON_REPORT_ULSDK_EVENT error:", e)
            }
            if (!a.i_sdk_megadata_mode)
                return void ULSDK.console.log("ULStatisManager._report !i_sdk_megadata_mode 关闭统计功能");
            if (this.postMegadataTestMode) {
                let t = this.megadataId + "-";
                e = e.replace(t, "1-"),
                ULSDK.console.log("ULStatisManager._report postMegadataTestMode 已打开 typeid:", e)
            }
            if (0 == t.length)
                return void ULSDK.console.log("ULStatisManager._report !updata 无有效数据，无法上报:", t);
            for (let e = 0; e < t.length; e++) {
                let a = t[e];
                "string" != typeof a && (a = null == a ? "" : "" + a),
                t[e] = a
            }
            let s = {
                typeid: e,
                updata: t
            };
            this.cacheItems.push(s),
            this.saveRecord(),
            this.cacheItems.length >= ULConst.STATIS_UPLOAD_SINGLE_REQUEST_MAX_COUNT && this.tryUploadToServer()
        }
        tryUploadToServer() {
            if (this.bUploading)
                return void (ULConst.B_INNER_DEBUG && ULSDK.console.log("ULStatisManager.tryUploadToServer 数据上传中"));
            let e = Math.min(this.cacheItems.length, ULConst.STATIS_UPLOAD_SINGLE_REQUEST_MAX_COUNT);
            if (e <= 0)
                return void (ULConst.B_INNER_DEBUG && ULSDK.console.log("ULStatisManager.tryUploadToServer 没有数据需要上传"));
            this.bUploading = !0;
            let t = [];
            for (let a = 0; a < e; a++) {
                const e = this.cacheItems[a];
                t.push(e)
            }
            let a = ULConfig.getConfig()
              , i = a.s_sdk_megadata_url;
            if (this.postMegadataTestMode && (i = a.s_sdk_megadata_test_url),
            a.i_sdk_megadata_encrypt)
                return void ULTools.httpPostEncryption({
                    url: i,
                    postString: JSON.stringify(t),
                    timeoutMillisecond: a.i_net_timeout,
                    success: t=>{
                        ULConst.B_INNER_DEBUG && console.log("  加密统计上报成功!"),
                        this.cacheItems.splice(0, e),
                        this.saveRecord(),
                        this.bUploading = !1
                    }
                    ,
                    fail: e=>{
                        ULConst.B_INNER_DEBUG && console.log("  加密统计上报错误!", e),
                        this.bUploading = !1
                    }
                });
            let s = "updata=" + JSON.stringify(t);
            ULConst.B_INNER_DEBUG && ULSDK.console.log("ULStatisManager.tryUploadToServer"),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("  url:", i),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("  postData:", s),
            ULTools.httpPost({
                url: i,
                postData: s,
                timeoutMillisecond: a.i_net_timeout,
                success: t=>{
                    ULConst.B_INNER_DEBUG && ULSDK.console.log("  统计上报成功!"),
                    this.cacheItems.splice(0, e),
                    this.saveRecord(),
                    this.bUploading = !1
                }
                ,
                fail: e=>{
                    ULConst.B_INNER_DEBUG && ULSDK.console.log("  统计上报错误!", e),
                    this.bUploading = !1
                }
            })
        }
        uploadToServerRightNow(e, t) {
            let a = ULConfig.getConfig()
              , i = a.s_sdk_megadata_url;
            if (!a.i_sdk_megadata_mode)
                return void ULSDK.console.log("ULStatisManager.uploadToServerRightNow !i_sdk_megadata_mode 关闭统计功能");
            if (this.postMegadataTestMode) {
                i = a.s_sdk_megadata_test_url;
                let t = this.megadataId + "-";
                e = e.replace(t, "1-"),
                ULSDK.console.log("ULStatisManager.uploadToServerRightNow postMegadataTestMode 已打开 typeid:", e)
            }
            let s = {
                typeid: e,
                updata: t
            }
              , o = [];
            if (o.push(s),
            a.i_sdk_megadata_encrypt)
                return void ULTools.httpPostEncryption({
                    url: i,
                    postString: JSON.stringify(o),
                    timeoutMillisecond: a.i_net_timeout,
                    success: e=>{
                        ULConst.B_INNER_DEBUG && console.log("  统计上报成功!")
                    }
                    ,
                    fail: e=>{
                        ULConst.B_INNER_DEBUG && console.log("  统计上报错误!", e)
                    }
                });
            let n = "updata=" + JSON.stringify(o);
            ULConst.B_INNER_DEBUG && ULSDK.console.log("ULStatisManager.uploadToServerRightNow"),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("  url:", i),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("  postData:", n),
            ULTools.httpPost({
                url: i,
                postData: n,
                timeoutMillisecond: a.i_net_timeout,
                success: e=>{
                    ULConst.B_INNER_DEBUG && ULSDK.console.log("  统计上报成功!")
                }
                ,
                fail: e=>{
                    ULConst.B_INNER_DEBUG && ULSDK.console.log("  统计上报错误!", e)
                }
            })
        }
        genPointEventLog() {
            let e = this.pointEventLog
              , t = []
              , a = [];
            ULTools.forEachMap(e, (e,t)=>{
                let i = parseInt(e);
                a.push({
                    eventId: i,
                    v: t
                })
            }
            ),
            a = ULTools.sortArrayByField(a, "eventId");
            for (let e = 0; e < a.length; e++) {
                const i = a[e];
                let s = [];
                ULTools.forEachMap(i.v, (e,t)=>{
                    let a = parseInt(e);
                    s.push({
                        paramId: a,
                        count: t
                    })
                }
                ),
                s = ULTools.sortArrayByField(s, "paramId");
                for (let e = 0; e < s.length; e++) {
                    const a = s[e];
                    t.push(ULTools.format("%d-%d: %d", i.eventId, a.paramId, a.count))
                }
            }
            return t
        }
        getCommonEventLog() {
            let e = []
              , t = []
              , a = this.commonEventLog;
            ULSDK.console.log("ULStatisManager.getCommonEventLog rawLog:", a),
            ULTools.forEachMap(a, (e,a)=>{
                t.push(e)
            }
            ),
            t.sort();
            for (let i = 0; i < t.length; i++) {
                let s = t[i];
                e.push(ULTools.format("%s: %d", s, a[s]))
            }
            return e
        }
        getLevelStartLog() {
            let e = []
              , t = []
              , a = this.levelStartLog;
            ULSDK.console.log("ULStatisManager.getLevelStartLog rawLog:", a),
            ULTools.forEachMap(a, (e,a)=>{
                t.push(e)
            }
            ),
            t.sort();
            for (let i = 0; i < t.length; i++) {
                let s = t[i];
                e.push(ULTools.format("%s: %d", s, a[s]))
            }
            return e
        }
        getLevelCompletetLog() {
            let e = []
              , t = []
              , a = this.levelCompletetLog;
            ULSDK.console.log("ULStatisManager.getLevelCompletetLog rawLog:", a),
            ULTools.forEachMap(a, (e,a)=>{
                t.push(e)
            }
            ),
            t.sort();
            for (let i = 0; i < t.length; i++) {
                let s = t[i];
                e.push(ULTools.format("%s: %d   时长：%d", s, a[s].count, a[s].playTime))
            }
            return e
        }
        getVideoPointLog() {
            let e = []
              , t = []
              , a = this.videoPointLog;
            ULSDK.console.log("ULStatisManager.getVideoPointLog rawLog:", a),
            ULTools.forEachMap(a, (e,a)=>{
                t.push(e)
            }
            ),
            t.sort();
            for (let i = 0; i < t.length; i++) {
                let s = t[i];
                e.push(ULTools.format("%s: %d", s, a[s]))
            }
            return e
        }
        getBuyActionLog() {
            let e = []
              , t = []
              , a = this.buyActionLog;
            ULSDK.console.log("ULStatisManager.getBuyActionLog rawLog:", a),
            ULTools.forEachMap(a, (e,a)=>{
                t.push(e)
            }
            ),
            t.sort();
            for (let i = 0; i < t.length; i++) {
                let s = t[i];
                e.push(ULTools.format("%s: %d", s, a[s]))
            }
            return e
        }
        getCoinChangeLog() {
            let e = []
              , t = []
              , a = this.coinChangeLog;
            ULSDK.console.log("ULStatisManager.coinChangeLog rawLog:", a),
            ULTools.forEachMap(a, (e,a)=>{
                t.push(e)
            }
            ),
            t.sort();
            for (let i = 0; i < t.length; i++) {
                let s = t[i];
                e.push(ULTools.format("%s  次数：%d   货币数量：%d", s, a[s].count, a[s].changeCount))
            }
            return e
        }
        isReady() {
            return ULTools.getObjSize(this.gameStartDataPreparationFlags) <= 0
        }
        getPreparationFlags() {
            let e = [];
            return ULTools.forEachMap(this.gameStartDataPreparationFlags, (t,a)=>{
                e.push(t)
            }
            ),
            e
        }
        addPreparationFlag(e) {
            this.gameStartDataPreparationFlags[e] = !0
        }
        removePreparationFlag(e) {
            delete this.gameStartDataPreparationFlags[e]
        }
        setGameStartSourceMsg(e) {
            this.gameStartSourceMsg = e
        }
        reportGameStart() {
            let e = ULSdkManager.getInstance().channelInfo
              , t = ULConfig.getConfig()
              , a = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_BASE_INFO)
              , i = [];
            i.push(this.gameStartTimeFormattedStr),
            i.push(this.channelInfoUuid),
            i.push(""),
            i.push(""),
            i.push(""),
            i.push(t.s_game_name),
            i.push(t.s_sdk_cop_game_id),
            i.push(e.appName),
            i.push(t.s_sdk_cop_channel_id),
            i.push(t.s_sdk_cop_version),
            i.push(e.osVersionMessage || ""),
            i.push("gameStart"),
            i.push(""),
            i.push(t.s_sdk_version),
            i.push(e.equipmentModel || ""),
            i.push(this.gameStartSourceMsg),
            i.push(e.platformVersionMessage || ""),
            this._report(a, i)
        }
        reportPayRequest() {
            this.reportPayResult("", "", "requestPay")
        }
        reportPaySuccess(e, t) {
            let a = t || 0
              , i = ULTools.format("%.2f", a / 100);
            this.reportPayResult(e, i, "success")
        }
        reportPayCancel(e, t) {
            let a = t || 0
              , i = ULTools.format("%.2f", a / 100);
            this.reportPayResult(e, i, "cancel")
        }
        reportPayFail(e, t) {
            let a = t || 0
              , i = ULTools.format("%.2f", a / 100);
            this.reportPayResult(e, i, "failed")
        }
        reportPayResult(e, t, a) {
            let i = ULSdkManager.getInstance().channelInfo
              , s = ULConfig.getConfig()
              , o = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_PAY_INFO)
              , n = [];
            n.push(ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss")),
            n.push(this.channelInfoUuid),
            n.push(""),
            n.push(i.channelName),
            n.push(e || ""),
            n.push(t || ""),
            n.push(a || ""),
            n.push(s.s_sdk_cop_version),
            n.push(s.s_sdk_version),
            this._report(o, n)
        }
        reportAdvBranchRequest(e, t, a) {
            e.statisChannelName = t,
            e.statisSdkAdvId = a,
            this.reportAdvInfo(t, e.showAdvType, "branchAdvRequest", "", e.advGroupId, e.advId, e.tag, "", a, "")
        }
        reportAdvTotalRequest(e) {
            this.reportAdvInfo("", e.advType, "totalAdvRequest", "", e.advGroupId, e.advId, e.tag, "", "", "")
        }
        reportAdvSuccess(e, t) {
            e.statisNativeAdTitle = t,
            this.reportAdvInfo(e.statisChannelName, e.showAdvType, "success", "", e.advGroupId, e.advId, e.tag, e.statisNativeAdTitle, e.statisSdkAdvId, "")
        }
        reportAdvClicked(e) {
            this.reportAdvInfo(e.statisChannelName, e.showAdvType, "clicked", "", e.advGroupId, e.advId, e.tag, e.statisNativeAdTitle, e.statisSdkAdvId, "")
        }
        reportAdvPlayStart(e) {
            this.reportAdvInfo(e.statisChannelName, e.showAdvType, "playStart", "", e.advGroupId, e.advId, e.tag, e.statisNativeAdTitle, e.statisSdkAdvId, "")
        }
        reportAdvPlayCompletion(e) {
            this.reportAdvInfo(e.statisChannelName, e.showAdvType, "playCompletion", "", e.advGroupId, e.advId, e.tag, e.statisNativeAdTitle, e.statisSdkAdvId, "")
        }
        reportAdvLoadAdvRequest(e) {
            this.reportAdvInfo(e.statisChannelName, e.showAdvType, "loadAdvRequest", "", e.advGroupId, e.advId, e.tag, e.statisNativeAdTitle, e.statisSdkAdvId, "")
        }
        reportAdvLoadAdvSuccess(e) {
            this.reportAdvInfo(e.statisChannelName, e.showAdvType, "loadAdvSuccess", "", e.advGroupId, e.advId, e.tag, e.statisNativeAdTitle, e.statisSdkAdvId, "")
        }
        reportAdvLoadAdvFailed(e, t) {
            this.reportAdvInfo(e.statisChannelName, e.showAdvType, "loadAdvFailed", t, e.advGroupId, e.advId, e.tag, e.statisNativeAdTitle, e.statisSdkAdvId, "")
        }
        reportAdvFail(e, t) {
            this.reportAdvInfo(e.statisChannelName, e.showAdvType, "failed", t, e.advGroupId, e.advId, e.tag, e.statisNativeAdTitle, e.statisSdkAdvId, "")
        }
        reportAdvClose(e, t) {
            this.reportAdvInfo(e.statisChannelName, e.showAdvType, "hide", "", e.advGroupId, e.advId, e.tag, e.statisNativeAdTitle, e.statisSdkAdvId, t)
        }
        reportAdvInfo(e, t, a, i, s, o, n, r, l, h) {
            ULSdkManager.getInstance().channelInfo;
            let d = ULConfig.getConfig()
              , c = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_ADV_INFO)
              , g = [];
            r && r.length > 6 && (r = r.substr(0, 6)),
            g.push(ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss")),
            g.push(this.channelInfoUuid),
            g.push(""),
            g.push(e || ""),
            g.push(t || ""),
            g.push(a || ""),
            g.push(i || ""),
            g.push(d.s_sdk_cop_version),
            g.push(d.s_sdk_version),
            g.push(s || ""),
            g.push(o || ""),
            g.push(n || ""),
            g.push(r || ""),
            g.push(l || ""),
            g.push(h || ""),
            ULSDK.console.log("reportAdvInfo result:", a),
            "hide" == a ? this.uploadToServerRightNow(c, g) : this._report(c, g)
        }
        reportCopSuccess(e) {
            this.reportCopResult("success", "", e)
        }
        reportCopFail(e) {
            this.reportCopResult("filed", e, "")
        }
        reportCopResult(e, t, a) {
            ULSdkManager.getInstance().channelInfo;
            let i = ULConfig.getConfig()
              , s = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_COP_REQUEST)
              , o = [];
            o.push(ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss")),
            o.push(this.channelInfoUuid),
            o.push(""),
            o.push("coprequest"),
            o.push(e || ""),
            o.push(i.s_sdk_cop_version),
            o.push(i.s_sdk_version),
            o.push(t || ""),
            o.push(""),
            this._report(s, o)
        }
        reportUserEvent(e) {
            let t = ULSdkManager.getInstance().channelInfo
              , a = ULConfig.getConfig()
              , i = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_USER_EVENT)
              , s = [];
            s.push(ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss")),
            s.push(this.channelInfoUuid),
            s.push("");
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                s.push(a)
            }
            s.push(a.s_sdk_cop_version),
            s.push(a.s_sdk_version),
            s.push(t.channelName),
            this._report(i, s)
        }
        reportUserActionEvent(e, t) {
            let a = ULSdkManager.getInstance().channelInfo
              , i = ULConfig.getConfig()
              , s = [0, 1, 2, 5, 6, 7]
              , o = [0, 1, 2, 11, 12, 13, 14]
              , n = [0, 1, 2, 7, 8, 9]
              , r = [0, 1, 2, 6, 7, 8]
              , l = [0, 1, 2, 6, 7, 8]
              , h = [0, 1, 2, 6, 7, 8]
              , d = [0, 1, 2, 5, 6, 7]
              , c = [ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss"), this.channelInfoUuid, "", i.s_sdk_cop_version, i.s_sdk_version, a.copChannelId]
              , g = [];
            if (t == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_COMMON_EVENT)) {
                g = this.rebuildData(h, c, e);
                let t = e[0] + "-" + e[1];
                this.commonEventLog[t] = this.commonEventLog[t] ? this.commonEventLog[t] + 1 : 1
            } else if (t == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_LEVEL_START_EVENT)) {
                g = this.rebuildData(s, c, e);
                let t = e[0];
                this.levelStartLog[t] = this.levelStartLog[t] ? this.levelStartLog[t] + 1 : 1
            } else if (t == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_LEVEL_COMPLETE_EVENT)) {
                let t = e[0] + "-" + e[1];
                this.levelCompletetLog[t] || (this.levelCompletetLog[t] = {
                    count: 0,
                    playTime: 0
                }),
                this.levelCompletetLog[t].count = this.levelCompletetLog[t].count ? this.levelCompletetLog[t].count + 1 : 1,
                this.levelCompletetLog[t].playTime = this.levelCompletetLog[t].playTime ? this.levelCompletetLog[t].playTime + parseInt(e[e.length - 1]) : parseInt(e[e.length - 1]);
                let a = e.pop();
                c.splice(3, 0, a),
                g = this.rebuildData(o, c, e)
            } else if (t == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_VIDEO_POINT_EVENT)) {
                g = this.rebuildData(d, c, e);
                let t = e[0] + "-" + e[1];
                this.videoPointLog[t] = this.videoPointLog[t] ? this.videoPointLog[t] + 1 : 1
            } else if (t == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_BUY_ACTION)) {
                g = this.rebuildData(l, c, e);
                let t = e[0] + "-" + e[1] + "-" + e[2];
                this.buyActionLog[t] = this.buyActionLog[t] ? this.buyActionLog[t] + 1 : 1
            } else if (t == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_COIN_CHANGE_EVENT)) {
                g = this.rebuildData(n, c, e);
                let t = e[0] + "-" + e[1] + "-" + e[3];
                this.coinChangeLog[t] || (this.coinChangeLog[t] = {
                    count: 0,
                    changeCount: 0
                }),
                this.coinChangeLog[t].count = this.coinChangeLog[t].count ? this.coinChangeLog[t].count + 1 : 1,
                this.coinChangeLog[t].changeCount = this.coinChangeLog[t].changeCount ? this.coinChangeLog[t].changeCount + parseInt(e[2]) : parseInt(e[2])
            } else
                t == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_ITEM_BUY) && (g = this.rebuildData(r, c, e));
            this._report(t, g)
        }
        rebuildData(e, t, a) {
            let i = ULTools.clone(e)
              , s = ULTools.clone(t)
              , o = ULTools.clone(a)
              , n = [];
            for (; s.length || o.length; ) {
                i[0] == n.length ? (n.push(s.shift()),
                i.shift()) : o.length ? n.push(o.shift()) : n.push("")
            }
            return n
        }
        reportOnlineTime(e) {
            ULSdkManager.getInstance().channelInfo;
            let t = ULConfig.getConfig()
              , a = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_ONLINE_TIME)
              , i = [];
            i.push(ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss")),
            i.push(this.channelInfoUuid),
            i.push(""),
            i.push(this.gameStartTimeFormattedStr || ""),
            i.push(e.toString() || "0"),
            i.push(t.s_sdk_cop_version),
            i.push(t.s_sdk_version),
            this.uploadToServerRightNow(a, i)
        }
        reportShareSuccess(e) {
            let t = ["openShare", "success", e || 0].join("_")
              , a = ULConfig.getConfig()
              , i = a.t_sdk_common_event_ids || {};
            (a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", t]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.open_share || "100", 1, e || 0])
        }
        reportShareFail(e) {
            let t = ["openShare", "fail", e || 0].join("_")
              , a = ULConfig.getConfig()
              , i = a.t_sdk_common_event_ids || {};
            (a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", t]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.open_share || "100", 0, e || 0])
        }
        reportAppShare(e) {
            let t = ["openShare", "appShare", e || 0].join("_")
              , a = ULConfig.getConfig()
              , i = a.t_sdk_common_event_ids || {};
            (a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", t]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.open_share || "100", 2, e || 0])
        }
        reportShareClick(e) {
            let t = ["clickShare", e || ""].join("_")
              , a = ULConfig.getConfig()
              , i = a.t_sdk_common_event_ids || {};
            (a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", t]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.click_share || "101", e || "", ""])
        }
        reportAddSubcrible(e) {
            let t = ["addSubscrible", e || ""].join("_")
              , a = ULConfig.getConfig()
              , i = a.t_sdk_common_event_ids || {};
            (a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", t]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.add_subscrible || "102", e || "", ""])
        }
        reportSubcribleClick(e) {
            let t = ["clickSubscrible", e || ""].join("_")
              , a = ULConfig.getConfig()
              , i = a.t_sdk_common_event_ids || {};
            (a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", t]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.click_subscrible || "103", e || "", ""])
        }
        reportClickMoreGameIcon(e, t) {
            let a = ULConfig.getConfig()
              , i = a.t_sdk_common_event_ids || {}
              , s = i.click_more_game_icon_list || "106";
            "single" == e ? s = i.click_more_game_icon_single || "104" : "reward" == e && (s = i.click_more_game_icon_reward || "105"),
            (a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? this.reportPointEvent(s, parseInt(t)) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", s, t || "", ""])
        }
        reportClickMoreGameButtonToChannelSystem() {
            let e = ULConfig.getConfig()
              , t = (e.t_sdk_common_event_ids || {}).click_more_game_channel_system_button || "108";
            (e.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? this.reportPointEvent(t, 0) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", t, "", ""])
        }
        reportOpenCdk(e) {
            let t = ["openCdk", e].join("_")
              , a = ULConfig.getConfig()
              , i = a.t_sdk_common_event_ids || {}
              , s = a.s_sdk_megadata_url || "";
            ULSDK.console.log("ULStatisManager.reportOpenCdk code:", e),
            s.indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", t]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.open_cdk || "107", e || 0, ""])
        }
        reportJumpGame(e, t, a, i, s) {
            let o = ULConfig.getConfig()
              , n = (o.s_sdk_jump_game_statis_game_indexes || "").split(";")
              , r = {};
            for (let e = 0; e < n.length; e++)
                r[n[e]] = !0;
            if (!r[s.split("_")[0]])
                return void ULSDK.console.log("ULStatisManager.reportJumpGame 当前跳转的游戏数据上报没开,targetIconId:", s);
            let l = o.s_sdk_megadata_server_jump_game_type_id
              , h = [];
            h.push(e),
            h.push(t),
            h.push(a),
            h.push(i),
            h.push(s),
            this._report(l, h)
        }
        _checkPointEventSwitch(e) {
            if (!this.pointEventCategoryId_2_enabled) {
                let e = ULConfig.getConfig().s_sdk_megadata_point_event_open_category_ids.split(";")
                  , t = {};
                for (let a = 0; a < e.length; a++) {
                    t[e[a]] = !0
                }
                this.pointEventCategoryId_2_enabled = t
            }
            let t = Math.floor(e / 1e3);
            return !!this.pointEventCategoryId_2_enabled[t]
        }
        reportPointEvent(e, t) {
            if (e = parseInt(e) || 0,
            isNaN(e) && (e = 0),
            e = ULTools.clampf(e, 0, 65535),
            t = parseInt(t) || 0,
            isNaN(t) && (t = 0),
            t = ULTools.clampf(t, 0, 65535),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("ULStatisManager.reportPointEvent", e, t),
            !this._checkPointEventSwitch(e))
                return void (ULConst.B_INNER_DEBUG && ULSDK.console.log("  打点统计上报未开启：", ULConfig.getConfig().s_sdk_megadata_point_event_open_category_ids));
            let a = ""
              , i = ULSdkManager.getInstance().channelInfo._sdkUserId;
            ULConst.B_INNER_DEBUG && ULSDK.console.log(ULTools.format("  sdkUserId = [%s]", i));
            /(\d+)_(.*)_(\d+)/.test(i) ? (a = RegExp.$2) && 22 == a.length ? a = a.substr(2, a.length - 2) : (ULConst.B_INNER_DEBUG && ULSDK.console.log("  核心长度不匹配，直接使用sdkUserId"),
            a = i) : (ULConst.B_INNER_DEBUG && ULSDK.console.log("  userId规则不匹配，直接使用sdkUserId"),
            a = i),
            ULConst.B_INNER_DEBUG && ULSDK.console.log(ULTools.format("  shortUserId = [%s]", a));
            ULSdkManager.getInstance().channelInfo;
            let s = ULConfig.getConfig()
              , o = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_POINT_EVENT)
              , n = [];
            n.push(a),
            n.push(s.s_sdk_cop_channel_id),
            n.push(e.toString()),
            n.push(t.toString()),
            this._report(o, n);
            let r = this.pointEventLog
              , l = r[e];
            l || (l = {},
            r[e] = l),
            l[t] = (l[t] || 0) + 1,
            ULConst.B_INNER_DEBUG && ULSDK.console.log("  log", r)
        }
        onCmdSdkOnGameStart(e) {
            if (this.gameStartTimeFormattedStr = ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss"),
            this.gameLastResumeTime = ULTools.time(),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("ULStatiManager.onCmdSdkOnGameStart", this.gameStartTimeFormattedStr, this.gameLastResumeTime),
            this.isReady())
                return this.reportGameStart(),
                void this.tryUploadToServer();
            let t = this.getPreparationFlags();
            ULSDK.console.log("ULStatiManager.onCmdSdkOnGameStart 上报数据没有准备好,flags:", t.join(","));
            let a = ULConfig.getConfig().i_game_start_ready_timeout / 1e3;
            ULTimer.callLoop(1 / 60, e=>{
                if (e.usedTime >= a) {
                    e.stop();
                    let t = this.getPreparationFlags();
                    return ULSDK.console.log("ULStatiManager.onCmdSdkOnGameStart 等待超时！直接触发reportGameStart flags:", t.join(",")),
                    this.reportGameStart(),
                    void this.tryUploadToServer()
                }
                if (this.isReady())
                    return e.stop(),
                    ULSDK.console.log("ULStatiManager.onCmdSdkOnGameStart 准备完毕！触发reportGameStart"),
                    this.reportGameStart(),
                    void this.tryUploadToServer()
            }
            )
        }
        onCmdSdkOnGamePause(e) {
            if (!this.gameLastResumeTime)
                return void ULSDK.console.warn("ULStatiManager.onCmdSdkOnGamePause gameLastResumeTime not found! 无法上报在线时间");
            let t = ULTools.time() - this.gameLastResumeTime;
            if (ULConst.B_INNER_DEBUG && ULSDK.console.log("ULStatiManager.onCmdSdkOnGamePause", t),
            t <= 5 || t > 86400)
                return;
            this.gameLastResumeTime = ULTools.time(),
            this.reportOnlineTime(Math.floor(t));
            let a = ULConfig.getConfig();
            ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, [a.s_sdk_miniplay_user_play_game_time_event_id, Math.floor(t)])
        }
        onCmdSdkOnGameResume(e) {
            this.gameLastResumeTime = ULTools.time(),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("ULStatiManager.onCmdSdkOnGameResume", this.gameLastResumeTime)
        }
        onCmdSdkOnCopChanged(e) {
            this.pointEventCategoryId_2_enabled = null
        }
        onCmdSdkCollectionModuleCheckerConfig(e) {
            let t = e.getReturnValue() || [];
            t.push({
                type: "newLine"
            });
            let a = ["正式模式", "测试模式"]
              , i = "当前数据上传模式:" + a[this.postMegadataTestMode];
            t.push({
                type: "label",
                text: i,
                name: "labelPostDataMode"
            }),
            t.push({
                type: "button",
                text: "切换数据上传模式..",
                onClick: ()=>{
                    let e = ULSdkManager.getInstance().moduleCheckerManager.getItemText("labelPostTestModeUserId")
                      , t = [];
                    t.push({
                        text: "测试模式 ( 用户id:" + e + ")",
                        value: 1
                    }),
                    t.push({
                        text: "正式模式",
                        value: 0
                    });
                    ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("切换数据上传模式:", t, t=>{
                        let i = "当前数据上传模式:" + a[this.postMegadataTestMode];
                        if (t) {
                            if (e.length < 1)
                                return void ULSdkManager.getInstance().moduleCheckerManager.alertPrompt("提示", "请设置测试用户id", "好的");
                            this.postMegadataTestUserId = e,
                            ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("已开启测试模式")
                        } else
                            this.postMegadataTestUserId = null,
                            ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("测试模式已关闭");
                        this.setPostMegadataMode(t),
                        ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelPostDataMode", i)
                    }
                    )
                }
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "测试用户id"
            }),
            t.push({
                type: "inputBox",
                text: this.postMegadataTestUserId,
                name: "labelPostTestModeUserId"
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "清理游戏存档:"
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "button",
                text: "清理游戏存档",
                onClick: ()=>{
                    ULSdkManager.getInstance().response(ULConst.CMD_CLEAN_UP_GAME_ARCHIVE, {})
                }
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "跳过新手引导:"
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "button",
                text: "跳过新手引导",
                onClick: ()=>{
                    ULSdkManager.getInstance().response(ULConst.CMD_JUMP_NEW_USER_GUIDE, {})
                }
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "是否显示客户端打点信息界面开关:"
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "button",
                text: "打开",
                onClick: ()=>{
                    ULSdkManager.getInstance().response(ULConst.CMD_SHOW_POINT_DEBUG_INFO, {
                        state: 1
                    })
                }
            }),
            t.push({
                type: "button",
                text: "关闭",
                onClick: ()=>{
                    ULSdkManager.getInstance().response(ULConst.CMD_SHOW_POINT_DEBUG_INFO, {
                        state: 0
                    })
                }
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "打点统计记录:"
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "button",
                text: "点击查看..",
                onClick: ()=>{
                    let e = this.genPointEventLog()
                      , t = [];
                    for (let a = 0; a < e.length; a++) {
                        const i = e[a];
                        t.push({
                            text: i,
                            value: i
                        })
                    }
                    ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("打点统计记录(事件id-状态：次数)：", t, ()=>{}
                    , !0)
                }
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "自定义统计记录:"
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "button",
                text: "点击查看..",
                onClick: ()=>{
                    let e = this.getCommonEventLog()
                      , t = [];
                    for (let a = 0; a < e.length; a++) {
                        const i = e[a];
                        t.push({
                            text: i,
                            value: i
                        })
                    }
                    ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("自定义统计记录(事件id-状态：次数)：", t, ()=>{}
                    , !0)
                }
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "关卡开始统计记录:"
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "button",
                text: "点击查看..",
                onClick: ()=>{
                    let e = this.getLevelStartLog()
                      , t = [];
                    for (let a = 0; a < e.length; a++) {
                        const i = e[a];
                        t.push({
                            text: i,
                            value: i
                        })
                    }
                    ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("关卡开始统计记录(关卡名：次数):", t, ()=>{}
                    , !0)
                }
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "关卡结束统计记录:"
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "button",
                text: "点击查看..",
                onClick: ()=>{
                    let e = this.getLevelCompletetLog()
                      , t = [];
                    for (let a = 0; a < e.length; a++) {
                        const i = e[a];
                        t.push({
                            text: i,
                            value: i
                        })
                    }
                    ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("关卡结束统计记录(关卡名-结果-次数):", t, ()=>{}
                    , !0)
                }
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "视频埋点转化统计记录:"
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "button",
                text: "点击查看..",
                onClick: ()=>{
                    let e = this.getVideoPointLog()
                      , t = [];
                    for (let a = 0; a < e.length; a++) {
                        const i = e[a];
                        t.push({
                            text: i,
                            value: i
                        })
                    }
                    ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("视频埋点转化统计记录(视频点-状态：次数)", t, ()=>{}
                    , !0)
                }
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "内购行为统计记录:"
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "button",
                text: "点击查看..",
                onClick: ()=>{
                    let e = this.getBuyActionLog()
                      , t = [];
                    for (let a = 0; a < e.length; a++) {
                        const i = e[a];
                        t.push({
                            text: i,
                            value: i
                        })
                    }
                    ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("内购行为统计记录(弹出理由-商品名-结果)", t, ()=>{}
                    , !0)
                }
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "label",
                text: "货币统计记录:"
            }),
            t.push({
                type: "newLine"
            }),
            t.push({
                type: "button",
                text: "点击查看..",
                onClick: ()=>{
                    let e = this.getCoinChangeLog()
                      , t = [];
                    for (let a = 0; a < e.length; a++) {
                        const i = e[a];
                        t.push({
                            text: i,
                            value: i
                        })
                    }
                    ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("货币统计记录(货币名称-变化类型-变化原因)", t, ()=>{}
                    , !0)
                }
            }),
            e.setReturnValue(t, !0)
        }
    }
    class MCItem {
        initByData(e) {
            this.type = e.type,
            this.type = e.type || "newLine",
            this.name = e.name || "",
            this.text = e.text || "",
            this.width = e.width || 0,
            this.height = e.height || 0,
            this.fOnClick = e.onClick,
            this.fOnTextChanged = e.onTextChanged
        }
        setText(e) {
            this.text = e,
            this.fOnTextChanged instanceof Function && this.fOnTextChanged(e)
        }
        triggerOnClick() {
            this.fOnClick instanceof Function && this.fOnClick()
        }
    }
    const BUTTON_WIDTH = 150
      , BUTTON_HEIGHT = 40
      , NEW_LINE_HEIGHT = 20
      , FONT_SIZE = 20
      , PENDING = 10
      , GAP = 4;
    let _cc = window.cc;
    class MCPanelCreator {
        constructor() {
            this.nodeReferenceRects = {}
        }
        getNodeCanvas() {
            if (!_cc)
                return ULSDK.console.warn("MCPanelCreator.getNodeCanvas 未检测到creator环境！"),
                null;
            let e = _cc.director.getScene();
            if (!e)
                return ULSDK.console.warn("MCPanelCreator.getNodeCanvas scene not found!"),
                null;
            let t = e.getChildByName("Canvas");
            return t || (ULSDK.console.warn("MCPanelCreator.getNodeCanvas nodeCanvas not found!"),
            null)
        }
        addFillerSprite(e, t) {
            let a = e.getContentSize()
              , i = e.addComponent(_cc.Sprite);
            i.sizeMode = _cc.Sprite.SizeMode.CUSTOM,
            i.type = _cc.Sprite.Type.SIMPLE,
            _cc.loader.loadRes("_ulsdk_ui/white_dot", _cc.SpriteFrame, (t,s)=>{
                t ? ULSDK.console.warn("MCPanelCreator.addFillerSprite err!", t) : (i.spriteFrame = s,
                e.setContentSize(a))
            }
            ),
            e.color = t,
            e.opacity = t.getA()
        }
        registerTouchHandler(e, t, a=!1, i=!0, s=!1) {
            let o = e;
            if (!o)
                return;
            if (!t)
                return;
            o.on(_cc.Node.EventType.TOUCH_START, e=>{
                let s = e.getID() || 0;
                return !(!a && null != o.__touch_id || (e.name = "began",
                i && e.stopPropagation(),
                o.__touch_id = s,
                t(e),
                0))
            }
            , null, s),
            o.on(_cc.Node.EventType.TOUCH_MOVE, e=>{
                let i = e.getID() || 0;
                (a || i == o.__touch_id) && (e.name = "moved",
                t(e))
            }
            , null, s),
            o.on(_cc.Node.EventType.TOUCH_END, e=>{
                let i = e.getID() || 0;
                (a || i == o.__touch_id) && (e.name = "ended",
                o.__touch_id = null,
                t(e))
            }
            , null, s),
            o.on(_cc.Node.EventType.TOUCH_CANCEL, e=>{
                let i = e.getID() || 0;
                (a || i == o.__touch_id) && (e.name = "cancelled",
                o.__touch_id = null,
                t(e))
            }
            , null, s)
        }
        isTouchEventClick(e) {
            if ("ended" != e.name && "cancelled" != e.name)
                return !1;
            let t = e.getStartLocation()
              , a = e.getLocation()
              , i = t.x - a.x
              , s = t.y - a.y;
            return i * i + s * s <= 400
        }
        createItemByData(e) {
            let t = new MCItem;
            t.initByData(e);
            let a = this.nodeContainer;
            switch (e.type) {
            case "label":
                {
                    let e = new _cc.Node;
                    e.parent = a,
                    e.setAnchorPoint(.5, .5),
                    e.on(_cc.Node.EventType.SIZE_CHANGED, ()=>{
                        t.width = e.width,
                        t.height = e.height,
                        this.onItemNodeResize()
                    }
                    ),
                    e.addComponent(_cc.Label).string = t.text,
                    e.getComponent(_cc.Label).fontSize = FONT_SIZE,
                    e.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.LEFT,
                    e.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER,
                    t.renderNode = e;
                    break
                }
            case "labelArea":
                {
                    let e = new _cc.Node;
                    e.parent = a,
                    e.setAnchorPoint(.5, .5),
                    e.on(_cc.Node.EventType.SIZE_CHANGED, ()=>{
                        t.width = e.width,
                        t.height = e.height,
                        this.onItemNodeResize()
                    }
                    ),
                    e.addComponent(_cc.Label).string = t.text,
                    e.getComponent(_cc.Label).fontSize = FONT_SIZE,
                    e.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.LEFT,
                    e.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER,
                    e.getComponent(_cc.Label).overflow = _cc.Label.Overflow.RESIZE_HEIGHT,
                    e.width = a.width - 2 * PENDING,
                    e.height = FONT_SIZE,
                    t.renderNode = e;
                    break
                }
            case "button":
                {
                    let e = new _cc.Node;
                    e.parent = a,
                    e.on(_cc.Node.EventType.SIZE_CHANGED, ()=>{
                        t.width = e.width,
                        t.height = e.height,
                        this.onItemNodeResize()
                    }
                    ),
                    e.width = t.width || BUTTON_WIDTH,
                    e.height = t.height || BUTTON_HEIGHT;
                    let i = new _cc.Node;
                    i.parent = e,
                    i.setContentSize(i.parent.getContentSize()),
                    this.addFillerSprite(i, _cc.color(200, 200, 200, 255));
                    let s = new _cc.Node;
                    s.parent = e,
                    s.setAnchorPoint(.5, .5),
                    s.addComponent(_cc.Label).string = t.text,
                    s.getComponent(_cc.Label).fontSize = FONT_SIZE,
                    s.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER,
                    s.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER,
                    s.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK,
                    s.width = e.width,
                    s.height = e.height,
                    s.color = _cc.Color.BLACK,
                    this.registerTouchHandler(e, e=>{
                        switch (e.name) {
                        case "began":
                            s.color = _cc.Color.GREEN;
                            break;
                        case "moved":
                            break;
                        default:
                            s.color = _cc.Color.BLACK
                        }
                        this.isTouchEventClick(e) && t.triggerOnClick()
                    }
                    ),
                    t.renderNode = e;
                    break
                }
            case "inputBox":
                {
                    let e = new _cc.Node;
                    e.parent = a,
                    e.on(_cc.Node.EventType.SIZE_CHANGED, ()=>{
                        t.width = e.width,
                        t.height = e.height,
                        this.onItemNodeResize()
                    }
                    ),
                    e.width = t.width || BUTTON_WIDTH,
                    e.height = t.height || BUTTON_HEIGHT;
                    let i = new _cc.Node;
                    i.parent = e,
                    i.setContentSize(i.parent.getContentSize()),
                    this.addFillerSprite(i, _cc.color(200, 200, 200, 255));
                    let s = e.addComponent(_cc.EditBox);
                    s.fontSize = FONT_SIZE,
                    s.fontColor = _cc.Color.BLACK,
                    s.lineHeight = e.height,
                    s.inputMode = _cc.EditBox.InputMode.SINGLE_LINE,
                    s.maxLength = 1024,
                    s.placeholder = "<<输入框>>",
                    s.placeholderFontSize = FONT_SIZE,
                    s.placeholderFontColor = _cc.Color.GRAY;
                    let o = e.getComponentsInChildren(_cc.Label);
                    for (let e = 0; e < o.length; e++) {
                        o[e].verticalAlign = _cc.Label.VerticalAlign.CENTER
                    }
                    s.node.on("text-changed", ()=>{
                        let e = s.string;
                        t.setText(e)
                    }
                    ),
                    t.renderNode = e;
                    break
                }
            case "newLine":
                t.width = a.width - 2 * PENDING,
                t.height = NEW_LINE_HEIGHT
            }
            return t
        }
        doLayout() {
            if (!this.items)
                return;
            let e = this.nodePanel.width - 20
              , t = []
              , a = PENDING
              , i = -PENDING
              , s = 0;
            for (let o = 0; o < this.items.length; o++) {
                let n = this.items[o]
                  , r = n.renderNode || {
                    x: 0,
                    y: 0
                };
                if (a + n.width > e) {
                    a = 0;
                    for (let e = 0; e < t.length; e++) {
                        (t[e].renderNode || {
                            x: 0,
                            y: 0
                        }).y = i - s / 2
                    }
                    a = PENDING,
                    i -= s + GAP,
                    t = [],
                    s = 0
                }
                s = Math.max(s, n.height),
                t.push(n),
                r.x = a + n.width / 2,
                a += n.width + GAP
            }
            for (let e = 0; e < t.length; e++) {
                (t[e].renderNode || {
                    x: 0,
                    y: 0
                }).y = i - s / 2
            }
            i -= s - PENDING,
            this.nodeContainer.height = Math.max(this.nodePanel.height, -i)
        }
        onItemNodeResize() {
            this.doLayout()
        }
        getItemByName(e) {
            for (let t = 0; t < this.items.length; t++) {
                const a = this.items[t];
                if (a.name == e)
                    return a
            }
            return null
        }
        show(e) {
            let t = this.getNodeCanvas();
            if (!t)
                return;
            let a = new _cc.Node;
            a.parent = t,
            a.setContentSize(t.getContentSize()),
            a.zIndex = _cc.macro.MAX_ZINDEX,
            this.nodePanel = a;
            let i = new _cc.Node;
            i.parent = a,
            i.setContentSize(i.parent.getContentSize()),
            this.addFillerSprite(i, _cc.color(0, 0, 0, 191)),
            this.registerTouchHandler(this.nodePanel, e=>{
                this.isTouchEventClick(e)
            }
            );
            let s = new _cc.Node;
            s.setAnchorPoint(0, 1),
            s.parent = this.nodePanel,
            s.setContentSize(t.getContentSize()),
            this.nodeContainer = s;
            let o = this.nodePanel.addComponent(_cc.ScrollView);
            o.horizontal = !1,
            o.vertical = !0,
            o.content = s,
            o.cancelInnerEvents = !1,
            o.elastic = !0;
            let n = [];
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                let i = this.createItemByData(a);
                n.push(i)
            }
            this.items = n,
            this.doLayout()
        }
        close() {
            _cc.isValid(this.nodePanel) && this.nodePanel.destroy(),
            this.nodePanel = null,
            this.items = []
        }
        getItemText(e) {
            let t = this.getItemByName(e);
            return t ? t.text : ""
        }
        setItemText(e, t) {
            let a = this.getItemByName(e);
            if (!a)
                return;
            a.setText(t);
            let i = a.renderNode;
            if (i instanceof _cc.Node) {
                let e = i.getComponent(_cc.Label) || i.getComponentInChildren(_cc.Label);
                e && (e.string = t);
                let a = i.getComponent(_cc.EditBox) || i.getComponentInChildren(_cc.EditBox);
                a && (a.string = t)
            }
        }
        showMsgTip(e) {
            let t = this.getNodeCanvas();
            if (!t)
                return;
            let a = new _cc.Node;
            a.parent = t,
            a.width = t.width,
            a.height = 20,
            a.zIndex = _cc.macro.MAX_ZINDEX;
            let i = a.addComponent(_cc.Label);
            i.string = e,
            i.fontSize = 20,
            i.enableWrapText = !0,
            a.x = 0,
            a.y = .25 * t.height,
            a.runAction(_cc.sequence(_cc.moveBy(1.5, 0, 50), _cc.callFunc(()=>{
                a.destroy()
            }
            )))
        }
        showPickerDialog(e, t, a, i) {
            let s = this.getNodeCanvas();
            if (!s)
                return;
            let o = ULTools.scaleInRange(t.length, 8.5, 17.5, 430, 826)
              , n = new _cc.Node;
            n.parent = s,
            n.setContentSize(s.getContentSize()),
            n.zIndex = _cc.macro.MAX_ZINDEX,
            this.registerTouchHandler(n, e=>{
                this.isTouchEventClick(e) && n.destroy()
            }
            );
            let r = new _cc.Node;
            r.parent = n,
            r.setContentSize(r.parent.getContentSize()),
            this.addFillerSprite(r, _cc.color(0, 0, 0, 127));
            let l = new _cc.Node;
            l.parent = n,
            l.width = s.width - 100,
            l.height = o,
            this.registerTouchHandler(l, e=>{}
            ),
            (r = new _cc.Node).parent = l,
            r.setContentSize(r.parent.getContentSize()),
            this.addFillerSprite(r, _cc.color(167, 167, 167, 255));
            let h = new _cc.Node;
            h.parent = l,
            h.y = l.height / 2 - 25,
            h.x = 0,
            h.addComponent(_cc.Label).string = e,
            h.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK,
            h.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER,
            h.getComponent(_cc.Label).fontSize = 40,
            h.width = l.width - 10,
            h.height = 40;
            let d = new _cc.Node;
            d.parent = l,
            d.width = l.width - 10,
            d.height = l.height - 50,
            d.x = 0,
            d.y = -l.height / 2 + d.height / 2 + 5,
            this.addFillerSprite(d, _cc.color(97, 97, 97, 255));
            let c = new _cc.Node;
            c.parent = l,
            c.width = l.width - 10,
            c.height = l.height - 50,
            c.x = 0,
            c.y = -l.height / 2 + c.height / 2 + 5,
            c.addComponent(_cc.Mask);
            let g = new _cc.Node;
            g.setAnchorPoint(0, 1),
            g.parent = c,
            g.setContentSize(c.getContentSize());
            let _ = c.addComponent(_cc.ScrollView);
            _.horizontal = !1,
            _.vertical = !0,
            _.content = g,
            _.cancelInnerEvents = !1,
            _.elastic = !0;
            let m = 0;
            for (let e = 0; e < t.length; e++) {
                const s = t[e];
                let o = new _cc.Node;
                o.parent = g,
                o.width = c.width,
                o.height = 40,
                o.x = g.width / 2,
                o.y = m - o.height / 2;
                let r = new _cc.Node;
                r.parent = o,
                r.setContentSize(r.parent.getContentSize()),
                this.addFillerSprite(r, _cc.color(0, 0, 0, 63));
                let l = new _cc.Node;
                l.parent = o,
                l.setAnchorPoint(0, .5),
                l.x = -o.width / 2 + 5,
                l.y = 0;
                let h = l.addComponent(_cc.Label);
                h.fontSize = FONT_SIZE,
                h.lineHeight = FONT_SIZE,
                h.verticalAlign = _cc.Label.VerticalAlign.CENTER,
                h.horizontalAlign = _cc.Label.HorizontalAlign.LEFT,
                h.string = s.text,
                this.registerTouchHandler(o, e=>{
                    this.isTouchEventClick(e) && (a(s.value),
                    i || n.destroy())
                }
                ),
                m -= o.height + 4
            }
            g.height = Math.max(c.height, -m)
        }
        showPromptDialog(e, t, a, i) {
            let s = this.getNodeCanvas();
            if (!s)
                return ULSDK.console.warn("MCPanelCreator.showPromptDialog nodeCanvas not found!"),
                void ULTimer.callLater(.1, ()=>{
                    this.showPromptDialog(e, t, a, i)
                }
                );
            let o = new _cc.Node;
            o.parent = s,
            o.setContentSize(s.getContentSize()),
            o.zIndex = _cc.macro.MAX_ZINDEX,
            this.registerTouchHandler(o, e=>{
                this.isTouchEventClick(e) && ULSDK.console.log("click bg")
            }
            );
            let n = new _cc.Node;
            n.parent = o,
            n.setContentSize(n.parent.getContentSize()),
            this.addFillerSprite(n, _cc.color(0, 0, 0, 127));
            let r = !1
              , l = new _cc.Node;
            l.parent = o,
            l.addComponent(_cc.Component).onDestroy = (()=>{
                ULSDK.console.log("MCPanelCreator.showPromptDialog triggerNode onDestroy", r),
                r || (ULSDK.console.log("MCPanelCreator.showPromptDialog nodeShadow被意外销毁，0.1秒后尝试重新创建提示"),
                ULTimer.callLater(.1, ()=>{
                    this.showPromptDialog(e, t, a, i)
                }
                ))
            }
            );
            let h = new _cc.Node;
            h.parent = o,
            h.width = 460,
            h.height = 320,
            this.registerTouchHandler(h, e=>{}
            );
            let d = new _cc.Node;
            d.parent = h,
            d.setContentSize(d.parent.getContentSize()),
            _cc.loader.loadRes("_ulsdk_ui/bg_01", _cc.SpriteFrame, (e,t)=>{
                if (e)
                    return void ULSDK.console.warn("MCPanelCreator.showPromptDialog nodeDialogBg load sprite error", e);
                let a = d.getContentSize()
                  , i = t.getOriginalSize();
                t.insetLeft = i.width / 3,
                t.insetRight = i.width / 3,
                t.insetTop = i.height / 3,
                t.insetBottom = i.height / 3;
                let s = d.addComponent(_cc.Sprite);
                s.spriteFrame = t,
                s.type = _cc.Sprite.Type.SLICED,
                s.sizeMode = _cc.Sprite.SizeMode.CUSTOM,
                d.setContentSize(a)
            }
            );
            let c = new _cc.Node;
            c.parent = h,
            c.y = h.height / 2 - 45,
            c.x = 0,
            c.color = _cc.color(38, 38, 38, 255),
            c.addComponent(_cc.Label).string = e || "标题",
            c.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK,
            c.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER,
            c.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER,
            c.getComponent(_cc.Label).fontSize = 32,
            c.width = h.width - 10,
            c.height = 40;
            let g = new _cc.Node;
            g.parent = h,
            g.y = h.height / 2 - 155,
            g.x = 0,
            g.color = _cc.color(96, 96, 96, 255),
            g.addComponent(_cc.Label).string = t || "内容",
            g.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK,
            g.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER,
            g.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER,
            g.getComponent(_cc.Label).fontSize = 24,
            g.width = h.width - 50,
            g.height = 160;
            let _ = -(160 * a.length + 30 * (a.length - 1)) / 2
              , m = [];
            for (let e = 0; e < a.length; e++) {
                const t = a[e];
                let s = new _cc.Node;
                s.parent = h,
                s.x = _ + 160 * (e + .5) + 30 * e,
                s.y = -h.height / 2 + 50,
                s.setContentSize(160, 56),
                m.push(s);
                let n = new _cc.Node;
                n.parent = s,
                n.setContentSize(s.getContentSize()),
                _cc.loader.loadRes("_ulsdk_ui/btn_01", _cc.SpriteFrame, (e,t)=>{
                    if (e)
                        return void ULSDK.console.warn("MCPanelCreator.showPromptDialog nodeButtonBg load sprite error", e);
                    let a = n.getContentSize()
                      , i = t.getOriginalSize();
                    t.insetLeft = i.width / 3,
                    t.insetRight = i.width / 3,
                    t.insetTop = i.height / 3,
                    t.insetBottom = i.height / 3;
                    let s = n.addComponent(_cc.Sprite);
                    s.spriteFrame = t,
                    s.type = _cc.Sprite.Type.SLICED,
                    s.sizeMode = _cc.Sprite.SizeMode.CUSTOM,
                    n.setContentSize(a)
                }
                );
                let l = new _cc.Node;
                l.parent = s,
                l.y = 0,
                l.x = 0,
                l.color = _cc.color(255, 255, 255, 255),
                l.addComponent(_cc.Label).string = t || "按钮" + (e + 1),
                l.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK,
                l.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER,
                l.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER,
                l.getComponent(_cc.Label).fontSize = 30,
                l.width = n.width - 10,
                l.height = n.height - 10,
                this.registerTouchHandler(s, t=>{
                    if ("began" == t.name ? s.scale = 1.1 : "moved" == t.name || (s.scale = 1),
                    this.isTouchEventClick(t)) {
                        let t = i[e];
                        if (t instanceof Function) {
                            t() || (r = !0,
                            o.destroy())
                        } else
                            r = !0,
                            o.destroy()
                    }
                }
                )
            }
        }
        showWebView(e, t) {
            this.closeWebView();
            let a = this.getNodeCanvas();
            if (!a)
                return;
            let i = new _cc.Node;
            i.parent = a,
            i.setContentSize(2048, 2048),
            i.zIndex = _cc.macro.MAX_ZINDEX,
            this.showWebViewNode = i;
            let s = new _cc.Node;
            s.parent = i,
            s.setContentSize(i.getContentSize()),
            this.addFillerSprite(s, _cc.color(0, 0, 0, 127)),
            this.registerTouchHandler(s, e=>{
                this.isTouchEventClick(e) && this.closeWebView()
            }
            );
            let o = new _cc.Node;
            o.parent = i;
            let n = Math.min(.8 * a.width, 500)
              , r = Math.min(.8 * a.height, 800);
            a.width > a.height && (n = Math.min(.8 * a.width, 800),
            r = Math.min(.8 * a.height, 500)),
            o.setContentSize(n, r),
            _cc.loader.loadRes("_ulsdk_ui/bg_01", _cc.SpriteFrame, (e,t)=>{
                if (e)
                    return void ULSDK.console.warn("MCPanelCreator.showPrivacyDialog nodeDialogBg load sprite error", e);
                let a = o.getContentSize()
                  , i = t.getOriginalSize();
                t.insetLeft = i.width / 3,
                t.insetRight = i.width / 3,
                t.insetTop = i.height / 3,
                t.insetBottom = i.height / 3;
                let s = o.addComponent(_cc.Sprite);
                s.spriteFrame = t,
                s.type = _cc.Sprite.Type.SLICED,
                s.sizeMode = _cc.Sprite.SizeMode.CUSTOM,
                o.setContentSize(a)
            }
            );
            let l = new _cc.Node;
            l.parent = o,
            l.color = _cc.color(38, 38, 38, 255),
            l.addComponent(_cc.Label).string = e,
            l.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK,
            l.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER,
            l.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER,
            l.getComponent(_cc.Label).fontSize = 32,
            l.width = n - 10,
            l.height = 40,
            l.y = r / 2 - 40,
            l.x = 0;
            let h = new _cc.Node;
            h.parent = o,
            h.setContentSize(n - 50, r - 80),
            h.x = 0,
            h.y = -20;
            let d = h.addComponent(_cc.ScrollView);
            d.horizontal = !1,
            d.vertical = !0,
            d.cancelInnerEvents = !1,
            d.elastic = !0;
            let c = new _cc.Node;
            c.parent = h,
            c.setContentSize(h.getContentSize()),
            c.addComponent(_cc.Mask).type = _cc.Mask.Type.RECT,
            c.getComponent(_cc.Mask).inverted = !1;
            let g = new _cc.Node;
            g.parent = c,
            g.setAnchorPoint(.5, 1),
            g.setContentSize(h.getContentSize()),
            g.addComponent(_cc.Layout).resizeMode = _cc.Layout.ResizeMode.CONTAINER,
            d.content = g,
            ULTools.httpGet({
                url: t,
                timeoutMillisecond: 5e3,
                success: e=>{
                    let t = JSON.parse(e).policyText;
                    ULSDK.console.log("content:", t);
                    let a = new _cc.Node;
                    a.color = _cc.color(0, 0, 0, 255),
                    a.parent = g,
                    a.setAnchorPoint(.5, 1),
                    a.addComponent(_cc.Label).string = t,
                    a.getComponent(_cc.Label).overflow = _cc.Label.Overflow.RESIZE_HEIGHT,
                    a.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.TOP,
                    a.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.LEFT,
                    a.getComponent(_cc.Label).fontSize = 18,
                    a.getComponent(_cc.Label).lineHeight = 26,
                    a.setContentSize(g.getContentSize())
                }
                ,
                fail: ()=>{}
            })
        }
        closeWebView() {
            _cc.isValid(this.showWebViewNode) && (this.showWebViewNode.__b_manual_destroy = !0,
            this.showWebViewNode.destroy()),
            this.showWebViewNode = null
        }
        showPrivacyDialog(e, t, a, i) {
            if (ULSDK.console.log("MCPanelCreator.showPrivacyDialog"),
            this.showPrivacyNode)
                return;
            let s = this.getNodeCanvas();
            if (!s)
                return ULSDK.console.warn("MCPanelCreator.showPrivacyDialog nodeCanvas not found!"),
                void ULTimer.callLater(.1, ()=>{
                    this.showPrivacyDialog(e, t, a, i)
                }
                );
            let o = new _cc.Node;
            o.parent = s,
            o.setContentSize(2048, 2048),
            o.zIndex = _cc.macro.MAX_ZINDEX,
            this.showPrivacyNode = o;
            let n = new _cc.Node;
            n.parent = o,
            n.setContentSize(o.getContentSize()),
            this.addFillerSprite(n, _cc.color(0, 0, 0, 127)),
            this.registerTouchHandler(n, e=>{
                this.isTouchEventClick(e) && ULSDK.console.log("click bg")
            }
            );
            let r = !1
              , l = new _cc.Node;
            l.parent = n,
            l.addComponent(_cc.Component).onDestroy = (()=>{
                ULSDK.console.log("MCPanelCreator.showPrivacyDialog triggerNode onDestroy", r),
                this.showPrivacyNode = null,
                r || (ULSDK.console.log("MCPanelCreator.showPrivacyDialog nodeShadow被意外销毁，0.1秒后尝试重新创建提示"),
                ULTimer.callLater(1 / 60, ()=>{
                    ULSDK.console.log("ontimer"),
                    this.showPrivacyDialog(e, t, a, i)
                }
                ))
            }
            );
            let h = new _cc.Node;
            h.parent = o;
            h.setContentSize(400, 400),
            _cc.loader.loadRes("_ulsdk_ui/bg_01", _cc.SpriteFrame, (e,t)=>{
                if (e)
                    return void ULSDK.console.warn("MCPanelCreator.showPrivacyDialog nodeDialogBg load sprite error", e);
                let a = h.getContentSize()
                  , i = t.getOriginalSize();
                t.insetLeft = i.width / 3,
                t.insetRight = i.width / 3,
                t.insetTop = i.height / 3,
                t.insetBottom = i.height / 3;
                let s = h.addComponent(_cc.Sprite);
                s.spriteFrame = t,
                s.type = _cc.Sprite.Type.SLICED,
                s.sizeMode = _cc.Sprite.SizeMode.CUSTOM,
                h.setContentSize(a)
            }
            );
            let d = new _cc.Node;
            d.parent = h,
            d.color = _cc.color(0, 0, 0, 255),
            d.addComponent(_cc.Label).string = "隐私政策",
            d.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK,
            d.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER,
            d.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER,
            d.getComponent(_cc.Label).fontSize = 32,
            d.width = 390,
            d.height = 40,
            d.y = 160,
            d.x = 0;
            let c = new _cc.Node;
            c.parent = h,
            c.setContentSize(350, 260),
            c.x = 0,
            c.y = 3;
            let g = c.addComponent(_cc.ScrollView);
            g.horizontal = !1,
            g.vertical = !0,
            g.cancelInnerEvents = !1,
            g.elastic = !0;
            let _ = new _cc.Node;
            _.parent = c,
            _.setContentSize(c.getContentSize()),
            _.addComponent(_cc.Mask).type = _cc.Mask.Type.RECT,
            _.getComponent(_cc.Mask).inverted = !1;
            let m = new _cc.Node;
            m.parent = _,
            m.setAnchorPoint(.5, 1),
            m.setContentSize(c.getContentSize()),
            m.addComponent(_cc.Layout).resizeMode = _cc.Layout.ResizeMode.CONTAINER,
            g.content = m;
            let u = this
              , p = "感谢您对本公司游戏的支持，在体验我们的游戏前，请仔细阅读开发商的"
              , C = {};
            for (let e = 0; e < t.length; e++) {
                const a = t[e];
                let i = a.name || ""
                  , s = a.url || "";
                C[i] = s,
                e > 0 && (p += "、"),
                p += `<color=#6495ED><outline color=#ffffff width=2><on click="onUserProtocolClicked" param="${i}">《${i}》</on></outline></color>`
            }
            p += "中的所有条款，包括\n        1.为了您有良好的游戏体验，我们会基于具体的场景收集您的个人信息\n        2.我们会基于先进的技术和管理措施保证您的个人信息安全\n        3.基于您的授权，我们会收集以下权限\n设备信息：包括设备标识符、MAC、机型、品牌、App包名、App版本号、IP地址、设备分辨率及像素密度。\n网络信息：网络连接状态、接入网络的方式和类型、IP地址。\n使用信息：包括广告内容的展现、点击、下载。\n        如果您对本隐私政策有任何疑问,请通过kefu@ultralisk.cn与我们联系。\n        ";
            class b extends _cc.RichText {
                onUserProtocolClicked(e, t) {
                    u.showWebView(t, C[t] || "")
                }
            }
            let T = new _cc.Node;
            T.color = _cc.color(0, 0, 0, 255),
            T.parent = m,
            T.setAnchorPoint(.5, 1),
            T.addComponent(b).string = p,
            T.getComponent(b).maxWidth = 344,
            T.getComponent(b).fontSize = 18,
            T.getComponent(b).lineHeight = 26,
            T.setContentSize(m.getContentSize());
            let f = (h.width - 20) / a.length;
            for (let e = 0; e < a.length; e++) {
                const t = a[e];
                let s = new _cc.Node;
                s.parent = h,
                s.width = Math.min(.8 * f, 120),
                s.height = 40,
                s.x = -(a.length / 2 - e) * f + f / 2,
                s.y = (s.height - h.height) / 2 + 20;
                let o = new _cc.Node;
                o.parent = s,
                o.addComponent(_cc.Label).string = t,
                o.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK,
                o.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER,
                o.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER,
                o.getComponent(_cc.Label).fontSize = 22,
                o.width = s.width,
                o.height = s.height,
                1 == a.length || e % 2 == 1 ? (this.addFillerSprite(s, _cc.color(100, 149, 237, 255)),
                o.color = _cc.color(255, 255, 255, 255)) : (this.addFillerSprite(s, _cc.color(230, 230, 230, 255)),
                o.color = _cc.color(156, 176, 222, 255),
                o.addComponent(_cc.LabelOutline),
                o.getComponent(_cc.LabelOutline),
                o.getComponent(_cc.LabelOutline).width = 1,
                o.getComponent(_cc.LabelOutline).color = _cc.color(230, 230, 230, 255)),
                this.registerTouchHandler(o, t=>{
                    if (!this.isTouchEventClick(t))
                        return;
                    let a = i[e];
                    if (a instanceof Function) {
                        a() || (r = !0,
                        this.showPrivacyNode.destroy(),
                        this.showPrivacyNode = null)
                    } else
                        r = !0,
                        this.showPrivacyNode.destroy(),
                        this.showPrivacyNode = null
                }
                )
            }
        }
        getCanvasSize() {
            let e = 0
              , t = 0
              , a = this.getNodeCanvas();
            return {
                width: e = a.width,
                height: t = a.height
            }
        }
        getCanvasOriginSize() {
            let e = 0
              , t = 0
              , a = this.getNodeCanvas()
              , i = (a.getComponent(_cc.Canvas),
            _cc.view.getFrameSize())
              , s = i.width / i.height
              , o = a.width / a.height;
            return e = a.width,
            t = a.height,
            s < o ? t = Math.floor(t * o / s) : e = Math.floor(e * s / o),
            {
                width: e,
                height: t
            }
        }
        showReferenceRect(e, t, a, i, s, o, n) {
            ULSDK.console.log("MCPanelCreator.showReferenceRect", e, t, a, i, s);
            let r = _cc.view.getFrameSize()
              , l = t * r.width
              , h = r.height - a * r.height;
            ULSDK.console.log("  center", l, h);
            let d = this.getNodeCanvas()
              , c = this.getCanvasSize()
              , g = this.getCanvasOriginSize()
              , _ = l / r.width * g.width - (g.width - c.width) / 2
              , m = g.height - h / r.height * g.height - (g.height - c.height) / 2
              , u = d.convertToNodeSpaceAR(_cc.v2(_, m));
            ULSDK.console.log("  pInWorld", u),
            this.hideReferenceRect(e),
            _cc.loader.loadRes("_ulsdk_ui/white_dot", _cc.SpriteFrame, (r,l)=>{
                let h = new _cc.Node;
                h.parent = d,
                h.addComponent(_cc.Sprite).spriteFrame = l,
                h.setAnchorPoint(null == o ? .5 : o, null == n ? .5 : n),
                h.color = _cc.color(0, 0, 0, 127),
                h.opacity = 127,
                h.position = u,
                h.width = i,
                h.height = s,
                h.zIndex = _cc.macro.MAX_ZINDEX;
                let c = new _cc.Node;
                c.parent = h;
                let g = c.addComponent(_cc.Label);
                g.string = e,
                g.fontSize = 18,
                g.verticalAlign = _cc.Label.VerticalAlign.CENTER,
                g.horizontalAlign = _cc.Label.HorizontalAlign.CENTER;
                let _ = c.addComponent(_cc.Widget);
                _.isAlignVerticalCenter = !0,
                _.isAlignHorizontalCenter = !0,
                this.nodeReferenceRects[e] = h,
                h.__b_manual_destroy = !1;
                let m = new _cc.Node;
                m.parent = h,
                m.addComponent(_cc.Component).onDestroy = (()=>{
                    ULSDK.console.log("MCPanelCreator.showReferenceRect triggerNode onDestroy", h.__b_manual_destroy),
                    h.__b_manual_destroy || (ULSDK.console.log("MCPanelCreator.showReferenceRect nodeRect被意外销毁，0.1秒后尝试重新创建提示"),
                    ULTimer.callLater(.1, ()=>{
                        this.showReferenceRect(e, t, a, i, s)
                    }
                    ))
                }
                )
            }
            )
        }
        showReferenceRectFromViewPoint(e, t, a, i, s, o, n) {
            ULSDK.console.log("MCPanelCreator.showReferenceRectFromViewPoint", e, t, a, i, s);
            let r = _cc.view.getFrameSize()
              , l = t / r.width
              , h = 1 - a / r.height;
            this.showReferenceRect(e, l, h, i, s, o, n)
        }
        hideReferenceRect(e) {
            ULSDK.console.log("MCPanelCreator.hideReferenceRect", e);
            let t = this.nodeReferenceRects[e];
            _cc.isValid(t) && (t.__b_manual_destroy = !0,
            t.destroy(),
            t = null,
            delete this.nodeReferenceRects[e])
        }
        hideAllReferenceRects() {
            ULSDK.console.log("MCPanelCreator.hideAllReferenceRects"),
            ULTools.forEachMap(this.nodeReferenceRects, (e,t)=>{
                this.hideReferenceRect(e)
            }
            )
        }
    }
    const BUTTON_WIDTH$1 = 150
      , BUTTON_HEIGHT$1 = 40
      , NEW_LINE_HEIGHT$1 = 20
      , FONT_SIZE$1 = 20
      , PENDING$1 = 10
      , GAP$1 = 4;
    class MCPanelLaya {
        constructor() {
            this.nodeReferenceRects = {}
        }
        getRootNode() {
            return Laya.stage.getChildByName("__ulsdk_ui_node_root__")
        }
        registerTouchHander(e, t) {
            let a, i;
            e.on(Laya.Event.MOUSE_DOWN, e, s=>{
                e.__b_touch = !0,
                a = s.stageX,
                i = s.stageY,
                t({
                    name: "began",
                    pos: {
                        x: s.stageX,
                        y: s.stageY
                    }
                })
            }
            ),
            e.on(Laya.Event.MOUSE_UP, e, a=>{
                e.__b_touch && (e.__b_touch = !1,
                t({
                    name: "ended",
                    pos: {
                        x: a.stageX,
                        y: a.stageY
                    }
                }))
            }
            ),
            e.on(Laya.Event.MOUSE_MOVE, e, a=>{
                1 == e.__b_touch && t({
                    name: "moved",
                    pos: {
                        x: a.stageX,
                        y: a.stageY
                    }
                })
            }
            ),
            e.on(Laya.Event.MOUSE_OUT, e, a=>{
                e.__b_touch && (e.__b_touch = !1,
                t({
                    name: "cancelled",
                    pos: {
                        x: a.stageX,
                        y: a.stageY
                    }
                }))
            }
            ),
            e.on(Laya.Event.CLICK, e, e=>{
                if (e.stopPropagation(),
                null != a && null != i) {
                    let t = e.stageX - a
                      , s = e.stageY - i;
                    if (t * t + s * s >= 400)
                        return
                }
                t({
                    name: "click",
                    pos: {
                        x: e.stageX,
                        y: e.stageY
                    }
                })
            }
            )
        }
        createItemByData(e) {
            let t = new MCItem;
            t.initByData(e);
            let a = this.nodeContainer;
            switch (ULConst.B_INNER_DEBUG && ULSDK.console.log("createItemByData", e),
            e.type) {
            case "label":
                {
                    let e = a.addChild(new Laya.Label);
                    e.fontSize = FONT_SIZE$1,
                    e.align = "left",
                    e.color = "#ffffff",
                    e.text = t.text,
                    ULConst.B_INNER_DEBUG && ULSDK.console.log("createLabel", e.width, e.height),
                    t.width = e.width,
                    t.height = e.height,
                    t.renderNode = e;
                    break
                }
            case "labelArea":
                {
                    let e = a.addChild(new Laya.Label);
                    e.width = a.width - 2 * PENDING$1,
                    e.wordWrap = !0,
                    e.fontSize = FONT_SIZE$1,
                    e.align = "left",
                    e.color = "#ffffff",
                    e.text = t.text,
                    ULConst.B_INNER_DEBUG && ULSDK.console.log("createLabel", e.width, e.height),
                    t.width = e.width,
                    t.height = e.height,
                    t.renderNode = e;
                    break
                }
            case "button":
                {
                    let e = a.addChild(new Laya.Sprite);
                    e.size(BUTTON_WIDTH$1, BUTTON_HEIGHT$1),
                    e.graphics.drawRect(0, 0, BUTTON_WIDTH$1, BUTTON_HEIGHT$1, "#c8c8c8ff");
                    let i = e.addChild(new Laya.Label);
                    i.fontSize = FONT_SIZE$1,
                    i.color = "#000000",
                    i.align = "center",
                    i.text = t.text,
                    i.pos(BUTTON_WIDTH$1 / 2 - i.width / 2, BUTTON_HEIGHT$1 / 2 - i.height / 2),
                    this.registerTouchHander(e, e=>{
                        ULConst.B_INNER_DEBUG && ULSDK.console.log("onTouch button", t.text, e.name),
                        "began" == e.name ? (i.color = "#00ff00",
                        i._tf.isChanged = !0) : "moved" == e.name || (i.color = "#000000",
                        i._tf.isChanged = !0),
                        ULConst.B_INNER_DEBUG && ULSDK.console.log("  label.color", i.color),
                        "click" == e.name && t.triggerOnClick()
                    }
                    ),
                    t.width = e.width,
                    t.height = e.height,
                    t.renderNode = e;
                    break
                }
            case "inputBox":
                {
                    let e = a.addChild(new Laya.Sprite);
                    e.size(t.width || BUTTON_WIDTH$1, t.height || BUTTON_HEIGHT$1),
                    e.graphics.drawRect(0, 0, BUTTON_WIDTH$1, BUTTON_HEIGHT$1, "#c8c8c8ff");
                    let i = e.addChild(new Laya.TextInput);
                    i.size(e.width - 4, e.height),
                    i.pos(2, 0),
                    i.fontSize = FONT_SIZE$1,
                    i.color = "#000000",
                    i.align = "left",
                    i.on("keyup", this, e=>{
                        t.setText(i.text)
                    }
                    ),
                    e.textInput = i,
                    t.width = e.width,
                    t.height = e.height,
                    t.renderNode = e;
                    break
                }
            case "newLine":
                t.width = a.width - 2 * PENDING$1,
                t.height = NEW_LINE_HEIGHT$1
            }
            return t
        }
        doLayout() {
            if (!this.items)
                return;
            ULConst.B_INNER_DEBUG && ULSDK.console.log("MCPanelCreator.doLayout"),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("  items", this.items);
            let e = this.nodePanel.width - 20
              , t = []
              , a = PENDING$1
              , i = PENDING$1
              , s = 0;
            for (let o = 0; o < this.items.length; o++) {
                let n = this.items[o]
                  , r = n.renderNode || {
                    x: 0,
                    y: 0
                };
                if (a + n.width > e) {
                    a = 0,
                    ULConst.B_INNER_DEBUG && ULSDK.console.log("清空一行"),
                    ULConst.B_INNER_DEBUG && ULSDK.console.log("  rowHeight", s);
                    for (let e = 0; e < t.length; e++) {
                        let a = t[e].renderNode || {
                            x: 0,
                            y: 0
                        };
                        a.y = i + s / 2 - a.height / 2,
                        ULConst.B_INNER_DEBUG && ULSDK.console.log("  set y", e, a.y)
                    }
                    a = PENDING$1,
                    i += s + GAP$1,
                    t = [],
                    s = 0
                }
                s = Math.max(s, n.height),
                t.push(n),
                r.x = a,
                a += n.width + GAP$1
            }
            for (let e = 0; e < t.length; e++) {
                (t[e].renderNode || {
                    x: 0,
                    y: 0
                }).y = i
            }
            i += s + PENDING$1,
            ULConst.B_INNER_DEBUG && ULSDK.console.log("finish"),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("  rowTop", i),
            this.nodeContainer.height = Math.max(this.nodePanel.height, i)
        }
        onItemNodeResize() {
            this.doLayout()
        }
        getItemByName(e) {
            for (let t = 0; t < this.items.length; t++) {
                const a = this.items[t];
                if (a.name == e)
                    return a
            }
            return null
        }
        show(e) {
            ULConst.B_INNER_DEBUG && ULSDK.console.log("MCPanelLaya.show", e);
            let t = this.getRootNode();
            if (!t)
                return;
            let a = Laya.stage.width
              , i = Laya.stage.height
              , s = t.addChild(new Laya.Sprite);
            s.size(a, i),
            s.pos(-a / 2, -i / 2),
            this.nodePanel = s;
            let o = s.addChild(new Laya.Sprite);
            o.size(a, i),
            o.graphics.drawRect(0, 0, a, i, "#000000BF", null, null),
            this.registerTouchHander(o, e=>{
                "click" == e.name && ULConst.B_INNER_DEBUG && ULSDK.console.log("click spriteBg")
            }
            );
            let n = s.addChild(new Laya.Panel);
            n.size(a, i),
            this.registerTouchHander(n, e=>{
                if ("began" == e.name)
                    n._downX = n.x,
                    n._downY = n.y,
                    n._downTouchX = e.pos.x,
                    n._downTouchY = e.pos.y;
                else if ("moved" == e.name) {
                    let t = e.pos.x - n._downTouchX
                      , a = e.pos.y - n._downTouchY
                      , i = n._downY + a;
                    i = Math.min(0, i),
                    ULConst.B_INNER_DEBUG && ULSDK.console.log("move", t, a, i),
                    n.y = i
                }
            }
            ),
            this.nodeContainer = n;
            let r = [];
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                let i = this.createItemByData(a);
                r.push(i)
            }
            this.items = r,
            this.doLayout()
        }
        close() {
            ULConst.B_INNER_DEBUG && ULSDK.console.log("MCPanelLaya.close"),
            this.nodePanel && this.nodePanel.destroy(),
            this.nodePanel = null,
            this.items = []
        }
        showPickerDialog(e, t, a, i) {
            let s = this.getRootNode();
            if (!s)
                return;
            let o = Laya.stage.width
              , n = Laya.stage.height
              , r = ULTools.scaleInRange(t.length, 8.5, 17.5, 430, 826)
              , l = s.addChild(new Laya.Sprite);
            l.size(o, n),
            l.pos(-o / 2, -n / 2),
            l.graphics.drawRect(0, 0, o, n, "#00000080"),
            this.registerTouchHander(l, e=>{
                "click" == e.name && (ULConst.B_INNER_DEBUG && ULSDK.console.log("click nodeShadow"),
                l.destroy())
            }
            );
            let h = l.addChild(new Laya.Sprite);
            h.size(o - 100, r),
            h.pos(o / 2 - h.width / 2, n / 2 - h.height / 2),
            h.graphics.drawRect(0, 0, h.width, h.height, "#a7a7a7ff"),
            this.registerTouchHander(h, e=>{
                "click" == e.name && ULConst.B_INNER_DEBUG && ULSDK.console.log("click nodeDialog")
            }
            );
            let d = h.addChild(new Laya.Label);
            d.fontSize = 36,
            d.align = "left",
            d.pos(5, 10),
            d.text = e || "标题";
            let c = h.addChild(new Laya.Sprite);
            c.size(h.width - 10, h.height - 55),
            c.pos(5, 50),
            c.graphics.drawRect(0, 0, c.width, c.height, "#616161ff");
            let g = c.width
              , _ = 40
              , m = this;
            let u = c.addChild(new Laya.List);
            u.itemRender = class extends Laya.Box {
                constructor() {
                    super(),
                    ULConst.B_INNER_DEBUG && ULSDK.console.log("item.construct", this),
                    this.size(g, _),
                    this.graphics.drawRect(0, 0, g, _, "#0000003f");
                    let e = this.addChild(new Laya.Label);
                    e.fontSize = FONT_SIZE$1,
                    e.align = "left",
                    e.color = "#ffffff",
                    e.text = "文字",
                    e.pos(5, _ / 2 - e.height / 2),
                    m.registerTouchHander(this, e=>{
                        "click" == e.name && (a(this.data.value),
                        i || l.destroy())
                    }
                    ),
                    this.label = e
                }
                fillData(e) {
                    this.label.text = e.text,
                    this.label.y = _ / 2 - this.label.height / 2,
                    this.data = e
                }
            }
            ,
            u.vScrollBarSkin = "",
            u.spaceY = 4,
            u.array = t,
            u.pos(0, 0),
            u.size(c.width, c.height),
            u.selectEnable = !0,
            u.selectHandler = new Laya.Handler(this,(e,t,a)=>{
                ULConst.B_INNER_DEBUG && ULSDK.console.log("selectHander", e, t, a)
            }
            ),
            u.renderHandler = new Laya.Handler(this,(e,t)=>{
                ULConst.B_INNER_DEBUG && ULSDK.console.log("renderHandler", e, t),
                e.fillData(e._dataSource)
            }
            )
        }
        getItemText(e) {
            let t = this.getItemByName(e);
            return t ? t.renderNode.textInput.text ? t.renderNode.textInput.text : t.text : ""
        }
        setItemText(e, t) {
            let a = this.getItemByName(e);
            if (ULConst.B_INNER_DEBUG && ULSDK.console.log("MCPanelCreator.setItemText", e, t, a),
            !a)
                return;
            a.setText(t);
            let i = a.renderNode;
            i instanceof Laya.Label ? (i.text = t,
            a.width = i.width,
            a.height = i.height,
            this.onItemNodeResize()) : i.textInput instanceof Laya.TextInput && (i.textInput.text = t)
        }
        showMsgTip(e) {
            ULConst.B_INNER_DEBUG && ULSDK.console.log("MCPanelLaya.showMsgTip");
            let t = this.getRootNode();
            if (!t)
                return;
            let a = Laya.stage.width
              , i = Laya.stage.height
              , s = t.addChild(new Laya.Label);
            s.width = a - 10,
            s.wordWrap = !0,
            s.fontSize = 20,
            s.align = "center",
            s.color = "#ffffff",
            s.text = e,
            s.pos(-a / 2, .25 * -i),
            Laya.Tween.to(s, {
                y: .25 * -i - 100
            }, 1e3, null, new Laya.Handler(this,()=>{
                Laya.Tween.to(s, {
                    alpha: 0,
                    y: .25 * -i - 150
                }, 500, null, new Laya.Handler(this,()=>{
                    s.destroy()
                }
                ))
            }
            ))
        }
        showPromptDialog(e, t, a, i) {
            ULConst.B_INNER_DEBUG && ULSDK.console.log("MCPanelLaya.showPromptDialog");
            let s = this.getRootNode();
            if (!s)
                return ULSDK.console.warn("MCPanelLaya.showPromptDialog nodeRoot not found!"),
                void ULTimer.callLater(.1, ()=>{
                    this.showPromptDialog(e, t, a, i)
                }
                );
            let o = Laya.stage.width
              , n = Laya.stage.height
              , r = s.addChild(new Laya.Sprite);
            r.size(o, n),
            r.pos(-o / 2, -n / 2),
            r.graphics.drawRect(0, 0, o, n, "#00000080"),
            this.registerTouchHander(r, e=>{
                "click" == e.name && ULConst.B_INNER_DEBUG && ULSDK.console.log("click nodeShadow")
            }
            );
            let l = r.addChild(new Laya.Image);
            l.skin = "res/_ulsdk_ui/bg_01.png",
            l.sizeGrid = "40,40,40,40,0",
            l.size(460, 320),
            l.pos(o / 2 - l.width / 2, n / 2 - l.height / 2);
            let h = l.addChild(new Laya.Label);
            h.fontSize = 32,
            h.align = "center",
            h.color = "#262626",
            h.text = e || "标题",
            h._tf.isChanged = !0,
            h.pos(l.width / 2 - h.width / 2, 20);
            let d = l.addChild(new Laya.Label);
            d.fontSize = 24,
            d.align = "center",
            d.color = "#606060",
            d.wordWrap = !0,
            d.width = l.width - 50,
            d.text = t || "正文",
            d._tf.isChanged = !0,
            d.pos(l.width / 2 - d.width / 2, 145 - d.height / 2);
            let c = -(160 * a.length + 30 * (a.length - 1)) / 2;
            for (let e = 0; e < a.length; e++) {
                const t = a[e];
                let s = l.addChild(new Laya.Image);
                s.pos(l.width / 2 + c + 160 * (e + .5) + 30 * e, l.height - 50),
                s.skin = "res/_ulsdk_ui/btn_01.png",
                s.sizeGrid = "27,27,27,27,1",
                s.size(160, 56),
                s.anchorX = .5,
                s.anchorY = .5;
                let o = s.addChild(new Laya.Label);
                o.fontSize = 30,
                o.align = "center",
                o.text = t || "按钮" + (e + 1),
                o.color = "#ffffff",
                o.pos(s.width / 2 - o.width / 2, s.height / 2 - o.height / 2),
                this.registerTouchHander(s, t=>{
                    if ("began" == t.name ? s.scale(1.1, 1.1) : "moved" == t.name || s.scale(1, 1),
                    "click" == t.name) {
                        let t = i[e];
                        if (t instanceof Function) {
                            t() || r.destroy()
                        } else
                            r.destroy()
                    }
                }
                )
            }
        }
        showWebView(e, t) {
            this.closeWebView();
            let a = this.getRootNode();
            if (!a)
                return;
            let i = Laya.stage.width
              , s = Laya.stage.height
              , o = a.addChild(new Laya.Sprite);
            o.size(i, s),
            o.pos(-i / 2, -s / 2),
            o.graphics.drawRect(0, 0, i, s, "#0000007F"),
            this.showWebViewNode = o,
            this.registerTouchHander(o, e=>{
                "click" == e.name && (ULConst.B_INNER_DEBUG && ULSDK.console.log("click nodeShadow"),
                o.destroy())
            }
            );
            let n = Math.min(.8 * i, 500)
              , r = Math.min(.8 * s, 800);
            i > s && (n = Math.min(.8 * i, 800),
            r = Math.min(.8 * s, 500));
            let l = o.addChild(new Laya.Image);
            l.skin = "res/_ulsdk_ui/bg_01.png",
            l.sizeGrid = "40,40,40,40,0",
            l.size(n, r),
            l.pos(i / 2 - l.width / 2, s / 2 - l.height / 2);
            let h = l.addChild(new Laya.Label);
            h.fontSize = 32,
            h.align = "center",
            h.color = "#262626",
            h.text = e || "标题",
            h._tf.isChanged = !0,
            h.pos(l.width / 2 - h.width / 2, 20),
            ULTools.httpGet({
                url: t,
                timeoutMillisecond: 5e3,
                success: e=>{
                    let t = JSON.parse(e).policyText;
                    let a = l.addChild(new Laya.List);
                    a.repeatY = 1,
                    a.itemRender = class extends Laya.Box {
                        constructor() {
                            super(),
                            ULConst.B_INNER_DEBUG && ULSDK.console.log("item.construct", this);
                            let e = this.addChild(new Laya.Label);
                            e.fontSize = 18,
                            e.leading = 8,
                            e.align = "left",
                            e.color = "#606060",
                            e.wordWrap = !0,
                            e.width = n - 50,
                            e.text = t,
                            e.pos(0, 2),
                            e._tf.isChanged = !0
                        }
                    }
                    ,
                    a.vScrollBarSkin = "",
                    a.spaceY = 4,
                    a.array = ["正文"],
                    a.pos(25, 65),
                    a.size(n - 50, r - 70),
                    a.selectEnable = !0,
                    a.selectHandler = new Laya.Handler(this,(e,t,a)=>{
                        ULConst.B_INNER_DEBUG && ULSDK.console.log("selectHander", e, t, a)
                    }
                    )
                }
                ,
                fail: ()=>{}
            })
        }
        closeWebView() {
            this.showWebViewNode && (this.showWebViewNode.destroy(),
            this.showWebViewNode = null)
        }
        showPrivacyDialog(e, t, a, i) {
            if (ULConst.B_INNER_DEBUG && ULSDK.console.log("MCPanelLaya.showPrivacyDialog"),
            this.showPrivacyNode)
                return;
            let s = this.getRootNode();
            if (!s)
                return ULSDK.console.warn("MCPanelLaya.showPrivacyDialog nodeRoot not found!"),
                void ULTimer.callLater(.1, ()=>this.showPrivacyDialog(e, t, a, i));
            let o = Laya.stage.width
              , n = Laya.stage.height
              , r = s.addChild(new Laya.Sprite);
            r.size(o, n),
            r.pos(-o / 2, -n / 2),
            r.graphics.drawRect(0, 0, o, n, "#0000007F"),
            this.showPrivacyNode = r;
            let l = 400
              , h = r.addChild(new Laya.Image);
            h.skin = "res/_ulsdk_ui/bg_01.png",
            h.sizeGrid = "40,40,40,40,0",
            h.size(l, 400),
            h.pos(o / 2 - h.width / 2, n / 2 - h.height / 2);
            let d = h.addChild(new Laya.Label);
            d.fontSize = 32,
            d.align = "center",
            d.color = "#606060",
            d.text = e || "标题",
            d._tf.isChanged = !0,
            d.pos(h.width / 2 - d.width / 2, 20);
            let c = "感谢您对本公司游戏的支持，在体验我们的游戏前，请仔细阅读开发商的"
              , g = []
              , _ = {};
            for (let e = 0; e < t.length; e++) {
                const a = t[e];
                let i = a.name || ""
                  , s = a.url || "";
                g.push(i),
                _[i] = s
            }
            let m = "中的所有条款，包括\n        1.为了您有良好的游戏体验，我们会基于具体的场景收集您的个人信息\n        2.我们会基于先进的技术和管理措施保证您的个人信息安全\n        3.基于您的授权，我们会收集以下权限\n设备信息：包括设备标识符、MAC、机型、品牌、App包名、App版本号、IP地址、设备分辨率及像素密度。\n网络信息：网络连接状态、接入网络的方式和类型、IP地址。\n使用信息：包括广告内容的展现、点击、下载。\n        如果您对本隐私政策有任何疑问,请通过kefu@ultralisk.cn与我们联系。\n        "
              , u = this;
            let p = h.addChild(new Laya.List);
            p.repeatY = 1,
            p.itemRender = class extends Laya.Box {
                constructor() {
                    super(),
                    ULConst.B_INNER_DEBUG && ULSDK.console.log("item.construct", this);
                    let e = this.addChild(new Laya.Label);
                    e.fontSize = 18,
                    e.leading = 8,
                    e.align = "left",
                    e.color = "#606060",
                    e.wordWrap = !0,
                    e.width = l - 50,
                    e.text = c,
                    e.pos(0, 2),
                    e._tf.isChanged = !0;
                    let t = e.height;
                    for (let e = 0; e < g.length; e++) {
                        const a = g[e];
                        let i = this.addChild(new Laya.Label);
                        i.fontSize = 18,
                        i.leading = 8,
                        i.align = "left",
                        i.color = "#6495ED",
                        i.wordWrap = !0,
                        i.width = l - 50,
                        i.text = `《${a}》`,
                        i.pos(0, t),
                        i._tf.isChanged = !0,
                        t += i.height,
                        u.registerTouchHander(i, e=>{
                            "click" == e.name && u.showWebView(a, _[a])
                        }
                        )
                    }
                    let a = this.addChild(new Laya.Label);
                    a.fontSize = 18,
                    a.leading = 8,
                    a.align = "left",
                    a.color = "#606060",
                    a.wordWrap = !0,
                    a.width = l - 50,
                    a.text = m,
                    a.pos(0, t),
                    a._tf.isChanged = !0
                }
            }
            ,
            p.vScrollBarSkin = "",
            p.spaceY = 4,
            p.array = ["正文"],
            p.pos(25, 65),
            p.size(l - 50, 260),
            p.selectEnable = !0,
            p.selectHandler = new Laya.Handler(this,(e,t,a)=>{
                ULConst.B_INNER_DEBUG && ULSDK.console.log("selectHander", e, t, a)
            }
            );
            let C = (l - 20) / a.length;
            for (let e = 0; e < a.length; e++) {
                const t = a[e];
                let s = h.addChild(new Laya.Label);
                s.fontSize = 22,
                s.align = "center",
                s.valign = "middle",
                s.text = t,
                1 == a.length || e % 2 == 1 ? (s.color = "#ffffff",
                s.bgColor = "#6495ED") : (s.color = "#9CB0DE",
                s.bgColor = "#E6E6E6"),
                s.width = Math.min(.8 * C, 120),
                s.height = 40,
                s.x = C * e + (C - s.width) / 2 + 10,
                s.y = h.height - 60,
                this.registerTouchHander(s, t=>{
                    if ("click" == t.name) {
                        let t = i[e];
                        if (t instanceof Function) {
                            t() || (this.showPrivacyNode.destroy(),
                            this.showPrivacyNode = null)
                        } else
                            this.showPrivacyNode.destroy(),
                            this.showPrivacyNode = null
                    }
                }
                )
            }
        }
        showReferenceRect(e, t, a, i, s, o, n) {
            ULConst.B_INNER_DEBUG && ULSDK.console.log("MCPanelLaya.showReferenceRect", e, t, a, i, s, o, n);
            let r = this.getRootNode();
            if (!r)
                return ULSDK.console.warn("MCPanelLaya.showReferenceRect nodeRoot not found!"),
                void ULTimer.callLater(.1, ()=>{
                    this.showReferenceRect(e, t, a, i, s, o, n)
                }
                );
            null == o && (o = .5),
            null == n && (n = .5),
            this.hideReferenceRect(e);
            let l = Laya.stage.width
              , h = Laya.stage.height
              , d = t * l
              , c = h - a * h
              , g = r.addChild(new Laya.Sprite);
            g.size(i, s),
            g.pivot(i * o, s * (1 - n));
            let _ = r.globalToLocal(new Laya.Point(d,c));
            g.pos(_.x, _.y),
            g.graphics.drawRect(0, 0, i, s, "#00000080");
            let m = g.addChild(new Laya.Label);
            m.fontSize = 30,
            m.align = "center",
            m.text = e,
            m.color = "#ffffff",
            m.pos(g.width / 2 - m.width / 2, g.height / 2 - m.height / 2),
            this.nodeReferenceRects[e] = g
        }
        showReferenceRectFromViewPoint(e, t, a, i, s, o, n) {
            ULConst.B_INNER_DEBUG && ULSDK.console.log("MCPanelLaya.showReferenceRectFromViewPoint", e, t, a, i, s, o, n),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("Laya.Browser.clientWidth", Laya.Browser.clientWidth),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("Laya.Browser.clientHeight", Laya.Browser.clientHeight),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("Laya.Browser.pixelRatio", Laya.Browser.pixelRatio),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("Laya.Browser.width", Laya.Browser.width),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("Laya.Browser.height", Laya.Browser.height),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("Laya.stage.width", Laya.stage.width),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("Laya.stage.height", Laya.stage.height);
            let r = Laya.Browser.clientWidth / Laya.stage.width
              , l = Laya.Browser.clientHeight / Laya.stage.height
              , h = Math.min(r, l);
            ULConst.B_INNER_DEBUG && ULSDK.console.log("widthRatio", r),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("heightRatio", l),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("ratio", h);
            let d = Laya.stage.width * h
              , c = Laya.stage.height * h;
            ULConst.B_INNER_DEBUG && ULSDK.console.log("viewWidth", d),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("viewHeight", c);
            let g = t / d
              , _ = 1 - a / c;
            this.showReferenceRect(e, g, _, i, s, o, n)
        }
        hideReferenceRect(e) {
            ULConst.B_INNER_DEBUG && ULSDK.console.log("MCPanelLaya.hideReferenceRect", e);
            let t = this.nodeReferenceRects[e];
            t && !t.destroyed && t.destroy(),
            delete this.nodeReferenceRects[e]
        }
        hideAllReferenceRects() {
            ULConst.B_INNER_DEBUG && ULSDK.console.log("MCPanelLaya.hideAllReferenceRects"),
            ULTools.forEachMap(this.nodeReferenceRects, (e,t)=>{
                this.hideReferenceRect(e)
            }
            )
        }
    }
    const TOUCH_AREA_WIDTH = 100
      , TOUCH_AREA_HEIGHT = 200
      , TOUCH_GAP = 2
      , RIGHT_CODE = "lrlrllrr";
    class ULModuleCheckerManager {
        constructor() {
            this.inputCode = "",
            this.lastInputTime = 0,
            this.debugInfos = {},
            this.debugInfoRenderNode = null
        }
        init() {
            ULConst.B_INNER_DEBUG && ULSDK.console.log("ULModuleCheckerManager.init"),
            this.registerTouchListener(),
            this.refreshDebugInfo(),
            window.cc && window.cc.director.on(window.cc.Director.EVENT_AFTER_SCENE_LAUNCH, e=>{
                ULConst.B_INNER_DEBUG && ULSDK.console.log("ULModuleCheckerManager on EVENT_AFTER_SCENE_LAUNCH"),
                this.registerTouchListener(),
                this.debugInfoRenderNode = null,
                this.refreshDebugInfo()
            }
            )
        }
        showPanel(e) {
            ULConst.B_INNER_DEBUG && ULSDK.console.log("ULModuleCheckerManager.showPanel"),
            (e = e || []).splice(0, 0, {
                type: "newLine"
            }),
            e.splice(0, 0, {
                type: "button",
                text: "关闭",
                onClick: ()=>{
                    this.closePanel()
                }
            }),
            e.splice(0, 0, {
                type: "label",
                text: "小游戏模块调试器"
            }),
            e.splice(0, 0, {
                type: "newLine"
            }),
            e.splice(0, 0, {
                type: "newLine"
            }),
            e.push({
                type: "newLine"
            }),
            e.push({
                type: "newLine"
            }),
            e.push({
                type: "newLine"
            }),
            e.push({
                type: "label",
                text: ULTools.format("©%d Ultralisk Chengdu", (new Date).getFullYear())
            }),
            this.closePanel();
            let t = this.getOrCreatePanel();
            t && t.show(e)
        }
        closePanel() {
            ULConst.B_INNER_DEBUG && ULSDK.console.log("ULModuleCheckerManager.closePanel"),
            this.panel && this.panel.close()
        }
        showReferenceRect(e, t, a, i, s, o, n) {
            ULConst.B_INNER_DEBUG && ULSDK.console.log("ULModuleCheckerManager.showReferenceRect", e, t, a, i, s, o, n),
            this.getOrCreatePanel(),
            this.panel && this.panel.showReferenceRect(e, t, a, i, s, o, n)
        }
        showReferenceRectFromViewPoint(e, t, a, i, s, o, n) {
            ULConst.B_INNER_DEBUG && ULSDK.console.log("ULModuleCheckerManager.showReferenceRectFromViewPoint", e, t, a, i, s),
            this.getOrCreatePanel(),
            this.panel && this.panel.showReferenceRectFromViewPoint(e, t, a, i, s, o, n)
        }
        hideReferenceRect(e) {
            ULConst.B_INNER_DEBUG && ULSDK.console.log("ULModuleCheckerManager.hideReferenceRect", e),
            this.getOrCreatePanel(),
            this.panel && this.panel.hideReferenceRect(e)
        }
        hideAllReferenceRects() {
            ULConst.B_INNER_DEBUG && ULSDK.console.log("ULModuleCheckerManager.hideAllReferenceRects"),
            this.getOrCreatePanel(),
            this.panel && this.panel.hideAllReferenceRects()
        }
        getItemText(e) {
            if (this.panel)
                return this.panel.getItemText(e)
        }
        setItemText(e, t) {
            this.panel && this.panel.setItemText(e, t)
        }
        showMsgTip(e) {
            this.getOrCreatePanel(),
            this.panel && this.panel.showMsgTip(e)
        }
        alertPrompt(e, t, a, i) {
            return this._alertPrompt(e, t, [a], [i])
        }
        alertPrompt2(e, t, a, i, s, o) {
            return this._alertPrompt(e, t, [a, i], [s, o])
        }
        _alertPrompt(e, t, a, i) {
            this.getOrCreatePanel(),
            this.panel && this.panel.showPromptDialog(e, t, a, i)
        }
        alertPrivacy(e, t, a, i) {
            this.getOrCreatePanel(),
            this.panel && this.panel.showPrivacyDialog(e, t, a, i)
        }
        showPickerDialog(e, t, a, i) {
            this.getOrCreatePanel(),
            this.panel && this.panel.showPickerDialog(e, t, a, i)
        }
        addDebugInfo(e, t) {
            this.debugInfos[e] = t,
            this.refreshDebugInfo()
        }
        removeDebugInfo(e) {
            delete this.debugInfos[e],
            this.refreshDebugInfo()
        }
        showBigTextWithPickerDialog(e, t, a) {
            let i = [];
            for (let e = 0; e < t.length; e += a) {
                let s = t.substr(e, a);
                i.push({
                    text: s,
                    value: s
                })
            }
            this.showPickerDialog(e, i, e=>{
                this.alertPrompt("完整内容", e, "好的", null)
            }
            , !0)
        }
        getOrCreatePanel() {
            return this.panel || (window.cc ? this.panel = new MCPanelCreator : window.Laya ? this.panel = new MCPanelLaya : ULSDK.console.warn("ULModuleCheckerManager.getOrCreatePanel unknown platform!")),
            this.panel
        }
        registerTouchListener() {
            if (ULConst.B_INNER_DEBUG && ULSDK.console.log("ULModuleCheckerManager.registerTouchListener"),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("  cc", window.cc),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("  laya", window.laya),
            ULConst.B_INNER_DEBUG && ULSDK.console.log("  Laya", window.Laya),
            window.cc && window.cc.systemEvent) {
                window.cc;
                let e = window.cc.director.getScene();
                if (!e)
                    return ULConst.B_INNER_DEBUG && ULSDK.console.log("  scene not found!"),
                    null;
                let t = e.getChildByName("Canvas");
                if (!t)
                    return ULConst.B_INNER_DEBUG && ULSDK.console.log("  nodeCanvas not found!"),
                    null;
                ULConst.B_INNER_DEBUG && ULSDK.console.log("nodeCanvas", t),
                t.on(window.cc.Node.EventType.TOUCH_START, e=>{
                    let a = e.getLocation()
                      , i = t.getContentSize()
                      , s = window.cc.rect(0, i.height - TOUCH_AREA_HEIGHT, TOUCH_AREA_WIDTH, TOUCH_AREA_HEIGHT)
                      , o = window.cc.rect(i.width - TOUCH_AREA_WIDTH, i.height - TOUCH_AREA_HEIGHT, TOUCH_AREA_WIDTH, TOUCH_AREA_HEIGHT);
                    s.contains(a) ? this.onTouchSpecialArea("l") : o.contains(a) ? this.onTouchSpecialArea("r") : this.onTouchSpecialArea(null)
                }
                , null, !0),
                t.on(window.cc.Node.EventType.TOUCH_END, e=>{
                    ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_TOUCH_SCREEN_END, {
                        lastTouchScreenEnd: ULTools.time()
                    })
                }
                , null, !0)
            } else if (window.Laya && window.Laya.stage) {
                let e = window.Laya
                  , t = e.stage.getChildByName("__ulsdk_ui_node_root__");
                if (!t) {
                    ULConst.B_INNER_DEBUG && ULSDK.console.log("create laya nodeRoot"),
                    (t = e.stage.addChild(new e.Sprite)).size(0, 0),
                    t.pos(e.stage.width / 2, e.stage.height / 2),
                    t.name = "__ulsdk_ui_node_root__",
                    t.zOrder = 4e4;
                    let a = this;
                    class i extends e.Script {
                        onStageClick(t) {
                            ULConst.B_INNER_DEBUG && ULSDK.console.log("LayaStageToucher.onStageClick", t),
                            ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_TOUCH_SCREEN_END, {
                                lastTouchScreenEnd: ULTools.time()
                            });
                            let i = t.stageX
                              , s = t.stageY;
                            ULConst.B_INNER_DEBUG && ULSDK.console.log(i, s, e.stage.width, e.stage.height),
                            s > TOUCH_AREA_HEIGHT ? a.onTouchSpecialArea(null) : i <= TOUCH_AREA_WIDTH ? a.onTouchSpecialArea("l") : i >= e.stage.width - TOUCH_AREA_WIDTH ? a.onTouchSpecialArea("r") : a.onTouchSpecialArea(null)
                        }
                    }
                    t.addComponent(i),
                    ULTimer.callLoop(1, ()=>{
                        let t = e.stage.getChildByName("__ulsdk_ui_node_root__");
                        t && t.pos(e.stage.width / 2, e.stage.height / 2)
                    }
                    )
                }
                ULConst.B_INNER_DEBUG && ULSDK.console.log("  nodeRoot", t)
            }
        }
        refreshDebugInfo() {
            if (ULTools.getObjSize(this.debugInfos) <= 0)
                return void (this.debugInfoRenderNode && (window.cc ? window.cc.isValid(this.debugInfoRenderNode) && this.debugInfoRenderNode.destroy() : window.Laya && this.debugInfoRenderNode.destroy(),
                this.debugInfoRenderNode = null));
            let e = [];
            ULTools.forEachMap(this.debugInfos, (t,a)=>{
                e.push(a)
            }
            );
            let t = e.join("\n");
            if (!this.debugInfoRenderNode)
                if (window.cc) {
                    window.cc;
                    let e = window.cc.director.getScene();
                    if (!e)
                        return ULConst.B_INNER_DEBUG && ULSDK.console.log("  scene not found!"),
                        null;
                    let t = e.getChildByName("Canvas");
                    if (!t)
                        return ULConst.B_INNER_DEBUG && ULSDK.console.log("  nodeCanvas not found!"),
                        null;
                    let a = new window.cc.Node;
                    a.parent = t,
                    a.zIndex = window.cc.macro.MAX_ZINDEX,
                    a.y = 0,
                    a.x = 0,
                    a.width = t.width - 10,
                    a.setAnchorPoint(.5, 1),
                    a.color = window.cc.Color.RED,
                    a.addComponent(window.cc.Label).fontSize = 24,
                    a.getComponent(window.cc.Label).enableWrapText = !0,
                    a.getComponent(window.cc.Label).horizontalAlign = window.cc.Label.HorizontalAlign.CENTER,
                    a.getComponent(window.cc.Label).verticalAlign = window.cc.Label.VerticalAlign.CENTER,
                    a.runAction(window.cc.repeatForever(window.cc.sequence(window.cc.fadeTo(1, 63), window.cc.fadeTo(1, 255)))),
                    this.debugInfoRenderNode = a
                } else if (window.Laya) {
                    let e = window.Laya
                      , t = e.stage.getChildByName("__ulsdk_ui_node_root__");
                    if (!t)
                        return void (ULConst.B_INNER_DEBUG && ULSDK.console.log("  nodeRoot not found!"));
                    let a = t.addChild(new e.Label);
                    a.fontSize = 24,
                    a.color = "#ff0000ff",
                    a.align = "center",
                    a.width = e.stage.width - 10,
                    a.pos(-a.width / 2, 0),
                    a.wordWrap = !0,
                    this.debugInfoRenderNode = a
                }
            if (this.debugInfoRenderNode)
                if (window.cc) {
                    window.cc;
                    this.debugInfoRenderNode.getComponent(window.cc.Label).string = t
                } else if (window.Laya) {
                    this.debugInfoRenderNode.text = t
                }
        }
        onTouchSpecialArea(e) {
            if (ULConst.B_INNER_DEBUG && ULSDK.console.log("ULModuleCheckerManager.onTouchSpecialArea", e),
            ULTools.time() - this.lastInputTime >= TOUCH_GAP && this.inputCode && (ULConst.B_INNER_DEBUG && ULSDK.console.log("ULModuleCheckerManager inputCode: touch gap is too long time, cancel."),
            this.inputCode = ""),
            e) {
                if (this.inputCode += e,
                this.lastInputTime = ULTools.time(),
                ULConst.B_INNER_DEBUG && ULSDK.console.log("ULModuleCheckerManager inputCode:", this.inputCode),
                this.inputCode == RIGHT_CODE) {
                    ULConst.B_INNER_DEBUG && ULSDK.console.log("  right!"),
                    this.inputCode = "";
                    let e = this.moreGameAbTestConfig() || [];
                    e = e.concat(this.collectionConfig()),
                    this.showPanel(e)
                }
            } else
                this.inputCode && (ULConst.B_INNER_DEBUG && ULSDK.console.log("ULModuleCheckerManager inputCode: touch invalid area, cancel."),
                this.inputCode = "")
        }
        collectionConfig() {
            return ULEventDispatcher.getInstance().dispatchWithReturn(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, {})
        }
        moreGameAbTestConfig() {
            return ULEventDispatcher.getInstance().dispatchWithReturn(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_MORE_GAME_AB_TEST_CONFIG, {})
        }
    }
    class ULSdkManager {
        constructor() {
            this.bChannelInfoResultResponsed = !1,
            this.bAllowStartGame = !0,
            this.version = "0.1",
            this.modules = [],
            this.channelInfo = new ULChannelInfo,
            this.copManager = new ULCopManager,
            this.advManager = new ULAdvManager,
            this.statisManager = new ULStatisManager,
            this.moduleCheckerManager = new ULModuleCheckerManager,
            this.bChannelInfoResultResponsed = !1,
            this.responsePending = [],
            this.sdkCommunicationLog = [],
            ULTools._hack_console_print_method(),
            ULTools._start_console_print_LAN()
        }
        static getInstance() {
            return this._instance || (this._instance = new ULSdkManager),
            this._instance
        }
        initUlsdk() {
            ULSDK.console.log("ULSdkManger.init"),
            this.modules = ULSdkModuleLoader.initAllModules(),
            ULTools._start_console_print_LAN(),
            this.advManager.init(),
            this.statisManager.init(),
            this.copManager.init(),
            this.moduleCheckerManager.init(),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_GET_BASE_CHANNEL_INFO, ULConst.PRIORITY_NONE, this.onCmdGetBaseChannelInfo.bind(this)),
            ULEventDispatcher.getInstance().addListener(ULConst.CMD_SET_VERSION, ULConst.PRIORITY_NONE, this.onCmdSetVersion.bind(this)),
            ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_INIT_USER_LOGIN, {}),
            ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_GAME_START, {}),
            window.cc && window.cc.game && window.cc.game.on instanceof Function ? (ULSDK.console.log("register cocos EVENT_SHOW & EVENT_HIDE"),
            window.cc.game.on(window.cc.game.EVENT_SHOW, ()=>{
                ULSDK.console.log("ULSdkManager on EVENT_SHOW"),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_GAME_RESUME, {})
            }
            ),
            window.cc.game.on(window.cc.game.EVENT_HIDE, ()=>{
                ULSDK.console.log("ULSdkManager on CC_EVENT_HIDE"),
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_GAME_PAUSE, {})
            }
            )) : window.Laya && this._register_laya_life_cycle_listener()
        }
        _register_laya_life_cycle_listener() {
            var e, t = window;
            void 0 !== document.hidden ? e = "hidden" : void 0 !== document.mozHidden ? e = "mozHidden" : void 0 !== document.msHidden ? e = "msHidden" : void 0 !== document.webkitHidden && (e = "webkitHidden");
            var a = !1;
            function onHidden() {
                ULSDK.console.log("Laya.onHidden"),
                a || (a = !0,
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_GAME_PAUSE, {}))
            }
            function onShown() {
                ULSDK.console.log("Laya.onShown"),
                a && (a = !1,
                ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_GAME_RESUME, {}))
            }
            if (e)
                for (var i = ["visibilitychange", "mozvisibilitychange", "msvisibilitychange", "webkitvisibilitychange", "qbrowserVisibilityChange"], s = 0; s < i.length; s++)
                    document.addEventListener(i[s], function(t) {
                        var a = document[e];
                        (a = a || t.hidden) ? onHidden() : onShown()
                    });
            else
                t.addEventListener("blur", onHidden),
                t.addEventListener("focus", onShown);
            navigator.userAgent.indexOf("MicroMessenger") > -1 && (t.onfocus = onShown),
            window.wx && (window.wx.onShow && window.wx.onShow(onShown),
            window.wx.onHide && window.wx.onHide(onHidden)),
            window.qg && (window.qg.onShow && window.qg.onShow(onShown),
            window.qg.onHide && window.qg.onHide(onHidden));
            window.hbs && (window.hbs.onShow && window.hbs.onShow(onShown),
            window.hbs.onHide && window.hbs.onHide(onHidden)),
            window.ks && (window.ks.onShow && window.ks.onShow(onShown),
            window.ks.onHide && window.ks.onHide(onHidden)),
            "onpageshow"in window && "onpagehide"in window && (t.addEventListener("pagehide", onHidden),
            t.addEventListener("pageshow", onShown),
            document.addEventListener("pagehide", onHidden),
            document.addEventListener("pageshow", onShown))
        }
        onRequest(e) {
            let t = null;
            this.recordSdkCommunicationLog(e);
            try {
                t = JSON.parse(e)
            } catch (e) {
                ULSDK.console.error(e)
            }
            if (!t)
                return void ULSDK.console.error("请仔细阅读文档,消息必须为json字符串类型");
            let a = t.cmd
              , i = t.data || {};
            if (a)
                switch (ULSDK.console.log("ULSdkManager.onRequest", a, i),
                a) {
                default:
                    ULEventDispatcher.getInstance().dispatch(a, i) || ULSDK.console.warn(ULTools.format("未检测到[%s]监听器", a));
                    break
                }
            else
                ULSDK.console.error("cmd为空,请检查是否按照文档规范配置消息")
        }
        response(e, t, a) {
            if (ULSDK.console.log("ULSdkManager.response", e, t),
            !this.bChannelInfoResultResponsed && !a)
                return ULSDK.console.log("  尚未发送/c/channelInfoResult，暂存消息"),
                void this.responsePending.push({
                    cmd: e,
                    data: t
                });
            let i = JSON.stringify({
                cmd: e,
                data: t
            });
            ULSdkMiddleware.onResponse(i),
            this.recordSdkCommunicationLog(i)
        }
        uploadMegadata(e) {
            let t = e.join("_");
            this.statisManager.reportUserEvent(["commonEvent", t])
        }
        isAllowStartGame() {
            return ULSDK.console.log("ULSdkManagaer.isAllowStartGame", this.bAllowStartGame),
            this.bAllowStartGame
        }
        getModuleByName(e) {
            for (let t = 0; t < this.modules.length; t++) {
                const a = this.modules[t];
                if (a.name == e)
                    return a
            }
            return null
        }
        getSdkCommunicationLog() {
            return this.sdkCommunicationLog
        }
        recordSdkCommunicationLog(e) {
            this.sdkCommunicationLog && (this.sdkCommunicationLog.length >= 100 && this.sdkCommunicationLog.splice(0, 1),
            this.sdkCommunicationLog.push(e))
        }
        _doResponseChannelInfoResult() {
            this.bChannelInfoResultResponsed = !0,
            this.response(ULConst.CMD_CHANNEL_INFO_RESULT, this.channelInfo.toResponseData());
            for (let e = 0; e < this.responsePending.length; e++) {
                const t = this.responsePending[e];
                this.response(t.cmd, t.data)
            }
            this.responsePending = []
        }
        onCmdGetBaseChannelInfo(e) {
            this.response(ULConst.CMD_GET_BASE_CHANNEL_INFO_RESULT, this.channelInfo.toBaseChannelInfoData(), !0)
        }
        onCmdSetVersion(e) {
            e.data;
            if (e.stopImmediatePropagation(),
            this.channelInfo.isReady())
                return void this._doResponseChannelInfoResult();
            ULSDK.console.log("ULSdkManager.onEventSetVersion channelInfo准备中，开启timer进行监听");
            let t = ULConfig.getConfig().i_channel_info_timeout / 1e3;
            ULTimer.callLoop(1 / 60, e=>{
                if (e.usedTime >= t) {
                    e.stop();
                    let t = this.channelInfo.getPreparationFlags();
                    return ULSDK.console.log("等待channelInfo超时！直接触发channelInfoResult。flags:", t.join(",")),
                    void this._doResponseChannelInfoResult()
                }
                if (this.channelInfo.isReady())
                    return e.stop(),
                    ULSDK.console.log("channelInfo准备完毕！触发channelInfoResult"),
                    void this._doResponseChannelInfoResult()
            }
            )
        }
    }
    ULSdkManager._instance = null;
    class ULSdkMiddleware {
        static initUlsdk() {
            if (ULSdkManager)
                try {
                    return ULSdkManager.getInstance().initUlsdk(),
                    !0
                } catch (e) {
                    return ULSDK.console.error(e),
                    !1
                }
            else
                ULSDK.console.log("ULSdkMiddleware.initUlsdk ULSdkManager not found!")
        }
        static request(e) {
            if (!ULSdkManager)
                return ULSDK.console.log("ULSdkMiddleware.request ULSdkManager not found!"),
                !1;
            try {
                return ULSdkManager.getInstance().onRequest(e),
                !0
            } catch (e) {
                return ULSDK.console.error(e),
                !1
            }
        }
        static isAllowStartGame() {
            return ULSdkManager ? ULSdkManager.getInstance().isAllowStartGame() : (ULSDK.console.log("ULSdkMiddleware.isAllowStartGame ULSdkManager not found!"),
            !0)
        }
        static registerOnResponseCallback(e) {
            this.fOnResponseCallback = e
        }
        static onResponse(e) {
            this.fOnResponseCallback instanceof Function && this.fOnResponseCallback(e)
        }
    }
    ULSdkMiddleware.fOnResponseCallback = null;
    class ULNativeControllerHtml5 {
        static init(e) {
            this.isEnabled(!0) ? (this.fOnGameCallback = e,
            ULSdkMiddleware.registerOnResponseCallback(e=>{
                this.sendMsgToGame(e)
            }
            )) : console.warn("ULNativeControllerHtml5.init !isEnabled()")
        }
        static isEnabled(e) {
            if (e)
                try {
                    console.log("ULNativeControllerHtml5.isEnabled"),
                    console.log("  wx", window.wx),
                    console.log("  qq", window.qq),
                    console.log("  tt", window.tt),
                    console.log("  swan", window.swan),
                    console.log("  hbs", window.hbs),
                    console.log("  qg", window.qg),
                    console.log("  document", document),
                    console.log("  weibo", window.loadRuntime),
                    console.log("  cc.sys.isBrowser", window.cc && window.cc.sys && window.cc.sys.isBrowser),
                    console.log("  laya conch", window.Laya && window.conch)
                } catch (e) {
                    console.log(e)
                }
            return !(!window || !window.Laya || window.conch) || (!(!window || !window.wx) || (!(!window || !window.qq) || (!(!window || !window.tt) || (!(!window || !window.swan) || (!(!window || !window.hbs) || (!(!window || !window.qg) || (!(!window || !window.loadRuntime) || !!(window.cc && window.cc.sys && window.cc.sys.isBrowser))))))))
        }
        static initUlsdk() {
            let e = ULSdkMiddleware.initUlsdk();
            return JSON.stringify({
                ret: e
            })
        }
        static sendMsgToSdk(e) {
            let t = ULSdkMiddleware.request(e);
            return JSON.stringify({
                ret: t
            })
        }
        static sendMsgToGame(e) {
            this.fOnGameCallback instanceof Function && this.fOnGameCallback(e)
        }
        static isAllowStartGame() {
            return ULSdkMiddleware.isAllowStartGame()
        }
    }
    ULNativeControllerHtml5.fOnGameCallback = null;
    const JAVA_FILE_PATH = "demo/ULNativeController"
      , JAVA_PARAMS_RETURN = "(Ljava/lang/String;)Ljava/lang/String;"
      , JAVA_CALLBACK_NAME = "JAVACALLBACK"
      , OC_FILE_NAME = "ULNativeController"
      , OC_CALLBACK_NAME = "OCCALLBACK";
    function JAVACALLBACK(e) {
        console.log("on JAVACALLBACK", e);
        try {
            let t = Base64.decode(e);
            mgrNative._onNativeCallbackJava(t)
        } catch (t) {
            console.warn("JAVACALLBACK decode base64 faild! direct use base64JsonStr"),
            mgrNative._onNativeCallbackJava(e)
        }
    }
    function OCCALLBACK(e) {
        console.log("on OCCALLBACK", e);
        try {
            let t = Base64.decode(e);
            mgrNative._onNativeCallbackObjc(t)
        } catch (t) {
            console.warn("OCCALLBACK decode base64 faild! direct use base64JsonStr"),
            mgrNative._onNativeCallbackObjc(e)
        }
    }
    function ONHTML5CALLBACK(e) {
        console.log("on ONHTML5CALLBACK", e),
        mgrNative._onNativeCallbackHtml5(e)
    }
    class mgrNative extends Manager {
        static onLoad() {
            super.onLoad(),
            Timer.callLoop(1 / 60, this.onTimer.bind(this), !0)
        }
        static init() {
            this.bInit = !0,
            window[JAVA_CALLBACK_NAME] = JAVACALLBACK,
            window[OC_CALLBACK_NAME] = OCCALLBACK,
            window.conch && (this._js2JavaBridge = window.PlatformClass.createClass(JAVA_FILE_PATH),
            this._js2OCBridge = window.PlatformClass.createClass(OC_FILE_NAME)),
            this.nativeCallbackPending = [],
            this.bRegisterNativeCallback || (this.bRegisterNativeCallback = !0,
            this.registerNativeCallback())
        }
        static onTimer() {
            if (!this.bInit)
                return;
            let e = this.nativeCallbackPending;
            for (; e.length > 0; ) {
                let t = e.shift();
                this.sendMsg("MSG_NATIVE_CALLBACK", {
                    responseData: t
                })
            }
        }
        static registerNativeCallback() {
            ULNativeControllerHtml5.isEnabled() ? this._registernativeCallbackHtml5() : Laya.Browser.onAndroid ? this._registerNativeCallbackJava() : Laya.Browser.onIOS ? this._registerNativeCallbackObjc() : console.warn(ul.format("[warn] mgrNative.registerNativeCallback, platform = %s, don't have native controller", Laya.Browser.name))
        }
        static _temp_isH5() {
            return ULNativeControllerHtml5.isEnabled()
        }
        static onNativeCallback(e) {
            console.log("onNativeCallback", e),
            ul.dump(e, "data"),
            e && this.nativeCallbackPending.push(e)
        }
        static _registerNativeCallbackJava() {
            this._js2JavaBridge.call("setCallFuncName", JAVA_CALLBACK_NAME)
        }
        static _registerNativeCallbackObjc() {
            this._callNativeObjc("setCallbackName", {
                callbackName: OC_CALLBACK_NAME
            })
        }
        static _registernativeCallbackHtml5() {
            ULNativeControllerHtml5.init(ONHTML5CALLBACK),
            this._callNativeHtml5("initUlsdk", null)
        }
        static _onNativeCallbackJava(e) {
            let t = {};
            try {
                t = JSON.parse(e || "")
            } catch (a) {
                console.warn("mgrNative._onNativeCallbackJava jsonStr error!"),
                t.text = e
            }
            this.onNativeCallback(t)
        }
        static _onNativeCallbackObjc(e) {
            let t = {};
            try {
                t = JSON.parse(e || "")
            } catch (a) {
                console.warn("mgrNative._onNativeCallbackObjc jsonStr error!"),
                t.text = e
            }
            this.onNativeCallback(t)
        }
        static _onNativeCallbackHtml5(e) {
            let t = {};
            try {
                t = JSON.parse(e || "")
            } catch (a) {
                console.warn("mgrNative._onNativeCallbackJs jsonStr error!"),
                t.text = e
            }
            this.onNativeCallback(t)
        }
        static callNative(e, t) {
            return t = t || {},
            console.log(`mgrNative.callNative: ${e}`),
            ul.dump(t),
            ULNativeControllerHtml5.isEnabled() ? this._callNativeHtml5(e, t) : Laya.Browser.onAndroid ? this._callNativeJava(e, t) : Laya.Browser.onIOS ? this._callNativeObjc(e, t) : (console.warn(ul.format("[warn] mgrNative.callNative, platform = %s, don't have native controller", Laya.Browser.name)),
            null)
        }
        static _callNativeJava(e, t) {
            console.log(`--\x3e: js: 调用本地 ${e}: ${JSON.stringify(t)}`);
            try {
                let a = JSON.stringify(t)
                  , i = this._js2JavaBridge.call(e, a);
                return JSON.parse(i)
            } catch (e) {
                return console.warn("mgrNative._onNativeCallbackJava jsonStr error!"),
                {
                    error: e
                }
            }
        }
        static _callNativeObjc(e, t) {
            try {
                let a = JSON.stringify(t)
                  , i = this._js2OCBridge.call(e + ":", a);
                return JSON.parse(i)
            } catch (e) {
                return console.warn("mgrNative._callNativeObjc jsonStr error!"),
                console.log(e),
                {
                    error: e
                }
            }
        }
        static _callNativeHtml5(e, t) {
            try {
                let a = JSON.stringify(t)
                  , i = ULNativeControllerHtml5[e](a);
                return JSON.parse(i)
            } catch (e) {
                return console.warn("mgrNative._callNativeHtml5 jsonStr error!"),
                {
                    error: e
                }
            }
        }
    }
    mgrNative.nativeCallbackPending = null,
    mgrNative.bRegisterNativeCallback = !1,
    mgrNative.bInit = !1;
    class Script2dEvent extends Laya.Script {
        constructor() {
            super(),
            this._msgHander = new MsgHandler,
            this._msgHander.startProcMsg()
        }
        onDestroy() {
            this._msgHander.stopProcMsg()
        }
        sendMsg(e, t) {
            this._msgHander && this._msgHander.sendMsg(e, t)
        }
        registerListeners(e) {
            Tools.forEachMap(e, (t,a)=>{
                e[t] = a.bind(this)
            }
            ),
            this._msgHander.registerListeners(e)
        }
    }
    class I18nComponent extends Script2dEvent {
        constructor() {
            super(...arguments),
            this.__key__ = ""
        }
        get key() {
            return this.__key__
        }
        set key(e) {
            this.__key__ = e,
            this.refresh()
        }
        get artistFont() {
            return this.__artistFont__
        }
        set artistFont(e) {
            this.__artistFont__ = e,
            this.key = "font",
            this.refresh()
        }
        onStart() {
            this.registerListeners({
                MSG_I18N_REFRESH: this.refresh.bind(this)
            }),
            this.refresh()
        }
        refresh() {
            if (!this.key || this.key.length <= 0)
                return;
            let e = this.owner;
            e._tf ? this.artistFont ? mgrI18n.loadFont(this.artistFont, e) : e.text = mgrI18n.getText(this.key) : Tools.loadImg(e, mgrI18n.getImage(this.key))
        }
    }
    var E_LANGUAGE;
    !function(e) {
        e[e.zhcn = 0] = "zhcn",
        e[e.zhtw = 1] = "zhtw",
        e[e.en = 2] = "en",
        e[e.id = 3] = "id",
        e[e.hi = 4] = "hi",
        e[e.vi = 5] = "vi",
        e[e.pt = 6] = "pt"
    }(E_LANGUAGE || (E_LANGUAGE = {}));
    const LANGUAGE2FLAG = {
        [E_LANGUAGE.zhcn]: "zhcn",
        [E_LANGUAGE.zhtw]: "zhtw",
        [E_LANGUAGE.en]: "en",
        [E_LANGUAGE.id]: "id",
        [E_LANGUAGE.hi]: "hi",
        [E_LANGUAGE.vi]: "vi",
        [E_LANGUAGE.pt]: "pt"
    }
      , I18N_RES_PATH = "res/i18n/";
    class mgrI18n extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord()
        }
        static loadRecord() {
            super.loadRecord(),
            this.defaultLanguage = E_LANGUAGE.en;
            let e = mgrRecord.getData("mgrI18n") || {};
            this.recordLanguage = e.curLanguage,
            this._updateLanguage()
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                curLanguage: this.curLanguage
            };
            mgrRecord.setData("mgrI18n", e)
        }
        static getLanguage() {
            return this.curLanguage
        }
        static setLanguage(e) {
            this.curLanguage = e,
            this.saveRecord(),
            this.sendMsg("MSG_I18N_REFRESH")
        }
        static _updateLanguage() {
            null != this.recordLanguage ? this.setLanguage(this.recordLanguage) : null != this.sdkLanguage ? this.setLanguage(this.sdkLanguage) : this.setLanguage(this.defaultLanguage)
        }
        static setSdkLanguage(e) {
            switch (e) {
            case "en-us":
                this.sdkLanguage = E_LANGUAGE.en;
                break;
            case "zh":
                this.sdkLanguage = E_LANGUAGE.zhcn;
                break;
            case "pt-br":
                this.sdkLanguage = E_LANGUAGE.pt;
                break;
            case "vi":
                this.sdkLanguage = E_LANGUAGE.vi;
                break;
            case "id":
                this.sdkLanguage = E_LANGUAGE.id;
                break;
            case "hi":
                this.sdkLanguage = E_LANGUAGE.hi;
                break;
            default:
                this.sdkLanguage = E_LANGUAGE.en
            }
            this._updateLanguage()
        }
        static isReceiveSdkLanguage() {
            return null != this.sdkLanguage
        }
        static getText(e) {
            let t = this.parseKey(e);
            return t || e
        }
        static parseKey(e) {
            let t = ((window.i18n || {}).languages || {})[LANGUAGE2FLAG[this.curLanguage]] || {}
              , a = e.split(".")
              , i = t;
            for (let e = 0; e < a.length; e++) {
                if (!(i = i[a[e]]))
                    return null
            }
            return i
        }
        static getImage(e) {
            let t = "";
            t = /\.png/.test(e) ? ".png" : ".jpg",
            e = e.replace(t, "");
            let a = `res/i18n/${LANGUAGE2FLAG[this.curLanguage]}`
              , i = e.split(".");
            for (let e = 0; e < i.length; e++) {
                a += "/",
                a += i[e]
            }
            return a += t
        }
        static loadFont(e, t, a) {
            if (!t)
                return;
            let i = `${e}_ ${LANGUAGE2FLAG[this.curLanguage]}`
              , s = ()=>{
                if (!t || t.destroyed)
                    return;
                t.font = i;
                let e = t.text;
                t.text = "",
                t.text = e
            }
            ;
            if (this.loadedFontname[i])
                return void s();
            console.log(`开始加载字体:${i}`);
            let o = new Laya.BitmapFont
              , n = `res/i18n/${LANGUAGE2FLAG[this.curLanguage]}/font/${e}.fnt`;
            o.loadFont(n, new Laya.Handler(this,()=>{
                Laya.loader.getRes(n) ? (Laya.Text.registerBitmapFont(i, o),
                this.loadedFontname[i] = !0,
                s()) : (n = `res/font/${e}.fnt`,
                o.loadFont(n, new Laya.Handler(this,()=>{
                    Laya.loader.getRes(n) ? (Laya.Text.registerBitmapFont(i, o),
                    this.loadedFontname[i] = !0,
                    s()) : mgrTip.showMsgTip(`加载失败: ${e}`)
                }
                )))
            }
            ))
        }
        static trySetI18nArtistFont(e, t) {
            let a = e.getComponent(I18nComponent);
            a || (a = e.addComponent(I18nComponent)),
            a.artistFont = t
        }
        static trySetI18nText(e, t) {
            let a = e.getComponent(I18nComponent);
            a || (a = e.addComponent(I18nComponent)),
            a.key = t
        }
        static trySetI18nImage(e, t) {
            let a = e.getComponent(I18nComponent);
            a || (a = e.addComponent(I18nComponent)),
            a.key = t
        }
        static getRecordLanguage() {
            return this.recordLanguage
        }
        static getSdkLanguage() {
            return this.sdkLanguage
        }
        static getDefaultLanguage() {
            return this.defaultLanguage
        }
    }
    mgrI18n.loadedFontname = {};
    class mgrPlayer extends Manager {
        static set lastPopBannerTipDialogTime(e) {
            this.__lastPopBannerTipDialogTime__ = e,
            this.saveRecord()
        }
        static get lastPopBannerTipDialogTime() {
            return this.__lastPopBannerTipDialogTime__
        }
        static isPopBannerTipDialogCding() {
            return Tools.time() - this.lastPopBannerTipDialogTime > (mgrSdk.getCopNumberValueByKey("wechat_ui_pop_cd") || 0) && (this.lastPopBannerTipDialogTime = Tools.time(),
            !0)
        }
        static onLoad() {
            super.onLoad(),
            console.log("mgrPlayer.onLoad", this._playerName),
            this.loadRecord(),
            Timer.callLoop(1, this.onTimerLoop.bind(this), !0)
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("player") || {};
            this._playerName = e.playerName || "",
            this._items = e.items || {},
            this._recoverCostTimes = e.recoverCostTimes || {},
            this._lastDailyRefreshTime = e.lastDailyRefreshTime || 0,
            this.uid = e.uid,
            this.curAvatarPartIds = e.curAvatarPartIds,
            this.matchAvatarPartIds = e.matchAvatarPartIds,
            this.bRenamePlayerName = e.bRenamePlayerName,
            this.lastPopBannerTipDialogTime = e.lastPopBannerTipDialogTime || 0,
            this._beginGameTime = e.beginGameTime,
            this._beginGameTime || (this._beginGameTime = Tools.time(),
            this.saveRecord());
            let t = this._items;
            mgrCfg.forDb("item_template_db", (e,a)=>{
                const i = a.id;
                null == t[i] && (t[i] = a.defaultAmount)
            }
            ),
            this.refreshDailyData(),
            this.refreshRecoverItem()
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                playerName: this._playerName,
                items: this._items,
                lastDailyRefreshTime: this._lastDailyRefreshTime,
                recoverCostTimes: this._recoverCostTimes,
                uid: this.uid,
                beginGameTime: this._beginGameTime,
                curAvatarPartIds: this.curAvatarPartIds,
                matchAvatarPartIds: this.matchAvatarPartIds,
                bRenamePlayerName: this.bRenamePlayerName,
                lastPopBannerTipDialogTime: this.lastPopBannerTipDialogTime
            };
            mgrRecord.setData("player", e)
        }
        static onTimerLoop() {
            this.refreshDailyData(),
            this.refreshRecoverItem()
        }
        static getName() {
            let e = mgrI18n.getLanguage();
            return this._playerName || (this._playerName = this.calcRandomName(e)),
            this._playerName
        }
        static setName(e) {
            this._playerName = e,
            this.bRenamePlayerName = !0,
            this.saveRecord(),
            this.sendMsg("MSG_PLAYER_NAME_CHANGED")
        }
        static getUid() {
            return this.uid
        }
        static setUid(e) {
            this.uid = e
        }
        static getItemAmount(e) {
            return this._items[e] || 0
        }
        static _setItemAmount(e, t) {
            if (null == e || null == t)
                return void console.warn("警告] mgrPlayer.setItemAmount arg is wrong!", e, t);
            let a = this.getItemAmount(e);
            if (a == t)
                return;
            this._items[e] = Math.max(t, 0),
            this.lastItemsCount[e] = a;
            let i = {
                itemId: e,
                amountDelta: t - a
            };
            this.sendMsg("MSG_ITEM_AMOUNT_CHANGED", i),
            this.saveRecord()
        }
        static getLastItemAmount(e) {
            return this.lastItemsCount[e] || this.getItemAmount(e)
        }
        static getRepeatSellCount(e) {
            return this.repeatSellItems[e] || 0
        }
        static addItemAmount(e, t, a) {
            if (null == e || null == t)
                return void console.warn("警告] mgrPlayer.addItemAmount arg is wrong!", e, t);
            if (t > 0) {
                let a = mgrCfg.get("item_template_db", e);
                if (!a)
                    return void console.warn("警告] mgrPlayer.addItemAmount itemId 不存在! itemId: ", e);
                a.sellItemId && 0 != a.sellItemId && this.getItemAmount(e) >= 1 && (t = a.sellItemAmount * t,
                this.repeatSellItems[e] = t,
                e = a.sellItemId)
            }
            let i = this.getItemAmount(e);
            this._setItemAmount(e, i + t),
            [Const.ITEM_ID_DIAMONDS, Const.ITEM_ID_GOLD].indexOf(e) >= 0 && mgrSdk.statisOnAddItemAmount(e, t, a)
        }
        static refreshDailyData() {
            Tools.isOneDay(Tools.time(), this._lastDailyRefreshTime) || (this._lastDailyRefreshTime = Tools.time(),
            this.saveRecord())
        }
        static refreshRecoverItem() {
            let e = Tools.time();
            mgrCfg.forDb("item_recover_db", (t,a)=>{
                const i = a.id;
                let s = this.getItemAmount(i)
                  , o = this.getRecoverMaxAmount(i)
                  , n = this._getRecoverCostTime(i)
                  , r = 0;
                if (1 == a.mode) {
                    if (o <= s)
                        return void (0 != n && this._setRecoverCostTime(i, 0));
                    if (e < n && (n = e,
                    this._setRecoverCostTime(i, n)),
                    n <= 0) {
                        if (o <= s)
                            return;
                        n = e,
                        this._setRecoverCostTime(i, n)
                    }
                    let t = e - n
                      , a = this._getRecoverTime(i);
                    if ((r = Math.floor(t / a)) <= 0)
                        return;
                    n += a * r
                } else {
                    if (2 != a.mode)
                        return void console.warn("警告] mgrPlayer.refreshRecoverItem 未知mode", a.mode);
                    if (n <= 0)
                        return void this._setRecoverCostTime(i, e);
                    if (s >= o)
                        return void this._setRecoverCostTime(i, e);
                    if (Tools.isOneDay(e, n))
                        return;
                    r = 1,
                    n = e
                }
                o <= (s += this._getRecoverAmount(i) * r) && (s = Math.min(s, o),
                n = 0),
                this._setItemAmount(i, s),
                this._setRecoverCostTime(i, n)
            }
            )
        }
        static getRecoverMaxAmount(e) {
            let t = mgrCfg.get("item_recover_db", e);
            return 0 != t.maxAmountRefItemId ? this.getItemAmount(t.maxAmountRefItemId) : t.maxAmount
        }
        static getRecoverTime(e) {
            return this._getRecoverTime(e)
        }
        static _getRecoverTime(e) {
            return mgrCfg.get("item_recover_db", e, "recoverTime")
        }
        static _getRecoverAmount(e) {
            let t = mgrCfg.get_from_item_recover_db(e);
            return t.recoverCopValue ? mgrSdk.getCopNumberValueByKey(t.recoverCopValue) : t.recoverAmount
        }
        static _getRecoverCostTime(e) {
            return this._recoverCostTimes[e] || 0
        }
        static _setRecoverCostTime(e, t) {
            this._recoverCostTimes[e] = t,
            this.saveRecord()
        }
        static getRecoverRemainTime(e) {
            let t = mgrCfg.get("item_recover_db", e);
            if (1 == t.mode) {
                let t = this._getRecoverCostTime(e);
                if (t <= 0)
                    return null;
                let a = Tools.time() - t
                  , i = this._getRecoverTime(e);
                return i < a ? 0 : i - a
            }
            if (2 == t.mode) {
                if (this.getItemAmount(e) >= this.getRecoverMaxAmount(e))
                    return null;
                let t = new Date;
                return t.setDate(t.getDate() + 1),
                t.setHours(0),
                t.setMinutes(0),
                t.setSeconds(0),
                t.getTime() / 1e3 - Tools.time()
            }
            return console.warn("警告] mgrPlayer.refreshRecoverItem 未知mode", t.mode),
            null
        }
        static openItemBox(e) {
            let t = []
              , a = 0;
            for (; ; ) {
                let i = mgrCfg.get_from_random_box_db(e, a);
                if (!i)
                    break;
                t.push(i),
                a++
            }
            let i = Tools.RoundTableProbability(t, "weight");
            return {
                itemId: i.itemId,
                amount: Tools.random(i.minCount, i.maxCount)
            }
        }
        static calcRandomName(e) {
            let t = "";
            switch (e) {
            case E_LANGUAGE.zhcn:
                let a = mgrCfg.getDb("random_name_part1_db")
                  , i = mgrCfg.getDb("random_name_part2_db");
                t = a[Tools.random(a.length) - 1].word + i[Tools.random(i.length) - 1].word;
                break;
            case E_LANGUAGE.vi:
                let s = mgrCfg.getDb("vi_random_name_part1_db")
                  , o = mgrCfg.getDb("vi_random_name_part2_db");
                t = s[Tools.random(s.length) - 1].word + o[Tools.random(o.length) - 1].word;
                break;
            case E_LANGUAGE.hi:
                let n = mgrCfg.getDb("hi_random_name_part1_db")
                  , r = mgrCfg.getDb("hi_random_name_part2_db");
                t = n[Tools.random(n.length) - 1].word + r[Tools.random(r.length) - 1].word;
                break;
            case E_LANGUAGE.id:
                let l = mgrCfg.getDb("id_random_name_part1_db")
                  , h = mgrCfg.getDb("id_random_name_part2_db");
                t = l[Tools.random(l.length) - 1].word + h[Tools.random(h.length) - 1].word;
                break;
            case E_LANGUAGE.pt:
                let d = mgrCfg.getDb("pt_random_name_part1_db")
                  , c = mgrCfg.getDb("pt_random_name_part2_db");
                t = d[Tools.random(d.length) - 1].word + c[Tools.random(c.length) - 1].word;
                break;
            case E_LANGUAGE.en:
                let g = mgrCfg.getDb("en_random_name_part1_db")
                  , _ = mgrCfg.getDb("en_random_name_part2_db");
                t = g[Tools.random(g.length) - 1].word + _[Tools.random(_.length) - 1].word
            }
            return console.log("calcRandomName", e, t),
            t
        }
        static getBeginGameTime() {
            return this._beginGameTime
        }
    }
    mgrPlayer._items = {},
    mgrPlayer._playerName = "",
    mgrPlayer._lastDailyRefreshTime = null,
    mgrPlayer._recoverCostTimes = {},
    mgrPlayer._beginGameTime = 0,
    mgrPlayer.lastItemsCount = {},
    mgrPlayer.repeatSellItems = {};
    class mgrCop extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadLocalCop(),
            console.log("mgrCop.onLoad")
        }
        static loadRecord() {
            super.loadRecord()
        }
        static saveRecord() {
            super.saveRecord()
        }
        static loadLocalCop() {
            let e = {}
              , t = !window.conch && !Laya.Browser.onAndroid && !Laya.Browser.onIOS && Laya.Browser.onPC && !1;
            t ? console.log("--\x3e: 使用测试cop") : console.log("--\x3e: 使用默认cop"),
            mgrCfg.forDb("cop_db", (a,i)=>{
                e[a] = i.defaultValue,
                t && (e[a] = i.devtestValue)
            }
            ),
            this.processCop(e),
            this.localCop = e,
            console.log("localCop:", e)
        }
        static processCop(e) {
            console.log("mgrCop.processCop"),
            mgrCfg.forDb("cop_process_db", (t,a)=>{
                let i = e[t];
                if (null == i)
                    return;
                let s = i.split(a.splitChar) || [];
                console.log("  process", t, s);
                for (let t = 0; t < a.outputFieldNames.length; t++) {
                    const i = a.outputFieldNames[t];
                    let o = s[t];
                    null == o ? console.warn(ul.format("mgrCop.processCop fieldValue not found! index = %d, fieldName = %s", t, i)) : (console.log(`  set ${i}, ${o}`),
                    e[i] = o)
                }
            }
            )
        }
        static get(e) {
            let t = ""
              , a = this.remoteCop[e];
            return t = null != a ? a : this.localCop[e]
        }
        static getNumberValue(e) {
            let t = this.get(e);
            if (null == t)
                return 0;
            let a = parseFloat(t);
            return isNaN(a) ? 0 : a
        }
        static getBooleanValue(e) {
            let t = this.get(e);
            return null != t && ("1" == (t = t.toLowerCase()) || "true" == t)
        }
        static getCops() {
            let e = {};
            return 0 == Tools.getObjSize(this.localCop) && this.loadLocalCop(),
            Tools.forEachMap(this.localCop, (t,a)=>{
                e[t] = a
            }
            ),
            Tools.forEachMap(this.remoteCop, (t,a)=>{
                e[t] = a
            }
            ),
            e
        }
        static setRemoteValue(e, t) {
            null != e ? (this.remoteCop[e] = t,
            this.processCop(this.remoteCop)) : console.warn("mgrCop.setRemoteValue key not found!")
        }
        static onReceiveSdkCop(e) {
            console.log("mgrCop.onReceiveSdkCop"),
            this.remoteCop = JSON.parse(e || "") || {},
            this.processCop(this.remoteCop)
        }
    }
    mgrCop.localCop = {},
    mgrCop.remoteCop = {},
    mgrCop.sdkCop = {};
    class ScaleButton extends Laya.Script {
        constructor() {
            super(),
            this.bTween = !0,
            this.bTouchBegin = !1,
            this.bPlaySoundEffect = !0
        }
        get __node() {
            return this.owner
        }
        static setSoundPlayId(e) {
            this.generalSoundId = e
        }
        onDisable() {}
        onMouseDown(e) {
            this.bTouchBegin = !0,
            this.onTouchBegin(e)
        }
        onMouseUp(e) {
            this.bTouchBegin = !1,
            this.onTouchEnd(e)
        }
        onMouseOut(e) {
            this.bTouchBegin && (this.bTouchBegin = !1,
            this.onTouchCancle(e))
        }
        onClick(e) {
            this.fOnClick instanceof Function && this.fOnClick(e),
            ScaleButton.generalSoundId && this.bPlaySoundEffect && mgrSound.play(ScaleButton.generalSoundId)
        }
        onTouchBegin(e) {
            this.bTween && Laya.Tween.to(this.owner, {
                scaleX: .9,
                scaleY: .9
            }, 50)
        }
        onTouchEnd(e) {
            this.onTouchCancle(e)
        }
        onTouchCancle(e) {
            this.bTween && Laya.Tween.to(this.owner, {
                scaleX: 1,
                scaleY: 1
            }, 50, Laya.Ease.backOut)
        }
    }
    class ReuseListItem extends Laya.Box {
        constructor() {
            super(),
            this.onInit()
        }
        onInit() {}
        fillByData(e) {}
        onSelect(e) {}
    }
    var ULPROGRESSBAR_STYLE;
    !function(e) {
        e[e.hor = 1] = "hor",
        e[e.ver = 2] = "ver",
        e[e.fan = 3] = "fan"
    }(ULPROGRESSBAR_STYLE || (ULPROGRESSBAR_STYLE = {}));
    class ULProgressBar extends Laya.Script {
        constructor() {
            super(),
            this.__startAngle = -90,
            this.__progress = 0,
            this.__style = ULPROGRESSBAR_STYLE.hor
        }
        get __node() {
            return this.owner
        }
        get progress() {
            return this.__progress
        }
        set progress(e) {
            e = Math.max(0, Math.min(1, e)),
            this.__progress = e;
            try {
                this.refresh()
            } catch (e) {
                console.log(e)
            }
        }
        get style() {
            return this.__style
        }
        set style(e) {
            this.__style = e
        }
        set barName(e) {
            this.__barName = e,
            this.bar = this.__node.getChildByName(e),
            this.bar || this.__node.name != e || (this.bar = this.__node),
            this.bar && (this.__originWidth = this.bar.width,
            this.__originHeight = this.bar.height)
        }
        get barName() {
            return this.__barName
        }
        set startAngle(e) {
            this.__startAngle = e
        }
        get startAngle() {
            return this.__startAngle
        }
        refresh() {
            if (this.bar && 0 != this.__originWidth && 0 != this.__originWidth || (this.bar = this.__node.getChildAt(0),
            this.__originWidth = this.bar.width,
            this.__originHeight = this.bar.height),
            !this.bar || 0 == this.__originWidth || 0 == this.__originWidth)
                return;
            let e = 1
              , t = 1
              , a = 1;
            if (this.__style == ULPROGRESSBAR_STYLE.hor ? e = this.progress : this.__style == ULPROGRESSBAR_STYLE.ver ? t = this.progress : this.__style == ULPROGRESSBAR_STYLE.fan && (a = this.progress),
            this.mask || (this.mask = new Laya.Sprite,
            this.bar.mask = this.mask),
            this.mask.graphics.clear(),
            this.__style == ULPROGRESSBAR_STYLE.fan)
                this.mask.graphics.drawPie(this.bar.width / 2, this.bar.height / 2, this.bar.width / 2, this.startAngle, this.startAngle + 360 * a, "#ffffff");
            else if (this.__style == ULPROGRESSBAR_STYLE.ver || this.__style == ULPROGRESSBAR_STYLE.hor) {
                let a = this.__originWidth * e
                  , i = this.__originHeight * t
                  , s = 0
                  , o = this.__originHeight - i;
                this.mask.graphics.drawRect(s, o, a + 1, i + 1, "#ffffff")
            }
        }
        onUpdate() {}
    }
    class ULCheckBox extends Laya.Script {
        constructor() {
            super(),
            this.__bCheck = !0
        }
        get __node() {
            return this.owner
        }
        get bCheck() {
            return this.__bCheck
        }
        set bCheck(e) {
            this.__bCheck = e,
            this.refresh()
        }
        refresh() {
            this.gou || (this.gou = this.__node.getChildAt(0)),
            this.gou.visible = this.bCheck
        }
        onStart() {
            this.refresh(),
            Tools.registerTouchHander(this.__node, e=>{
                e.isClick && (this.bCheck = !this.bCheck,
                this.changeCallback && this.changeCallback())
            }
            )
        }
    }
    class TaskManager {
        constructor(e) {
            this.taskList = [],
            this.curProgress = 0,
            this.totalProgress = 0,
            this.progressUpdateCallback = e
        }
        push(e) {
            !(e = ul.clone(e)) || e.length <= 0 || (this.totalProgress += e.length,
            this.taskList.push(e))
        }
        start(e, t) {
            this.executeFinishCallback = e,
            t && "object" == typeof t && (this._bindingCaller = t,
            this._bBindCaller = !0),
            this.__goNext()
        }
        __goNext() {
            if (this._bBindCaller) {
                if (!this._bindingCaller)
                    return void console.warn("TaskManager.__goNext bindingCaller not found!");
                if (this._bindingCaller.destroyed)
                    return void console.warn("TaskManager.__goNext bindingCaller destroyed!")
            }
            if (this.taskList.length > 0) {
                let e = this.taskList.shift()
                  , t = 0;
                for (let a = 0; a < e.length; a++) {
                    const i = e[a];
                    let s = ()=>{
                        if (t++,
                        this.curProgress++,
                        this.progressUpdateCallback instanceof Function)
                            try {
                                this.progressUpdateCallback(this.curProgress, this.totalProgress)
                            } catch (e) {
                                console.warn("[error] TaskManager.__goNext progressUpdateCallback has exception", e)
                            }
                        t == e.length && this.__goNext()
                    }
                    ;
                    try {
                        i(s)
                    } catch (e) {
                        console.warn("[error] TaskManager.__goNext taskSample has exception", e)
                    }
                }
            } else if (this.executeFinishCallback instanceof Function)
                try {
                    this.executeFinishCallback()
                } catch (e) {
                    console.warn("[error] TaskManager.__goNext executeFinishCallback has exception", e)
                }
        }
    }
    class CameraFollow extends Laya.Script {
        constructor() {
            super(),
            this.__node = null,
            this.lerpValue = .025,
            this.endRotation = new Laya.Vector3(0,0,0),
            this.distance = new Laya.Vector3(0,0,10)
        }
        onAwake() {
            this.__node = this.owner
        }
        onDisable() {}
        onLateUpdate() {
            if (this.__node)
                if (!this.__target || this.__target.destroyed) {
                    let e = new Laya.Vector3;
                    e.x = this.distance.x,
                    e.y = this.distance.y,
                    e.z = this.distance.z;
                    let t = new Laya.Vector3;
                    Laya.Vector3.lerp(this.__node.transform.position, e, this.lerpValue, t),
                    this.__node.transform.position = t;
                    let a = this.endRotation
                      , i = new Laya.Vector3;
                    Laya.Vector3.lerp(this.__node.transform.rotationEuler, a, this.lerpValue, i),
                    this.__node.transform.rotationEuler = i
                } else {
                    let e = new Laya.Vector3;
                    e.x = this.__target.transform.position.x + this.distance.x,
                    e.y = this.__target.transform.position.y + this.distance.y,
                    e.z = this.__target.transform.position.z + this.distance.z;
                    let t = new Laya.Vector3;
                    Laya.Vector3.lerp(this.__node.transform.position, e, this.lerpValue, t),
                    this.__node.transform.position = t;
                    let a = this.endRotation
                      , i = new Laya.Vector3;
                    Laya.Vector3.lerp(this.__node.transform.rotationEuler, a, this.lerpValue, i),
                    this.__node.transform.rotationEuler = i
                }
        }
    }
    class ViewBase extends ReuseListItem {
        constructor(e) {
            super(),
            this.msgHander = null,
            this.sourceName = null,
            this.exportNodeNames = null,
            this.nodeResource = null,
            this.__saved_prefab_instance = {},
            this.needUpdateFrontEffect = [],
            this.linkedModels = [],
            this.anchorX = .5,
            this.anchorY = .5,
            this.pos(0, 0),
            this.context = e || {},
            this.msgHander = new MsgHandler,
            Timer.callLater(.016, ()=>{
                this.sourceName ? mgrLoader.Load2dRes(this.sourceName, Laya.Loader.PREFAB, this, e=>{
                    this.__saved_prefab_instance[this.sourceName] || (this.__saved_prefab_instance[this.sourceName] = e.create());
                    let t = e.create();
                    this.nodeResource = t,
                    this.nodeResource.alpha = 0,
                    this.size(this.nodeResource.width, this.nodeResource.height),
                    this.pivotX = this.width / 2,
                    this.pivotY = this.height / 2,
                    this.nodeResource.anchorX = .5,
                    this.nodeResource.anchorY = .5,
                    this.nodeResource.pivotX = this.nodeResource.width / 2,
                    this.nodeResource.pivotY = this.nodeResource.height / 2,
                    this.addChild(this.nodeResource),
                    this.nodeResource.pos(this.width / 2, this.height / 2);
                    let a = this.getAllChildList(this.nodeResource);
                    if (this.exportNodeNames && this.exportNodeNames.length > 0)
                        for (let e = 0; e < this.exportNodeNames.length; e++) {
                            const t = this.exportNodeNames[e];
                            this.findNodeInChildren(a, t) || console.warn("没有找到节点: ", t)
                        }
                    Timer.callLoop(.001, e=>{
                        this.isAllChildResLoaded(a) && (e.stop(),
                        this.isAllExtraResourceLoaded(()=>{
                            this.__bLoaded = !0,
                            this.onOpened(),
                            this.customWait(()=>{
                                this.nodeResource.alpha = 1,
                                this.context.fOnLoadingFinished && this.context.fOnLoadingFinished()
                            }
                            )
                        }
                        ))
                    }
                    , this)
                }
                ) : Timer.callLater(.001, ()=>{
                    this.__bLoaded = !0,
                    this.onOpened(),
                    this.context.fOnLoadingFinished && this.context.fOnLoadingFinished()
                }
                , !0)
            }
            )
        }
        findNodeInChildren(e, t) {
            for (let a = 0; a < e.length; a++) {
                const i = e[a];
                if (i.name == t) {
                    let e = t.replace("CC_", "");
                    if (/_button/.test(t)) {
                        let t = i.addComponent(ScaleButton);
                        this[e] = t
                    } else if (/_progressbar/i.test(t)) {
                        let t = i.addComponent(ULProgressBar);
                        this[e] = t
                    } else if (/_checkBox/i.test(t)) {
                        let t = i.addComponent(ULCheckBox);
                        this[e] = t
                    } else
                        this[e] = i;
                    return !0
                }
            }
            return !1
        }
        getAllChildList(e) {
            let t = [];
            for (let a = 0; a < e.numChildren; a++) {
                let i = e.getChildAt(a);
                t.push(i);
                let s = this.getAllChildList(i);
                t = t.concat(s)
            }
            return t
        }
        isAllChildResLoaded(e) {
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                if (a._texture && !a._texture._bitmap)
                    return !1;
                if (a instanceof Laya.Image && a.skin && a.width + a.height == 0)
                    return !1
            }
            return !0
        }
        isAllExtraResourceLoaded(e) {
            let t = this.getPreLoadModelIds()
              , a = new TaskManager
              , i = [];
            for (let e = 0; e < t.length; e++) {
                const a = t[e];
                i.push(e=>{
                    mgrLoader.loadModeWithModeId(a, ()=>{
                        e()
                    }
                    , this, 1)
                }
                )
            }
            let s = this.getPreLoadAnimationIds();
            for (let e = 0; e < s.length; e++) {
                const t = s[e];
                let a = mgrCfg.get_from_animation_db(t);
                i.push(e=>{
                    Laya.AnimationClip.load(a.path, new Laya.Handler(this,t=>{
                        e()
                    }
                    ))
                }
                )
            }
            a.push(i),
            a.start(()=>{
                e()
            }
            , this)
        }
        getPreLoadModelIds() {
            return []
        }
        getPreLoadAnimationIds() {
            return []
        }
        customWait(e) {
            e && e()
        }
        registerListeners(e) {
            this.msgHander.registerListeners(e),
            this.msgHander.startProcMsg()
        }
        sendMsg(e, t) {
            this.msgHander.sendMsg(e, t)
        }
        destroy(e) {
            this.msgHander.stopProcMsg(),
            this.onClosed(),
            super.destroy(e)
        }
        onDestroy() {}
        clearFrontScene() {
            if (this.scene3DFront) {
                let e = [];
                for (let t = 0; t < this.scene3DFront.numChildren; t++) {
                    let a = this.scene3DFront.getChildAt(t);
                    e.push(a)
                }
                for (let t = 0; t < e.length; t++) {
                    const a = e[t];
                    mgrLoader.Pool.recoverModel(a)
                }
            }
        }
        onClosed() {
            for (let e = this.linkedModels.length - 1; e >= 0; e--) {
                const t = this.linkedModels[e];
                this.unlink(t)
            }
            if (this.scene3DBack) {
                let e = [];
                for (let t = 0; t < this.scene3DBack.numChildren; t++) {
                    let a = this.scene3DBack.getChildAt(t);
                    e.push(a)
                }
                for (let t = 0; t < e.length; t++) {
                    const a = e[t];
                    mgrLoader.Pool.recoverModel(a)
                }
                this.scene3DBack.destroy(!0)
            }
            if (this.scene3DFront) {
                let e = [];
                for (let t = 0; t < this.scene3DFront.numChildren; t++) {
                    let a = this.scene3DFront.getChildAt(t);
                    e.push(a)
                }
                for (let t = 0; t < e.length; t++) {
                    const a = e[t];
                    mgrLoader.Pool.recoverModel(a)
                }
                this.scene3DFront.destroy(!0)
            }
            Tools.timeScale = 1
        }
        onOpened() {}
        get bResLoaded() {
            return this.__bLoaded
        }
        canOperateCamera() {
            return !0
        }
        initScene3DBack() {
            if (this.scene3DBack)
                return;
            this.scene3DBack = new Laya.Scene3D,
            this.nodeResource.addChild(this.scene3DBack),
            this.scene3DBack.zOrder = -1,
            this.scene3DBack.name = `${1e3 * Tools.time()}`;
            var e = this.scene3DBack.addChild(new Laya.Camera(0,.1,100));
            e.transform.position = new Laya.Vector3(0,.8,2.5),
            e.clearFlag = 2,
            this.cameraBack = e;
            let t = this.scene3DBack.addChild(new Laya.DirectionLight);
            if (t.transform.rotationEuler = new Laya.Vector3(-15.1,-41.31,-17.27),
            t.color = new Laya.Vector3(1,0,0),
            this.canOperateCamera()) {
                let e = this.cameraBack.addComponent(CameraFollow);
                e.distance = new Laya.Vector3(0,.8,2.5),
                this.registerListeners({
                    MSG_DEBUG_KEY_DOWN: t=>{
                        "number_1" == t && (e.distance.x += .05),
                        "number_2" == t && (e.distance.x -= .05),
                        "number_3" == t && (e.distance.y += .05),
                        "number_4" == t && (e.distance.y -= .05),
                        "number_5" == t && (e.distance.z += .05),
                        "number_6" == t && (e.distance.z -= .05),
                        "number_7" == t && (this.cameraBack.fieldOfView += 1),
                        "number_8" == t && (this.cameraBack.fieldOfView -= 1),
                        "left" == t && (e.endRotation.y += 1),
                        "right" == t && (e.endRotation.y -= 1),
                        "up" == t && (e.endRotation.x += 1),
                        "down" == t && (e.endRotation.x -= 1),
                        console.log(this.cameraBack.getComponent(CameraFollow).distance, this.cameraBack.getComponent(CameraFollow).endRotation, this.cameraBack.fieldOfView)
                    }
                })
            }
        }
        initScene3DFront() {
            if (!this.scene3DFront) {
                this.scene3DFront = new Laya.Scene3D,
                this.nodeResource.addChild(this.scene3DFront),
                this.scene3DFront.zOrder = 1e4,
                this.scene3DFront.name = `${1e3 * Tools.time()}`;
                var e = this.scene3DFront.addChild(new Laya.Camera(0,.1,100));
                e.transform.position = new Laya.Vector3(0,.8,2.5),
                e.clearFlag = 2,
                e.orthographic = !0,
                this.cameraFront = e,
                Timer.callLoop(.016, ()=>{
                    let e = [];
                    for (let t = this.needUpdateFrontEffect.length - 1; t >= 0; t--) {
                        const a = this.needUpdateFrontEffect[t];
                        a.model && !a.model.destroyed && a.model.parent && !a.linkSprite.destroyed && a.linkSprite.visible ? this.update3DEffectAtFront(a.model, a.linkSprite, a.scale) : (mgrLoader.Pool.recoverModel(a.model),
                        e.push(t))
                    }
                    for (let t = 0; t < e.length; t++) {
                        let a = e[t];
                        this.needUpdateFrontEffect.splice(a, 1)
                    }
                }
                , this)
            }
        }
        worldPosToScreenPos(e) {
            let t = new Laya.Vector3;
            return this.cameraFront.viewport.project(e, this.cameraFront.projectionViewMatrix, t),
            t
        }
        add3DEffectAtBack(e, t, a) {
            if (this.initScene3DBack(),
            e instanceof Laya.Sprite3D)
                return this.scene3DBack.addChild(e),
                void (a && a(e));
            mgrLoader.loadModeWithModeId(e, ()=>{
                let i = mgrLoader.Pool.getModel(e);
                this.scene3DBack.addChild(i),
                t > 0 && Timer.callLater(t, ()=>{
                    mgrLoader.Pool.recoverModel(i)
                }
                , this),
                a && a(i)
            }
            , this, 1)
        }
        add3DEffectAtFront(e, t, a=0, i=1, s) {
            this.initScene3DFront();
            let o = 0
              , n = 0;
            if (t instanceof Laya.Sprite) {
                let e = t.localToGlobal(new Laya.Point(t.pivotX,t.pivotY));
                o = e.x,
                n = e.y
            } else
                o = t.x,
                n = t.y;
            let r = new Laya.Vector3;
            if (this.cameraFront.convertScreenCoordToOrthographicCoord(new Laya.Vector3(o,n,0), r),
            e instanceof Laya.Sprite3D)
                return this.resetTrail(e),
                this.scene3DFront.addChild(e),
                e.transform.position = r,
                e.transform.scale = new Laya.Vector3(i,i,i),
                t instanceof Laya.Sprite && this.needUpdateFrontEffect.push({
                    model: e,
                    linkSprite: t,
                    scale: i
                }),
                void (s && s(e));
            mgrLoader.loadModeWithModeId(e, ()=>{
                let o = mgrLoader.Pool.getModel(e);
                this.resetTrail(o),
                this.scene3DFront.addChild(o),
                o.transform.position = r,
                o.transform.scale = new Laya.Vector3(i,i,i),
                a > 0 && Timer.callLater(a, ()=>{
                    mgrLoader.Pool.recoverModel(o)
                }
                , this),
                t instanceof Laya.Sprite && this.needUpdateFrontEffect.push({
                    model: o,
                    linkSprite: t,
                    scale: i
                }),
                s && s(o)
            }
            , this, 1)
        }
        update3DEffectAtFront(e, t, a) {
            let i = 0
              , s = 0
              , o = a
              , n = a
              , r = a
              , l = !0;
            if (t instanceof Laya.Sprite) {
                let e = t.localToGlobal(new Laya.Point(t.pivotX,t.pivotY));
                i = e.x,
                s = e.y,
                o = t.scaleX * a,
                n = t.scaleY * a,
                l = t.visible
            } else
                i = t.x,
                s = t.y;
            let h = new Laya.Vector3;
            this.cameraFront.convertScreenCoordToOrthographicCoord(new Laya.Vector3(i,s,0), h),
            e.transform.position = h,
            e.transform.scale = new Laya.Vector3(o > 0 ? o : 1,n > 0 ? n : 1,r > 0 ? r : 1),
            e.active = l
        }
        link2Node(e, t, a) {
            e && !e.destroyed && t && !t.destroyed && (this.linkedModels.indexOf(e) >= 0 && this.unlink(t),
            this.linkedModels.push(t),
            Tools.link2Node(a, e, t))
        }
        unlink(e) {
            if (!e)
                return;
            let t = this.linkedModels.indexOf(e);
            -1 != t && (this.linkedModels.splice(t, 1),
            mgrLoader.Pool.recoverModel(e))
        }
        resetTrail(e) {
            if (e instanceof Laya.TrailSprite3D) {
                let t = e.trailFilter.time;
                e.trailFilter.time = 0,
                Timer.callLater(.016, ()=>{
                    e.trailFilter.time = t
                }
                , e)
            }
            for (let t = 0; t < e.numChildren; t++) {
                let a = e.getChildAt(t);
                this.resetTrail(a)
            }
        }
    }
    class DialogBase extends ViewBase {
        onAnimationFinished() {}
        closeDialog(e=!1) {
            if (!this.__bClosing) {
                if (this.sendMsg("MSG_DIALOG_CLOSE", {
                    viewName: this.name,
                    zIndex: this.__dialogRoot ? this.__dialogRoot.zOrder : null
                }),
                this.__bClosing = !0,
                mgrTip.hideJumpOtherGameBanner(this),
                e)
                    return this.__dialogRoot && this.__dialogRoot.destroy(),
                    DialogBase.ShowingDialog.splice(DialogBase.ShowingDialog.indexOf(this.name), 1),
                    void (this.context && this.context.fOnClose instanceof Function && this.context.fOnClose());
                CustomTween.to(this.__dialogMask, {
                    alpha: 0
                }, 300).start(1),
                CustomTween.to(this, {
                    scaleX: 0,
                    scaleY: 0,
                    alpha: 0
                }, 300).callback(()=>{
                    this.context && this.context.fOnClose instanceof Function && this.context.fOnClose(),
                    this.__dialogRoot && this.__dialogRoot.destroy(),
                    DialogBase.ShowingDialog.splice(DialogBase.ShowingDialog.indexOf(this.name), 1)
                }
                ).start(1)
            }
        }
        isShadowClose() {
            return !1
        }
        isShowShadow() {
            return !0
        }
        isShadowBlock() {
            return !0
        }
        openDialog(e=!1) {
            DialogBase.ShowingDialog.push(this.name),
            this.__dialogRoot = mgrDirector.get2DDialogLayer().addChild(new Laya.Box),
            this.__dialogRoot.zOrder = DialogBase.curZIndex,
            DialogBase.curZIndex++,
            this.__dialogRoot.size(Laya.stage.width, Laya.stage.height),
            this.__dialogRoot.anchorX = .5,
            this.__dialogRoot.anchorY = .5,
            this.__dialogRoot.pos(mgrDirector.get2DDialogLayer().width / 2, mgrDirector.get2DDialogLayer().height / 2);
            let t = new Laya.Image;
            this.__dialogMask = t,
            this.isShowShadow() ? (t.alpha = 0,
            CustomTween.to(t, {
                alpha: .6
            }, 300).start(1)) : t.alpha = 0,
            this.__dialogRoot.addChild(t),
            t.size(768, 1280),
            t.anchorX = .5,
            t.anchorY = .5,
            t.zOrder = 0,
            t.pos(this.__dialogRoot.width / 2, this.__dialogRoot.height / 2),
            Tools.loadImg(t, "res/ui/common/mask.png", !1, ()=>{
                Tools.registerTouchHander(t, (e=>{
                    e.isClick && this.isShadowClose() && this.closeDialog()
                }
                ).bind(this)),
                this.isShadowBlock() ? t.visible = !0 : t.visible = !1
            }
            ),
            this.alpha = 0,
            this.__dialogRoot.addChild(this),
            this.zOrder = 1,
            this.pos(this.__dialogRoot.width / 2, this.__dialogRoot.height / 2),
            Timer.callLoop(.016, t=>{
                this.bResLoaded && (t.stop(),
                e ? (this.scaleX = 1,
                this.scaleY = 1,
                this.alpha = 1) : (this.scaleX = 0,
                this.scaleY = 0,
                CustomTween.to(this, {
                    scaleX: 1,
                    scaleY: 1,
                    alpha: 1
                }, 300, Laya.Ease.backOut).callback(()=>{
                    this.onAnimationFinished()
                }
                ).start(1)))
            }
            , !0)
        }
        showTop() {
            this.__dialogRoot ? this.__dialogRoot.zOrder = DialogBase.curZIndex : this.zOrder = DialogBase.curZIndex,
            DialogBase.curZIndex++
        }
    }
    DialogBase.ShowingDialog = [],
    DialogBase.curZIndex = 1;
    class vRoleLevelUpRewardItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vRoleLevelUpRewardItem",
            this.exportNodeNames = ["CC_buttonBg", "CC_spriteIcon", "CC_labelName", "CC_labelCount"],
            this.width = 100,
            this.height = 120,
            this.anchorX = .5,
            this.anchorY = .5
        }
        onOpened() {
            this.data && this.fillByData(this.data)
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            let t = mgrCfg.get_from_item_template_db(this.data.itemId);
            Tools.loadImg(this.spriteIcon, t.icon),
            this.labelName.text = `${mgrI18n.getText(`${t.name}`)}`,
            this.labelCount.text = `x ${this.data.amount}`
        }
    }
    class ULSkeleton extends Laya.Sprite {
        constructor(e, t, a=60) {
            super(),
            this.path = e,
            this.loadedCallback = t;
            let i = ULSkeleton.allTemplets[e]
              , s = !!ULSkeleton.loadingTemplets[e];
            if (i && !s)
                return this.templet = i,
                void this.parseComplete();
            i ? (i.on(Laya.Event.COMPLETE, this, this.parseComplete),
            i.on(Laya.Event.ERROR, this, this.onError),
            this.templet = i) : ((i = new Laya.Templet).rate = a,
            i.on(Laya.Event.COMPLETE, this, this.parseComplete),
            i.on(Laya.Event.ERROR, this, this.onError),
            i.loadAni(e),
            this.templet = i)
        }
        onError() {
            console.log("骨骼动画初始化 parse error")
        }
        parseComplete() {
            let e;
            console.log("骨骼动画初始化 成功!!!"),
            e = this.templet.buildArmature(0),
            this.templet.lock = !0,
            e.showSkinByName("normal"),
            this.addChild(e),
            this.bLoaded = !0,
            this.skeleton = e,
            ULSkeleton.allTemplets[this.path] = this.templet,
            this.playingAnimationName && this.playAnimation(this.playingAnimationName, this.bPlayingLoop, this.playEndCallback),
            this.playingBackRate && this.playbackRate(this.playingBackRate),
            this.loadedCallback && this.loadedCallback()
        }
        playAnimation(e, t=!0, a) {
            this.bPlayingLoop = t,
            this.playingAnimationName = e,
            this.playEndCallback = a,
            this.bLoaded && (this.skeleton.play(this.playingAnimationName, t),
            this.playEndCallback && Timer.callLater(this.skeleton.player.playDuration / 1e3, ()=>{
                let e = this.playEndCallback;
                if (this.playEndCallback = null,
                !this.destroyed)
                    try {
                        e && e()
                    } catch (e) {
                        console.warn("[error] ULSkeleton.playAnimation has exception", e)
                    }
            }
            , this))
        }
        playbackRate(e) {
            this.playingBackRate = e,
            this.bLoaded && this.skeleton.playbackRate(this.playingBackRate)
        }
        static create(e, t, a=60) {
            let i = mgrCfg.get_from_spine_db(e);
            return i ? new ULSkeleton(i.path,t,a) : null
        }
    }
    ULSkeleton.allTemplets = {},
    ULSkeleton.loadingTemplets = {};
    class syncAnimationCom extends Laya.Script3D {
        onLateUpdate() {
            let e = this.owner;
            if (e.baseBody)
                for (const t in e.parts) {
                    let a = e.parts[t];
                    if (!a)
                        continue;
                    let i = mgrCfg.get_from_part_db(a.partId);
                    if (!mgrCfg.get_from_part_type_db(i.type).linkPoint)
                        for (let t = 0; t < a.nodes.length; t++) {
                            const i = a.nodes[t];
                            Tools.syncNodeATransform2NodeBTransform(e.baseBody.getChildAt(0), i.node.getChildAt(0), /Guadian/)
                        }
                }
        }
    }
    class ShadowFollow extends Laya.Script {
        constructor() {
            super(),
            this.__node = null,
            this.scaleMin = 0,
            this.scaleMax = 1
        }
        onAwake() {
            this.__node = this.owner
        }
        onDisable() {}
        onLateUpdate() {
            if (!this.__node)
                return;
            if (!this.__target || this.__target.destroyed)
                return;
            let e = this.__target.transform.position.clone();
            e.y = .01,
            this.__node.transform.position = e,
            this.__node.transform.rotationEuler = new Laya.Vector3(90);
            let t = this.__target.getChildByName("Bip001");
            if (!t)
                return;
            if (!(t = t.getChildAt(0)))
                return;
            if (!(t = t.getChildAt(2)))
                return;
            let a = (t.transform.position.y + .3) / 2
              , i = this.scaleMin * a + this.scaleMax * (1 - a);
            this.__node.transform.scale = new Laya.Vector3(i,i,i)
        }
    }
    class RoleAvatar extends Laya.Sprite3D {
        constructor() {
            super(),
            this.unloadedPartIds = {},
            this.loadingPartIds = {},
            this.loadEndCallBacks = [],
            this.allLoadEndCallBacks = [],
            this.linkedModels = [],
            this.parts = {},
            this.loadDefault(()=>{
                Timer.callLoop(.001, this.loadPart.bind(this), this)
            }
            ),
            this.addComponent(syncAnimationCom)
        }
        get bLoading() {
            return this.bLoadingNakedness || this.bLoadingPart || ul.length(this.unloadedPartIds) > 0
        }
        destroy() {
            for (let e = 0; e < this.linkedModels.length; e++) {
                const t = this.linkedModels[e];
                this.unlinkModel(t)
            }
            for (const e in this.parts) {
                let t = this.parts[e];
                if (!t)
                    continue;
                let a = t.nodes;
                for (let e = 0; e < a.length; e++) {
                    const t = a[e];
                    mgrLoader.Pool.recoverModel(t.node)
                }
            }
            this.parts = {},
            this.baseBody && mgrLoader.Pool.recoverModel(this.baseBody),
            this.shadow && mgrLoader.Pool.recoverModel(this.shadow),
            super.destroy(!1)
        }
        loadDefault(e) {
            this.bLoadingNakedness = !0;
            let t = [MODEL_ID.role_body, MODEL_ID.shadow]
              , a = [];
            for (let e = 0; e < t.length; e++) {
                const i = t[e];
                a.push(e=>{
                    mgrLoader.loadModeWithModeId(i, t=>{
                        e()
                    }
                    , this, 1)
                }
                )
            }
            let i = new TaskManager;
            i.push(a);
            let s = ()=>{
                for (let e = 0; e < t.length; e++) {
                    const a = t[e];
                    let i = mgrLoader.Pool.getModel(a);
                    i.active = !0;
                    let s = i.getComponent(Laya.Animator);
                    if (a == MODEL_ID.role_body && (this.baseBody = i,
                    this.baseBodyAnimator = s,
                    this.addChild(i),
                    this.baseBodyMaterials = mgrMaterial.setCartonShader(i, MODEL_ID.role_body),
                    this.shadow)) {
                        this.shadow.addComponent(ShadowFollow).__target = this.baseBody
                    }
                    if (a == MODEL_ID.shadow && (this.shadow = i,
                    this.shadow.transform.position = new Laya.Vector3(0,.01),
                    this.addChild(i),
                    this.shadowMaterials = mgrMaterial.setCartonShader(i, MODEL_ID.shadow),
                    this.baseBody)) {
                        this.shadow.addComponent(ShadowFollow).__target = this.baseBody
                    }
                }
                let e = [];
                mgrCfg.forDb_from_part_type_db((t,a)=>{
                    a.defaultPartId && !this.unloadedPartIds[a.id] && e.push(a.defaultPartId)
                }
                ),
                this.fillByPartIds(e),
                this.bLoadingNakedness = !1
            }
            ;
            i.start(()=>{
                s(),
                e()
            }
            , this)
        }
        fillByPartIds(e) {
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                let i = mgrCfg.get_from_part_db(a);
                this.unloadedPartIds[i.type] = a
            }
            console.log(this.unloadedPartIds)
        }
        removePart(e) {
            let t = mgrCfg.get_from_part_db(e)
              , a = this.parts[t.type];
            if (a) {
                console.log(`移除部件: ${a.partId}`);
                for (let e = 0; e < a.nodes.length; e++) {
                    const t = a.nodes[e];
                    mgrLoader.Pool.recoverModel(t.node)
                }
                this.parts[t.type] = null
            }
        }
        registerLoadEndCallback(e) {
            return this.loadEndCallBacks.push(e),
            this
        }
        registerAllLoadEndCallback(e) {
            return this.allLoadEndCallBacks.push(e),
            this
        }
        loadPart() {
            let e = [PartType.cloth, PartType.wing, PartType.face, PartType.hair]
              , t = [PartType.cloth, PartType.hair, PartType.shoe, PartType.sock, PartType.wing, PartType.headDec, PartType.handDec, PartType.face]
              , a = 0
              , i = 0;
            for (let t = 0; t < e.length; t++) {
                const i = e[t];
                this.loadingPartIds[i] || this.unloadedPartIds[i] || a++
            }
            if (a == e.length) {
                for (let e = 0; e < this.loadEndCallBacks.length; e++) {
                    const t = this.loadEndCallBacks[e];
                    Timer.callLater(.1, ()=>{
                        if (!this.destroyed && this.transform)
                            try {
                                t && t()
                            } catch (e) {
                                console.warn("[error] RoleAvatar.loadPart loadEndCallback has exception", e)
                            }
                    }
                    , this)
                }
                this.loadEndCallBacks = []
            }
            for (let e = 0; e < t.length; e++) {
                const a = t[e];
                this.loadingPartIds[a] || this.unloadedPartIds[a] || i++
            }
            if (i == t.length) {
                for (let e = 0; e < this.allLoadEndCallBacks.length; e++) {
                    const t = this.allLoadEndCallBacks[e];
                    Timer.callLater(.1, ()=>{
                        if (!this.destroyed && this.transform)
                            try {
                                t && t()
                            } catch (e) {
                                console.warn("[error] RoleAvatar.loadPart loadEndCallback has exception", e)
                            }
                    }
                    , this)
                }
                this.allLoadEndCallBacks = []
            }
            if (this.bLoadingPart)
                return;
            if (ul.length(this.unloadedPartIds) <= 0)
                return;
            this.loadingPartIds = this.unloadedPartIds,
            this.unloadedPartIds = {},
            this.bLoadingPart = !0;
            let s = []
              , o = [];
            for (const t in this.loadingPartIds) {
                let a = this.loadingPartIds[t];
                if (!a)
                    continue;
                let i = mgrCfg.get_from_part_db(a);
                e.indexOf(i.type) >= 0 ? s.push(a) : o.push(a)
            }
            let n = new TaskManager
              , r = [];
            r.push(e=>{
                let t = 0;
                for (let a = 0; a < s.length; a++) {
                    let i = s[a]
                      , o = mgrCfg.get_from_part_db(i);
                    mgrLoader.loadModeWithModeId(o.modelId, a=>{
                        this.replaceLoadedPart(i),
                        ++t == s.length && e()
                    }
                    , this, 1)
                }
                0 == s.length && e()
            }
            ),
            n.push(r),
            (r = []).push(e=>{
                let t = 0;
                for (let a = 0; a < o.length; a++) {
                    let i = o[a]
                      , s = mgrCfg.get_from_part_db(i);
                    mgrLoader.loadModeWithModeId(s.modelId, a=>{
                        this.replaceLoadedPart(i),
                        ++t == o.length && e()
                    }
                    , this, 1)
                }
                0 == o.length && e()
            }
            ),
            n.push(r),
            r = [],
            n.start(()=>{
                this.bLoadingPart = !1,
                this.loadingPartIds = {}
            }
            , this)
        }
        replaceLoadedPart(e) {
            let t = mgrCfg.get_from_part_db(e);
            this.loadingPartIds[t.type] = null;
            let a = this.parts[t.type];
            if (a) {
                for (let e = 0; e < a.nodes.length; e++) {
                    const t = a.nodes[e];
                    mgrLoader.Pool.recoverModel(t.node)
                }
                this.parts[t.type] = null
            }
            console.log(`添加部件: ${t.name}`);
            let i = mgrLoader.Pool.getModel(t.modelId);
            i.active = !0,
            i.transform.scale = new Laya.Vector3(1,1,1);
            let s = i.getComponent(Laya.Animator);
            s || (s = i.addComponent(Laya.Animator));
            let o = this.useCartonMaterial(i, e)
              , n = mgrCfg.get_from_part_type_db(t.type);
            if (n.linkPoint || t.assignLinkPoint ? Tools.link2Node(t.assignLinkPoint || n.linkPoint, this.baseBody, i) : (this.addChild(i),
            Tools.syncNodeA2NodeB(this.baseBody.getChildAt(0), i.getChildAt(0), /Guadian/)),
            mgrMaterial.useDynamicBone(i, t.modelId),
            t.assignAnimation && this.playAnimation(t.assignAnimation),
            this.parts[t.type] = {
                partId: e,
                nodes: [{
                    node: i,
                    animator: s,
                    materials: o
                }]
            },
            t.type == PartType.wing) {
                let e = mgrCfg.get_from_role_level_db(mgrInteraction.level);
                null == this.wingScale ? this.wingScale = e.wingScale : this.wingScale = this.wingScale,
                null == this.wingOffset ? this.wingOffset = e.wingOffset : this.wingOffset = this.wingOffset
            }
        }
        isPlayFinished() {
            return this.baseBodyAnimator.getCurrentAnimatorPlayState().normalizedTime >= 1
        }
        playWingAnimation(e, t=.1, a, i) {
            if (!this.parts[PartType.wing])
                return;
            let s = this.parts[PartType.wing].nodes[0].animator;
            a && a();
            let o = s.getControllerLayer(0).getAnimatorState(e).clip;
            s.getCurrentAnimatorPlayState(0).animatorState.name == e && 1 == o.islooping || this._playerWingAnimationLoaded(e, o, t, i)
        }
        _playerWingAnimationLoaded(e, t, a, i) {
            if (!this.parts[PartType.wing])
                return;
            let s = this.parts[PartType.wing].nodes[0].animator;
            if (0 == a)
                try {
                    s.play(e, 0, 0)
                } catch (e) {
                    console.warn(e)
                }
            else
                try {
                    s.crossFade(e, a)
                } catch (e) {
                    console.warn(e)
                }
            this.wingBackTimer && this.wingBackTimer.stop(),
            t.islooping || (this.wingBackTimer = Timer.callLater(t.duration(), ()=>{
                this.playWingAnimation(ANIMATION_ID.wing_idle),
                i && i()
            }
            , this))
        }
        playFaceAnimation(e, t=.1, a, i) {
            if (!this.parts[PartType.face])
                return;
            let s = mgrCfg.get_from_animation_db(e);
            if (!s)
                return a && a(),
                void (i && i());
            let o = this.parts[PartType.face].nodes[0].animator
              , n = o.getControllerLayer(0).getAnimatorState(e);
            if (n) {
                o.crossFade(e, .1),
                a && a();
                let s = o.getControllerLayer(0).getAnimatorState(e).clip;
                if (o.getCurrentAnimatorPlayState(0).animatorState.name == e && 1 == s.islooping)
                    return;
                this._playerFaceAnimationLoaded(e, s, t, i)
            } else
                Laya.AnimationClip.load(s.path, new Laya.Handler(this,s=>{
                    this.baseBodyAnimator.getControllerLayer(0).getAnimatorState(e) || ((n = new Laya.AnimatorState).clip = s,
                    n.clipStart = 0,
                    n.clipEnd = 1,
                    n.name = e,
                    o.getControllerLayer(0).addState(n),
                    o.crossFade(e, .1),
                    a && a(),
                    this._playerFaceAnimationLoaded(e, s, t, i))
                }
                ))
        }
        _playerFaceAnimationLoaded(e, t, a, i) {
            if (!this.parts[PartType.face])
                return;
            let s = this.parts[PartType.face].nodes[0].animator;
            if (0 == a)
                try {
                    s.play(e, 0, 0)
                } catch (e) {
                    console.warn(e)
                }
            else
                try {
                    s.crossFade(e, a)
                } catch (e) {
                    console.warn(e)
                }
            this.faceBackTimer && this.faceBackTimer.stop(),
            t.islooping || (this.faceBackTimer = Timer.callLater(t.duration(), ()=>{
                this.playFaceAnimation(ANIMATION_ID.face.idle),
                i && i()
            }
            , this))
        }
        playAnimation(e, t=.1, a, i, s=!0) {
            let o = mgrCfg.get_from_animation_db(e);
            if (!o)
                return a && a(),
                void (i && i());
            o = mgrCfg.get_from_animation_db(e);
            let n = this.baseBodyAnimator.getControllerLayer(0).getAnimatorState(e);
            if (n) {
                let o = n.clip;
                if (this.baseBodyAnimator.getCurrentAnimatorPlayState(0).animatorState.name == e && (1 == o.islooping || !s))
                    return;
                this._playerAnimationLoaded(e, o, t, i),
                this.baseBodyAnimator && !this.baseBodyAnimator.destroyed && !this.destroyed && this.transform ? a && a() : console.warn("RoleAvatar Animator has destroyed,No longer execute loadEndCallback!!!")
            } else
                Laya.AnimationClip.load(o.path, new Laya.Handler(this,s=>{
                    this.baseBodyAnimator.getControllerLayer(0).getAnimatorState(e) || ((n = new Laya.AnimatorState).clip = s,
                    n.clipStart = 0,
                    n.clipEnd = 1,
                    n.name = e,
                    this.baseBodyAnimator.getControllerLayer(0).addState(n),
                    this._playerAnimationLoaded(e, s, t, i),
                    this.baseBodyAnimator && !this.baseBodyAnimator.destroyed && !this.destroyed && this.transform ? a && a() : console.warn("RoleAvatar Animator has destroyed,No longer execute loadEndCallback!!!"))
                }
                ))
        }
        _playerAnimationLoaded(e, t, a, i) {
            if (0 == a)
                try {
                    this.baseBodyAnimator.play(e, 0, 0)
                } catch (e) {
                    console.warn(e)
                }
            else
                try {
                    this.baseBodyAnimator.crossFade(e, a)
                } catch (e) {
                    console.warn(e)
                }
            if (this.bodyBackTimer && this.bodyBackTimer.stop(),
            this.bodySmokeTimer && this.bodySmokeTimer.stop(),
            !t.islooping) {
                this.bodyBackTimer = Timer.callLater(t.duration() / this.timeScale, ()=>{
                    this.playAnimation(ANIMATION_ID.idle),
                    i && i()
                }
                , this),
                ["tiaosheng_play-ts_play01", "tiaosheng_play-ts_play02"].indexOf(e) >= 0 && (this.bodySmokeTimer = Timer.callLater(.8 * t.duration(), ()=>{
                    mgrLoader.loadModeWithModeId(MODEL_ID.effect.e_tiaosheng_smoke, ()=>{
                        let e = mgrLoader.getModeWithModeId(MODEL_ID.effect.e_tiaosheng_smoke);
                        this.addChild(e)
                    }
                    , 0, 1)
                }
                ))
            }
        }
        useCartonMaterial(e, t) {
            let a = mgrCfg.get_from_part_db(t);
            return mgrMaterial.setCartonShader(e, a.modelId)
        }
        reload() {
            let e = [];
            for (const t in this.parts) {
                let a = this.parts[t];
                e.push(a.partId);
                let i = a.nodes;
                for (let e = 0; e < i.length; e++) {
                    const t = i[e];
                    mgrLoader.Pool.recoverModel(t.node)
                }
            }
            mgrLoader.Pool.recoverModel(this.baseBody),
            this.parts = [],
            this.loadDefault(()=>{}
            ),
            this.fillByPartIds(e)
        }
        clear() {
            if (this.bLoadingPart)
                return;
            let e = [];
            mgrCfg.forDb_from_part_type_db((t,a)=>{
                a.defaultPartId && e.push(a.defaultPartId)
            }
            );
            for (const t in this.parts) {
                let a = this.parts[t];
                if (!a)
                    continue;
                if (e.indexOf(a.partId) >= 0)
                    continue;
                let i = a.nodes;
                for (let e = 0; e < i.length; e++) {
                    const t = i[e];
                    mgrLoader.Pool.recoverModel(t.node)
                }
                this.parts[t] = null
            }
            this.fillByPartIds(e),
            this.loadPart()
        }
        getPartIds(e=!1) {
            let t = [];
            e && t.push(-1),
            e && t.push(-2);
            for (const e in this.parts) {
                let a = this.parts[e];
                if (a) {
                    let e = mgrCfg.get_from_part_db(a.partId);
                    this.unloadedPartIds[e.type] ? t.push(this.unloadedPartIds[e.type]) : t.push(a.partId)
                }
            }
            return t
        }
        linkMode2RHand(e) {
            this.linkModel(e, "Guadian_RHand")
        }
        linkMode2LHand(e) {
            this.linkModel(e, "Guadian_LHand")
        }
        linkModel(e, t) {
            e && !e.destroyed && (this.linkedModels.indexOf(e) >= 0 && this.unlinkModel(e),
            this.linkedModels.push(e),
            Tools.link2Node(t, this.baseBody, e))
        }
        unlinkModel(e) {
            if (!e)
                return;
            let t = this.linkedModels.indexOf(e);
            -1 != t && (this.linkedModels.splice(t, 1),
            mgrLoader.Pool.recoverModel(e))
        }
        hideWings() {
            let e = this.parts[PartType.wing].nodes;
            for (let t = 0; t < e.length; t++) {
                e[t].node.active = !1
            }
        }
        showWings() {
            let e = this.parts[PartType.wing].nodes;
            for (let t = 0; t < e.length; t++) {
                e[t].node.active = !0
            }
        }
        get wingScale() {
            return this.__wingScale
        }
        set wingScale(e) {
            if (this.__wingScale = e,
            !this.parts[PartType.wing])
                return;
            let t = this.parts[PartType.wing].nodes;
            for (let a = 0; a < t.length; a++) {
                t[a].node.transform.localScale = new Laya.Vector3(e,e,e)
            }
        }
        get wingOffset() {
            return this.__wingOffset
        }
        set wingOffset(e) {
            if (this.__wingOffset = e,
            !this.parts[PartType.wing])
                return;
            let t = this.parts[PartType.wing].nodes;
            for (let a = 0; a < t.length; a++) {
                t[a].node.transform.localPositionY = e
            }
        }
        hideShadow() {
            this.shadow.active = !1
        }
        showShadow() {
            this.shadow.active = !0
        }
        pause() {
            this.baseBodyAnimator.speed = 0
        }
        resume() {
            this.baseBodyAnimator.speed = 1
        }
        set timeScale(e) {
            this.baseBodyAnimator.speed = e
        }
        get timeScale() {
            return this.baseBodyAnimator.speed
        }
        set randomDiscardFactor(e) {
            for (const t in this.parts) {
                let a = this.parts[t];
                for (let t = 0; t < a.nodes.length; t++) {
                    const i = a.nodes[t];
                    for (let t = 0; t < i.materials.length; t++) {
                        i.materials[t].randomDiscardFactor = e
                    }
                }
            }
            for (let t = 0; t < this.baseBodyMaterials.length; t++) {
                this.baseBodyMaterials[t].randomDiscardFactor = e
            }
            for (let t = 0; t < this.shadowMaterials.length; t++) {
                this.shadowMaterials[t].randomDiscardFactor = e
            }
        }
        getNodeByType(e) {
            return this.parts[e].nodes[0].node
        }
    }
    class mgrPart extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            this.registerListeners({
                MSG_ITEM_AMOUNT_CHANGED: this.onMsgItemAmountChanged.bind(this)
            })
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("mgr_part") || {};
            this.mainPartIds = e.mainPartIds || [],
            this.stagePartIds = e.stagePartIds || [],
            this.getedRewardSuitIds = e.getedRewardSuitIds || [],
            this.newPartIds = e.newPartIds || []
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                mainPartIds: this.mainPartIds,
                stagePartIds: this.stagePartIds,
                getedRewardSuitIds: this.getedRewardSuitIds,
                newPartIds: this.newPartIds
            };
            mgrRecord.setData("mgr_part", e)
        }
        static getRecommendTagsByPartId(e) {
            let t = []
              , a = mgrCfg.get_from_part_db(e)
              , i = [a.score1, a.score2, a.score3, a.score4, a.score5, a.score6, a.score7, a.score8, a.score9, a.score10];
            for (let e = 0; e < i.length; e++) {
                const a = i[e];
                let s = mgrCfg.get_from_part_tag_db(e + 1);
                t.push({
                    index: e,
                    id: s.id,
                    score: a,
                    icon: s.icon
                })
            }
            return [(t = Tools.sortArrayByField(t, "-score"))[0], t[1]]
        }
        static getMaxPartNum() {
            return ul.length(mgrCfg.getDb("part_db"))
        }
        static getOwnPartNum() {
            let e = 0;
            return mgrCfg.forDb_from_part_db((t,a)=>{
                mgrPlayer.getItemAmount(a.id) > 0 && e++
            }
            ),
            e
        }
        static getLastClothes(e=!1) {
            if (!this.mainPartIds)
                return [];
            let t = [];
            for (let a = 0; a < this.mainPartIds.length; a++) {
                const i = this.mainPartIds[a];
                e ? mgrPlayer.getItemAmount(i) > 0 && t.push(i) : t.push(i)
            }
            return t
        }
        static setLastClothes(e) {
            this.mainPartIds = e,
            this.saveRecord()
        }
        static isSuitRewardGeted(e) {
            return this.getedRewardSuitIds.indexOf(e) >= 0
        }
        static obtainSuitReward(e) {
            if (this.isSuitRewardGeted(e))
                return mgrTip.showMsgTip(`${mgrI18n.getText("mgrPart.2")}`),
                !1;
            let t = mgrCfg.get_from_suit_db(e)
              , a = 0
              , i = 0;
            for (let e = 0; e < t.partIds.length; e++) {
                const s = t.partIds[e];
                mgrPlayer.getItemAmount(s) > 0 && a++,
                i++
            }
            if (a < i)
                return mgrTip.showMsgTip(`${mgrI18n.getText("mgrPart.1")}`),
                !1;
            this.getedRewardSuitIds.push(e);
            for (let e = 0; e < t.collectionRewards.length; e++) {
                const a = t.collectionRewards[e];
                mgrPlayer.addItemAmount(a[0], a[1], "领取图鉴奖励"),
                mgrTip.addGotItemTip(a[0], a[1], null, {
                    fOnClose: ()=>{}
                })
            }
            return this.saveRecord(),
            !0
        }
        static getBadgeCount() {
            let e = !1;
            return mgrCfg.forDb_from_suit_db((t,a)=>{
                let i = !0;
                for (let e = 0; e < a.partIds.length; e++) {
                    const t = a.partIds[e];
                    if (mgrPlayer.getItemAmount(t) <= 0) {
                        i = !1;
                        break
                    }
                }
                if (i && !this.isSuitRewardGeted(a.id))
                    return e = !0,
                    !0
            }
            ),
            e ? 1 : 0
        }
        static getSuitProgress(e) {
            let t = mgrCfg.get_from_suit_db(e)
              , a = 0
              , i = 0;
            for (let e = 0; e < t.partIds.length; e++) {
                const s = t.partIds[e];
                a++,
                mgrPlayer.getItemAmount(s) > 0 && i++
            }
            return [i, a]
        }
        static getSuitDatas() {
            let e = [];
            return mgrCfg.forDb_from_suit_db((t,a)=>{
                e.push(a);
                let[i,s] = this.getSuitProgress(a.id);
                a.__order = i >= s ? -1 : a.id
            }
            ),
            e = Tools.sortArrayByField(e, "__order")
        }
        static getBadgeCountByCategory(e) {
            let t = !1;
            return mgrCfg.forDb_from_suit_db((a,i)=>{
                if (i.type == e) {
                    let e = !0;
                    for (let t = 0; t < i.partIds.length; t++) {
                        const a = i.partIds[t];
                        if (mgrPlayer.getItemAmount(a) <= 0) {
                            e = !1;
                            break
                        }
                    }
                    if (e && !this.isSuitRewardGeted(i.id))
                        return t = !0,
                        !0
                }
            }
            ),
            t ? 1 : 0
        }
        static _getRandomPartIdByPartType(e) {
            let t = []
              , a = mgrCfg.getDb("part_db");
            for (let i in a) {
                let s = a[i];
                s.type != e || s.bIgnoreInGrade || t.push(s.id)
            }
            return t.length <= 0 ? 0 : t[Tools.random(t.length - 1)]
        }
        static _debugFillRandom() {
            let e = []
              , t = [PartType.hair, PartType.cloth, PartType.face, PartType.shoe, PartType.sock, PartType.wing];
            for (let a in t) {
                let i = t[a]
                  , s = this._getRandomPartIdByPartType(i);
                0 != s && e.push(s)
            }
            return e
        }
        static calcWeight(e) {
            let t = 0;
            for (let a in e) {
                let i = e[a]
                  , s = mgrCfg.get_from_part_db(i);
                s && (t += s.level || 0)
            }
            return t
        }
        static onMsgItemAmountChanged(e) {
            let t = e.itemId;
            mgrCfg.get_from_part_db(t) && 1 == mgrPlayer.getItemAmount(t) && this.newPartIds.push(t)
        }
        static deleteNewPart(e) {
            let t = this.newPartIds.indexOf(e);
            -1 != t && this.newPartIds.splice(t, 1)
        }
        static isNewPart(e) {
            return this.newPartIds.indexOf(e) >= 0
        }
        static isNewType(e) {
            for (let t = 0; t < this.newPartIds.length; t++) {
                const a = this.newPartIds[t];
                if (mgrCfg.get_from_part_db(a).type == e)
                    return !0
            }
            return !1
        }
        static getPartBadgeCount() {
            return this.newPartIds.length
        }
        static getAllLoadedPartIds() {
            let e = {};
            return mgrCfg.forDb_from_part_db((t,a)=>{
                e[a.type] || (e[a.type] = {
                    hash: {},
                    array: []
                });
                let i = mgrLoader.isLoadedWithModelId(a.modelId);
                e[a.type].hash[a.id] = i,
                i && e[a.type].array.push(a.id)
            }
            ),
            e
        }
    }
    const OPERATOR_HANDLERS = {
        "==": (e,t)=>e == t,
        "!=": (e,t)=>e != t,
        ">": (e,t)=>e > t,
        ">=": (e,t)=>e >= t,
        "<": (e,t)=>e < t,
        "<=": (e,t)=>e <= t
    };
    class mgrAlu extends Manager {
        static onLoad() {
            super.onLoad()
        }
        static loadRecord() {
            super.loadRecord()
        }
        static saveRecord() {
            super.saveRecord()
        }
        static calcCheckData() {
            let e = {
                payChannel: this.getCheckPayChannel(),
                platform: this.getCheckPlatform(),
                stageProgress: 0
            };
            return Tools.forEachMap(mgrCop.getCops(), (t,a)=>{
                let i = parseFloat(a);
                e[t] = isNaN(i) ? a : i
            }
            ),
            e
        }
        static getCheckPayChannel() {
            return "unknown"
        }
        static getCheckPlatform() {
            return "unknown"
        }
        static check(e) {
            if (!e)
                return !0;
            let t = mgrCfg.get("alu_db", e);
            if (!t)
                return !1;
            let a = !0
              , i = this.calcCheckData();
            for (let e = 0; e < t.conditions.length; e++) {
                const s = t.conditions[e];
                let o = OPERATOR_HANDLERS[s.operator];
                if (o) {
                    let e = o(i[s.key], s.value);
                    a = s.bLogicOr ? a || e : a && e
                } else
                    console.warn("mgrAlu.check unknown operator", s.operator)
            }
            return a
        }
        static checkIds(e) {
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                if (!this.check(a))
                    return !1
            }
            return !0
        }
    }
    var AD_MODE, ADV_ID;
    mgrAlu.OPERATOR_HANDLERS = OPERATOR_HANDLERS,
    function(e) {
        e[e.mcprc = 1] = "mcprc",
        e[e.online = 2] = "online",
        e[e.close = 3] = "close"
    }(AD_MODE || (AD_MODE = {})),
    function(e) {
        e.intert = "1",
        e.banner = "2",
        e.embed = "3",
        e.video = "4",
        e.h5 = "5"
    }(ADV_ID || (ADV_ID = {}));
    class mgrAd extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            this.registerListeners({
                MSG_SDK_OPEN_ADV_RESULT: this.onMsgSdkOpenAdvResult,
                MSG_ADV_CLOSE_RESULT: this.onMsgAdvCloseResult,
                MSG_SDK_ADV_VALID_COUNT: this.onMsgSdkAdvValidCount
            }),
            Tools.isOneDay(this.todayNativeInsertLastScaleTime, Tools.time()) || (this.todayNativeInsertScaleCount = 0,
            this.todayNativeInsertScaleIntervalCount = 0,
            this.todayNativeInsertLastScaleTime = Tools.time())
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("ad") || {};
            this.lastFinishedTimes = e.lastFinishedTimes || {},
            this.todayNativeInsertScaleCount = e.todayNativeInsertScaleCount || 0,
            this.todayNativeInsertScaleIntervalCount = e.todayNativeInsertScaleIntervalCount || 0,
            this.todayNativeInsertLastScaleTime = e.todayNativeInsertLastScaleTime || 0
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                lastFinishedTimes: this.lastFinishedTimes,
                todayNativeInsertScaleCount: this.todayNativeInsertScaleCount,
                todayNativeInsertScaleIntervalCount: this.todayNativeInsertScaleIntervalCount,
                todayNativeInsertLastScaleTime: this.todayNativeInsertLastScaleTime
            };
            mgrRecord.setData("ad", e)
        }
        static getAdEventRemainCd(e) {
            if (!mgrCfg.get("ad_event_db", e))
                return 0;
            if (this.getCdByAdEventId(e) > 0) {
                let t = this.getLastFinishedTime(e) + this.getCdByAdEventId(e);
                return Math.max(0, t - Tools.time())
            }
            return 0
        }
        static getCdByAdEventId(e) {
            let t = mgrCfg.get_from_ad_event_db(e);
            if (!t)
                return 0;
            let a = t.cd;
            return t.cdFromCopKey && (a = mgrSdk.getCopNumberValueByKey(t.cdFromCopKey)),
            a
        }
        static getLastFinishedTime(e) {
            let t = mgrCfg.get("ad_event_db", e);
            if (!t)
                return 0;
            let a = t.id;
            return t.cdGroup && (a = t.cdGroup),
            this.lastFinishedTimes[a] || 0
        }
        static markFinished(e) {
            let t = mgrCfg.get("ad_event_db", e);
            if (!t)
                return;
            let a = t.id;
            t.cdGroup && (a = t.cdGroup),
            this.lastFinishedTimes[a] = Tools.time(),
            this.saveRecord()
        }
        static isAdTypeValid(e) {
            let t = mgrCfg.get_from_ad_event_db(e);
            if (!t)
                return !0;
            switch (t.advId) {
            case "4":
                return mgrAd.AD_VIDEO_VALID_COUNT > 0
            }
            return !0
        }
        static preCheckAdNoCd(e) {
            let t = mgrCfg.get("ad_event_db", e);
            if (!t)
                return !1;
            if (mgrGuide.isGuiding() || !mgrGuide.isAllGuideFinished())
                return console.log("引导中, 不触广告!"),
                !1;
            if (!this.isAdTypeValid(e))
                return console.log("  广告没有次数了 "),
                !1;
            if (!mgrAlu.check(t.aluId))
                return console.log("  alu不通过，不通过"),
                !1;
            let a = t.ratio;
            return t.ratioFromCopKey && (a = mgrSdk.getCopNumberValueByKey(t.ratioFromCopKey)),
            !(Tools.random(100) > a) && (t.wipeItemId > 0 && mgrPlayer.getItemAmount(t.wipeItemId) > 0 ? (console.log("  去广告，不通过"),
            !1) : !(this.getAdEventRemainCount(e) <= 0) || (console.log("次数已用完"),
            !1))
        }
        static preCheckCanTriggerAdEvent(e) {
            return !!mgrCfg.get("ad_event_db", e) && (!!this.preCheckAdNoCd(e) && (!(this.getCdByAdEventId(e) > 0 && this.getAdEventRemainCd(e) > 0) || (console.log("  冷却时间未到，不通过"),
            !1)))
        }
        static triggerAdEvent(e, t, a) {
            let i = mgrCfg.get_from_ad_event_db(e);
            if (!i)
                return;
            if (console.log("mgrAd.触发广告事件", e, t, a),
            !a && !this.preCheckCanTriggerAdEvent(e))
                return void console.log("    preCheckCanTriggerAdEvent 不通过");
            if (this.getCdByAdEventId(e) > 0 && this.getAdEventRemainCd(e) > 0)
                return console.log("  冷却时间未到，不通过"),
                void mgrTip.showMsgTip(`${mgrI18n.getText("mgrAd.2")}`);
            if (mgrGuide.isGuiding())
                return void console.log("  正在新手引导，不触发广告");
            let s = {};
            Tools.forEachMap(i.param, (e,t)=>{
                s[e] = t
            }
            ),
            t && Tools.forEachMap(t, (e,t)=>{
                s[e] = t
            }
            ),
            s.adEventId = e,
            s.serialNumber = this.AD_EVENT_SERIAL_NUMBER,
            this.AD_EVENT_SERIAL_NUMBER++,
            i.bPauseSound && mgrSound.pauseSound("mgrAd"),
            i.bRecordCdWhenTrigger && this.markFinished(e),
            console.log("  开始广告", i.cmd, i.advId),
            i.advId == ADV_ID.video && (mgrTip.showLoadingTip("advertisement"),
            mgrTip.showMsgTip(`${mgrI18n.getText("mgrAd.1")}`)),
            mgrSdk.openAdv(i.advId, JSON.stringify(s), i.id),
            i.statisticsSdkEvent && i.statisticsSdkEvent.length
        }
        static closeAdv(e) {
            let t = mgrCfg.get_from_ad_event_db(e);
            t && mgrSdk.closeAdv(t.advId)
        }
        static closeAdvByType(e) {
            let t = ADV_ID[e];
            mgrSdk.closeAdv(t)
        }
        static onMsgSdkOpenAdvResult(e) {
            let t = e;
            console.info("mgrAd.onMsgSdkOpenAdvResult"),
            ul.dump(t, "data");
            let a = JSON.parse(t.userData || "") || {}
              , i = a.adEventId || 0
              , s = mgrCfg.get_from_ad_event_db(i);
            if (!s)
                return void console.log("[warn] ul.mgrAd.onMsgSdkOpenAdvResult adEventId not found!");
            let o = parseInt(t.code);
            switch (o) {
            case 0:
                t.msg && s.advId == ADV_ID.video && mgrTip.showMsgTip(mgrI18n.getText("mgrAd.3")),
                s.bPauseSound && mgrSound.resumeSound("mgrAd"),
                "video" == s.type && mgrTip.hideLoadingTip("advertisement"),
                s.statisticsSdkEvent && s.type;
                break;
            case 1:
                s.bPauseSound && mgrSound.resumeSound("mgrAd"),
                this.markFinished(i),
                "video" == s.type && mgrTip.hideLoadingTip("advertisement"),
                s.type
            }
            o == s.successCode && this._doAdEventSuccessdLogic(i, a)
        }
        static _doAdEventSuccessdLogic(e, t) {
            let a = parseInt(t.serialNumber) || 0;
            if (this.successedAdEventSerialNumbers[a])
                return void console.warn(ul.format("mgrAd.onMsgSdkOpenAdvResult ad already do successd! adEventId=%s, serialNumber=%d", e, a));
            this.successedAdEventSerialNumbers[a] = !0;
            let i = mgrCfg.get_from_ad_event_db(e)
              , s = []
              , o = t.rewards || i.param.rewards;
            o && o.forEach(e=>{
                let[t,a,o,n,r] = e
                  , l = 0;
                l = a ? o ? Math.random() * (o - a) + a : a : o,
                l = Math.floor(l),
                mgrPlayer.addItemAmount(t, l, i.statisticsSdkEvent),
                n || s.push({
                    itemId: t,
                    amount: l,
                    amountSteps: [[l, 0]],
                    customerContext: {
                        bBanAdReward: !0
                    },
                    notBlue: r,
                    bFromAd: !0
                })
            }
            ),
            s.length > 0 && mgrTip.addGotItemTipGroup(s),
            i.remainCountItemId > 0 && mgrPlayer.addItemAmount(i.remainCountItemId, -1, "广告播放次数"),
            this.sendMsg("MSG_AD_EVENT_SUCCESSD", {
                adEventId: e,
                userData: t
            })
        }
        static onMsgAdvCloseResult(e) {}
        static getAdEventRemainCount(e) {
            let t = mgrCfg.get("ad_event_db", e);
            if (!t)
                return 0;
            if (t.aluId && !mgrAlu.check(t.aluId))
                return 0;
            let a = t.ratio;
            return t.ratioFromCopKey && t.ratioFromCopKey.length > 0 && (a = mgrSdk.getCopNumberValueByKey(t.ratioFromCopKey)),
            a <= 0 ? 0 : t.remainCountItemId > 0 ? mgrPlayer.getItemAmount(t.remainCountItemId) : 1
        }
        static isOnline() {
            return mgrSdk.getCopNumberValueByKey("ad_mode") == AD_MODE.online
        }
        static isMcprc() {
            return mgrSdk.getCopNumberValueByKey("ad_mode") == AD_MODE.mcprc
        }
        static onMsgSdkAdvValidCount(e) {
            mgrAd.AD_VIDEO_VALID_COUNT = e.video
        }
        static getAdModeByAdEventId(e) {
            let t = mgrSdk.getCopNumberValueByKey(`${e}-style`);
            return console.log(`getAdModeByAdEventId: ${e}-style, ${t}`),
            t
        }
    }
    mgrAd.AD_VIDEO_VALID_COUNT = 1,
    mgrAd.lastFinishedTimes = {},
    mgrAd.AD_EVENT_SERIAL_NUMBER = 0,
    mgrAd.successedAdEventSerialNumbers = {},
    mgrAd.todayNativeInsertScaleCount = 0,
    mgrAd.todayNativeInsertScaleIntervalCount = 0,
    mgrAd.todayNativeInsertLastScaleTime = 0;
    class Layout {
        static widget(e, t, a, i={
            x: 0,
            y: 0
        }, s=Laya.stage) {
            if (!s || !a || !a.parent)
                return;
            if (s == Laya.stage && Laya.stage.height > 1152) {
                let e = (Laya.stage.height - 1152) / 2
                  , a = Laya.stage.height - e;
                t >= 0 && t <= 1 ? t = ul.clamp(t, e / Laya.stage.height, a / Laya.stage.height) : t > 1 && (t = t < 300 ? ul.clamp(t + e, e, a) : t > Laya.stage.width - 300 ? ul.clamp(t - e, e, a) : ul.clamp(t, e, a))
            }
            let o = Math.abs(e)
              , n = Math.abs(t)
              , r = s.width * e
              , l = s.height * t;
            o > 1 && (r = e),
            n > 1 && (l = t),
            (null == a.anchorX || isNaN(a.anchorX)) && (a.anchorX = a.pivotX / a.width),
            (null == a.anchorY || isNaN(a.anchorY)) && (a.anchorY = a.pivotY / a.height),
            r += a.anchorX * a.width - i.x * a.width,
            l += a.anchorY * a.height - i.y * a.height;
            let h = s.localToGlobal(new Laya.Point(r,l))
              , d = a.parent.globalToLocal(new Laya.Point(h.x,h.y));
            -1 == e && (d.x = a.x),
            -1 == t && (d.y = a.y),
            a.pos(d.x, d.y, !0)
        }
    }
    class vRoleLevelUpDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vRoleLevelUpDialog",
            this.exportNodeNames = ["CC_spriteBg", "CC_boxList", "CC_boxLevel", "CC_spriteLight", "CC_labelLevel", "CC_buttonClose", "CC_buttonGet", "CC_buttonStartAd", "CC_spriteAdIcon", "CC_labelAdWish", "CC_buttonVideoShare", "CC_boxLayoutShareConsume", "CC_labelShareTip"],
            vRoleLevelUpDialog.instance = this
        }
        onOpened() {
            super.onOpened(),
            this.buttonStartAd.fOnClick = this.onTouchButtonStartAd.bind(this),
            this.buttonGet.fOnClick = this.onTouchButtonGet.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this);
            let e = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.double_level_up);
            this.buttonStartAd.__node.visible = e,
            this.buttonClose.__node.visible = e,
            this.buttonVideoShare.__node.visible = mgrChannel.canUseVideoRecord() && !mgrGuide.isGuiding(),
            this.buttonVideoShare.fOnClick = this.onTouchButtonVideoShare.bind(this);
            let t = mgrChannel.getRecordRewardAmount();
            this.labelShareTip.text = `${mgrI18n.getText("vRoleLevelUpDialog.4")}${t}`,
            this.boxLayoutShareConsume.visible = t > 0,
            mgrLoader.loadFont("levelUp", this.labelLevel),
            this.fadeIn(),
            mgrSound.play(6),
            mgrSound.pauseEffect("vRoleLevelUpDialog"),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            }),
            mgrChannel.canUseVideoRecord() && mgrSdk.recordGameVideo("start"),
            this.context.startTime = Tools.time()
        }
        onClosed() {
            super.onClosed(),
            vRoleLevelUpDialog.instance = null,
            mgrSound.resumeEffect("vRoleLevelUpDialog")
        }
        getPreLoadModelIds() {
            return [MODEL_ID.effect.shengji_flare]
        }
        getPreLoadAnimationIds() {
            return [ANIMATION_ID.shengji, ANIMATION_ID.face.shengji]
        }
        fadeIn() {
            this.spriteBg.alpha = 0,
            this.spriteBg.zOrder = -3,
            this.boxLevel.zOrder = -2,
            Layout.widget(10, 10, this.buttonClose.__node),
            this.spriteLight.scale(0, 0),
            this.boxList.alpha = 0,
            this.buttonGet.__node.scale(0, 0),
            this.buttonStartAd.__node.scale(0, 0),
            this.buttonVideoShare.__node.scale(0, 0),
            this.buttonClose.__node.scale(0, 0);
            let e = this.context.level || mgrInteraction.level;
            this.labelLevel.text = `${e - 1}`,
            this.labelLevel.scale(0, 0),
            CustomTween.to(this.spriteBg, {
                alpha: 1
            }, 300).callback(()=>{
                this.levelAction()
            }
            ).start(1)
        }
        levelAction() {
            let e = this.context.level || mgrInteraction.level
              , t = ULSkeleton.create("ui_shengji", ()=>{
                Timer.callLater(.016, ()=>{
                    this.boxLevel.addChild(t),
                    t.pos(this.boxLevel.width / 2, this.boxLevel.height / 2),
                    t.playAnimation("idle1", !1),
                    this.labelLevel.zOrder = 1e3,
                    CustomTween.to(this.labelLevel, {
                        scaleX: 1.2,
                        scaleY: 1.2
                    }, 5 / 30 * 1e3).to({
                        scaleX: .8,
                        scaleY: .8
                    }, 5 / 30 * 1e3).to({
                        scaleX: 1,
                        scaleY: 1
                    }, 5 / 30 * 1e3).to({
                        scaleX: 1,
                        scaleY: 1
                    }, 10 / 30 * 1e3).callback(()=>{
                        this.add3DEffectAtFront(MODEL_ID.effect.shengji_flare, this.boxLevel, 3)
                    }
                    ).to({
                        scaleX: .5,
                        scaleY: .5
                    }, 5 / 30 * 1e3).callback(()=>{
                        this.labelLevel.text = `${e}`
                    }
                    ).to({
                        scaleX: 1.2,
                        scaleY: 1.2
                    }, 5 / 30 * 1e3).to({
                        scaleX: .8,
                        scaleY: .8
                    }, 5 / 30 * 1e3).to({
                        scaleX: 1,
                        scaleY: 1
                    }, 5 / 30 * 1e3).delayTime(300).callback(()=>{
                        CustomTween.to(this.spriteLight, {
                            scaleX: 1,
                            scaleY: 1
                        }, 300, Laya.Ease.backOut).callback(()=>{
                            CustomTween.rotateForever(this.spriteLight, 1e4)
                        }
                        ).start(1),
                        this.levelJumpAction()
                    }
                    ).start(1)
                }
                , this)
            }
            )
        }
        levelJumpAction() {
            let e = (this.width - mgrDirector.width) / 2 + this.boxLevel.width / 2 + 20
              , t = this.localToGlobal(new Laya.Point(e,255));
            CustomTween.jumpTo(this.boxLevel, t, .5, 500, ()=>{
                this.roleShowAction()
            }
            )
        }
        roleShowAction() {
            let e = new RoleAvatar;
            e.fillByPartIds(mgrPart.getLastClothes()),
            this.add3DEffectAtBack(e, 0),
            e.transform.scale = new Laya.Vector3,
            !mgrGuide.isGuiding() && (e.timeScale = .6),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_zhoubisai_show, this, 3),
            e.registerLoadEndCallback(()=>{
                e.playWingAnimation(ANIMATION_ID.wing_fly),
                e.playFaceAnimation(ANIMATION_ID.face.kaixin01),
                e.playAnimation(ANIMATION_ID.PVP.COME, 0, ()=>{
                    e.transform.scale = new Laya.Vector3(1,1,1),
                    this.cameraBack.fieldOfView = 25,
                    this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,1.25,7),
                    this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-6,0,0),
                    this.cameraBack.transform.position = new Laya.Vector3(0,1.25,7),
                    this.cameraBack.transform.rotationEuler = new Laya.Vector3(-6,0,0)
                }
                , ()=>{
                    !mgrGuide.isGuiding() && (e.timeScale = .85),
                    e.playFaceAnimation(ANIMATION_ID.face.shengji),
                    e.playAnimation(ANIMATION_ID.shengji, .1, ()=>{}
                    , ()=>{
                        this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,1.25,8.8),
                        Timer.callLater(.5, ()=>{
                            this.showRewardAction()
                        }
                        , this)
                    }
                    )
                }
                )
            }
            )
        }
        showRewardAction() {
            let e = this.context.level || mgrInteraction.level;
            this.boxList.alpha = 1;
            let t = mgrCfg.get_from_role_level_db(e - 1).rewards;
            mgrSound.play(107);
            for (let e = 0; e < t.length; e++) {
                const [a,i] = t[e];
                let s = new vRoleLevelUpRewardItem({});
                s.fillByData({
                    itemId: a,
                    amount: i
                }),
                this.boxList.addChild(s),
                s.y = this.boxList.height / 2,
                s.scale(0, 0),
                CustomTween.delayTime(s, 500 * e).to({
                    scaleX: 1,
                    scaleY: 1
                }, 500, Laya.Ease.backOut).start(1)
            }
            this.buttonGet.__node.visible && CustomTween.delayTime(this.buttonGet.__node, 1500).callback(()=>{
                mgrGuide.registerGuideNode("vLevelUpDialog.buttonGet", this.buttonGet.__node)
            }
            ).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).delayTime(500).callback(()=>{
                mgrChannel.canUseVideoRecord() && mgrSdk.recordGameVideo("stop"),
                console.log(`recordVideo duration:${Tools.time() - this.context.startTime}`),
                CustomTween.to(this.buttonVideoShare.__node, {
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).start(1)
            }
            ).start(1),
            this.buttonStartAd.__node.visible && CustomTween.delayTime(this.buttonStartAd.__node, 1500).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).delayTime(500).start(1),
            CustomTween.delayTime(this.buttonClose.__node, 1500).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).callback(()=>{}
            ).start(1)
        }
        onTouchButtonStartAd() {
            mgrAd.triggerAdEvent(AD_EVENT_ID.VIDEO.double_level_up, null, !0)
        }
        onTouchButtonGet() {
            this.closeDialog(),
            mgrInteraction.obtainLevelUpReward(2 != mgrInteraction.level),
            this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,0,88888.8),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vLevelUpDialog.clickButtonGet"
            }),
            mgrInteraction.restState == E_REST_STATE.rest ? mgrSound.play(7) : mgrSound.play(1)
        }
        onTouchButtonClose() {
            this.onTouchButtonGet()
        }
        onTouchButtonVideoShare() {
            mgrSdk.shareGameVideo(),
            this.boxLayoutShareConsume.visible = !1,
            this.buttonVideoShare.__node.visible = !1
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID.VIDEO.double_level_up && (this.closeDialog(),
            mgrInteraction.obtainLevelUpReward(2 != mgrInteraction.level, 2),
            this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,0,88888.8),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vLevelUpDialog.clickButtonGet"
            }),
            mgrInteraction.restState == E_REST_STATE.rest ? mgrSound.play(7) : mgrSound.play(1))
        }
    }
    class mgrShop extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            this.init(),
            this.registerListeners({
                MSG_SDK_PAY_RESULT: this.onMsgSdkPayResult,
                MSG_SDK_PRE_PAY_RESULT: this.onMsgSdkPrePayResult
            })
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("mgrShop") || {};
            this.todayDiscounShopIds = e.todayDiscounShopIds || [],
            this.lastRereshDiscountTime = e.lastRereshDiscountTime || 0,
            this.todayBuyCount = e.todayBuyCount || {}
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                todayDiscounShopIds: this.todayDiscounShopIds,
                lastRereshDiscountTime: this.lastRereshDiscountTime,
                todayBuyCount: this.todayBuyCount
            };
            mgrRecord.setData("mgrShop", e)
        }
        static init() {
            if (!Tools.isOneDay(this.lastRereshDiscountTime, Tools.time())) {
                this.lastRereshDiscountTime = Tools.time();
                let e = this.getAllShopItemListByCategory([2])
                  , t = Tools.random(0, Math.floor(e.length / 2))
                  , a = Tools.random(Math.floor(e.length / 2) + 1, e.length - 1);
                this.todayDiscounShopIds = [],
                this.todayDiscounShopIds.push(e[t].id),
                this.todayDiscounShopIds.push(e[a].id),
                this.todayBuyCount = {},
                this.saveRecord()
            }
        }
        static isDiscount(e) {
            return this.todayDiscounShopIds.indexOf(e) >= 0
        }
        static getAllShopItemListByCategory(e) {
            if (!e)
                return [];
            let t = {};
            for (let a = 0; a < e.length; a++) {
                const i = e[a];
                t[i] = !0
            }
            let a = [];
            return mgrCfg.forDb_from_shop_template_db((e,i)=>{
                if (t[i.category] && mgrAlu.check(i.aluId)) {
                    let e = this.isDiscount(i.id);
                    i._discount = e ? -1 : 1;
                    let t = i.items[0][0]
                      , s = !!mgrCfg.get_from_part_db(t)
                      , o = mgrPlayer.getItemAmount(t) > 0;
                    i._haved = s && o ? 1 : -1,
                    a.push(i)
                }
            }
            ),
            a = Tools.sortArrayByField(a, ["_haved", "_discount", "-order", "id"])
        }
        static requestBuy(e, t=!1, a=1, i=1) {
            let s = mgrCfg.get_from_shop_template_db(e);
            if (!s)
                return !1;
            if (t)
                return this.responseBuy(e, i),
                !0;
            let o = this.isDiscount(e)
              , n = s.price * a;
            o && (n = Math.floor(s.price / 2));
            let r = s.priceUnit;
            return 0 == r ? (mgrSdk.openPay(s.payId),
            !1) : !!mgrCfg.get_from_item_template_db(r) && (mgrPlayer.getItemAmount(r) < n ? (this.tipItemNotEnough(r),
            this.tryOpenShop(r),
            !1) : (mgrPlayer.addItemAmount(r, -n, "购买消耗"),
            this.responseBuy(e, i),
            !0))
        }
        static responseBuy(e, t=1) {
            let a = mgrCfg.get_from_shop_template_db(e);
            if (a) {
                for (let e = 0; e < a.items.length; e++) {
                    let[i,s,o] = a.items[e];
                    s *= t,
                    mgrPlayer.addItemAmount(i, s, "购买"),
                    o || mgrTip.addGotItemTip(i, s, null, null)
                }
                null == this.todayBuyCount[e] && (this.todayBuyCount[e] = 0),
                1 == t && this.todayBuyCount[e]++,
                this.saveRecord(),
                this.sendMsg("MSG_SHOP_BUY_SUCCESSED", {
                    shopId: e
                }),
                mgrSdk.statisOnItemBought(e, 1, "购买"),
                a.statisPoint && mgrSdk.staticPointEvent(a.statisPoint)
            }
        }
        static getShopIdByPayId(e) {
            let t;
            return mgrCfg.forDb_from_shop_template_db((a,i)=>{
                if (i.payId == e)
                    return t = i.id,
                    !0
            }
            ),
            t
        }
        static getTodayBuyShopCount(e) {
            return this.todayBuyCount[e] || 0
        }
        static tryConsumeItem(e, t, a) {
            return mgrPlayer.getItemAmount(e) < t ? (this.tipItemNotEnough(e),
            !1) : (mgrPlayer.addItemAmount(e, -t, a),
            !0)
        }
        static tipItemNotEnough(e=Const.ITEM_ID_GOLD) {
            let t = mgrCfg.get_from_item_template_db(e);
            t && (mgrTip.showItemTip(e, 1, ul.format(mgrI18n.getText("mgrShop.1"), mgrI18n.getText(`${t.name}`))),
            e == Const.ITEM_ID_GOLD ? mgrDirector.openDialog("vLuckGoldDialog") : e == Const.ITEM_ID_GARDEN_WATER ? mgrDirector.openDialog("vGetItemWatchAdDialog", {
                itemId: Const.ITEM_ID_GARDEN_WATER,
                adEventId: "free_water"
            }) : e == Const.ITEM_ID_GARDEN_FERTILIZER && mgrDirector.openDialog("vGetItemWatchAdDialog", {
                itemId: Const.ITEM_ID_GARDEN_FERTILIZER,
                adEventId: "free_fertilizer"
            }))
        }
        static tryOpenShop(e=Const.ITEM_ID_GOLD) {
            mgrChannel.isOpenPay()
        }
        static canSupplyItem(e=Const.ITEM_ID_GOLD) {
            return !(e != Const.ITEM_ID_GOLD || !mgrAd.preCheckAdNoCd("free_gold")) || !(e != Const.ITEM_ID_ENERGY || !mgrAd.preCheckAdNoCd("free_energy"))
        }
        static goWidthRouterId(e, t=0) {
            switch (e) {
            case 1:
                mgrDirector.openDialog("vShopDialog");
                break;
            case 2:
                mgrDirector.open2DScene("vStageScene");
                break;
            case 3:
                mgrDirector.openDialog("vSignDialog");
                break;
            case 4:
                mgrDirector.open2DScene("vWishPoolMianScene");
                break;
            case 5:
                mgrDirector.open2DScene("vGardenMainScene");
                break;
            default:
                console.error(`未知跳转类型： ${e}`)
            }
        }
        static setSdkPayInfo(e) {
            Tools.forEachMap(e, (e,t)=>{
                this.sdkPayInfo[t.payCode] = {
                    payCode: t.payCode,
                    price: t.price,
                    proName: t.proName
                }
            }
            )
        }
        static onMsgSdkPayResult(e) {
            if (e.bSuccessful) {
                let t = this.getShopIdByPayId(e.payId);
                this.responseBuy(t)
            }
        }
        static onMsgSdkPrePayResult(e) {
            if (e.bSuccessful) {
                mgrTip.showMsgTip("补发订单...");
                let t = this.getShopIdByPayId(e.payId);
                this.responseBuy(t)
            }
        }
    }
    mgrShop.sdkPayInfo = {};
    class NetworkTask {
        constructor() {
            this.fOnRequest = null,
            this.fOnFaild = null,
            this.fOnReceive = null,
            this.faildMsg = "",
            this.responseData = null,
            this.requestData = {},
            this.retryCount = 0
        }
        setBackgroundEnabled(e) {
            return this.bBackgroundEnabled = e,
            this
        }
        isBackgroundEnabled() {
            return this.bBackgroundEnabled
        }
        setRequestData(e) {
            return this.requestData = e,
            this
        }
        getRequestData() {
            return this.requestData
        }
        setResponseData(e) {
            return this.responseData = e,
            this
        }
        getResponseData() {
            return this.responseData
        }
        setFaildMsg(e) {
            return this.faildMsg = e,
            this
        }
        getFaildMsg() {
            return this.faildMsg
        }
        setOnRequestCallback(e) {
            return this.fOnRequest = e,
            this
        }
        setOnReceiveCallback(e) {
            return this.fOnReceive = e,
            this
        }
        setOnFaildCallback(e) {
            return this.fOnFaild = e,
            this
        }
        triggerRequestCallback() {
            this.fOnRequest && this.fOnRequest(this)
        }
        triggerResponseCallback() {
            this.fOnReceive && this.fOnReceive(this)
        }
        triggerFaildCallback() {
            this.fOnFaild && this.fOnFaild(this)
        }
    }
    class FSMObject {
        constructor() {
            this.curState = -1,
            this.nextState = this.curState,
            this.lastState = this.curState,
            this.stateMap = {}
        }
        registerState(e, t, a, i) {
            (t || a || i) && (this.stateMap[e] = {
                enter: t,
                execute: a,
                leave: i
            })
        }
        setNextState(e) {
            this.nextState = e
        }
        update() {
            let e = this.stateMap[this.curState]
              , t = this.stateMap[this.nextState];
            this.nextState != this.curState && (this.lastState = this.curState,
            this.curState = this.nextState,
            e && e.leave && e.leave(),
            t && t.enter && t.enter()),
            t && t.execute && t.execute()
        }
        getCurState() {
            return this.curState
        }
        clear() {
            this.curState = -1,
            this.lastState = -1,
            this.nextState = -1
        }
        getNextState() {
            return this.nextState
        }
        getLastState() {
            return this.lastState
        }
    }
    const ST_STANDBY = 1
      , ST_REQUEST = 2
      , ST_RESPONSE = 3
      , ST_FAILD = 4
      , DEBUG = !1;
    class NetworkManager extends FSMObject {
        constructor(e) {
            super(),
            this.bAutoDoNextTask = !0,
            this.currTask = null,
            this.tasks = [],
            this.adapter = null,
            this.adapter = e,
            e.setReceiveCallback(this.onReceive.bind(this)),
            e.setFaildCallback(this.onFaild.bind(this)),
            this.registerState(ST_STANDBY, this.onEnterStandby.bind(this), this.onExecuteStandby.bind(this), null),
            this.registerState(ST_REQUEST, this.onEnterRequest.bind(this), this.onExecuteRequest.bind(this), null),
            this.registerState(ST_RESPONSE, this.onEnterResponse.bind(this), this.onExecuteResponse.bind(this), null),
            this.registerState(ST_FAILD, this.onEnterFailed.bind(this), this.onExecuteFailed.bind(this), null),
            this.setNextState(ST_STANDBY)
        }
        setAutoDoNextTaskEnabled(e) {
            this.bAutoDoNextTask = e
        }
        update() {
            super.update(),
            this.adapter.update()
        }
        onEnterStandby() {
            DEBUG && console.log("onEnterStandby")
        }
        onExecuteStandby() {
            DEBUG && console.log("onExecuteStandby");
            let e = this.tasks;
            e.length > 0 && (this.currTask = e.shift(),
            this.setNextState(ST_REQUEST))
        }
        onEnterRequest() {
            DEBUG && console.log("onEnterRequest");
            let e = this.currTask;
            e.triggerRequestCallback(),
            this.adapter.send(e.getRequestData())
        }
        onExecuteRequest() {}
        onEnterResponse() {
            DEBUG && console.log("onEnterResponse");
            let e = this.currTask;
            e && e.triggerResponseCallback()
        }
        onExecuteResponse() {
            this.bAutoDoNextTask && this.doNextTask()
        }
        onEnterFailed() {
            DEBUG && console.log("onEnterFaild");
            let e = this.currTask;
            e && (e.retryCount++,
            e.triggerFaildCallback())
        }
        onExecuteFailed() {
            this.bAutoDoNextTask && this.doNextTask()
        }
        onReceive(e) {
            if (this.getCurState() != ST_REQUEST)
                return void console.log("[warn] NetworkManager.onReceive, state is !ST_REQUEST!");
            let t = this.currTask;
            t ? (t.setResponseData(e),
            this.setNextState(ST_RESPONSE)) : console.log("[warn] NetworkManager.onReceive, currTask !found!")
        }
        onFaild(e) {
            if (this.getCurState() != ST_REQUEST)
                return void console.log("[warn] NetworkManager.onReceive, state is !ST_REQUEST!");
            let t = this.currTask;
            t ? (t.setFaildMsg(e),
            this.setNextState(ST_FAILD)) : console.log("[warn] NetworkManager.onReceive, currTask !found!")
        }
        addTask(e, t, a, i, s) {
            if (!e)
                return void console.log("[warn] NetworkManager.addTask, requestData is null!");
            let o = new NetworkTask;
            o.setRequestData(e),
            o.setOnReceiveCallback(t),
            o.setOnFaildCallback(a),
            o.setOnRequestCallback(i),
            o.setBackgroundEnabled(s),
            this.tasks.push(o)
        }
        getCurrentTask() {
            return this.currTask
        }
        getTasks() {
            return this.tasks
        }
        retryTask(e) {
            this.tasks.push(e)
        }
        stopAllTasks() {
            this.tasks = [],
            this.currTask = null,
            this.adapter.disconnect(),
            this.setNextState(ST_STANDBY)
        }
        doNextTask() {
            this.currTask = null,
            this.setNextState(ST_STANDBY)
        }
    }
    class NetworkAdapterBase {
        constructor() {}
        setReceiveCallback(e) {
            return this.fOnReceive = e,
            this
        }
        setFaildCallback(e) {
            return this.fOnFaild = e,
            this
        }
        triggerReceiveCallback(e) {
            this.fOnReceive && this.fOnReceive(e)
        }
        triggerFaildCallback(e) {
            this.fOnFaild && this.fOnFaild(e)
        }
        send(e) {
            Timer.callLater(.1, t=>{
                if ("CMD_1" == e.cmd) {
                    let t = {
                        cmd: e.cmd,
                        info: "response." + e.info
                    };
                    this.triggerReceiveCallback(t)
                } else if ("CMD_2" == e.cmd)
                    if (Tools.random(100) < 50) {
                        let t = {
                            cmd: e.cmd,
                            info: "response." + e.info
                        };
                        this.triggerReceiveCallback(t)
                    } else
                        this.triggerFaildCallback("random faild")
            }
            )
        }
        connect() {}
        disconnect() {}
        update() {}
    }
    class NetworkAdapterHttpUlServer extends NetworkAdapterBase {
        constructor() {
            super(...arguments),
            this.timeout = 3
        }
        setHost(e) {
            this.host = e
        }
        setUrlFormat(e) {
            this.urlFormat = e
        }
        setUlServerArg(e, t, a, i) {
            this.signkey = e,
            this.platform = t,
            this.appid = a,
            this.channel = i
        }
        setTimeout(e) {
            this.timeout = e
        }
        send(e) {
            let t = JSON.stringify(e);
            t = encodeURIComponent(t);
            let a = ul.format("signkey=%s&platform=%s&appid=%s&channel=%s&data=%s", this.signkey, this.platform, this.appid, this.channel, t)
              , i = ul.format(this.urlFormat, this.host);
            console.log("send", i, a);
            let s = new XMLHttpRequest;
            s.onreadystatechange = this.onReadyStateChange.bind(this),
            s.onerror = this.onError.bind(this),
            s.ontimeout = this.onTimeout.bind(this),
            s.open("POST", i),
            s.timeout = 1e3 * this.timeout,
            this.xhr = s,
            s.send(a)
        }
        onError() {
            console.log("NetworkAdapterHttpUlServer.onError"),
            this.triggerFaildCallback("NetworkAdapterHttpUlServer.onError"),
            this.disconnect()
        }
        onTimeout() {
            console.log("NetworkAdapterHttpUlServer.onTimeout"),
            this.triggerFaildCallback("NetworkAdapterHttpUlServer.onError"),
            this.disconnect()
        }
        onReadyStateChange() {
            let e = this.xhr;
            if (e && 4 == e.readyState) {
                if (200 == e.status) {
                    let t, a = e.response || "", i = {
                        str: null
                    };
                    try {
                        t = JSON.parse(a)
                    } catch (e) {}
                    t ? i = t : i.str = a,
                    this.triggerReceiveCallback(i)
                } else
                    this.triggerFaildCallback(ul.format("http error: readyState=[%s], status=[%s]", e.readyState, e.status));
                this.disconnect()
            }
        }
        disconnect() {
            if (this.xhr)
                try {
                    this.xhr.abort(),
                    this.xhr = null
                } catch (e) {
                    console.log("disconnect error"),
                    this.xhr = null
                }
        }
    }
    class mgrNetwork extends Manager {
        static onLoad() {
            super.onLoad();
            let e = new NetworkAdapterHttpUlServer;
            e.setHost(Const.SERVER_HOST),
            e.setUrlFormat(Const.SERVER_URL_FORMAT),
            e.setUlServerArg("ultralisk", "pc", Const.SERVER_APP_ID.toString(), "ultralisk"),
            e.setTimeout(5),
            this.networkManager = new NetworkManager(e),
            Timer.callLoop(1 / 60, this.onTimerSpan.bind(this), !0)
        }
        static loadRecord() {
            super.loadRecord()
        }
        static saveRecord() {
            super.saveRecord()
        }
        static onTimerSpan(e) {
            e.span;
            this.networkManager.update()
        }
        static send(e, t, a) {
            if (mgrChannel.isChannel4399())
                return;
            null == t && (t = {});
            let i = {};
            i.cmd = e,
            null != t && Tools.forEachMap(t, (e,t)=>{
                i[e] = t
            }
            ),
            this.networkManager.addTask(i, this.onResponse.bind(this), this.onFaild.bind(this), this.onRequest.bind(this), a)
        }
        static onRequest(e) {
            e.isBackgroundEnabled() || this.showWaiting(e)
        }
        static onResponse(e) {
            this.networkManager.getTasks().length <= 1 && this.hideWaiting(),
            this.sendMsg("MSG_NETWORK_RESPONSE", {
                requestData: e.getRequestData(),
                responseData: e.getResponseData()
            })
        }
        static onFaild(e) {
            this.showFaild(),
            Timer.callLater(.1, ()=>{
                this.retryTask(e)
            }
            )
        }
        static stopAllTasks() {
            let e = []
              , t = this.networkManager.getTasks();
            for (let a = 0; a < t.length; a++) {
                const i = t[a];
                e.push({
                    requestData: i.getRequestData()
                })
            }
            this.networkManager.stopAllTasks(),
            this.hideWaiting(),
            this.hideFaild();
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                this.sendMsg("MSG_NETWORK_STOP_TASK", a)
            }
        }
        static retryTask(e) {
            this.networkManager.retryTask(e)
        }
        static showWaiting(e) {}
        static hideWaiting() {}
        static showFaild() {}
        static hideFaild() {}
        static tryCheckNetwork(e, t) {}
    }
    class mgrDebug extends Manager {
        static onLoad() {
            super.onLoad(),
            this.registerKeyboardListener()
        }
        static loadRecord() {
            super.loadRecord()
        }
        static saveRecord() {
            super.saveRecord()
        }
        static onKeyDown(e) {
            switch (console.log(e),
            e) {
            case "a":
            case "b":
                break;
            case "ctrl_b":
                mgrPlayer.addItemAmount(Const.ITEM_ID_DIAMONDS, 5e3, "测试");
                break;
            case "c":
                console.log("cops", mgrCop.getCops());
                break;
            case "d":
                Laya.Stat.show();
                break;
            case "e":
                mgrPlayer.addItemAmount(Const.ITEM_ID_INTERACTION_EXP, 10, "测试");
                break;
            case "f":
            case "g":
                break;
            case "ctrl_g":
                mgrTip.showMsgTip("取消新手引導"),
                mgrGuide.endGuide();
                break;
            case "h":
                mgrDirector.open2DScene("vHubScene");
                break;
            case "i":
                mgrDirector.open2DScene("vCartonShaderDemo");
                break;
            case "j":
                mgrDirector.open2DScene("vEditorDynamicBone");
                break;
            case "k":
                mgrDirector.open2DScene("vEditorPartCheck");
                break;
            case "l":
                break;
            case "m":
                this.bUnlockAllStage = !0,
                mgrTip.showMsgTip("所有关卡已解锁");
                break;
            case "n":
                mgrNetwork.tryCheckNetwork(()=>{
                    mgrTip.showMsgTip("在线..")
                }
                , ()=>{
                    mgrTip.showMsgTip("离线..")
                }
                );
                break;
            case "o":
                mgrDirector.openDialog("DebugInfoDialog", {});
                break;
            case "p":
                mgrDirector.open2DScene("vEditorSpineCheckScene");
                break;
            case "q":
                break;
            case "r":
                mgrDirector.openDialog("vFindMeDialogBaidu");
                break;
            case "s":
                mgrDirector.open2DScene("vStoryDebugScene");
                break;
            case "ctrl_s":
                break;
            case "t":
                mgrDirector.open2DScene("vTestScene");
                break;
            case "u":
            case "v":
            case "w":
            case "x":
            case "y":
            case "z":
            case "number_1":
            case "number_2":
            case "number_3":
            case "number_4":
            case "number_5":
                break;
            case "ctrl_number_1":
                Laya.timer.scale -= .05;
                break;
            case "ctrl_number_2":
                Laya.timer.scale += .05;
                break;
            case "ctrl_3":
            case "ctrl_4":
                break;
            case "ctrl_number_7":
                for (let e = 1; e <= 8; e++)
                    ;
                break;
            case "ctrl_number_8":
                for (let e = 1; e <= 7; e++)
                    ;
                break;
            case "minus":
            case "equal":
                break;
            case "f2":
                mgrDirector.open2DScene("vEditorStagePassCheck");
                break;
            case "f3":
                mgrTip.addGotItemTip(Const.ITEM_ID_DIAMONDS, 3);
                break;
            case "f4":
                mgrTip.addGotItemTip(11020, 1)
            }
            this.sendMsg("MSG_DEBUG_KEY_DOWN", e)
        }
        static registerKeyboardListener() {
            Laya.stage.on(Laya.Event.KEY_DOWN, this, this.onSystemKeyDown),
            Laya.stage.on(Laya.Event.KEY_UP, this, this.onSystemKeyUp)
        }
        static onSystemKeyDown(e) {
            let t = e.keyCode;
            switch (t) {
            case Laya.Keyboard.ALTERNATE:
                this.bPressedAlt = !0;
                break;
            case Laya.Keyboard.CONTROL:
                this.bPressedCtrl = !0;
                break;
            case Laya.Keyboard.SHIFT:
                this.bPressedShift = !0;
                break;
            default:
                let e = this._genKeyDesc(t);
                this.onKeyDown(e)
            }
        }
        static onSystemKeyUp(e) {
            switch (e.keyCode) {
            case Laya.Keyboard.ALTERNATE:
                this.bPressedAlt = !1;
                break;
            case Laya.Keyboard.CONTROL:
                this.bPressedCtrl = !1;
                break;
            case Laya.Keyboard.SHIFT:
                this.bPressedShift = !1
            }
        }
        static _genKeyDesc(e) {
            let t = "";
            this.bPressedCtrl && (t += "ctrl_"),
            this.bPressedAlt && (t += "alt_"),
            this.bPressedShift && (t += "shift_");
            for (const a in Laya.Keyboard) {
                if (Laya.Keyboard[a] == e.toString()) {
                    t += a.toLowerCase();
                    break
                }
            }
            return t
        }
    }
    var EStageRating;
    mgrDebug.bPressedCtrl = !1,
    mgrDebug.bPressedAlt = !1,
    mgrDebug.bPressedShift = !1,
    mgrDebug.bUnlockAllStage = !1,
    function(e) {
        e[e.unpass = 0] = "unpass",
        e[e.pass = 1] = "pass"
    }(EStageRating || (EStageRating = {}));
    const FULL_POWER_COUNT = 3;
    class mgrStage extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            this.openChapter(1),
            this.openChapter(2),
            this.openChapter(3),
            this.openChapter(4),
            this.openChapter(5)
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("stage") || {};
            this.stageDatas = e.stageDatas || {},
            this.stageProgress = e.stageProgress || 0,
            this.chapterOpened = e.chapterOpened || null,
            this.powerCount = e.powerCount || 0,
            this.lastFinishTime = e.lastFinishTime || 0,
            this.todayFinishNormalStageCount = e.todayFinishNormalStageCount || 0,
            this.todayInHardStageCount = e.todayInHardStageCount || 0,
            this.forcePassStageIds = e.forcePassStageIds || {},
            this.chapterOpened || (this.chapterOpened = {},
            mgrCfg.forDb_from_stage_chapter_db((e,t)=>{
                this.chapterOpened[t.id] = t.bOpen
            }
            )),
            mgrCfg.forDb_from_stage_db((e,t)=>{
                let a = this.stageDatas[t.id] || {
                    rating: 0
                };
                this.stageDatas[t.id] = a
            }
            )
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                stageDatas: this.stageDatas,
                stageProgress: this.stageProgress,
                chapterOpened: this.chapterOpened,
                powerCount: this.powerCount,
                lastFinishTime: this.lastFinishTime,
                todayFinishNormalStageCount: this.todayFinishNormalStageCount,
                todayInHardStageCount: this.todayInHardStageCount,
                forcePassStageIds: this.forcePassStageIds
            };
            mgrRecord.setData("stage", e)
        }
        static tryBeginStage(e) {
            return mgrCfg.get_from_stage_db(e) ? !!this.isStageUnlocked(e) || (mgrTip.showMsgTip(mgrI18n.getText("mgrStage.1")),
            !1) : (console.warn("mgrStage.tryBeginStage stage not found!", e),
            mgrTip.showMsgTip("stage not found!" + e),
            !1)
        }
        static checkStageCost(e) {
            let t = mgrCfg.get_from_stage_db(e);
            if (!t)
                return !1;
            let a = t.costs
              , i = Const.ITEM_ID_ENERGY;
            return !(mgrPlayer.getItemAmount(i) < a)
        }
        static beginStage(e, t=!1) {
            let a = mgrCfg.get_from_stage_db(e);
            if (a) {
                if (!t) {
                    let e = a.costs;
                    e > 0 && (mgrPlayer.addItemAmount(Const.ITEM_ID_ENERGY, -e, "关卡消耗"),
                    mgrTip.addGotItemTip(Const.ITEM_ID_ENERGY, -e))
                }
                999 == this.calcChapterIdByStageId(e) && (this.todayInHardStageCount++,
                this.sendMsg("MSG_DAILY_HARD_IN_COUNT_CHANGED")),
                mgrSdk.statisOnStageStart(e, "开始"),
                mgrSdk.staticPointEvent(a.statisEventIdJoin, 0)
            } else
                console.warn("mgrStage.beginStage stage not found!", e)
        }
        static getRating(e, t) {
            return t >= mgrCfg.get_from_stage_db(e).passScore ? EStageRating.pass : EStageRating.unpass
        }
        static calcScore(e, t) {
            let a = mgrCfg.get_from_stage_db(e)
              , i = a.typeWeights
              , s = a.tagWeights
              , o = 0;
            for (let e = 0; e < t.length; e++) {
                const a = t[e];
                let n = mgrCfg.get_from_part_db(a)
                  , r = [n.score1, n.score2, n.score3, n.score4, n.score5, n.score6, n.score7, n.score8, n.score9, n.score10];
                for (let e = 0; e < r.length; e++) {
                    o += r[e] * s[e] * i[n.type - 1]
                }
            }
            return o
        }
        static finishStage(e, t, a=0) {
            let i = mgrCfg.get_from_stage_db(e);
            if (!i)
                return void console.warn("mgrStage.finishStage stage not found!", e);
            let s = this.getStageRating(e)
              , o = !1
              , n = (this.calcChapterIdByStageId(e),
            this.calcScore(e, t));
            n += a;
            let r = this.getRating(e, n);
            if (r > s && (this.stageDatas[e].rating = r,
            o = !0,
            i.stageProgress && i.stageProgress > 0 && this.stageProgress < i.stageProgress && (this.stageProgress = i.stageProgress)),
            r == EStageRating.unpass)
                return {
                    stageId: e,
                    rating: r,
                    rewards: [],
                    score: n
                };
            let l = [];
            for (let e = 0; e < i.passReward.length; e++) {
                const t = i.passReward[e];
                let a = {
                    itemId: t[0],
                    amount: t[1]
                };
                l.push({
                    itemId: a.itemId,
                    amount: a.amount
                }),
                mgrPlayer.addItemAmount(a.itemId, a.amount, "关卡结算")
            }
            return o && (this.sendMsg("MSG_STAGE_RATING_CHAGNED", {
                stageId: e,
                rating: r
            }),
            this.saveRecord()),
            mgrSdk.staticPointEvent(i.statisEventIdJoin, 1),
            mgrOfflineNearbyRank.updateSelfInfo(),
            {
                stageId: e,
                rating: r,
                rewards: l,
                score: n
            }
        }
        static getNormalTodayFinishCount() {
            return Tools.isOneDay(this.lastFinishTime, Tools.time()) || (this.lastFinishTime = Tools.time(),
            this.todayFinishNormalStageCount = 0,
            this.todayInHardStageCount = 0),
            this.todayFinishNormalStageCount
        }
        static getHardTodayInCount() {
            return Tools.isOneDay(this.lastFinishTime, Tools.time()) || (this.lastFinishTime = Tools.time(),
            this.todayFinishNormalStageCount = 0,
            this.todayInHardStageCount = 0),
            this.todayInHardStageCount
        }
        static openChapter(e) {
            this.chapterOpened[e] = !0,
            this.saveRecord()
        }
        static getStageProgress() {
            return this.stageProgress
        }
        static getStageRating(e) {
            let t = this.stageDatas[e];
            return t && t.rating || 0
        }
        static isStageUnlocked(e) {
            if (mgrDebug.bUnlockAllStage)
                return !0;
            if (this.forcePassStageIds[e])
                return !0;
            let t = mgrCfg.get_from_stage_db(e);
            if (!t)
                return !1;
            let a = t.unlockAids;
            for (let e = 0; e < a.length; e++) {
                const t = a[e];
                if (!mgrAchievement.isAchievementCompleted(t))
                    return !1
            }
            return !0
        }
        static isForcePass(e) {
            return !!this.forcePassStageIds[e]
        }
        static calcChapterIdByStageId(e) {
            let t;
            return mgrCfg.forDb("stage_chapter_db", (a,i)=>{
                0;
                for (let a = 0; a < i.stageIds.length; a++)
                    if (e == i.stageIds[a])
                        return t = i.id,
                        !0
            }
            ),
            t
        }
        static getCurrentChapterId() {
            let e = this.getCurrentStageId();
            return this.calcChapterIdByStageId(e)
        }
        static getCurrentStageId() {
            let e = 0;
            return mgrCfg.forDb_from_stage_db((t,a)=>{
                if (a.id < 1e3 && (e = a.id,
                a.stageProgress == this.getStageProgress() + 1))
                    return !0
            }
            ),
            e
        }
        static isChapterOpen(e) {
            return !e || (this.chapterOpened[e] || !1)
        }
        static isEndDoubleReward() {
            return this.bEndDoubleReward
        }
        static setEndDoubleReward(e) {
            this.bEndDoubleReward = e
        }
        static tryAddPowerCount() {
            this.powerCount++,
            this.powerCount > FULL_POWER_COUNT && (this.powerCount = FULL_POWER_COUNT)
        }
        static cleanPowerCount() {
            this.powerCount = 0,
            this.saveRecord()
        }
        static getPowerCountAndMax() {
            return [this.powerCount, FULL_POWER_COUNT]
        }
        static isPowerFull() {
            return this.powerCount == FULL_POWER_COUNT
        }
        static getHardStageId() {
            let e = mgrCfg.get_from_stage_chapter_db(999).stageIds;
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                if (this.getStageRating(a) <= 0)
                    return a
            }
            return 0
        }
        static getRecommendTagsByStageId(e) {
            let t = []
              , a = mgrCfg.get_from_stage_db(e);
            for (let e = 0; e < a.tagWeights.length; e++) {
                const i = a.tagWeights[e];
                let s = mgrCfg.get_from_part_tag_db(e + 1);
                t.push({
                    index: e,
                    weight: i,
                    icon: s.icon
                })
            }
            return (t = Tools.sortArrayByField(t, "-weight"))[1].weight > 0 ? [t[0], t[1]] : [t[0]]
        }
        static getRecommendPartByStageAndType(e, t) {
            if (!e)
                return [];
            let a = [];
            return mgrCfg.forDb_from_part_db((i,s)=>{
                s.type == t && a.push({
                    partId: s.id,
                    score: this.calcScore(e, [s.id])
                })
            }
            ),
            [(a = Tools.sortArrayByField(a, "-score"))[0], a[1]]
        }
        static getTotalStageCount() {
            let e = 0;
            return mgrCfg.forDb_from_stage_db((t,a)=>{
                a.id < 1e3 && e++
            }
            ),
            e
        }
    }
    mgrStage.stageDatas = {},
    mgrStage.chapterOpened = null,
    mgrStage.bEndDoubleReward = !0,
    mgrStage.powerCount = 0;
    const DATA_KEYS = ["data1", "data2", "data3", "data4"];
    class sAchievement {
        constructor(e) {
            this.id = e,
            this.template = mgrCfg.get("achievement_db", e),
            this.count = 0,
            this.maxCount = 0,
            this.state = AchievementState.unlocked,
            this.lastRefreshTime = 0,
            this._msgHander = new MsgHandler,
            this._msgHander.startProcMsg();
            let t = {
                MSG_STAGE_RATING_CHAGNED: this.onMsgStageRatingChanged.bind(this),
                MSG_CLICK_ROLE: this.onMsgClickRole.bind(this),
                MSG_SETTLEMENT_PLAY_BALL: this.onMsgSettlementPlayBall.bind(this),
                MSG_SETTLEMENT_ROPE_SKIPING: this.onMsgSettlementRopeSkiping.bind(this),
                MSG_ANSWER_QUESTION: this.onMsgAnswerQuestion.bind(this),
                MSG_ITEM_AMOUNT_CHANGED: this.onMsgItemAmountChanged.bind(this),
                MSG_HARVEST: this.onMsgHarvest.bind(this),
                MSG_LIKE: this.onMsgLike.bind(this),
                MSG_FREE_WEAR: this.onMsgFreeWear.bind(this),
                MSG_WISH: this.onMsgWish.bind(this),
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this),
                MSG_TODAY_SHARE_COUNT_CHANGED: this.onMsgTodayShareCountChanged.bind(this)
            }
              , a = mgrCfg.get_from_achievement_target_db(this.template.targetType)
              , i = {};
            for (let e = 0; e < a.cmds.length; e++) {
                const s = a.cmds[e];
                i[s] = t[s]
            }
            this.registerListeners(i)
        }
        setState(e) {
            this.state = e
        }
        refreshCount(e) {
            let t = this.template.targetType
              , a = mgrCfg.get("achievement_target_db", t);
            if (!a)
                return void console.warn(ul.format("sAchievement.refreshCount target not found! targetType = %s", t));
            if (e && !a.cmdHash[e])
                return;
            let i = this[a.calcCountHandlerName];
            if (!(i instanceof Function))
                return void console.warn(ul.format("sAchievement.refreshCount handler not found! handler = %s", a.calcCountHandlerName));
            let[s,o] = i.bind(this)()
              , n = null != this.count && this.count != s;
            this.count = s,
            this.maxCount = o,
            n && mgrAchievement.sendMsg("MSG_ACHIEVEMENT_STATE_CHANGED", {
                achievementId: this.id
            })
        }
        refreshState(e) {
            return (this.state == AchievementState.unlocked || 0 == this.maxCount) && (this.template.bDaily && !Tools.isOneDay(this.lastRefreshTime, Tools.time()) && (this.count = 0,
            this.state = AchievementState.unlocked,
            this.lastRefreshTime = Tools.time(),
            mgrAchievement.sendMsg("MSG_ACHIEVEMENT_STATE_CHANGED", {
                achievementId: this.id
            })),
            this.refreshCount(e),
            this.state == AchievementState.unlocked && this.maxCount <= this.count && (this.state = AchievementState.finished,
            mgrAchievement.sendMsg("MSG_ACHIEVEMENT_STATE_CHANGED", {
                achievementId: this.id
            }),
            !0))
        }
        registerListeners(e) {
            Tools.forEachMap(e, (t,a)=>{
                e[t] = a.bind(this)
            }
            ),
            this._msgHander.registerListeners(e)
        }
        startProcMsg() {
            this._msgHander.startProcMsg()
        }
        stopProcMsg() {
            this._msgHander.stopProcMsg()
        }
        sendMsg(e, t) {
            this._msgHander.sendMsg(e, t)
        }
        _calcCount1() {
            let e = this.template
              , t = 0
              , a = 1
              , i = e.data1
              , s = e.data2
              , o = mgrStage.getStageRating(i);
            return o || mgrStage.isForcePass(i) && (o = 1),
            a = 1,
            [t = s <= o ? 1 : 0, 1]
        }
        _calcCount2() {
            return this.maxCount = this.template.data2,
            [this.count, this.maxCount]
        }
        _calcCount3() {
            return this.maxCount = this.template.data2,
            [this.count, this.maxCount]
        }
        _calcCount4() {
            return this.maxCount = this.template.data2,
            [this.count, this.maxCount]
        }
        _calcCount5() {
            return this.maxCount = this.template.data1,
            [this.count, this.maxCount]
        }
        _calcCount6() {
            return this.maxCount = this.template.data2,
            [this.count, this.maxCount]
        }
        _calcCount7() {
            return this.maxCount = this.template.data1,
            [this.count, this.maxCount]
        }
        _calcCount8() {
            return this.maxCount = this.template.data2,
            [this.count, this.maxCount]
        }
        _calcCount9() {
            return this.maxCount = this.template.data1,
            [this.count, this.maxCount]
        }
        _calcCount10() {
            return this.maxCount = this.template.data1,
            [this.count, this.maxCount]
        }
        _calcCount11() {
            return this.maxCount = this.template.data1,
            [this.count, this.maxCount]
        }
        _calcCount12() {
            return this.maxCount = this.template.data1,
            [this.count, this.maxCount]
        }
        _calcCount13() {
            return this.maxCount = this.template.data1,
            [this.count, this.maxCount]
        }
        _calcCount14() {
            return this.maxCount = this.template.data1,
            [this.count, this.maxCount]
        }
        _calcCount15() {
            return [this.count, this.template.data1]
        }
        _calcCount16() {
            return this.maxCount = this.template.data2,
            [this.count, this.maxCount]
        }
        onMsgStageRatingChanged(e) {
            let t = e.stageId
              , a = e.rating;
            if (this.state == AchievementState.locked)
                return;
            if (this.state >= AchievementState.finished)
                return;
            let i = mgrCfg.get_from_achievement_target_db(this.template.targetType);
            if (1 == i.id) {
                let e = this.template.data1
                  , i = this.template.data2;
                e == t && a >= i && (this.count = 1)
            } else
                9 == i.id && this.count++;
            this.count >= this.maxCount && (this.state = AchievementState.finished,
            mgrAchievement.sendMsg("MSG_ACHIEVEMENT_STATE_CHANGED", {
                achievementId: this.id
            })),
            mgrAchievement.saveRecord()
        }
        onMsgClickRole(e) {
            let t = e.pos;
            this.state != AchievementState.locked && (this.state >= AchievementState.finished || (this.template.data1 == t && this.count++,
            this.count >= this.maxCount && (this.state = AchievementState.finished,
            mgrAchievement.sendMsg("MSG_ACHIEVEMENT_STATE_CHANGED", {
                achievementId: this.id
            })),
            mgrAchievement.saveRecord()))
        }
        onMsgSettlementPlayBall(e) {
            this.state != AchievementState.locked && (this.state >= AchievementState.finished || (this.count++,
            this.count >= this.maxCount && (this.state = AchievementState.finished,
            mgrAchievement.sendMsg("MSG_ACHIEVEMENT_STATE_CHANGED", {
                achievementId: this.id
            })),
            mgrAchievement.saveRecord()))
        }
        onMsgSettlementRopeSkiping() {
            this.state != AchievementState.locked && (this.state >= AchievementState.finished || (this.count++,
            this.count >= this.maxCount && (this.state = AchievementState.finished,
            mgrAchievement.sendMsg("MSG_ACHIEVEMENT_STATE_CHANGED", {
                achievementId: this.id
            })),
            mgrAchievement.saveRecord()))
        }
        onMsgAnswerQuestion() {
            this.state != AchievementState.locked && (this.state >= AchievementState.finished || (this.count++,
            this.count >= this.maxCount && (this.state = AchievementState.finished,
            mgrAchievement.sendMsg("MSG_ACHIEVEMENT_STATE_CHANGED", {
                achievementId: this.id
            })),
            mgrAchievement.saveRecord()))
        }
        onMsgItemAmountChanged(e) {
            if (this.state == AchievementState.locked)
                return;
            if (this.state >= AchievementState.finished)
                return;
            let t = e.itemId
              , a = e.amountDelta
              , i = mgrCfg.get_from_achievement_target_db(this.template.targetType);
            if (15 == i.id)
                this.template.customData.indexOf(t) >= 0 && mgrPlayer.getItemAmount(t) - a == 0 && this.count++;
            else if (16 == i.id)
                this.template.data1 == t && (this.count += a);
            else if (6 == i.id) {
                if (a > 0)
                    return;
                this.count || (this.count = 0),
                t == this.template.data1 && (this.count += Math.abs(a))
            }
            this.count >= this.maxCount && (this.state = AchievementState.finished,
            mgrAchievement.sendMsg("MSG_ACHIEVEMENT_STATE_CHANGED", {
                achievementId: this.id
            })),
            mgrAchievement.saveRecord()
        }
        onMsgHarvest(e) {
            let t = e.seedId;
            if (this.state == AchievementState.locked)
                return;
            if (this.state >= AchievementState.finished)
                return;
            let a = mgrCfg.get_from_achievement_target_db(this.template.targetType);
            if (7 == a.id)
                this.count++;
            else if (8 == a.id) {
                this.template.data1 == t && this.count++
            }
            this.count >= this.maxCount && (this.state = AchievementState.finished,
            mgrAchievement.sendMsg("MSG_ACHIEVEMENT_STATE_CHANGED", {
                achievementId: this.id
            })),
            mgrAchievement.saveRecord()
        }
        onMsgLike() {
            this.state != AchievementState.locked && (this.state >= AchievementState.finished || (this.count++,
            this.count >= this.maxCount && (this.state = AchievementState.finished,
            mgrAchievement.sendMsg("MSG_ACHIEVEMENT_STATE_CHANGED", {
                achievementId: this.id
            })),
            mgrAchievement.saveRecord()))
        }
        onMsgFreeWear() {
            this.state != AchievementState.locked && (this.state >= AchievementState.finished || (this.count++,
            this.count >= this.maxCount && (this.state = AchievementState.finished,
            mgrAchievement.sendMsg("MSG_ACHIEVEMENT_STATE_CHANGED", {
                achievementId: this.id
            })),
            mgrAchievement.saveRecord()))
        }
        onMsgWish() {
            this.state != AchievementState.locked && (this.state >= AchievementState.finished || (this.count++,
            this.count >= this.maxCount && (this.state = AchievementState.finished,
            mgrAchievement.sendMsg("MSG_ACHIEVEMENT_STATE_CHANGED", {
                achievementId: this.id
            })),
            mgrAchievement.saveRecord()))
        }
        onMsgAdEventSuccessed(e) {
            let t = e.adEventId;
            this.state != AchievementState.locked && (this.state >= AchievementState.finished || ("video" == mgrCfg.get_from_ad_event_db(t).type && this.count++,
            this.count >= this.maxCount && (this.state = AchievementState.finished,
            mgrAchievement.sendMsg("MSG_ACHIEVEMENT_STATE_CHANGED", {
                achievementId: this.id
            })),
            mgrAchievement.saveRecord()))
        }
        onMsgTodayShareCountChanged() {
            this.state != AchievementState.locked && (this.state >= AchievementState.finished || (this.count++,
            this.count >= this.maxCount && (this.state = AchievementState.finished,
            mgrAchievement.sendMsg("MSG_ACHIEVEMENT_STATE_CHANGED", {
                achievementId: this.id
            })),
            mgrAchievement.saveRecord()))
        }
        router() {
            this[mgrCfg.get_from_achievement_target_db(this.template.targetType).router]()
        }
        gotoShop() {
            mgrCfg.get_from_food_db(this.template.data1) ? mgrDirector.warpSceneWidthEffect("vEatingScene") : mgrDirector.openDialog("vShopDialog")
        }
        gotoHub() {
            mgrDirector.warpSceneWidthEffect("vHubScene")
        }
        gotoPvp() {
            mgrDirector.warpSceneWidthEffect("vPvpScene")
        }
        gotoGarden() {
            mgrDirector.warpSceneWidthEffect("vGardenMainScene")
        }
        gotoAnswer() {
            mgrDirector.warpSceneWidthEffect("vAnswerQuestionScene")
        }
        gotoMotion() {
            mgrDirector.warpSceneWidthEffect("vMotionMainScene")
        }
        gotoWishPool() {
            mgrDirector.warpSceneWidthEffect("vWishPoolMianScene")
        }
        gotoStage() {
            mgrDirector.warpSceneWidthEffect("vStageScene")
        }
        gotoWatchAd() {
            mgrTip.showMsgTip(`${mgrI18n.getText("sAchievement.1")}`)
        }
        gotoShare() {
            mgrDirector.warpSceneWidthEffect("vRankScene")
        }
        gotoFreeWear() {
            mgrDirector.warpSceneWidthEffect("vRoomScene")
        }
    }
    class mgrAchievement extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            Timer.callLoop(1, ()=>{
                Tools.isOneDay(this.lastRefreshTime, Tools.time()) || (this.lastRefreshTime = Tools.time(),
                this.refreshAchievement(null))
            }
            , this),
            this.refreshAchievement(null)
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("achievement") || {}
              , t = e.achievementDatas || {};
            this.lastRefreshTime = e.lastRefreshTime || 0,
            mgrCfg.forDb_from_achievement_db((e,a)=>{
                let i = new sAchievement(a.id)
                  , s = t[a.id];
                s ? (i.setState(s.state),
                i.lastRefreshTime = s.lastRefreshTime,
                i.count = s.count) : (i.setState(AchievementState.unlocked),
                i.lastRefreshTime = 0,
                i.count = 0),
                this.achievements[a.id] = i
            }
            )
        }
        static saveRecord() {
            super.saveRecord();
            let e = {};
            Tools.forEachMap(this.achievements, (t,a)=>{
                e[a.id] = {
                    state: a.state,
                    lastRefreshTime: a.lastRefreshTime,
                    count: a.count
                }
            }
            );
            let t = {
                achievementDatas: e
            };
            mgrRecord.setData("achievement", t)
        }
        static refreshAchievement(e) {
            let t = !1;
            Tools.forEachMap(this.achievements, (a,i)=>{
                let s = i.refreshState(e);
                t = t || s
            }
            ),
            t && this.saveRecord()
        }
        static obtainReward(e, t) {
            let a = this.achievements[e];
            if (!a)
                return console.warn(ul.format("mgrAchievement.obtainReward, achievement not found! aid = %s", e)),
                [null, null];
            if (a.state != AchievementState.finished)
                return console.warn(ul.format("mgrAchievement.obtainReward, achievement state id not finished! aid = %s", e)),
                [null, null];
            let i = a.template.rewardItemId
              , s = a.template.rewardAmount;
            return 0 != i && (mgrPlayer.addItemAmount(i, s, t),
            mgrTip.addGotItemTip(i, s)),
            a.setState(AchievementState.received),
            this.saveRecord(),
            [i, s]
        }
        static getAchievement(e) {
            let t = this.achievements[e];
            return t || (console.warn(ul.format("mgrAchievement.getAchievement achievement not found, aid = %s", e)),
            null)
        }
        static getAchievementsByCategory(e) {
            let t = [];
            return Tools.forEachMap(this.achievements, (a,i)=>{
                i.template.category == e && t.push(i)
            }
            ),
            t
        }
        static isAchievementCompleted(e) {
            if (!e)
                return !1;
            let t = this.getAchievement(e);
            if (!t)
                return !1;
            let a = t.state;
            return a == AchievementState.finished || a == AchievementState.received
        }
        static isAchievementsAllCompleted(e) {
            if (!e)
                return !1;
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                if (!this.isAchievementCompleted(a))
                    return !1
            }
            return !0
        }
        static getAchievementCanReceiveCount(e) {
            let t = 0;
            return Tools.forEachMap(this.achievements, (a,i)=>{
                i.template.category == e && i.state == AchievementState.finished && t++
            }
            ),
            t
        }
        static getShowAchievementsByCategory(e) {
            let t = {};
            Tools.forEachMap(this.achievements, (a,i)=>{
                i.template.category == e && (t[i.template.subCategory] || (t[i.template.subCategory] = []),
                t[i.template.subCategory].push(i))
            }
            );
            let a = [];
            return Tools.forEachMap(t, (e,t)=>{
                t = Tools.sortArrayByField(t, "id");
                for (let e = 0; e < t.length; e++) {
                    const i = t[e];
                    if (e < t.length - 1) {
                        if (i.state <= AchievementState.finished) {
                            a.push(i);
                            break
                        }
                    } else
                        a.push(i)
                }
            }
            ),
            a
        }
        static getAchievementLevel(e) {
            let t = mgrAchievement.getAchievement(e)
              , a = t.template.category
              , i = t.template.subCategory
              , s = [];
            Tools.forEachMap(this.achievements, (e,t)=>{
                t.template.category == a && t.template.subCategory == i && s.push(t)
            }
            ),
            s = Tools.sortArrayByField(s, "id");
            for (let t = 0; t < s.length; t++) {
                if (s[t].id == e)
                    return [t + 1, s.length]
            }
            return [1, 1]
        }
    }
    var PLANT_OPERATION_TYPE, eNearbyRankId;
    mgrAchievement.achievements = {},
    function(e) {
        e[e.watering = 1] = "watering",
        e[e.feed = 2] = "feed"
    }(PLANT_OPERATION_TYPE || (PLANT_OPERATION_TYPE = {}));
    class mgrGarden extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            mgrCfg.forDb_from_flowerpot_db((e,t)=>{
                this.flowerpots[t.id] || (this.flowerpots[t.id] = {
                    seedId: 0,
                    stageIndex: 0,
                    stageStartTime: 0,
                    bCanHarvest: !1,
                    bUnlocked: !1,
                    bCanGetReward: !1
                })
            }
            ),
            this.registerListeners({
                MSG_ITEM_AMOUNT_CHANGED: this.onMsgItemAmountChanged.bind(this)
            })
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("mgrGarden") || {};
            this.flowerpots = e.flowerpots || {},
            this.gardenInitTime = e.gardenInitTime || Tools.time(),
            this.getedTitleRewards = e.getedTitleRewards || [],
            this.newCardIds = e.newCardIds || [],
            this.repeatPartCount = e.repeatPartCount || {}
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                flowerpots: this.flowerpots,
                gardenInitTime: this.gardenInitTime,
                getedTitleRewards: this.getedTitleRewards,
                newCardIds: this.newCardIds,
                repeatPartCount: this.repeatPartCount
            };
            mgrRecord.setData("mgrGarden", e)
        }
        static mature(e) {
            let t = this.flowerpots[e];
            t.stageIndex = 3,
            t.stageStartTime = 0,
            t.bCanGetReward = !1,
            t.bCanHarvest = !0,
            this.saveRecord()
        }
        static getMaxIndex(e) {
            let t = 0;
            for (; this.hasNext(e, t); )
                t++;
            return t
        }
        static hasNext(e, t) {
            return !!mgrCfg.get_from_plant_db(e, t + 1)
        }
        static update() {
            for (const e in this.flowerpots) {
                let t = this.flowerpots[e];
                if (t.seedId > 0 && t.stageStartTime > 0) {
                    if (mgrCfg.get_from_plant_db(t.seedId, t.stageIndex).duration < Tools.time() - t.stageStartTime) {
                        t.stageIndex++,
                        mgrGuide.isGuiding() && (t.stageIndex = 3),
                        t.stageStartTime = 0,
                        mgrCfg.get_from_plant_db(t.seedId, t.stageIndex).stageReward.length <= 0 ? t.bCanGetReward = !1 : t.bCanGetReward = !0,
                        this.saveRecord()
                    }
                }
                if (!t.bUnlocked) {
                    let t = mgrCfg.get_from_flowerpot_db(e);
                    t.unlockLevel <= mgrInteraction.level && (this.flowerpots[e].bUnlocked = !0,
                    mgrPlayer.addItemAmount(t.rewardItemId, t.rewardItemAmount, "解锁花盆"))
                }
            }
        }
        static getFlowerpotStateById(e) {
            return this.update(),
            this.flowerpots[e]
        }
        static getCurStageProgress(e) {
            this.update();
            let t = this.flowerpots[e];
            if (!t)
                return;
            if (0 == t.seedId)
                return;
            let a = mgrCfg.get_from_plant_db(t.seedId, t.stageIndex)
              , i = (Tools.time() - t.stageStartTime) / a.duration;
            return Math.min(i, 1)
        }
        static hasNextState(e) {
            let t = this.flowerpots[e];
            return !!t && (0 != t.seedId && !!mgrCfg.get_from_plant_db(t.seedId, t.stageIndex + 1))
        }
        static plant(e, t) {
            let a = this.flowerpots[e];
            if (!a)
                return !1;
            if (a.seedId > 0)
                return !1;
            mgrCfg.get_from_flowerpot_db(e);
            if (!a.bUnlocked)
                return !1;
            this.flowerpots[e] = {
                seedId: t,
                stageIndex: 0,
                stageStartTime: 0,
                bCanHarvest: !1,
                bUnlocked: !0,
                bCanGetReward: !1
            },
            mgrPlayer.addItemAmount(t, -1, "种花"),
            mgrTip.addGotItemTip(t, -1);
            let i = mgrCfg.get_from_seed_db(t);
            mgrSdk.staticPointEvent(i.seedStatisPoint),
            this.saveRecord()
        }
        static watering(e) {
            let t = this.flowerpots[e];
            if (!t)
                return;
            if (0 == t.seedId)
                return;
            if (!this.hasNextState(e))
                return;
            let a = mgrCfg.get_from_plant_db(t.seedId, t.stageIndex);
            if (a.operationType != PLANT_OPERATION_TYPE.watering)
                return;
            let i = a.operationConsume;
            i > mgrPlayer.getItemAmount(Const.ITEM_ID_GARDEN_WATER) || (mgrPlayer.addItemAmount(Const.ITEM_ID_GARDEN_WATER, -i, "浇水"),
            mgrTip.addGotItemTip(Const.ITEM_ID_GARDEN_WATER, -i),
            t.stageStartTime = Tools.time(),
            this.saveRecord())
        }
        static feed(e) {
            let t = this.flowerpots[e];
            if (!t)
                return;
            if (0 == t.seedId)
                return;
            if (!this.hasNextState(e))
                return;
            let a = mgrCfg.get_from_plant_db(t.seedId, t.stageIndex);
            if (a.operationType != PLANT_OPERATION_TYPE.feed)
                return;
            let i = a.operationConsume;
            i > mgrPlayer.getItemAmount(Const.ITEM_ID_GARDEN_FERTILIZER) || (mgrPlayer.addItemAmount(Const.ITEM_ID_GARDEN_FERTILIZER, -i, "施肥"),
            mgrTip.addGotItemTip(Const.ITEM_ID_GARDEN_FERTILIZER, -i),
            t.stageStartTime = Tools.time(),
            this.saveRecord())
        }
        static harvest(e) {
            let t = this.flowerpots[e];
            if (!t)
                return;
            if (0 == t.seedId)
                return;
            if (this.getCurStageProgress(e) < 1)
                return;
            if (this.hasNextState(e))
                return;
            let a = []
              , i = mgrCfg.get_from_flower_harvest_db(t.seedId);
            for (let e = 0; e < i.randomBoxIds.length; e++) {
                const t = i.randomBoxIds[e];
                let s = mgrPlayer.openItemBox(t);
                a.push(s),
                mgrPlayer.addItemAmount(s.itemId, s.amount, "收获")
            }
            return this.sendMsg("MSG_HARVEST", {
                seedId: t.seedId
            }),
            t.seedId = 0,
            t.stageIndex = 0,
            t.stageStartTime = 0,
            t.bCanHarvest = !1,
            this.saveRecord(),
            mgrSdk.staticPointEvent(4008),
            a
        }
        static getStageReward(e) {
            let t = this.flowerpots[e];
            if (!t)
                return;
            if (!t.bCanGetReward)
                return;
            let a = []
              , i = mgrCfg.get_from_plant_db(t.seedId, t.stageIndex)
              , [s,o] = i.stageReward;
            return a.push({
                itemId: s,
                amount: o
            }),
            mgrPlayer.addItemAmount(s, o, "种花阶段奖励"),
            t.bCanGetReward = !1,
            this.hasNextState(e) || (t.bCanHarvest = !0),
            this.saveRecord(),
            mgrSdk.staticPointEvent(4014),
            a
        }
        static accelerateGrowing(e) {
            let t = this.getCurStageProgress(e)
              , a = this.getFlowerpotStateById(e)
              , i = mgrCfg.get_from_plant_db(a.seedId, a.stageIndex)
              , [s,o] = i.accelerateConsume;
            o = Math.ceil(o * (1 - t)),
            mgrShop.tryConsumeItem(s, o, "加速生长") && (a.stageStartTime -= i.duration,
            this.update())
        }
        static unlockFlowerpot(e) {
            let t = this.flowerpots[e];
            if (!t)
                return;
            t.bUnlocked = !0,
            mgrTip.showMsgTip(`${mgrI18n.getText("mgrGarden.1")}`),
            this.sendMsg("MSG_UNLOCK_FLOWERPOT", {
                potId: e
            });
            let a = mgrCfg.get_from_flowerpot_db(e);
            mgrPlayer.addItemAmount(a.rewardItemId, a.rewardItemAmount, "解锁花盆"),
            this.saveRecord()
        }
        static getBadgeCount() {
            let e = 0;
            for (const t in this.flowerpots) {
                let a = this.flowerpots[t];
                a && a.seedId && e++
            }
            return mgrCfg.forDb_from_seed_db((t,a)=>{
                if (mgrPlayer.getItemAmount(a.id) > 0)
                    return e++,
                    !0
            }
            ),
            mgrCfg.get_from_card_db((t,a)=>{
                if (mgrPlayer.getItemAmount(a.id) > 0)
                    return e++,
                    !0
            }
            ),
            e += this.getGardenAchievementBadgeCount()
        }
        static getDailyMaxCollectAmount() {
            let e = 0;
            return mgrCfg.forDb_from_achievement_db((t,a)=>{
                2 == a.category && (e += a.rewardAmount)
            }
            ),
            e
        }
        static getDayCount() {
            return 1
        }
        static getMaxCollectAmount() {
            return this.getDailyMaxCollectAmount() * this.getDayCount()
        }
        static getMyCollectAmount() {
            return mgrPlayer.getItemAmount(Const.ITEM_ID_GARDEN_COLLECTION)
        }
        static isCardUnlocked(e) {
            let t = mgrCfg.get_from_card_db(e);
            return mgrAchievement.getAchievement(t.unlockAid).state >= AchievementState.finished
        }
        static get title() {
            let e = mgrPlayer.getItemAmount(Const.ITEM_ID_GARDEN_COLLECTION)
              , t = 0;
            for (; ; ) {
                let a = mgrCfg.get_from_garden_title_db(t + 1);
                if (!a)
                    return t;
                if (a.needCollects[1] > e)
                    return t;
                t++
            }
        }
        static get maxTitle() {
            let e = 1;
            for (; ; ) {
                if (!mgrCfg.get_from_garden_title_db(e))
                    return e - 1;
                e++
            }
        }
        static isRewardGeted(e) {
            return this.getedTitleRewards.indexOf(e) >= 0
        }
        static obtainTitleReward(e) {
            if (this.isRewardGeted(e))
                return void mgrTip.showMsgTip(`${mgrI18n.getText("mgrGarden.2")}`);
            let t = mgrCfg.get_from_garden_title_db(e);
            if (!t)
                return;
            let a = [];
            for (let e = 0; e < t.rewards.length; e++) {
                const [i,s] = t.rewards[e];
                mgrPlayer.addItemAmount(i, s, "花园称号"),
                a.push({
                    itemId: i,
                    amount: s
                })
            }
            return this.getedTitleRewards.push(e),
            this.saveRecord(),
            a
        }
        static getGardenAchievementBadgeCount() {
            let e = 0
              , t = mgrAchievement.getAchievementsByCategory(2);
            for (let a = 0; a < t.length; a++) {
                t[a].state == AchievementState.finished && e++
            }
            return e
        }
        static onMsgItemAmountChanged(e) {
            let t = e.itemId;
            mgrCfg.get_from_card_db(t) && 1 == mgrPlayer.getItemAmount(t) && this.newCardIds.push(t)
        }
        static deleteNewCard(e) {
            let t = this.newCardIds.indexOf(e);
            -1 != t && this.newCardIds.splice(t, 1)
        }
        static isNewCard(e) {
            return this.newCardIds.indexOf(e) >= 0
        }
        static getCardBadgeCount() {
            return this.newCardIds.length
        }
        static getCanFreeUnlockPotId() {
            if (!this.lastCanFreeUnlockPotId || Tools.time() - this.lastFreeUnlockPotIdRefreshTime > 360) {
                this.lastFreeUnlockPotIdRefreshTime = Tools.time();
                for (const e in this.flowerpots) {
                    if (!this.flowerpots[e].bUnlocked) {
                        this.lastCanFreeUnlockPotId = parseInt(e);
                        break
                    }
                }
            }
            return this.lastCanFreeUnlockPotId
        }
        static getFreeUnlockPotRemainTime() {
            let e = this.lastFreeUnlockPotIdRefreshTime + 300 - Tools.time();
            return e = Math.max(0, e)
        }
    }
    !function(e) {
        e[e.ropeSkiping = 1] = "ropeSkiping",
        e[e.playBall = 2] = "playBall",
        e[e.stage = 3] = "stage",
        e[e.garden = 4] = "garden",
        e[e.learn = 5] = "learn"
    }(eNearbyRankId || (eNearbyRankId = {}));
    const DISTANCE_RANGE = [500, 55730]
      , DISTANCE_DELTA_RANGE = [-3e3, 3e3];
    class mgrOfflineNearbyRank extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            this.init(),
            this.registerListeners({
                MSG_PLAYER_NAME_CHANGED: this.onMsgPlayerNameChanged.bind(this),
                MSG_I18N_REFRESH: this.onMsgI18nRefresh.bind(this)
            })
        }
        static loadRecord() {
            let e = mgrRecord.getData("mgrOfflineNearbyRank") || {};
            this.players = e.players,
            this.randomNameLanguage = e.randomNameLanguage,
            null == this.randomNameLanguage && (this.randomNameLanguage = mgrI18n.getLanguage())
        }
        static saveRecord() {
            let e = {
                players: this.players,
                randomNameLanguage: this.randomNameLanguage
            };
            mgrRecord.setData("mgrOfflineNearbyRank", e)
        }
        static init() {
            this.players || (this.players = {});
            let e = ()=>{
                let e = [eNearbyRankId.garden, eNearbyRankId.playBall, eNearbyRankId.ropeSkiping, eNearbyRankId.stage, eNearbyRankId.learn];
                for (let t = 0; t < e.length; t++) {
                    const a = e[t];
                    this.players[a] ? this.players[a] = this.randomChangePlayerForRank(a, this.players[a]) : this.players[a] = this.randomPlayersForRank(a)
                }
                this.saveRecord()
            }
            ;
            e(),
            Timer.callLoop(600, ()=>{
                e()
            }
            , this)
        }
        static randomPlayersForRank(e) {
            let t = 0
              , a = 0;
            e == eNearbyRankId.garden ? (t = mgrGarden.getMaxCollectAmount(),
            a = mgrGarden.getMyCollectAmount()) : e == eNearbyRankId.stage ? (t = mgrStage.getTotalStageCount(),
            a = mgrStage.getStageProgress()) : e == eNearbyRankId.ropeSkiping ? (t = ul.clamp(1.35 * mgrInteraction.ropeSkippingMaxScore, 50, 1e6),
            a = mgrInteraction.ropeSkippingMaxScore) : e == eNearbyRankId.playBall ? (t = ul.clamp(1.35 * mgrInteraction.playBallMaxScore, 50, 1e6),
            a = mgrInteraction.playBallMaxScore) : e == eNearbyRankId.learn && (t = ul.clamp(1.35 * mgrInteraction.historyLearnRightQuestionCount, 50, 1e6),
            a = mgrInteraction.historyLearnRightQuestionCount);
            let i = [];
            for (let e = 1; e <= 49; e++)
                i.push(this.randomOnePlayer(t));
            i = Tools.sortArrayByField(i, "-score");
            for (let e = 0; e < i.length; e++) {
                i[e].rank = e + 1
            }
            return i
        }
        static randomOnePlayer(e) {
            let t = mgrI18n.getLanguage();
            return {
                name: mgrPlayer.calcRandomName(t),
                uid: Tools.generateUUID(),
                distance: Tools.random(DISTANCE_RANGE[0], DISTANCE_RANGE[1]),
                score: Tools.random(e),
                rank: 0
            }
        }
        static randomChangePlayerForRank(e, t) {
            let a = 0
              , i = 0;
            e == eNearbyRankId.garden ? (a = mgrGarden.getMaxCollectAmount(),
            i = mgrGarden.getMyCollectAmount()) : e == eNearbyRankId.stage ? (a = mgrStage.getTotalStageCount(),
            i = mgrStage.getStageProgress()) : e == eNearbyRankId.ropeSkiping ? (a = ul.clamp(1.35 * mgrInteraction.ropeSkippingMaxScore, 50, 1e6),
            i = mgrInteraction.ropeSkippingMaxScore) : e == eNearbyRankId.playBall ? (a = ul.clamp(1.35 * mgrInteraction.playBallMaxScore, 50, 1e6),
            i = mgrInteraction.playBallMaxScore) : e == eNearbyRankId.learn && (a = ul.clamp(1.35 * mgrInteraction.historyLearnRightQuestionCount, 50, 1e6),
            i = mgrInteraction.historyLearnRightQuestionCount);
            for (let e = 0; e < t.length; e++) {
                const s = t[e];
                s.uid == mgrPlayer.getUid() ? (s.name = mgrPlayer.getName(),
                s.score = i) : (s.distance += Tools.random(DISTANCE_DELTA_RANGE[0], DISTANCE_DELTA_RANGE[1]),
                s.distance = ul.clamp(s.distance, DISTANCE_RANGE[0], DISTANCE_RANGE[1]),
                s.score = Math.floor(ul.clamp(Tools.random(a), s.score, a)))
            }
            t = Tools.sortArrayByField(t, "-score");
            for (let e = 0; e < t.length; e++) {
                t[e].rank = e + 1
            }
            return t
        }
        static updateSelfInfo() {
            let e = [eNearbyRankId.learn, eNearbyRankId.garden, eNearbyRankId.playBall, eNearbyRankId.ropeSkiping, eNearbyRankId.stage];
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                let i = 0;
                a == eNearbyRankId.garden ? i = mgrGarden.getMyCollectAmount() : a == eNearbyRankId.stage ? i = mgrStage.getStageProgress() : a == eNearbyRankId.ropeSkiping ? i = mgrInteraction.ropeSkippingMaxScore : a == eNearbyRankId.playBall ? i = mgrInteraction.playBallMaxScore : a == eNearbyRankId.learn && (i = mgrInteraction.historyLearnRightQuestionCount);
                let s = !1
                  , o = this.players[a];
                for (let e = 0; e < o.length; e++) {
                    const t = o[e];
                    if (t.uid == mgrPlayer.getUid()) {
                        t.name = mgrPlayer.getName(),
                        t.score = i,
                        s = !0;
                        break
                    }
                }
                if (!s) {
                    let e = {
                        uid: mgrPlayer.getUid(),
                        name: mgrPlayer.getName(),
                        distance: 0,
                        score: i,
                        rank: 0
                    };
                    o.push(e)
                }
                o = Tools.sortArrayByField(o, "-score");
                for (let e = 0; e < o.length; e++) {
                    o[e].rank = e + 1
                }
                this.players[a] = o,
                this.saveRecord()
            }
        }
        static getPlayersByRankId(e) {
            return this.players[e]
        }
        static getOwnInfoByRankId(e) {
            for (let t = 0; t < this.players[e].length; t++) {
                const a = this.players[e][t];
                if (a.uid == mgrPlayer.getUid())
                    return a
            }
        }
        static onMsgPlayerNameChanged() {
            this.updateSelfInfo(),
            this.sendMsg("MSG_NEARBY_RANK_REFRESH")
        }
        static onMsgI18nRefresh() {
            let e = mgrI18n.getLanguage();
            if (this.randomNameLanguage != e) {
                this.randomNameLanguage = mgrI18n.getLanguage();
                for (let t in this.players)
                    for (let a in this.players[t]) {
                        const i = this.players[t][a];
                        i.uid != mgrPlayer.getUid() && (i.name = mgrPlayer.calcRandomName(e))
                    }
                this.saveRecord()
            }
        }
    }
    var E_REST_STATE, E_QUESTION_TYPE;
    mgrOfflineNearbyRank.randomNameLanguage = null,
    function(e) {
        e[e.rest = 1] = "rest",
        e[e.none = 2] = "none"
    }(E_REST_STATE || (E_REST_STATE = {})),
    function(e) {
        e[e.shushu = 1] = "shushu",
        e[e.shitu = 2] = "shitu",
        e[e.addAndSubLess10 = 3] = "addAndSubLess10",
        e[e.mulAndDivLess10 = 4] = "mulAndDivLess10",
        e[e.trianglePerimeter = 5] = "trianglePerimeter",
        e[e.rectanglePerimeter = 6] = "rectanglePerimeter",
        e[e.parallelogramPerimeter = 7] = "parallelogramPerimeter",
        e[e.triangleArena = 8] = "triangleArena",
        e[e.rectangleArena = 9] = "rectangleArena",
        e[e.parallelogramArena = 10] = "parallelogramArena",
        e[e.addAndSubGreater10 = 11] = "addAndSubGreater10",
        e[e.mulAndDivGreater10 = 12] = "mulAndDivGreater10",
        e[e.time = 13] = "time",
        e[e.series = 14] = "series",
        e[e.pic_law = 15] = "pic_law",
        e[e.number_compare = 16] = "number_compare"
    }(E_QUESTION_TYPE || (E_QUESTION_TYPE = {}));
    class mgrInteraction extends Manager {
        static get energy() {
            return this.__energy
        }
        static set energy(e) {
            let t = mgrCfg.get_from_role_level_db(this.level);
            this.__energy = ul.clamp(e, 0, t.restProgressValue),
            this.saveRecord()
        }
        static get eatFillValue() {
            return this.__eatFillValue
        }
        static set eatFillValue(e) {
            let t = mgrCfg.get_from_role_level_db(this.level);
            this.__eatFillValue = ul.clamp(e, 0, t.eatProgressValue),
            this.saveRecord()
        }
        static get learnProgress() {
            return this.__learnProgress
        }
        static set learnProgress(e) {
            let t = mgrCfg.get_from_role_level_db(this.level);
            this.__learnProgress = ul.clamp(e, 0, t.learnProgressValue),
            this.saveRecord()
        }
        static get motionProgress() {
            return this.__motionProgress
        }
        static set motionProgress(e) {
            let t = mgrCfg.get_from_role_level_db(this.level);
            this.__motionProgress = ul.clamp(e, 0, t.motionProgressValue),
            this.saveRecord()
        }
        static get restState() {
            return this.__restState
        }
        static set restState(e) {
            this.__restState = e,
            this.saveRecord()
        }
        static get bBorn() {
            return this.__bBorn
        }
        static set bBorn(e) {
            this.__bBorn = e,
            this.saveRecord()
        }
        static get bMotioned() {
            return this.__bMotioned
        }
        static set bMotioned(e) {
            this.__bMotioned = e,
            this.saveRecord()
        }
        static get bEated() {
            return this.__bEated
        }
        static set bEated(e) {
            this.__bEated = e,
            this.saveRecord()
        }
        static get bStudyed() {
            return this.__bStudyed
        }
        static set bStudyed(e) {
            this.__bStudyed = e,
            this.saveRecord()
        }
        static get bRested() {
            return this.__bRested
        }
        static set bRested(e) {
            this.__bRested = e,
            this.saveRecord()
        }
        static get ropeSkippingMaxScore() {
            return this.__ropeSkippingMaxScore
        }
        static set ropeSkippingMaxScore(e) {
            this.__ropeSkippingMaxScore = e
        }
        static get playBallMaxScore() {
            return this.__playBallMaxScore
        }
        static set playBallMaxScore(e) {
            this.__playBallMaxScore = e
        }
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            this.registerListeners({
                MSG_ITEM_AMOUNT_CHANGED: this.onMsgItemAmountChanged.bind(this)
            }),
            Timer.callLoop(.3, this.refresh.bind(this), !0)
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("mgrInteraction") || {};
            this.__energy = e.energy,
            this.__eatFillValue = e.eatFillValue,
            this.__learnProgress = e.learnProgress,
            this.__motionProgress = e.motionProgress,
            this.lastRefreshTime = e.lastRefreshTime,
            this.__restState = e.restState || E_REST_STATE.none,
            this.lastQuestion = e.lastQuestion,
            this.__playBallMaxScore = e.playBallMaxScore || 0,
            this.__ropeSkippingMaxScore = e.ropeSkippingMaxScore || 0,
            this.__bBorn = e.bBorn || !1,
            this.__bMotioned = e.bMotioned || !1,
            this.__bEated = e.bEated || !1,
            this.__bStudyed = e.bStudyed || !1,
            this.__bRested = e.bRested || !1,
            this.curLearnQuestionCount = e.curLearnQuestionCount,
            this.todayRecommendFoodId = e.todayRecommendFoodId,
            this.todayRecommendFoodIdRefreshTime = e.todayRecommendFoodIdRefreshTime || 0,
            this.totalEatFoodCount = e.totalEatFoodCount || 0,
            null == this.curLearnQuestionCount && (this.curLearnQuestionCount = 2),
            this.historyLearnRightQuestionCount = e.historyLearnRightQuestionCount || 0,
            this.curLearnRightQuestionCount = e.curLearnRightQuestionCount || 0,
            this.__oldLevel = this.level,
            this.__oldExp = mgrPlayer.getItemAmount(Const.ITEM_ID_INTERACTION_EXP),
            this.tryReset()
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                energy: this.energy,
                eatFillValue: this.eatFillValue,
                learnProgress: this.learnProgress,
                motionProgress: this.motionProgress,
                lastRefreshTime: this.lastRefreshTime,
                lastQuestion: this.lastQuestion,
                restState: this.restState,
                ropeSkippingMaxScore: this.ropeSkippingMaxScore,
                playBallMaxScore: this.playBallMaxScore,
                bBorn: this.bBorn,
                bEated: this.bEated,
                bRested: this.bRested,
                bStudyed: this.bStudyed,
                bMotioned: this.bMotioned,
                curLearnQuestionCount: this.curLearnQuestionCount,
                curLearnRightQuestionCount: this.curLearnRightQuestionCount,
                historyLearnRightQuestionCount: this.historyLearnRightQuestionCount,
                todayRecommendFoodId: this.todayRecommendFoodId,
                todayRecommendFoodIdRefreshTime: this.todayRecommendFoodIdRefreshTime || 0,
                totalEatFoodCount: this.totalEatFoodCount
            };
            mgrRecord.setData("mgrInteraction", e)
        }
        static tryReset() {
            if (!this.lastRefreshTime) {
                this.lastRefreshTime = Tools.time();
                let e = this.level
                  , t = mgrCfg.get_from_role_level_db(e);
                this.energy = t.restProgressValue,
                this.eatFillValue = 0,
                this.motionProgress = 0,
                this.learnProgress = 0,
                this.saveRecord()
            }
        }
        static get level() {
            let e = mgrPlayer.getItemAmount(Const.ITEM_ID_INTERACTION_EXP);
            return this.calcLevel(e)
        }
        static calcLevel(e) {
            let t = 1;
            for (; ; ) {
                let a = mgrCfg.get_from_role_level_db(t);
                if (!a)
                    return t - 1;
                if (!(e >= a.upgradeExp))
                    break;
                t++,
                e -= a.upgradeExp
            }
            return t
        }
        static get levelProgress() {
            let e = mgrPlayer.getItemAmount(Const.ITEM_ID_INTERACTION_EXP);
            return this.calcLevelProgress(e)
        }
        static calcLevelProgress(e) {
            let t = 1;
            for (; ; ) {
                let a = mgrCfg.get_from_role_level_db(t);
                if (!a)
                    return 1;
                if (!(e >= a.upgradeExp))
                    return e / a.upgradeExp;
                t++,
                e -= a.upgradeExp
            }
        }
        static onMsgItemAmountChanged() {
            mgrPlayer.getItemAmount(Const.ITEM_ID_INTERACTION_EXP) != this.__oldExp && (this.level > this.__oldLevel && !vRoleLevelUpDialog.instance && mgrInteraction.bRested && mgrDirector.openDialog("vRoleLevelUpDialog"),
            this.__oldLevel = this.level,
            this.sendMsg("MSG_ROLE_EXP_CHANGED"))
        }
        static obtainLevelUpReward(e=!0, t=1) {
            let a = mgrInteraction.level
              , i = (a = Math.max(2, a)) - 1
              , s = mgrCfg.get_from_role_level_db(i).rewards;
            for (let a = 0; a < s.length; a++) {
                const [i,o] = s[a];
                mgrPlayer.addItemAmount(i, o * t, "升级奖励"),
                e && mgrTip.addGotItemTip(i, o * t, [], {
                    bFromAd: t > 1
                })
            }
        }
        static refresh() {
            let e = Tools.time() - this.lastRefreshTime;
            this.lastRefreshTime = Tools.time();
            let t = mgrCfg.get_from_interaction_config_db(1);
            mgrCfg.get_from_role_level_db(this.level);
            this.bBorn && (this.restState == E_REST_STATE.rest ? (this.eatFillValue -= 1 / t.restHungaryRate * e,
            this.energy += 1 / t.restRecoverRate * e) : (this.eatFillValue -= 1 / t.hungaryRate * e,
            this.energy -= 1 / t.tiredRate * e),
            this.learnProgress -= 1 / t.learnConsumeRate * e,
            this.motionProgress -= 1 / t.motionConsumeRate * e,
            this.sendMsg("MSG_INTERACTION_PROGRESS_REFRESH"),
            this.saveRecord())
        }
        static startRopeSkipping() {
            return 0 == this.checkRopeSkippingCondition().code
        }
        static checkRopeSkippingCondition() {
            if (!this.bMotioned)
                return {
                    code: 0,
                    param: null
                };
            let e = mgrCfg.get_from_interaction_config_db(1)
              , t = mgrCfg.get_from_role_level_db(this.level);
            return this.energy < e.motion1ConsumeEnergy ? {
                code: 1,
                param: e.motion1ConsumeEnergy - this.energy
            } : this.eatFillValue < e.motion1AddHungary ? {
                code: 2,
                param: e.motion1AddHungary - this.eatFillValue
            } : this.motionProgress / t.motionProgressValue > .95 ? {
                code: 3,
                param: null
            } : {
                code: 0,
                param: null
            }
        }
        static startPlayBall() {
            return this.checkPlayBallCondition().code,
            !0
        }
        static checkPlayBallCondition() {
            if (!this.bMotioned)
                return {
                    code: 0,
                    param: null
                };
            let e = mgrCfg.get_from_interaction_config_db(1)
              , t = mgrCfg.get_from_role_level_db(this.level);
            return this.energy < e.motion2ConsumeEnergy ? {
                code: 1,
                param: e.motion2ConsumeEnergy - this.energy
            } : this.eatFillValue < e.motion2AddHungary ? {
                code: 2,
                param: e.motion2AddHungary - this.eatFillValue
            } : this.motionProgress / t.motionProgressValue > .95 ? {
                code: 3,
                param: null
            } : {
                code: 0,
                param: null
            }
        }
        static checkRestConditon() {
            let e = mgrCfg.get_from_role_level_db(this.level);
            return !(this.eatFillValue / e.eatProgressValue < .1)
        }
        static settlementLearn() {
            let e = {};
            e.historyMaxScore = this.historyLearnRightQuestionCount,
            e.score = this.curLearnRightQuestionCount,
            e.tipScore = `${mgrI18n.getText("mgrInteraction.1")}`;
            let t = this.obtainAnswerQuestionReward();
            return e.items = [t],
            mgrOfflineNearbyRank.updateSelfInfo(),
            e
        }
        static settlementRopeSkipping(e) {
            let t = {};
            t.historyMaxScore = this.ropeSkippingMaxScore,
            t.score = e,
            e > this.ropeSkippingMaxScore ? (this.ropeSkippingMaxScore = e,
            t.tipScore = `${mgrI18n.getText("mgrInteraction.1")}`,
            this.saveRecord()) : t.tipScore = `${mgrI18n.getText("mgrInteraction.2")}`;
            let a = mgrCfg.get_from_interaction_config_db(1)
              , [i,s,o] = a.ropeSkippingChestScores
              , n = [];
            e >= o ? (n = [1, 2, 3],
            t.tipChest = "太棒了, 打开了所有的箱子!") : e >= s ? (n = [1, 2],
            t.tipChest = "不错哦, 打开了两个箱子!") : e >= i ? (n = [1],
            t.tipChest = "要加油哦, 还有两个箱子没有打开呢!") : t.tipChest = `${mgrI18n.getText("mgrInteraction.3")}`;
            let r = {};
            for (let e = 0; e < n.length; e++) {
                const t = n[e];
                let a = this.settlementRopeSkippingChest(t);
                for (let e = 0; e < a.length; e++) {
                    const t = a[e];
                    r[t.itemId] || (r[t.itemId] = 0),
                    r[t.itemId] += t.amount
                }
            }
            let l = mgrCfg.get_from_role_level_db(this.level);
            this.motionProgress += l.motion1Consume[2],
            t.items = [];
            for (const e in r) {
                let a = r[e];
                t.items.push({
                    itemId: parseInt(e),
                    amount: a
                })
            }
            return t.items.length <= 0 && t.items.push({
                itemId: Const.ITEM_ID_INTERACTION_EXP,
                amount: 1
            }),
            this.sendMsg("MSG_SETTLEMENT_ROPE_SKIPING"),
            t
        }
        static settlementRopeSkippingChest(e) {
            let t = this.getRopeSkippingChest(e)
              , a = [];
            for (let e = 0; e < t.length; e++) {
                const i = t[e];
                a.push(mgrPlayer.openItemBox(i))
            }
            return a
        }
        static getRopeSkippingChest(e) {
            let t = mgrCfg.get_from_interaction_config_db(1);
            return 1 == e ? t.motion1Chest1 : 2 == e ? t.motion1Chest2 : 3 == e ? t.motion1Chest3 : void 0
        }
        static settlementPlayBall(e) {
            let t = {};
            t.historyMaxScore = this.playBallMaxScore,
            t.score = e,
            e > this.playBallMaxScore ? (this.playBallMaxScore = e,
            t.tipScore = `${mgrI18n.getText("mgrInteraction.1")}`,
            this.saveRecord()) : t.tipScore = `${mgrI18n.getText("mgrInteraction.2")}`;
            let a = mgrCfg.get_from_interaction_config_db(1)
              , [i,s,o] = a.playBallChestScores
              , n = [];
            e >= o ? (n = [1, 2, 3],
            t.tipChest = "太棒了, 打开了所有的箱子!") : e >= s ? (n = [1, 2],
            t.tipChest = "不错哦, 打开了两个箱子!") : e >= i ? (n = [1],
            t.tipChest = "要加油哦, 还有两个箱子没有打开呢!") : t.tipChest = `${mgrI18n.getText("mgrInteraction.3")}`;
            let r = {};
            for (let e = 0; e < n.length; e++) {
                const t = n[e];
                let a = this.settlementPlayBallChest(t);
                for (let e = 0; e < a.length; e++) {
                    const t = a[e];
                    r[t.itemId] || (r[t.itemId] = 0),
                    r[t.itemId] += t.amount
                }
            }
            let l = mgrCfg.get_from_role_level_db(this.level);
            this.motionProgress += l.motion2Consume[2],
            t.items = [];
            for (const e in r) {
                let a = r[e];
                t.items.push({
                    itemId: parseInt(e),
                    amount: a
                })
            }
            return t.items.length <= 0 && t.items.push({
                itemId: Const.ITEM_ID_INTERACTION_EXP,
                amount: 1
            }),
            this.sendMsg("MSG_SETTLEMENT_PLAY_BALL"),
            t
        }
        static settlementPlayBallChest(e) {
            let t = this.getPlayBallChest(e)
              , a = [];
            for (let e = 0; e < t.length; e++) {
                const i = t[e];
                a.push(mgrPlayer.openItemBox(i))
            }
            return a
        }
        static getPlayBallChest(e) {
            let t = mgrCfg.get_from_interaction_config_db(1);
            return 1 == e ? t.motion2Chest1 : 2 == e ? t.motion2Chest2 : 3 == e ? t.motion2Chest3 : void 0
        }
        static randomOneQuestion(e) {
            switch (mgrCfg.get_from_question_db(e).type) {
            case E_QUESTION_TYPE.shushu:
                return this.randomShushuQuestion(e);
            case E_QUESTION_TYPE.shitu:
                return this.randomShituQuestion(e);
            case E_QUESTION_TYPE.addAndSubLess10:
                return this.randomSubAndAddLess10(e);
            case E_QUESTION_TYPE.mulAndDivLess10:
                return this.randomMulAndDivLess10(e);
            case E_QUESTION_TYPE.trianglePerimeter:
                return this.randomTrianglePerimeter(e);
            case E_QUESTION_TYPE.triangleArena:
                return this.randomTriangleArena(e);
            case E_QUESTION_TYPE.rectanglePerimeter:
                return this.randomRectangPerimeter(e);
            case E_QUESTION_TYPE.rectangleArena:
                return this.randomRectangArena(e);
            case E_QUESTION_TYPE.parallelogramPerimeter:
                return this.randomParallelogramPerimeter(e);
            case E_QUESTION_TYPE.parallelogramArena:
                return this.randomParallelogramArena(e);
            case E_QUESTION_TYPE.addAndSubGreater10:
            case E_QUESTION_TYPE.mulAndDivGreater10:
                return this.randomMulAndDivLess100(e);
            case E_QUESTION_TYPE.time:
                return this.randomTimeQuestion(e);
            case E_QUESTION_TYPE.series:
                return this.randomSeriesQuestion(e);
            case E_QUESTION_TYPE.number_compare:
                return this.randomCompareQuestion(e);
            case E_QUESTION_TYPE.pic_law:
                return this.randomPicLawQuestion(e)
            }
        }
        static randomShushuQuestion(e) {
            mgrCfg.get_from_question_db(e);
            let t = {
                questionId: e,
                param1: 0,
                param2: 0,
                sign: "ADD",
                answer1: 0,
                answer2: 0,
                realAnswer: 0
            };
            return t.param1 = Tools.random(3, 6),
            t.param2 = Tools.random(3, 6),
            t.realAnswer = t.param1 + t.param2,
            Math.random() > .5 ? (t.answer1 = t.realAnswer,
            t.answer2 = t.realAnswer + 1) : (t.answer1 = t.realAnswer + 1,
            t.answer2 = t.realAnswer),
            t
        }
        static randomShituQuestion(e) {
            let t = mgrCfg.get_from_question_db(e);
            return {
                questionId: e,
                param1: 0,
                param2: 0,
                sign: "ADD",
                answer1: t.answer1,
                answer2: t.answer2,
                realAnswer: t.realAnswer
            }
        }
        static randomSubAndAddLess10(e) {
            let t = {
                questionId: e,
                param1: 0,
                param2: 0,
                sign: "ADD",
                answer1: 0,
                answer2: 0,
                realAnswer: 0
            }
              , a = ["ADD", "SUB"]
              , i = a[Tools.random(a.length) - 1];
            if ("ADD" == i)
                t.param1 = Tools.random(9),
                t.param2 = Tools.random(9),
                t.realAnswer = t.param1 + t.param2,
                Math.random() > .5 ? (t.answer1 = t.realAnswer,
                t.answer2 = t.realAnswer + 1) : (t.answer1 = t.realAnswer + 1,
                t.answer2 = t.realAnswer),
                t.sign = "ADD";
            else if ("SUB" == i) {
                let e = Tools.random(9)
                  , a = Tools.random(9);
                if (e < a) {
                    let t = e;
                    e = a,
                    a = t
                }
                t.param1 = e,
                t.param2 = a,
                t.realAnswer = e - a,
                Math.random() > .5 ? (t.answer1 = t.realAnswer,
                t.answer2 = t.realAnswer + Tools.random(3)) : (t.answer1 = t.realAnswer + Tools.random(3),
                t.answer2 = t.realAnswer),
                t.sign = "SUB"
            }
            return t
        }
        static randomMulAndDivLess10(e) {
            let t = {
                questionId: e,
                param1: 0,
                param2: 0,
                sign: "ADD",
                answer1: 0,
                answer2: 0,
                realAnswer: 0
            }
              , a = ["MUL", "DIV"]
              , i = a[Tools.random(a.length) - 1];
            return "MUL" == i ? (t.param1 = Tools.random(9),
            t.param2 = Tools.random(9),
            t.realAnswer = t.param1 * t.param2,
            Math.random() > .5 ? (t.answer1 = t.realAnswer,
            t.answer2 = t.realAnswer + Tools.random(10)) : (t.answer1 = t.realAnswer + Tools.random(10),
            t.answer2 = t.realAnswer),
            t.sign = "MUL") : "DIV" == i && (t.realAnswer = Tools.random(1, 10),
            t.param2 = Tools.random(1, 10),
            t.param1 = t.realAnswer * t.param2,
            Math.random() > .5 ? (t.answer1 = t.realAnswer,
            t.answer2 = t.realAnswer + Tools.random(5)) : (t.answer1 = t.realAnswer + Tools.random(5),
            t.answer2 = t.realAnswer),
            t.sign = "DIV"),
            t
        }
        static randomSubAndAddLess100(e) {
            let t = {
                questionId: e,
                param1: 0,
                param2: 0,
                sign: "ADD",
                answer1: 0,
                answer2: 0,
                realAnswer: 0
            }
              , a = ["ADD", "SUB"]
              , i = a[Tools.random(a.length) - 1];
            if ("ADD" == i)
                t.param1 = Tools.random(99),
                t.param2 = Tools.random(99),
                t.realAnswer = t.param1 + t.param2,
                Math.random() > .5 ? (t.answer1 = t.realAnswer,
                t.answer2 = t.realAnswer + Tools.random(100)) : (t.answer1 = t.realAnswer + Tools.random(100),
                t.answer2 = t.realAnswer),
                t.sign = "ADD";
            else if ("SUB" == i) {
                let e = Tools.random(99)
                  , a = Tools.random(99);
                if (e < a) {
                    let t = e;
                    e = a,
                    a = t
                }
                t.param1 = e,
                t.param2 = a,
                t.realAnswer = e - a,
                Math.random() > .5 ? (t.answer1 = t.realAnswer,
                t.answer2 = t.realAnswer + Tools.random(30)) : (t.answer1 = t.realAnswer + Tools.random(330),
                t.answer2 = t.realAnswer),
                t.sign = "SUB"
            }
            return t
        }
        static randomMulAndDivLess100(e) {
            let t = {
                questionId: e,
                param1: 0,
                param2: 0,
                sign: "ADD",
                answer1: 0,
                answer2: 0,
                realAnswer: 0
            }
              , a = ["MUL", "DIV"]
              , i = a[Tools.random(a.length) - 1];
            return "MUL" == i ? (t.param1 = Tools.random(99),
            t.param2 = Tools.random(99),
            t.realAnswer = t.param1 * t.param2,
            Math.random() > .5 ? (t.answer1 = t.realAnswer,
            t.answer2 = t.realAnswer + Tools.random(1e3)) : (t.answer1 = t.realAnswer + Tools.random(1e3),
            t.answer2 = t.realAnswer),
            t.sign = "MUL") : "DIV" == i && (t.realAnswer = Tools.random(100),
            t.param2 = Tools.random(100),
            t.param1 = t.realAnswer * t.param2,
            Math.random() > .5 ? (t.answer1 = t.realAnswer,
            t.answer2 = t.realAnswer + Tools.random(50)) : (t.answer1 = t.realAnswer + Tools.random(50),
            t.answer2 = t.realAnswer),
            t.sign = "DIV"),
            t
        }
        static randomTimeQuestion(e) {
            let t = {
                questionId: e,
                param1: 0,
                param2: 0,
                sign: "ADD",
                answer1: 0,
                answer2: 0,
                realAnswer: 0
            };
            return t.realAnswer = Tools.time(),
            Math.random() > .5 ? (t.answer1 = t.realAnswer,
            t.answer2 = t.realAnswer + 60 * Tools.random(5, 10)) : (t.answer1 = t.realAnswer - 60 * Tools.random(-10, -5),
            t.answer2 = t.realAnswer),
            t
        }
        static randomSeriesQuestion(e) {
            let t = {
                questionId: e,
                param1: "",
                param2: 0,
                sign: "ADD",
                answer1: 0,
                answer2: 0,
                realAnswer: 0
            }
              , a = Tools.random(1, 3);
            if (1 == a) {
                let e = Tools.random(0, 5)
                  , a = Tools.random(1, 5);
                t.param1 += `${e},`,
                t.param1 += `${e + a},`,
                t.param1 += `${e + 2 * a},`,
                t.param1 += "?",
                t.realAnswer = e + 3 * a,
                Math.random() > .5 ? (t.answer1 = t.realAnswer,
                t.answer2 = t.realAnswer + Tools.random(10)) : (t.answer1 = t.realAnswer + Tools.random(10),
                t.answer2 = t.realAnswer)
            } else if (2 == a) {
                let e = Tools.random(1, 4)
                  , a = Tools.random(2, 4);
                t.param1 += `${e},`,
                t.param1 += `${e * a},`,
                t.param1 += `${e * a * a},`,
                t.param1 += "?",
                t.realAnswer = e * a * a * a,
                Math.random() > .5 ? (t.answer1 = t.realAnswer,
                t.answer2 = t.realAnswer + Tools.random(10)) : (t.answer1 = t.realAnswer + Tools.random(10),
                t.answer2 = t.realAnswer)
            } else if (3 == a) {
                let e = Tools.random(0, 1)
                  , a = 1;
                t.param1 += `${e},`,
                t.param1 += `${a},`,
                t.param1 += `${e + a},`,
                t.param1 += `${e + a + a},`,
                t.param1 += "?",
                t.realAnswer = e + a + a + e + a,
                Math.random() > .5 ? (t.answer1 = t.realAnswer,
                t.answer2 = t.realAnswer + Tools.random(10)) : (t.answer1 = t.realAnswer + Tools.random(10),
                t.answer2 = t.realAnswer)
            }
            return t
        }
        static randomCompareQuestion(e) {
            let t = {
                questionId: e,
                param1: 0,
                param2: 0,
                sign: "GREATOR",
                answer1: !1,
                answer2: !1,
                realAnswer: !1
            };
            return t.param1 = Tools.random(1, 100),
            t.param2 = Tools.random(1, 100),
            t.realAnswer = t.param1 > t.param2,
            Math.random() > .5 ? (t.answer1 = t.realAnswer,
            t.answer2 = !t.realAnswer) : (t.answer1 = !t.realAnswer,
            t.answer2 = t.realAnswer),
            t
        }
        static randomPicLawQuestion(e) {
            let t = mgrCfg.get_from_question_db(e);
            return {
                questionId: e,
                param1: 0,
                param2: 0,
                sign: "ADD",
                answer1: t.answer1,
                answer2: t.answer2,
                realAnswer: t.realAnswer
            }
        }
        static randomTrianglePerimeter(e) {
            let t = {
                questionId: e,
                param1: 0,
                param2: 0,
                param3: 0,
                sign: "ADD",
                answer1: 0,
                answer2: 0,
                realAnswer: 0
            };
            return t.param1 = Tools.random(6, 10),
            t.param2 = 2 * Tools.random(3, 5),
            t.param3 = Math.sqrt(t.param1 * t.param1 + t.param2 * t.param2),
            t.param3 = Math.floor(t.param3),
            t.realAnswer = t.param1 + t.param2 + t.param3,
            Math.random() > .5 ? (t.answer1 = t.realAnswer,
            t.answer2 = t.realAnswer + Tools.random(10)) : (t.answer1 = t.realAnswer + Tools.random(10),
            t.answer2 = t.realAnswer),
            t
        }
        static randomRectangPerimeter(e) {
            let t = {
                questionId: e,
                param1: 0,
                param2: 0,
                sign: "ADD",
                answer1: 0,
                answer2: 0,
                realAnswer: 0
            };
            return t.param1 = Tools.random(6, 10),
            t.param2 = Tools.random(Math.ceil(t.param1 / 2), t.param1),
            t.realAnswer = 2 * (t.param1 + t.param2),
            Math.random() > .5 ? (t.answer1 = t.realAnswer + Tools.random(10),
            t.answer2 = t.realAnswer) : (t.answer1 = t.realAnswer,
            t.answer2 = t.realAnswer + Tools.random(10)),
            t
        }
        static randomParallelogramPerimeter(e) {
            let t = {
                questionId: e,
                param1: 0,
                param2: 0,
                param3: 0,
                sign: "ADD",
                answer1: 0,
                answer2: 0,
                realAnswer: 0
            };
            return t.param1 = Tools.random(6, 10),
            t.param2 = Tools.random(Math.ceil(t.param1 / 2), t.param1),
            t.param3 = Tools.random(Math.ceil(t.param2 / 2), t.param2 - 1),
            t.realAnswer = 2 * (t.param1 + t.param2),
            Math.random() > .5 ? (t.answer1 = t.realAnswer + Tools.random(10),
            t.answer2 = t.realAnswer) : (t.answer1 = t.realAnswer,
            t.answer2 = t.realAnswer + Tools.random(10)),
            t
        }
        static randomTriangleArena(e) {
            let t = {
                questionId: e,
                param1: 0,
                param2: 0,
                param3: 0,
                sign: "ADD",
                answer1: 0,
                answer2: 0,
                realAnswer: 0
            };
            return t.param1 = Tools.random(6, 10),
            t.param2 = 2 * Tools.random(3, 5),
            t.param3 = Math.sqrt(t.param1 * t.param1 + t.param2 * t.param2),
            t.realAnswer = t.param1 * t.param2 / 2,
            Math.random() > .5 ? (t.answer1 = t.realAnswer,
            t.answer2 = t.realAnswer + Tools.random(10)) : (t.answer1 = t.realAnswer + Tools.random(10),
            t.answer2 = t.realAnswer),
            t
        }
        static randomRectangArena(e) {
            let t = {
                questionId: e,
                param1: 0,
                param2: 0,
                sign: "ADD",
                answer1: 0,
                answer2: 0,
                realAnswer: 0
            };
            return t.param1 = Tools.random(6, 10),
            t.param2 = Tools.random(Math.ceil(t.param1 / 2), t.param1),
            t.realAnswer = t.param1 * t.param2,
            Math.random() > .5 ? (t.answer1 = t.realAnswer + Tools.random(10),
            t.answer2 = t.realAnswer) : (t.answer1 = t.realAnswer,
            t.answer2 = t.realAnswer + Tools.random(10)),
            t
        }
        static randomParallelogramArena(e) {
            let t = {
                questionId: e,
                param1: 0,
                param2: 0,
                param3: 0,
                sign: "ADD",
                answer1: 0,
                answer2: 0,
                realAnswer: 0
            };
            return t.param1 = Tools.random(6, 10),
            t.param2 = Tools.random(Math.ceil(t.param1 / 2), t.param1),
            t.param3 = Tools.random(Math.ceil(t.param2 / 2), t.param2 - 1),
            t.realAnswer = t.param1 * t.param3,
            Math.random() > .5 ? (t.answer1 = t.realAnswer + Tools.random(10),
            t.answer2 = t.realAnswer) : (t.answer1 = t.realAnswer,
            t.answer2 = t.realAnswer + Tools.random(10)),
            t
        }
        static getQuestion() {
            if (!this.lastQuestion) {
                let e = mgrCfg.get_from_role_level_db(this.level)
                  , t = [];
                mgrCfg.forDb_from_question_db((a,i)=>{
                    e.questionTypeList.indexOf(i.type) >= 0 && t.push(i)
                }
                );
                let a = Tools.RoundTableProbability(t, "weight");
                this.lastQuestion = this.randomOneQuestion(a.id),
                this.saveRecord()
            }
            return this.lastQuestion
        }
        static answerQuestion(e) {
            if (!this.lastQuestion)
                return mgrTip.showMsgTip(`${mgrI18n.getText("vEatingScene.1")}`),
                !1;
            let t = mgrCfg.get_from_question_db(this.lastQuestion.questionId)
              , a = !1;
            if (1 == e ? this.lastQuestion.answer1 == this.lastQuestion.realAnswer && (a = !0) : 2 == e && this.lastQuestion.answer2 == this.lastQuestion.realAnswer && (a = !0),
            a) {
                this.learnProgress += t.addProgress;
                let e = t.rewards[0][1];
                mgrPlayer.addItemAmount(Const.ITEM_ID_INTERACTION_EXP, e, "答题"),
                mgrTip.addGotItemTip(Const.ITEM_ID_INTERACTION_EXP, e),
                this.historyLearnRightQuestionCount++,
                this.curLearnRightQuestionCount++
            } else {
                this.learnProgress += t.addProgress / 2;
                let e = Math.floor(t.rewards[0][1] / 2);
                mgrPlayer.addItemAmount(Const.ITEM_ID_INTERACTION_EXP, e, "答题"),
                mgrTip.addGotItemTip(Const.ITEM_ID_INTERACTION_EXP, e)
            }
            this.curLearnQuestionCount++;
            let i = mgrCfg.get_from_interaction_config_db(1);
            return this.curLearnQuestionCount = Math.min(this.curLearnQuestionCount, i.questionRewardProgress),
            this.energy -= t.subEnergy,
            this.eatFillValue -= t.addHungary,
            this.lastQuestion = null,
            this.sendMsg("MSG_ANSWER_QUESTION"),
            mgrSdk.staticPointEvent(t.statisPoint),
            a && mgrSdk.staticPointEvent(t.statisPointSuccess),
            a
        }
        static checkAnswerQuestionCondition() {
            if (!this.bStudyed)
                return {
                    code: 0,
                    param: null
                };
            let e = mgrCfg.get_from_role_level_db(mgrInteraction.level)
              , t = mgrCfg.get_from_question_db(this.lastQuestion.questionId);
            return this.energy < t.subEnergy ? {
                code: 1,
                param: t.subEnergy - this.energy
            } : this.eatFillValue < t.addHungary ? {
                code: 2,
                param: t.addHungary - this.eatFillValue
            } : this.learnProgress / e.learnProgressValue > .95 ? {
                code: 3,
                param: null
            } : {
                code: 0,
                param: null
            }
        }
        static canObtainAnswerQuestionReward() {
            let e = mgrCfg.get_from_interaction_config_db(1);
            return this.curLearnQuestionCount >= e.questionRewardProgress
        }
        static obtainAnswerQuestionReward() {
            if (!this.canObtainAnswerQuestionReward())
                return;
            let e = mgrCfg.get_from_interaction_config_db(1)
              , t = mgrPlayer.openItemBox(e.questionReward);
            return this.curLearnQuestionCount = 0,
            this.curLearnRightQuestionCount = 0,
            this.saveRecord(),
            t
        }
        static getSeedRewardFromeLevelUp() {
            let e = {}
              , t = this.level;
            for (; ; ) {
                let a = mgrCfg.get_from_role_level_db(t);
                if (!a)
                    break;
                for (let i = 0; i < a.rewards.length; i++) {
                    const [s,o] = a.rewards[i];
                    mgrCfg.get_from_seed_db(s) && (e[s] || (e[s] = []),
                    e[s].push({
                        level: t,
                        amount: o
                    }))
                }
                t++
            }
            return e
        }
        static eatFood(e) {
            if (mgrPlayer.getItemAmount(e) <= 0)
                return !1;
            let t = mgrCfg.get_from_food_db(e);
            if (!t)
                return !1;
            mgrPlayer.addItemAmount(e, -1, "吃东西"),
            this.totalEatFoodCount++,
            mgrGuide.isGuiding() || this.totalEatFoodCount % 3 != 0 || Timer.callLater(2, ()=>{
                mgrDirector.openDialog("vFoodDiscountDialog")
            }
            ),
            this.eatFillValue += t.addProgress;
            let a = mgrCfg.get_from_role_level_db(this.level);
            return this.eatFillValue -= a.eatProgressValue * t.addHunger,
            this.energy += a.restProgressValue * t.addEnergy,
            this.motionProgress -= a.motionProgressValue * t.subMotionProgress,
            this.learnProgress -= a.learnProgressValue * t.subLearnProgress,
            t.statisPoint && mgrSdk.staticPointEvent(t.statisPoint),
            !0
        }
        static getTodayRecommendFoodId() {
            if (!this.todayRecommendFoodId || !Tools.isOneDay(this.todayRecommendFoodIdRefreshTime, Tools.time())) {
                let e = [];
                mgrCfg.forDb_from_food_db((t,a)=>{
                    a.bCanRandom && e.push({
                        foodId: a.id,
                        weight: 1
                    })
                }
                );
                let t = Tools.RoundTableProbability(e, "weight");
                this.todayRecommendFoodId = t.foodId,
                this.todayRecommendFoodIdRefreshTime = Tools.time()
            }
            return this.todayRecommendFoodId
        }
    }
    const DEBUG$1 = !1;
    class mgrGuide extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            this.registerListeners({
                MSG_GUIDE_EVENT: this.onGuideMsgEvent.bind(this)
            })
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("mgrGuide") || {};
            this.finishedGuideIds = e.finishedGuideIds || []
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                finishedGuideIds: this.finishedGuideIds
            };
            mgrRecord.setData("mgrGuide", e)
        }
        static isFinished(e) {
            return this.finishedGuideIds.indexOf(e) >= 0
        }
        static isGuiding() {
            return !!this.curExecutingGuideId
        }
        static isAllGuideFinished() {
            return this.isFinished(801) && !this.isGuiding()
        }
        static registerGuideNode(e, t) {
            let a = !this.bindedGuideNode[e] || this.bindedGuideNode[e].destroyed;
            this.bindedGuideNode[e] = t,
            a && this.tryResumeGuide()
        }
        static unregisterGuideNode(e) {
            this.bindedGuideNode[e] = null
        }
        static startGuide(e) {
            if (mgrGuide.isFinished(e))
                return void console.log(`引导已完成: ${e}, 请勿重复触发!`);
            if (mgrGuide.isGuiding())
                return void console.log(`正在执行新手引导: ${this.curExecutingGuideId}`);
            this.curExecutingGuideId = e;
            let t = mgrCfg.get_from_guide_db(e);
            if (t.bindNodeName) {
                if (!this.bindedGuideNode[t.bindNodeName])
                    return void console.log(`当前引导 ${e}所需要的绑定节点尚未注册, 等待...`);
                if (this.bindedGuideNode[t.bindNodeName].destroyed)
                    return void console.log(`当前引导 ${e}所需要的绑定节点已失效, 等待...`)
            }
            if (t.preEventId && t.preEventId.length > 0) {
                let e = !0;
                for (let a = 0; a < t.preEventId.length; a++) {
                    const i = t.preEventId[a];
                    if (this.finisedEventIds.indexOf(i) < 0)
                        return e = !1,
                        void console.log(`当前引导的前置事件尚未完成: ${i}`)
                }
            }
            this.createGuide()
        }
        static tryResumeGuide() {
            if (this.bStartGuide)
                return;
            if (!this.curExecutingGuideId)
                return;
            let e = mgrCfg.get_from_guide_db(this.curExecutingGuideId);
            if (e.bindNodeName)
                if (this.bindedGuideNode[e.bindNodeName] && !this.bindedGuideNode[e.bindNodeName].destroyed) {
                    if (e.preEventId && e.preEventId.length > 0)
                        for (let t = 0; t < e.preEventId.length; t++) {
                            const a = e.preEventId[t];
                            if (this.finisedEventIds.indexOf(a) < 0)
                                return void console.log(`当前引导的前置事件尚未完成: ${a}`)
                        }
                    this.createGuide()
                } else
                    console.log(`尝试恢复失败: ${this.curExecutingGuideId}所需要的绑定节点尚未注册, 等待...`)
        }
        static createGuide() {
            if (this.bStartGuide)
                return;
            this.bStartGuide = !0,
            this.finisedEventIds = [],
            console.log(`创建新手引导:${this.curExecutingGuideId}`);
            let e = this.curExecutingGuideId
              , t = mgrCfg.get_from_guide_db(e);
            mgrSdk.staticPointEvent(t.statisPoint);
            let a = this.bindedGuideNode[t.bindNodeName || "-1"];
            t.bindNodeName || ((a = new Laya.Sprite).size(0, 0),
            mgrDirector.getTipRoot().addChild(a)),
            (t.bindNodeName || t.tipContent) && (console.log(`打开mask弹框:${this.curExecutingGuideId}`),
            this.guideMaskDialog = mgrDirector.openDialog("vGuideMaskDialog", {
                target: a,
                extraArena: t.nodeExtArena,
                content: mgrI18n.getText(`${t.tipContent}`),
                widget: {
                    x: t.tipWidgetX,
                    y: t.tipWidgetY
                },
                type: t.tipStyle,
                tipDelayTime: t.tipDelayTime
            }, !0)),
            t.tipDelayTime > 0 ? Timer.callLater(t.tipDelayTime, ()=>{
                t.soundId && mgrSound.play(t.soundId)
            }
            , this) : t.soundId && mgrSound.play(t.soundId),
            this.bWaittingFinishEvent = !0
        }
        static onGuideMsgEvent(e) {
            let t = e.id;
            e.param;
            if (this.finisedEventIds.push(t),
            !this.bWaittingFinishEvent)
                return !1;
            if (!this.curExecutingGuideId)
                return !1;
            if (!this.bStartGuide)
                return this.tryResumeGuide(),
                !1;
            let a = this.curExecutingGuideId
              , i = mgrCfg.get_from_guide_db(a);
            for (let e = 0; e < i.finishEventId.length; e++) {
                const t = i.finishEventId[e];
                if (this.finisedEventIds.indexOf(t) < 0)
                    return void console.log(`尝试完成引导:${a}: 事件 ${t}尚未完成`)
            }
            this.guideMaskDialog && this.guideMaskDialog.closeDialog(),
            this.guideMaskDialog = null,
            this.bStartGuide = !1,
            this.bWaittingFinishEvent = !1,
            this.curExecutingGuideId = null,
            this.finisedEventIds = [],
            i.bSave && this.finishedGuideIds.push(a),
            this.saveRecord(),
            i.nextId && this.startGuide(i.nextId),
            i.willTriggerAdEvent && this.sendMsg(i.willTriggerAdEvent)
        }
        static endGuide() {
            this.guideMaskDialog && this.guideMaskDialog.closeDialog(),
            this.guideMaskDialog = null,
            this.bStartGuide = !1,
            this.bWaittingFinishEvent = !1,
            this.curExecutingGuideId = null,
            this.finisedEventIds = [],
            mgrCfg.forDb_from_guide_db((e,t)=>{
                t.bSave && this.finishedGuideIds.push(t.id)
            }
            ),
            mgrInteraction.bMotioned = !0,
            mgrInteraction.bRested = !0,
            mgrInteraction.bStudyed = !0,
            mgrInteraction.bEated = !0,
            mgrInteraction.bBorn = !0,
            this.saveRecord()
        }
    }
    var ChannelName;
    mgrGuide.finishedGuideIds = [],
    mgrGuide.bindedGuideNode = {},
    mgrGuide.finisedEventIds = [],
    function(e) {
        e.toutiao = "toutiao",
        e.douyin = "douyin",
        e.baidu = "baidu",
        e.oppo = "oppoqg",
        e.funheadline = "funheadline",
        e.game4399 = "4399minigame",
        e.huawei = "huawei",
        e.iqiyi = "iqiyi",
        e.kaixin = "kaixin",
        e.qq = "qq",
        e.weixin = "weixin",
        e.xiaomi = "xiaomiqg",
        e.uc = "uc",
        e.vivo = "vivo",
        e.debug = "debug"
    }(ChannelName || (ChannelName = {}));
    const FindMeBgUrl = {
        [ChannelName.toutiao]: "2d/ui/bg/findme_toutiao",
        [ChannelName.douyin]: "2d/ui/bg/findme_douyin",
        [ChannelName.weixin]: "2d/ui/bg/findme_weixin"
    }
      , shareImgUrl = {
        [ChannelName.toutiao]: ["https://gamesres.ultralisk.cn/notice/sharegames/game69/headline1.jpg", "https://gamesres.ultralisk.cn/notice/sharegames/game69/headline2.jpg", "https://gamesres.ultralisk.cn/notice/sharegames/game69/headline3.jpg", "https://gamesres.ultralisk.cn/notice/sharegames/game69/headline4.jpg", "https://gamesres.ultralisk.cn/notice/sharegames/game69/headline5.jpg"],
        [ChannelName.weixin]: ["https://gamesres.ultralisk.cn/notice/sharegames/game69/weixin1.jpg", "https://gamesres.ultralisk.cn/notice/sharegames/game69/weixin2.jpg", "https://gamesres.ultralisk.cn/notice/sharegames/game69/weixin3.jpg", "https://gamesres.ultralisk.cn/notice/sharegames/game69/weixin4.jpg", "https://gamesres.ultralisk.cn/notice/sharegames/game69/weixin5.jpg"],
        [ChannelName.qq]: ["https://gamesres.ultralisk.cn/notice/sharegames/game69/qq1.jpg", "https://gamesres.ultralisk.cn/notice/sharegames/game69/qq2.jpg", "https://gamesres.ultralisk.cn/notice/sharegames/game69/qq3.jpg", "https://gamesres.ultralisk.cn/notice/sharegames/game69/qq4.jpg", "https://gamesres.ultralisk.cn/notice/sharegames/game69/qq5.jpg"]
    }
      , RewardShareCount = 10
      , RewardVideoShareCount = 10;
    class mgrChannel extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            this.registerListeners({
                MSG_SDK_SHARE_RESULT: this.onMsgShareResult,
                MSG_SDK_SHARE_VIDEO_RESULT: this.onMsgSdkShareVideoResult,
                MSG_SDK_INSTALL_SHORTCUT_RESULT: this.onMsgSdkInstallShortCutResult,
                MSG_SDK_APP_SHARE_RESULT: this.onMsgSdkAppShareResult,
                MSG_SDK_WX_GZH_ENTER: this.onMsgWxgzhEnter,
                MSG_SDK_JUMP_OTHER_GAME_REWARD_RESULT: this.onMsgJumpOtherGameRewardResult.bind(this)
            })
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("channel") || {};
            this._userOpenVideoRecord = e._userOpenVideoRecord || !0,
            this._isGetWxgzhReward = e._isGetWxgzhReward || !1,
            this.bTakedInstallShortCut = e.bTakedInstallShortCut || !1
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                _userOpenVideoRecord: this._userOpenVideoRecord,
                _isGetWxgzhReward: this._isGetWxgzhReward,
                bTakedInstallShortCut: this.bTakedInstallShortCut
            };
            mgrRecord.setData("channel", e)
        }
        static setChannelName(e) {
            this._channelName = e || ChannelName.debug
        }
        static isChannel4399() {
            return this._channelName == ChannelName.game4399
        }
        static isChannelBaidu() {
            return this._channelName == ChannelName.baidu
        }
        static isChannelFunHeadline() {
            return this._channelName == ChannelName.funheadline
        }
        static isChannelHeadline() {
            return this.isChannelPlatformToutiao()
        }
        static isChannelPlatformToutiao() {
            return this._channelName == ChannelName.toutiao
        }
        static isChannelPlatformDouyin() {
            return this._channelName == ChannelName.douyin
        }
        static isChannelIqiyi() {
            return this._channelName == ChannelName.iqiyi
        }
        static isChannelKaixin() {
            return this._channelName == ChannelName.kaixin
        }
        static isChannelOppo() {
            return this._channelName == ChannelName.oppo
        }
        static isChannelQQ() {
            return this._channelName == ChannelName.qq
        }
        static isChannelVivo() {
            return this._channelName == ChannelName.vivo
        }
        static isChannelWeixin() {
            return this._channelName == ChannelName.weixin
        }
        static isChannelXiaomi() {
            return this._channelName == ChannelName.xiaomi
        }
        static isChannelUc() {
            return this._channelName == ChannelName.uc
        }
        static isChannelHuawei() {
            return this._channelName == ChannelName.huawei
        }
        static canGameInterPush() {
            return !0
        }
        static canGameInterPushIcon() {
            return this.canGameInterPush() && 1 == mgrSdk.getCopNumberValueByKey("b_jump_other_game")
        }
        static canGameInterPushBanner() {
            return this.canGameInterPush() && 1 == mgrSdk.getCopNumberValueByKey("b_jump_other_game_banner")
        }
        static canGameInterPushMoreGame() {
            return (this.canGameInterPush() || this._isMoreGame || this._isULMoreGame) && 1 == mgrSdk.getCopNumberValueByKey("b_more_game")
        }
        static canGameInterPushRewardMoreGame() {
            return this.canGameInterPush() && 1 == mgrSdk.getCopNumberValueByKey("b_reward_more_game")
        }
        static canGameInterPushBannerDrag() {
            return this.canGameInterPush() && 1 == mgrSdk.getCopNumberValueByKey("b_jump_other_game_left")
        }
        static setInterPushConfig(e) {
            let t = [];
            for (let a = 0; a < e.length; a++) {
                let i = e[a];
                i && t.push({
                    gameId: i.index,
                    url: i.url
                })
            }
            this.interPushConfig = t
        }
        static getInterPushConfig() {
            return this.interPushConfig || []
        }
        static canShowAdH5() {
            return this.isChannelFunHeadline()
        }
        static canShowFindMe() {
            return !!FindMeBgUrl[this._channelName] && this._isSupportFindMinigames
        }
        static getFindMeImage() {
            return FindMeBgUrl[this._channelName]
        }
        static canAddToMyFavorite() {
            return this.isChannelBaidu()
        }
        static takeWxgzhReward() {
            this._isNeedAlertWxgzhReward = !1,
            this._isGetWxgzhReward = !0;
            let e = RewardVideoShareCount;
            return mgrPlayer.addItemAmount(Const.ITEM_ID_DIAMONDS, e, "微信公众号奖励"),
            mgrTip.addGotItemTip(Const.ITEM_ID_DIAMONDS, e),
            this.saveRecord(),
            e
        }
        static isNeedAlertWxgzh() {
            return this._isNeedAlertWxgzhReward
        }
        static onMsgWxgzhEnter(e) {
            e.bInit ? this._isGetWxgzhReward || (this._isNeedAlertWxgzhReward = !0) : this._isGetWxgzhReward || this.takeWxgzhReward()
        }
        static setUserOpenVideoRecord(e) {
            this._userOpenVideoRecord = !!e,
            this.saveRecord()
        }
        static getUserOpenVideoRecord() {
            return this._userOpenVideoRecord
        }
        static haveVideoRecord() {
            return "1" == mgrSdk.getCopByKey("b_record_video") && mgrChannel._isSupportRecordShare
        }
        static canUseVideoRecord() {
            return this.haveVideoRecord() && this._userOpenVideoRecord
        }
        static onMsgSdkShareVideoResult(e) {
            if (e.bSuccessful) {
                mgrTip.showMsgTip(`${mgrI18n.getText("mgrChannel.2")}`);
                let e = this.getRecordRewardAmount();
                mgrPlayer.getItemAmount(Const.ITEM_ID_VIDEO_SHARE_COUNT) > 0 && (mgrPlayer.addItemAmount(Const.ITEM_ID_VIDEO_SHARE_COUNT, -1, "分享成功"),
                mgrPlayer.addItemAmount(Const.ITEM_ID_DIAMONDS, e, "分享成功"),
                mgrTip.addGotItemTipGroup([{
                    itemId: Const.ITEM_ID_DIAMONDS,
                    amount: e,
                    amountSteps: []
                }]),
                this.sendMsg("MSG_SHARE_VIDEO_SUCCESSFUL"))
            } else
                mgrTip.showMsgTip(`${mgrI18n.getText("mgrChannel.1")}`)
        }
        static isOpenPay() {
            return this._isPayEnabled
        }
        static canShare() {
            let e = 1 == mgrSdk.getCopNumberValueByKey("b_share");
            return !mgrGuide.isGuiding() && e && mgrChannel._isShareEnabled
        }
        static onMsgShareResult(e) {
            e.bSuccessful ? Timer.callLater(3, ()=>{
                mgrTip.showMsgTip(`${mgrI18n.getText("mgrChannel.2")}`);
                let e = this.getShareRewardAmount();
                mgrPlayer.getItemAmount(Const.ITEM_ID_SHARE_COUNT) > 0 && (mgrPlayer.addItemAmount(Const.ITEM_ID_SHARE_COUNT, -1, "分享成功"),
                mgrPlayer.addItemAmount(Const.ITEM_ID_DIAMONDS, e, "分享成功"),
                mgrTip.addGotItemTipGroup([{
                    itemId: Const.ITEM_ID_DIAMONDS,
                    amount: e,
                    amountSteps: []
                }]),
                this.sendMsg("MSG_SHARE_SUCCESSFUL"))
            }
            ) : mgrTip.showMsgTip(`${mgrI18n.getText("mgrChannel.1")}`)
        }
        static getInstallShortCutRewardCount() {
            return 50
        }
        static isTakedInstallShortCutReward() {
            return this.bTakedInstallShortCut
        }
        static onMsgSdkInstallShortCutResult(e) {
            let t = e.code || 0
              , a = e.msg || "";
            if (a && mgrTip.showMsgTip(a),
            !this.bTakedInstallShortCut && (1 == t || 2 == t)) {
                this.bTakedInstallShortCut = !0,
                this.saveRecord();
                let e = this.getInstallShortCutRewardCount();
                mgrPlayer.addItemAmount(Const.ITEM_ID_DIAMONDS, e, "添加到桌面快捷方式奖励"),
                mgrTip.addGotItemTip(Const.ITEM_ID_DIAMONDS, e),
                this.sendMsg("MSG_SDK_INSTALL_SHORT_CUT_SUC")
            }
        }
        static tryInviteVote() {}
        static getShareImgUrlByIndex(e) {
            return (shareImgUrl[this._channelName] || [])[e]
        }
        static getShareRewardAmount() {
            return mgrPlayer.getItemAmount(Const.ITEM_ID_SHARE_COUNT) <= 0 ? 0 : this.canShare() ? RewardShareCount : 0
        }
        static getRecordRewardAmount() {
            return mgrPlayer.getItemAmount(Const.ITEM_ID_VIDEO_SHARE_COUNT) <= 0 ? 0 : this.canUseVideoRecord() ? RewardVideoShareCount : 0
        }
        static onMsgSdkAppShareResult(e) {
            e.bSuccessful && mgrTip.showMsgTip(`${mgrI18n.getText("mgrChannel.2")}`)
        }
        static onMsgJumpOtherGameRewardResult(e) {
            let t = e.rewards;
            if (t.length && t.length >= 1) {
                let e = t[0][0]
                  , a = t[0][1];
                mgrPlayer.addItemAmount(e, a, "激励互推"),
                mgrTip.addGotItemTip(e, a)
            } else
                console.error("onMsgJumpOtherGameRewardResult no rewards:", t)
        }
        static tipInstallShortCut() {
            return !(!this._isSupportInstallShortcut || this.bTakedInstallShortCut || this.bTipedInstallShortCut) && (this.bTipedInstallShortCut = !0,
            mgrChannel.isChannelOppo() ? mgrTip.alertPrompt2("", "添加桌面,获得50钻石!", "以后", "好的", null, ()=>{
                mgrSdk.installShortcut()
            }
            ) : mgrSdk.installShortcut(),
            !0)
        }
    }
    mgrChannel._userOpenVideoRecord = !0,
    mgrChannel._isGetWxgzhReward = !1,
    mgrChannel._isNeedAlertWxgzhReward = !1,
    mgrChannel.bTakedInstallShortCut = !1,
    mgrChannel.bTipedInstallShortCut = !1,
    mgrChannel._isThirdExit = !1,
    mgrChannel._isAbout = !1,
    mgrChannel._isMoreGame = !1,
    mgrChannel._isULMoreGame = !1,
    mgrChannel._isPayEnabled = !1,
    mgrChannel._isShareEnabled = !1,
    mgrChannel._isUseSdkRank = !1,
    mgrChannel._channelName = ChannelName.debug,
    mgrChannel._isShowUrlAdIcon = !1,
    mgrChannel._isSupportRecordShare = !1,
    mgrChannel._isSupportClipboardData = !1,
    mgrChannel._isSupportInstallShortcut = !1,
    mgrChannel.interPushConfig = [],
    mgrChannel._isSupportFindMinigames = !1,
    mgrChannel._isSupportRecommendationBtn = !1,
    mgrChannel._isJumpLeisureEnabled = !1;
    class mgrSdk extends Manager {
        static registerCmdCallback(e, t) {
            this.cmdCallbacks[e] = t
        }
        static unregisterCmdCallback(e) {
            this.cmdCallbacks[e] = null
        }
        static dispatchCmd(e, t) {
            let a = this.cmdCallbacks[e];
            a ? a(t) : console.warn(`mgrSdk: dispatchCmd: ${e},can't find callback!`)
        }
        static registerAllCmds() {
            this.registerCmdCallback("/c/channelInfoResult", this.sdkback_channelInfoResult.bind(this)),
            this.registerCmdCallback("/c/payResult", this.sdkback_payResult.bind(this)),
            this.registerCmdCallback("/c/prePayResult", this.sdkback_prePayResult.bind(this)),
            this.registerCmdCallback("/c/shareResult", this.sdkback_shareResult.bind(this)),
            this.registerCmdCallback("/c/lifeCycle", this.sdkback_lifeCycle.bind(this)),
            this.registerCmdCallback("/c/copInfoResult", this.sdkback_copInfoResult.bind(this)),
            this.registerCmdCallback("/c/megadataServer", this.sdkback_megadataServer.bind(this)),
            this.registerCmdCallback("/c/useCdkey", this.sdkback_useCdkey.bind(this)),
            this.registerCmdCallback("/c/openAdvResult", this.sdkback_openAdvResult.bind(this)),
            this.registerCmdCallback("/c/openNativeAdvResult", this.sdkback_openNativeAdvResult.bind(this)),
            this.registerCmdCallback("/c/clickNativeAdvResult", this.sdkback_clickNativeAdvResult.bind(this)),
            this.registerCmdCallback("/c/clickAdvResult", this.sdkback_clickAdvResult.bind(this)),
            this.registerCmdCallback("/c/closeAdvResult", this.sdkback_closeAdvResult.bind(this)),
            this.registerCmdCallback("/c/closeNativeAdvResult", this.sdkback_closeNativeAdvResult.bind(this)),
            this.registerCmdCallback("/c/userLoginResult", this.sdkback_userLoginResult.bind(this)),
            this.registerCmdCallback("/c/userLoginReportResult", this.sdkback_userLoginReportResult.bind(this)),
            this.registerCmdCallback("/c/userIsLoginResult", this.sdkback_userIsLoginResult.bind(this)),
            this.registerCmdCallback("/c/loginOutResult", this.sdkback_loginOutResult.bind(this)),
            this.registerCmdCallback("/c/advValidCountResult", this.sdkback_advValidCountResult.bind(this)),
            this.registerCmdCallback("/c/saveRankDataResult", this.sdkback_saveRankDataResult.bind(this)),
            this.registerCmdCallback("/c/getRankDataResult", this.sdkback_getRankDataResult.bind(this)),
            this.registerCmdCallback("/c/recorderGameVideoResult", this.sdkback_recorderGameVideoResult.bind(this)),
            this.registerCmdCallback("/c/shareGameVideoResult", this.sdkback_shareGameVideoResult.bind(this)),
            this.registerCmdCallback("/c/jumpOtherGameResult", this.sdkback_jumpOtherGameResult.bind(this)),
            this.registerCmdCallback("/c/extraBonus", this.sdkback_extraBonus.bind(this)),
            this.registerCmdCallback("/c/openRecommendationResult", this.sdkback_openRecommendationResult.bind(this)),
            this.registerCmdCallback("/c/closeRecommendationResult", this.sdkback_closeRecommendationResult.bind(this)),
            this.registerCmdCallback("/c/saveUserDataResult", this.sdkback_saveUserDataResult.bind(this)),
            this.registerCmdCallback("/c/getUserDataResult", this.sdkback_getUserDataResult.bind(this)),
            this.registerCmdCallback("/c/addGameToMyFavoriteResult", this.sdkback_addGameToMyFavoriteResult.bind(this)),
            this.registerCmdCallback("/c/getUserInfoMsgResult", this.sdkback_getUserInfoMsgResult.bind(this)),
            this.registerCmdCallback("/c/appShareResult", this.sdkback_appShareResult.bind(this)),
            this.registerCmdCallback("/c/installShortcutResult", this.sdkback_installShortcutResult.bind(this)),
            this.registerCmdCallback("/c/setClipboardDataResult", this.sdkback_setClipboardDataResult.bind(this)),
            this.registerCmdCallback("/c/getClipboardDataResult", this.sdkback_getClipboardDataResult.bind(this)),
            this.registerCmdCallback("/c/pauseSound", this.sdkback_pauseSound.bind(this)),
            this.registerCmdCallback("/c/resumeSound", this.sdkback_resumeSound.bind(this)),
            this.registerCmdCallback("/c/openJumpResult", this.sdkback_openJumpResult.bind(this)),
            this.registerCmdCallback("/c/jumpOtherGameRewardResult", this.sdkback_jumpOtherGameRewardResult.bind(this))
        }
        static onLoad() {
            super.onLoad(),
            this.registerAllCmds(),
            this.registerListeners({
                MSG_NATIVE_CALLBACK: this.onMsgNativeCallback,
                MSG_SDK_LIFE_CYCLE: this.onMsgSdkLifeCycle
            }),
            this.registerKeyboardListener()
        }
        static onLoadingComplete() {
            this.setVersion(2)
        }
        static getCopNumberValueByKey(e) {
            return mgrCop.getNumberValue(e)
        }
        static getCopByKey(e) {
            return mgrCop.get(e)
        }
        static registerKeyboardListener() {
            window.conch && window.conch.setOnBackPressedFunction(()=>{
                this.onClickBack()
            }
            )
        }
        static onMsgSdkLifeCycle(e) {
            if ("onBackPressed" == e.lifeCycle) {
                if (mgrNative._temp_isH5())
                    return;
                this.onClickBack()
            }
        }
        static onClickBack() {
            if (mgrChannel._isThirdExit)
                return void this.thirdExitGame();
            if (this.__back_prompt_dialog)
                return this.__back_prompt_dialog.closeDialog(),
                void (this.__back_prompt_dialog = null);
            let e = mgrTip.alertPrompt2(`${mgrI18n.getText("mgrSdk.2")}`, `${mgrI18n.getText("mgrSdk.4")}`, `${mgrI18n.getText("mgrSdk.3")}`, `${mgrI18n.getText("mgrSdk.5")}`, ()=>{
                this.__back_prompt_dialog && (this.__back_prompt_dialog.closeDialog(),
                this.__back_prompt_dialog = null)
            }
            , ()=>{
                window.conch.exit()
            }
            );
            this.__back_prompt_dialog = e
        }
        static sendMsgToSdk(e) {
            (this.bInit || "/c/setVersion" == e.cmd) && (e = this.parseRequestToUlsdk5(e),
            mgrNative.callNative("sendMsgToSdk", e))
        }
        static onMsgNativeCallback(e) {
            let t = this.parseResponseToUlsdk6(e.responseData)
              , a = t.cmd
              , i = t.data || {};
            console.log("mgrSdk.onMsgNativeCallback", a, i),
            this.dispatchCmd(a, i)
        }
        static sdkback_channelInfoResult(e) {
            console.info("mgrSdk:  copInfo", e.copInfo),
            mgrCop.onReceiveSdkCop(e.copInfo),
            ul.dump(e.copInfo),
            mgrChannel._cardType = e.cardType,
            mgrChannel._isThirdExit = e.isThirdExit,
            mgrChannel._isAbout = e.isAbout,
            mgrChannel._isMoreGame = e.isMoreGame,
            mgrChannel._isULMoreGame = e.isULMoreGame,
            mgrChannel._isShowUrlAdIcon = e.isShowUrlAdIcon,
            null == e.isPayEnabled ? mgrChannel._isPayEnabled = !0 : mgrChannel._isPayEnabled = e.isPayEnabled,
            mgrChannel._isShareEnabled = e.isShareEnabled,
            mgrChannel._isUseSdkRank = e.isUseSdkRank,
            mgrChannel._isSupportRecordShare = e.isSupportRecordShare,
            mgrChannel._isSupportClipboardData = e.isSupportClipboardData,
            mgrChannel._isSupportInstallShortcut = e.isSupportInstallShortcut,
            mgrChannel._isSupportFindMinigames = e.isSupportFindMinigames,
            mgrChannel._isSupportRecommendationBtn = e.isSupportRecommendationBtn,
            mgrChannel._isJumpLeisureEnabled = e.isJumpLeisureEnabled,
            mgrChannel.setInterPushConfig(e.jumpInfo || []),
            mgrShop.setSdkPayInfo(e.payInfo),
            mgrPlayer.setUid(e.uuid),
            Const.sdcardPath = e.sdcardPath,
            Const.packageVersion = e.packageVersion,
            Const.copChannelId = e.copChannelId,
            Const.ulsdkVersion = e.ulsdkVersion,
            Const.cdkChannelId = e.cdkChannelId,
            mgrChannel.setChannelName(e.appName),
            mgrI18n.setSdkLanguage(e.gameLanguage),
            this.bInit = !0,
            this.sendMsg("MSG_SDK_CHANNEL_INFO_RESULT")
        }
        static sdkback_payResult(e) {
            let t = e.code
              , a = e.msg
              , i = e.payId
              , s = e.userData
              , o = 1 == t;
            mgrTip.closeWaitingDialog(),
            this.sendMsg("MSG_SDK_PAY_RESULT", {
                payId: i,
                userData: s,
                code: t,
                msg: a,
                bSuccessful: o
            })
        }
        static sdkback_prePayResult(e) {
            let t = e.code
              , a = e.msg
              , i = e.payId
              , s = e.userData
              , o = 1 == t;
            this.sendMsg("MSG_SDK_PRE_PAY_RESULT", {
                code: t,
                msg: a,
                payId: i,
                userData: s,
                bSuccessful: o
            })
        }
        static sdkback_shareResult(e) {
            let t = e.code
              , a = e.msg
              , i = 1 == t;
            this.sendMsg("MSG_SDK_SHARE_RESULT", {
                bSuccessful: i,
                code: t,
                msg: a
            })
        }
        static sdkback_lifeCycle(e) {
            let t = e.lifeCycle || "";
            this.sendMsg("MSG_SDK_LIFE_CYCLE", {
                lifeCycle: t
            }),
            "onPause" == t || "onStop" == t ? mgrSound.pauseSound("lifeCycle") : "onResume" == t && mgrSound.resumeSound("lifeCycle")
        }
        static sdkback_copInfoResult(e) {
            let t = e.copInfo;
            mgrCop.onReceiveSdkCop(t)
        }
        static sdkback_megadataServer(e) {
            let t = e.code;
            e.message;
            0 == t ? console.log("大数据统计: 失败") : 1 == t && console.log("大数据统计: 成功")
        }
        static sdkback_useCdkey(e) {
            let t = e.code
              , a = e.data || [];
            e.message;
            if (mgrTip.closeWaitingDialog(),
            1 == t) {
                let e = [];
                for (let t = 0; t < a.length; t++) {
                    const i = a[t];
                    let s = i.goodsid
                      , o = i.count;
                    mgrPlayer.addItemAmount(s, o, "cdk"),
                    e.push({
                        itemId: s,
                        amount: o
                    })
                }
                this.sendMsg("MSG_SDK_USE_CDK_SUCCESSFUL", {
                    items: e
                })
            }
        }
        static sdkback_openAdvResult(e) {
            this.sendMsg("MSG_SDK_OPEN_ADV_RESULT", e)
        }
        static sdkback_openNativeAdvResult(e) {
            this.sendMsg("MSG_SDK_OPEN_NATIVE_ADV_RESULT", e)
        }
        static sdkback_clickNativeAdvResult(e) {
            this.sendMsg("MSG_SDK_CLICK_NATIVE_ADV_RESULT", e)
        }
        static sdkback_clickAdvResult(e) {
            this.sendMsg("MSG_SDK_CLICK_ADV_RESULT", e)
        }
        static sdkback_closeAdvResult(e) {
            this.sendMsg("MSG_SDK_ADV_CLOSE_RESULT", e)
        }
        static sdkback_closeNativeAdvResult(e) {
            this.sendMsg("MSG_SDK_CLOSE_NATIVE_ADV_RESULT", e)
        }
        static sdkback_userLoginResult(e) {
            let t = e.code
              , a = e.userData
              , i = 1 == t;
            this.sendMsg("MSG_SDK_USER_LOGIN_RESULT", {
                bSuccessful: i,
                userData: a,
                code: t
            })
        }
        static sdkback_userLoginReportResult(e) {
            let t = e.code
              , a = e.userData
              , i = 1 == t;
            this.sendMsg("MSG_SDK_USER_LOGIN_REPORT_RESULT", {
                bSuccessful: i,
                userData: a,
                code: t
            })
        }
        static sdkback_userIsLoginResult(e) {
            let t = !1;
            1 == e.code ? (console.log("登录查询: 已登录"),
            t = !0) : (console.log("登录查询: 未登录"),
            t = !1),
            this.sendMsg("MSG_SDK_USER_IS_LOGIN_RESULT", {
                bLogin: t
            })
        }
        static sdkback_loginOutResult(e) {
            let t = e.code
              , a = !1;
            1 == t ? (console.log("登出成功"),
            a = !0) : 0 == t && (console.log("登出失败"),
            a = !1),
            this.sendMsg("MSG_SDK_USER_LOGIN_OUT_RESULT", {
                bSuccessful: a
            })
        }
        static sdkback_advValidCountResult(e) {
            this.sendMsg("MSG_SDK_ADV_VALID_COUNT", e)
        }
        static sdkback_saveRankDataResult(e) {
            let t = e.code
              , a = e.msg
              , i = !1;
            1 == t ? (i = !0,
            console.log("上传排行榜数据成功")) : (i = !1,
            console.log("上传排行榜数据失败")),
            this.sendMsg("MSG_SDK_SAVE_RANK_DATA_RESUTL", {
                bSuccessful: i,
                msg: a
            })
        }
        static sdkback_getRankDataResult(e) {
            let t = !1;
            1 == e.code ? (console.log("获取排行榜数据成功!"),
            t = !0) : (console.log("获取排行榜数据失败!"),
            t = !1),
            this.sendMsg("MSG_SDK_GET_RANK_DATA_RESULT", {
                bSuccessful: t
            })
        }
        static sdkback_recorderGameVideoResult(e) {
            let t = e.code
              , a = !1
              , i = e.msg
              , s = e.action;
            1 == t ? (a = !0,
            console.log(`视频录制动作成功:${s}`)) : (console.log(`视频录制动作失败:${s}`),
            a = !1),
            this.sendMsg("MSG_SDK_RECORD_GAME_VIDEO_RESULT", {
                bSuccessful: a,
                msg: i,
                action: s
            })
        }
        static sdkback_shareGameVideoResult(e) {
            let t = e.code
              , a = e.msg
              , i = e.userData
              , s = !1;
            1 == t ? (console.log("录屏分享成功!"),
            s = !0) : console.log("录屏分享失败!"),
            this.sendMsg("MSG_SDK_SHARE_VIDEO_RESULT", {
                msg: a,
                userData: i,
                bSuccessful: s
            })
        }
        static sdkback_jumpOtherGameResult(e) {
            let t = e.code
              , a = e.msg
              , i = e.userData
              , s = !1;
            1 == t ? (console.log("跳转其他游戏成功!"),
            s = !0) : console.log("跳转其他游戏失败!"),
            this.sendMsg("MSG_SDK_JUMP_OTHER_GAME_RESULT", {
                bSuccessful: s,
                msg: a,
                userData: i
            })
        }
        static sdkback_jumpOtherGameRewardResult(e) {
            1 == e.code ? (console.log("sdkback_jumpOtherGameRewardResult"),
            this.sendMsg("MSG_SDK_JUMP_OTHER_GAME_REWARD_RESULT", {
                rewards: e.rewards,
                userData: e.userData
            })) : console.error("激励互推跳转发奖失败：", e.msg)
        }
        static sdkback_openJumpResult(e) {
            1 == e.code ? (console.log("sdkback_openJumpResult:", e.type),
            this.sendMsg("MSG_ON_OPEN_JUMP_RESULT", {
                jumpInfo: e.jumpInfo,
                type: e.type
            })) : console.error("互推列表获取失败：", e.type, e.msg)
        }
        static sdkback_extraBonus(e) {
            let t = e.code
              , a = e.msg
              , i = 1 == e.isInitGame;
            this.sendMsg("MSG_SDK_WX_GZH_ENTER", {
                msg: a,
                code: t,
                bInit: i
            })
        }
        static sdkback_openRecommendationResult(e) {
            let t = e.code
              , a = e.msg
              , i = !1;
            1 == t ? (console.log("开启交叉推荐成功!"),
            i = !0) : console.log("开启交叉推荐失败!"),
            this.sendMsg("MSG_SDK_OPEN_RECOMMEND_RESULT", {
                bSuccessful: i,
                msg: a
            })
        }
        static sdkback_closeRecommendationResult(e) {
            let t = e.code
              , a = e.msg
              , i = !1;
            i = 1 == t,
            this.sendMsg("MSG_SDK_CLOSE_RECOMEND_RESULT", {
                code: t,
                bSuccessful: i,
                msg: a
            })
        }
        static sdkback_saveUserDataResult(e) {
            let t = e.code
              , a = e.msg
              , i = !1;
            i = 1 == t,
            this.sendMsg("MSG_SDK_SAVE_USER_DATA_RESULT", {
                code: t,
                bSuccessful: i,
                msg: a
            })
        }
        static sdkback_getUserDataResult(e) {
            let t = e.code
              , a = e.msg
              , i = e.userData
              , s = 1 == t;
            this.sendMsg("MSG_SDK_GET_USER_DATA_RESULT", {
                code: t,
                bSuccessful: s,
                msg: a,
                storageData: i
            })
        }
        static sdkback_addGameToMyFavoriteResult(e) {
            let t = e.code
              , a = e.userData
              , i = e.msg
              , s = 1 == t;
            this.sendMsg("MSG_SDK_ADD_GAME_TO_MY_FAVORITE_RESULT", {
                code: t,
                bSuccessful: s,
                userData: a,
                msg: i
            })
        }
        static sdkback_getUserInfoMsgResult(e) {
            let t = e.code
              , a = e.msg
              , i = 1 == t;
            this.sendMsg("MSG_SDK_GET_USER_INFO_MSG_RESULT", {
                code: t,
                bSuccessful: i,
                msg: a
            })
        }
        static sdkback_appShareResult(e) {
            let t = e.code
              , a = e.msg
              , i = 1 == t;
            this.sendMsg("MSG_SDK_APP_SHARE_RESULT", {
                code: t,
                msg: a,
                bSuccessful: i
            })
        }
        static sdkback_installShortcutResult(e) {
            let t = e.code
              , a = 1 == t
              , i = e.msg
              , s = e.userData;
            this.sendMsg("MSG_SDK_INSTALL_SHORTCUT_RESULT", {
                code: t,
                bSuccessful: a,
                msg: i,
                userData: s
            })
        }
        static sdkback_setClipboardDataResult(e) {
            let t = e.code
              , a = 1 == t
              , i = e.msg
              , s = e.clipboardData
              , o = e.userData;
            this.sendMsg("MSG_SDK_SET_CLIPBOARD_DATA_RESULT", {
                code: t,
                msg: i,
                bSuccessful: a,
                clipboardData: s,
                userData: o
            })
        }
        static sdkback_getClipboardDataResult(e) {
            let t = e.code
              , a = 1 == t
              , i = e.msg
              , s = e.clipboardData
              , o = e.userData;
            this.sendMsg("MSG_SDK_GET_CLIPBOARD_DATA_RESULT", {
                code: t,
                bSuccessful: a,
                msg: i,
                clipboardData: s,
                userData: o
            })
        }
        static sdkback_pauseSound(e) {
            mgrSound.pauseSound("sdk")
        }
        static sdkback_resumeSound(e) {
            mgrSound.resumeSound("sdk")
        }
        static setVersion(e) {
            this.sendMsgToSdk({
                cmd: "/c/setVersion",
                data: e
            })
        }
        static openMoreGame() {
            this.sendMsgToSdk({
                cmd: "/c/openMoreGame"
            })
        }
        static openULMoreGame() {
            this.sendMsgToSdk({
                cmd: "/c/openUlMoreGame"
            })
        }
        static openMoreWonderful() {
            this.sendMsgToSdk({
                cmd: "/c/jumpLeisureSubject",
                data: {}
            })
        }
        static openPay(e, t="{}") {
            mgrTip.isWaitingDialogOpened() || (mgrTip.openWaitingDialog(`${mgrI18n.getText("mgrSdk.2")}`, "支付中..."),
            this.sendMsgToSdk({
                cmd: "/c/openPay",
                data: {
                    payId: e,
                    userData: t
                }
            }))
        }
        static openShare(e, t, a, i="1", s, o="") {
            this.DEBUG && console.info("mgrSdk:openAdH5", e, t, a, s),
            this.sendMsgToSdk({
                cmd: "/c/openShare",
                data: {
                    title: e,
                    content: t,
                    url: a,
                    imagePath: s,
                    userData: o,
                    queryMsg: i
                }
            })
        }
        static callPhone(e) {
            this.sendMsgToSdk({
                cmd: "/c/callPhone",
                data: {
                    phoneNum: e
                }
            })
        }
        static ulWebView(e) {
            this.sendMsgToSdk({
                cmd: "/c/ulWebView",
                data: {
                    url: e
                }
            })
        }
        static thirdExitGame() {
            this.sendMsgToSdk({
                cmd: "/c/exitGame",
                data: {}
            })
        }
        static megadataServer(e) {
            this.sendMsgToSdk({
                cmd: "/c/megadataServer",
                data: e
            })
        }
        static useCdk(e) {
            console.log("mgrSdk useCdk cdk: ", e),
            mgrTip.isWaitingDialogOpened() ? mgrTip.showMsgTip(`${mgrI18n.getText("mgrSdk.1")}`) : (mgrTip.openWaitingDialog(`${mgrI18n.getText("mgrSdk.2")}`, `${mgrI18n.getText("mgrSdk.6")}`),
            this.sendMsgToSdk({
                cmd: "/c/useCdkey",
                data: {
                    userId: mgrPlayer.getUid(),
                    cdkStr: e,
                    channelId: 0
                }
            }))
        }
        static openAdv(e, t="{}", a) {
            this.sendMsgToSdk({
                cmd: "/c/openAdv",
                data: {
                    advId: e,
                    userData: t,
                    tag: a
                }
            })
        }
        static clickNativeAdv(e, t="{}", a) {
            this.sendMsgToSdk({
                cmd: "/c/clickNativeAdv",
                data: {
                    advId: e,
                    userData: t,
                    tag: a
                }
            })
        }
        static closeAdv(e, t="{}") {
            this.sendMsgToSdk({
                cmd: "/c/closeAdv",
                data: {
                    advId: e,
                    userData: t
                }
            })
        }
        static closeNativeAdv(e, t="{}") {
            this.sendMsgToSdk({
                cmd: "/c/closeNativeAdv",
                data: {
                    advId: e,
                    userData: t
                }
            })
        }
        static userLogin(e="{}") {
            console.log("mgrsdk userLogin"),
            mgrSdk.sendMsgToSdk({
                cmd: "/c/userLogin"
            })
        }
        static userLoginReport(e, t, a) {
            mgrSdk.sendMsgToSdk({
                cmd: "/c/userLoginReport",
                data: {
                    playerLevel: e,
                    coin: t,
                    userData: a
                }
            })
        }
        static userIsLogin() {
            mgrSdk.sendMsgToSdk({
                cmd: "/c/userIsLogin"
            })
        }
        static loginOut() {
            mgrSdk.sendMsgToSdk({
                cmd: "/c/loginOut"
            })
        }
        static saveRankData(e, t, a, i, s) {
            mgrSdk.sendMsgToSdk({
                cmd: "/c/saveRankData",
                startTime: e,
                endTime: t,
                rankName: a,
                score: i,
                order: s
            })
        }
        static getRankListSdk(e, t, a, i) {
            console.log("getRankListSdk"),
            mgrSdk.sendMsgToSdk({
                cmd: "/c/getRankData",
                data: {
                    dataNum: e,
                    rankName: t,
                    order: a,
                    rankType: i
                }
            })
        }
        static recordGameVideo(e, t=!0, a=120) {
            console.log("mgrsdk recordGameVidoe"),
            mgrSdk.sendMsgToSdk({
                cmd: "/c/recorderGameVideo",
                data: {
                    action: e,
                    isRecordVoice: t,
                    durationTime: a
                }
            })
        }
        static shareGameVideo(e="", t="", a, i="{}") {
            console.log("mgrsdk shareGameVideo"),
            mgrSdk.sendMsgToSdk({
                cmd: "/c/shareGameVideo",
                data: {
                    title: e,
                    content: t,
                    imagePath: a,
                    userData: i
                }
            })
        }
        static jumpOtherGame(e, t, a="{}") {
            console.log("mgrSdk jumpOtherGame"),
            this.sendMsgToSdk({
                cmd: "/c/jumpOtherGame",
                data: {
                    gameIndex: e,
                    type: t,
                    userData: a
                }
            })
        }
        static openJump(e, t, a=0) {
            console.log("mgrSdk openJump"),
            this.sendMsgToSdk({
                cmd: "/c/openJump",
                data: {
                    gameIndex: e,
                    type: t,
                    count: a
                }
            })
        }
        static openCrossRecommend(e, t, a=0) {
            console.log("mgrSdk openCrossRecommend"),
            this.sendMsgToSdk({
                cmd: "/c/openRecommendation",
                data: {
                    typeId: a,
                    style: {
                        left: e,
                        top: t
                    }
                }
            })
        }
        static closeCrossRecommend() {
            console.log("mgrSdk closeCrossRecommend"),
            this.sendMsgToSdk({
                cmd: "/c/closeRecommendation",
                data: null
            })
        }
        static saveServerRecord(e) {
            console.log("mgrSdk saveServerRecord"),
            this.sendMsgToSdk({
                cmd: "/c/saveUserData",
                data: {
                    userData: e
                }
            })
        }
        static getServerRecord() {
            console.log("mgrSdk getServerRecord"),
            this.sendMsgToSdk({
                cmd: "/c/getUserData",
                data: null
            })
        }
        static addGameToMyFavorite(e, t, a="{}") {
            console.log("mgrSdk addGameToMyFavorite"),
            this.sendMsgToSdk({
                cmd: "/c/addGameToMyFavorite",
                data: {
                    typeId: e,
                    content: t,
                    userData: JSON.stringify({})
                }
            })
        }
        static getUserInfoMsg() {
            this.sendMsgToSdk({
                cmd: "/c/getUserInfoMsgResult"
            })
        }
        static installShortcut(e="{}") {
            console.log("mgrSdk installShortcut"),
            this.sendMsgToSdk({
                cmd: "/c/installShortcut",
                data: {
                    userData: e
                }
            })
        }
        static setClipboardData(e, t="{}") {
            this.sendMsgToSdk({
                cmd: "/c/setClipboardData",
                data: {
                    clipboardData: e,
                    userData: t
                }
            })
        }
        static getClipboardData(e="{}") {
            this.sendMsgToSdk({
                cmd: "/c/getClipboardData",
                data: {
                    userData: e
                }
            })
        }
        static statisOnStageStart(e, t) {
            this.DEBUG && console.info("mgrSdk:statisOnStageStart(stageId)", e);
            e.toString()
        }
        static statisOnStageEnd(e, t, a, i) {
            i = Math.ceil(i),
            this.DEBUG && console.info("mgrSdk:statisOnStageEnd(stageId)", e, t, a, i);
            e.toString(),
            t.toString(),
            i.toString()
        }
        static statisOnAddItemAmount(e, t, a) {
            if (this.DEBUG && console.info("mgrSdk:statisOnAddItemAmount(itemId)", e, " amountDelta: ", t, "reason: ", a),
            1 == this.getCopNumberValueByKey("statis_coin"))
                if (t > 0) {
                    let i = ["gameCoinAdd", e.toString(), t.toString(), a];
                    this.megadataServer(i)
                } else {
                    let i = ["gameCoinLost", e.toString(), Math.abs(t).toString(), a];
                    this.megadataServer(i)
                }
            else
                console.log("统计货币cop已关闭")
        }
        static statisOnItemBought(e, t, a) {
            e.toString(),
            Math.abs(t).toString()
        }
        static statisOnBuyAction(e, t, a) {
            a.toString()
        }
        static staticPointEvent(e, t) {
            this.megadataServer(["pointEvent", (e || 0).toString(), (t || 0).toString()])
        }
        static parseRequestToUlsdk5(e) {
            return e
        }
        static parseResponseToUlsdk6(e) {
            return e
        }
        static getUlsdk6CmdByUlsdk5CmdForResponse(e) {
            return {
                "/c/channelInfoResult": "/c/channelInfoResult",
                "/c/payResult": "/c/payResult",
                "/c/prePayResult": "/c/prePayResult",
                "/cdk/useCdkey": "/c/useCdkey",
                "/adv/advShowResult": "/c/openAdvResult",
                "/d/exitGame": "/c/exitGame"
            }[e]
        }
        static getUlsdk5CmdByUlsdk6CmdForRequest(e) {
            return {
                "/c/setVersion": "setVersion",
                "/c/openPay": "/c/openPay",
                "/c/exitGame": "/d/exitGame",
                "/c/megadataServer": "/c/megadataServer",
                "/c/useCdkey": "/cdk/useCdkey",
                "/c/openAdv": "/adv/openAdv"
            }[e]
        }
        static getUlsdk5TypeStrByUlsdk6AdvId(e) {
            switch (e) {
            case ADV_ID.intert:
                return "interstitial";
            case ADV_ID.video:
                return "video";
            case ADV_ID.embed:
                return "";
            case ADV_ID.banner:
                return "banner";
            case ADV_ID.h5:
                return "urladv"
            }
            return ""
        }
    }
    mgrSdk.DEBUG = !0,
    mgrSdk.bInit = !1,
    mgrSdk.__back_prompt_dialog = null,
    mgrSdk.cmdCallbacks = {};
    const RECORD_DATA_KEY = "record_game80"
      , RECORD_VERSION_KEY = "__version__"
      , RECORD_VERSION_VALUE = 1;
    class mgrRecord extends Manager {
        static onLoad() {
            super.onLoad(),
            this._readRecord(),
            Timer.callLoop(1, this.onTimerSpan.bind(this), !0)
        }
        static onTimerSpan(e) {
            this.bNeedFlush && (this.bNeedFlush = !1,
            this._writeRecord())
        }
        static setUserId(e) {
            e ? (this.record.userId = e,
            mgrSdk.getServerRecord()) : console.log("---\x3e> userId is invaild!", e)
        }
        static onReceivedServerStorage(e) {
            if (e)
                try {
                    let t = JSON.parse(e);
                    if (!t)
                        return void console.log("---\x3e> cloud storage is damaged!");
                    t.userId = this.record.userId,
                    this.record = t,
                    this.sendMsg("MSG_RECORD_RESET")
                } catch (e) {
                    console.log(e)
                }
            else
                console.log("---\x3e> cloud storage is invaild!")
        }
        static _readRecord(e) {
            if (e || (e = Laya.LocalStorage.getItem(RECORD_DATA_KEY)),
            !e)
                return console.warn("警告] mgrRecord._readRecord 存档未找到！重置存档！"),
                void this.resetRecord();
            let t = JSON.parse(e);
            return t ? t[RECORD_VERSION_KEY] != RECORD_VERSION_VALUE ? (console.warn("警告] mgrRecord._readRecord 存档版本改变！重置存档！"),
            void this.resetRecord()) : void (this.record = t) : (console.warn("警告] mgrRecord._readRecord 存档数据损坏！重置存档！"),
            void this.resetRecord())
        }
        static _writeRecord() {
            let e = JSON.stringify(this.record);
            Laya.LocalStorage.setItem(RECORD_DATA_KEY, e)
        }
        static _requestFlush() {
            this._bDebugBanWrite || (this.bNeedFlush = !0)
        }
        static _setDebugBanWrite(e) {
            this._bDebugBanWrite = e
        }
        static getData(e) {
            return this.record[e]
        }
        static setData(e, t) {
            this.record[e] = t,
            this._requestFlush()
        }
        static resetRecord() {
            this.record = {},
            this.record[RECORD_VERSION_KEY] = RECORD_VERSION_VALUE,
            this._requestFlush(),
            this.sendMsg("MSG_RECORD_RESET")
        }
    }
    mgrRecord.record = {},
    mgrRecord.bNeedFlush = !1,
    mgrRecord._bDebugBanWrite = !1;
    const SOUND_TYPE_MUSIC = 1
      , SOUND_TYPE_EFFECT = 2;
    class mgrSound extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            Laya.SoundManager.autoStopMusic = !0
        }
        static loadRecord() {
            super.loadRecord();
            let e, t = mgrRecord.getData("sound") || {};
            if (this.musicVolume = null != t.musicVolume ? t.musicVolume : 1,
            this.effectVolume = null != t.effectVolume ? t.effectVolume : 1,
            window && window.wx && window.wx.onShow && window.wx.onHide && (e = window.wx),
            window && window.swan && window.swan.onShow && window.swan.onHide && (e = window.swan),
            window.loadRuntime) {
                let t = window.loadRuntime();
                e = e || t
            }
            e && (console.log("=== 注册窗口消息, mgrsound ===="),
            e.onShow(()=>{
                Laya.SoundManager.musicMuted = !0,
                Timer.callLater(.1, ()=>{
                    Laya.SoundManager.musicMuted = !1
                }
                )
            }
            ),
            e.onHide(()=>{}
            )),
            this.setMusicVomue(this.musicVolume, !0),
            this.setEffectVolume(this.effectVolume, !0)
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                musicVolume: this.musicVolume,
                effectVolume: this.effectVolume
            };
            mgrRecord.setData("sound", e)
        }
        static play(e, t=!1) {
            console.log(`mgrSound.play: ${e}`);
            let a = mgrCfg.get_from_sound_db(e);
            if (!a)
                return;
            let i = a.type
              , s = this.getUrl(e);
            if (i == SOUND_TYPE_MUSIC) {
                if (e == this.playingMusicSoundId)
                    return;
                this.playingMusicSoundId = e;
                let t = ()=>{
                    console.log(`开始播放音乐:${s}`),
                    Laya.SoundManager.playMusic(s, 0),
                    !Laya.SoundManager.musicMuted && (this.bPlayedMusic = !0)
                }
                ;
                window.document && window.document.__custom_web_platform_tag__ && !window.conch ? mgrLoader.Load2dRes(s, Laya.Loader.SOUND, this, e=>{
                    t()
                }
                ) : t()
            } else {
                if (Tools.time() - this.effectPlayStartTime < this.effectCd)
                    return;
                if (this.effectPlayStartTime = Tools.time(),
                this.bLoadingEffect)
                    return;
                let e = ()=>{
                    this.bLoadingEffect = !1,
                    Laya.SoundManager.playSound(s, t ? 0 : 1)
                }
                ;
                window.document && window.document.__custom_web_platform_tag__ && !window.conch ? (this.bLoadingEffect = !0,
                mgrLoader.Load2dRes(s, Laya.Loader.SOUND, this, t=>{
                    e()
                }
                )) : e()
            }
        }
        static getUrl(e) {
            let t = mgrCfg.get_from_sound_db(e);
            if (!t)
                return "";
            let a = t.fileName
              , i = t.type;
            return a = window.conch ? i == SOUND_TYPE_MUSIC ? a.replace(".ogg", ".mp3") : a.replace(".mp3", ".ogg") : a.replace(".ogg", ".mp3")
        }
        static stopAll() {
            this.playingMusicSoundId = null,
            Laya.SoundManager.stopAll()
        }
        static stopBgm() {
            Laya.SoundManager.stopMusic()
        }
        static stopSound(e) {
            Laya.SoundManager.stopSound(this.getUrl(e))
        }
        static stopSoundAll() {
            Laya.SoundManager.stopAllSound()
        }
        static pauseSound(e) {
            this.pauseMusic(e),
            this.pauseEffect(e)
        }
        static resumeSound(e) {
            this.resumeMusic(e),
            this.resumeEffect(e)
        }
        static pauseEffect(e) {
            console.info(`暂停音效:${e}`);
            let t = this.pauseEffectRouters.length > 0;
            -1 == this.pauseEffectRouters.indexOf(e) && this.pauseEffectRouters.push(e),
            t || this.setEffectVolume(0)
        }
        static resumeEffect(e) {
            console.info(`恢复音效:${e}`);
            let t = this.pauseEffectRouters.indexOf(e);
            t >= 0 && this.pauseEffectRouters.splice(t, 1),
            this.pauseEffectRouters.length > 0 || this.setEffectVolume(1)
        }
        static pauseMusic(e) {
            console.info(`暂停背景音:${e}`);
            let t = this.pauseMusicRouters.length > 0;
            -1 == this.pauseMusicRouters.indexOf(e) && this.pauseMusicRouters.push(e),
            t || this.setMusicVomue(0)
        }
        static resumeMusic(e) {
            console.info(`恢复背景音:${e}`);
            let t = this.pauseMusicRouters.indexOf(e);
            t >= 0 && this.pauseMusicRouters.splice(t, 1),
            this.pauseMusicRouters.length > 0 || this.setMusicVomue(1)
        }
        static getMusicVolmue() {
            return this.musicVolume
        }
        static setMusicVomue(e, t) {
            if (this.musicVolume = e,
            0 == e ? Laya.SoundManager.setMusicVolume(1e-4) : Laya.SoundManager.setMusicVolume(e),
            window.swan || window.__b_jkw_platform__)
                if (0 == e)
                    Laya.SoundManager.musicMuted = !0;
                else if (Laya.SoundManager.musicMuted = !1,
                !this.bPlayedMusic) {
                    let e = this.playingMusicSoundId;
                    this.playingMusicSoundId = null,
                    this.play(e)
                }
            this.saveRecord()
        }
        static getEffectVolume() {
            return this.effectVolume
        }
        static setEffectVolume(e, t) {
            this.effectVolume = e,
            0 == e ? (Laya.SoundManager.setSoundVolume(.001),
            Laya.SoundManager.soundMuted = !0) : (Laya.SoundManager.setSoundVolume(e),
            Laya.SoundManager.soundMuted = !1),
            this.saveRecord()
        }
    }
    mgrSound.playingMusicSoundId = null,
    mgrSound.musicVolume = 1,
    mgrSound.effectVolume = 1,
    mgrSound.effectCd = .1,
    mgrSound.effectPlayStartTime = 0,
    mgrSound.pauseMusicRouters = [],
    mgrSound.pauseEffectRouters = [],
    mgrSound.bPlayedMusic = !1;
    class SceneBase extends ViewBase {
    }
    SceneBase.showingSceneName = null;
    class mgrSign extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord()
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("sign") || {};
            this.signedDay = e.signedDay || 0,
            this.signedIndex = e.signedIndex || 0,
            this.lastSignTime = e.lastSignTime || 0
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                signedDay: this.signedDay,
                signedIndex: this.signedIndex,
                lastSignTime: this.lastSignTime
            };
            mgrRecord.setData("sign", e)
        }
        static getState() {
            if (Tools.isOneDay(Tools.time(), this.lastSignTime)) {
                let e = this.getSignDay()
                  , t = this.getSignIndex()
                  , a = (mgrCfg.get("sign_db", e) || [])[t];
                return a ? this.lastSignTime + a.rewardGap <= Tools.time() ? SignState.canSign : SignState.waitGap : SignState.signed
            }
            {
                let e = this.getSignDay();
                return mgrCfg.quietGet("sign_db", e, 0) ? SignState.canSign : SignState.signOver
            }
        }
        static getSignDay() {
            if (Tools.isOneDay(Tools.time(), this.lastSignTime))
                return this.signedDay;
            {
                let e = this.signedDay + 1;
                return e > 14 && (e = 8),
                e
            }
        }
        static getSignIndex() {
            return Tools.isOneDay(Tools.time(), this.lastSignTime) ? this.signedIndex : 0
        }
        static getSignedDayCount() {
            return this.signedDay
        }
        static sign(e=!0) {
            let t = {
                bSuccessd: !1
            };
            if (this.getState() != SignState.canSign)
                return t;
            let a = this.getSignDay()
              , i = this.getSignIndex()
              , s = mgrCfg.get_from_sign_db(a, i);
            this.lastSignTime = Tools.time(),
            this.signedDay = a,
            this.signedIndex = i + 1,
            this.saveRecord();
            let o = []
              , n = [];
            for (let t = 0; t < s.rewardItemId.length; t++) {
                let a = s.rewardItemId[t]
                  , i = s.rewardAmount[t];
                mgrCfg.get_from_part_db(a) ? (o.push(a),
                n.push(i),
                mgrPlayer.addItemAmount(a, i, "签到"),
                mgrTip.addGotItemTip(a, i)) : (e && s.rewardItemId.length,
                o.push(a),
                n.push(i),
                mgrPlayer.addItemAmount(a, i, "签到"),
                mgrTip.addGotItemTip(a, i))
            }
            return t.bSuccessd = !0,
            t.rewardItemId = o,
            t.rewardAmount = n,
            t
        }
        static getRemainTime() {
            if (this.getState() != SignState.waitGap)
                return 0;
            let e = this.getSignDay()
              , t = this.getSignIndex()
              , a = (mgrCfg.get("sign_db", e) || [])[t];
            if (!a)
                return 0;
            let i = this.lastSignTime + a.rewardGap;
            return Math.max(0, i - Tools.time())
        }
        static getBadgeCout() {
            return mgrSign.getState() == SignState.canSign ? 1 : 0
        }
        static getAllRewardParts() {
            let e = [];
            return mgrCfg.forDb("sign_db", (t,a)=>{
                for (let t = 0; t < a.length; t++) {
                    let i = a[t].rewardItemId
                      , s = mgrCfg.get_from_item_template_db(i);
                    s && s.flag == Const.ITEM_FLAG_PART && e.push(i)
                }
            }
            ),
            e
        }
    }
    mgrSign.signedDay = null,
    mgrSign.signedIndex = null,
    mgrSign.lastSignTime = null;
    class mgrWishPool extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            this.init()
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("wish_pool") || {};
            this.dailyWishCount = e.dailyWishCount || {
                1: 0,
                2: 0
            },
            this.lastWishTime = e.lastWishTime || {
                1: 0,
                2: 0
            }
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                dailyWishCount: this.dailyWishCount,
                lastWishTime: this.lastWishTime
            };
            mgrRecord.setData("wish_pool", e)
        }
        static init() {
            for (const e in this.lastWishTime)
                Tools.isOneDay(this.lastWishTime[e], Tools.time()) || (this.lastWishTime[e] = Tools.time(),
                this.dailyWishCount[e] = 0)
        }
        static getFreeWishCount(e) {
            return [this.dailyWishCount[e], this.dailyFreeCount[e]]
        }
        static wish(e, t=!1) {
            if (!t && this.dailyFreeCount[e] <= this.dailyWishCount[e])
                return null;
            let a = [];
            for (let t = 1; t <= 20; t++) {
                let i = mgrCfg.get_from_wish_pool_db(e, t - 1);
                if (!i)
                    break;
                i.ratio = i.widget,
                a.push(i)
            }
            let i = Tools.RoundTableProbability(a, "ratio")
              , s = {
                itemId: 0,
                amount: 0
            };
            return s.itemId = i.partId,
            s.amount = 1,
            this.dailyWishCount[e]++,
            mgrPlayer.addItemAmount(s.itemId, s.amount, "许愿"),
            mgrTip.addGotItemTip(s.itemId, s.amount, null, null),
            this.saveRecord(),
            this.sendMsg("MSG_WISH"),
            s
        }
        static getBadegCount() {
            for (let e = 1; e <= 2; e++) {
                let[t,a] = this.getFreeWishCount(e);
                if (a > t) {
                    for (let e = 1; e <= 20; e++) {
                        let t = mgrCfg.get_from_wish_pool_db(1, e - 1);
                        if (!t)
                            break;
                        if (0 == mgrPlayer.getItemAmount(t.partId))
                            return 1
                    }
                    return 0
                }
                return 0
            }
        }
        static exchange(e) {
            mgrPlayer.getItemAmount(Const.ITEM_ID_WISHPOOL_EXCHANGE) < e.buyConsumeItemAmount ? mgrTip.showMsgTip(`${mgrI18n.getText("mgrWishPool.1")}`) : (mgrPlayer.addItemAmount(Const.ITEM_ID_WISHPOOL_EXCHANGE, -e.buyConsumeItemAmount, "许愿兑换"),
            mgrPlayer.addItemAmount(e.partId, 1, "许愿兑换"),
            mgrTip.addGotItemTip(e.partId, 1))
        }
    }
    mgrWishPool.dailyFreeCount = {
        1: 1,
        2: 1
    };
    class mgrOfflinePvp extends Manager {
        static onLoad() {
            this.setRandomDataCreator(()=>{
                let e = mgrPart._debugFillRandom();
                return [e, mgrPart.calcWeight(e)]
            }
            ),
            this.loadRecord(),
            this.tryUpdateRank(),
            Timer.callLoop(60, ()=>{
                this.tryUpdateRank()
            }
            , this),
            super.onLoad(),
            this.registerListeners({
                MSG_I18N_REFRESH: this.onMsgI18nRefresh.bind(this)
            })
        }
        static loadRecord() {
            let e = mgrRecord.getData("offline_pvp") || {};
            this.pvpDatas = e.pvpDatas || [],
            this.bInit = e.bInit || !1,
            this.totalLikeCount = e.totalLikeCount || 0,
            this.randomNameLanguage = e.randomNameLanguage,
            null == this.randomNameLanguage && (this.randomNameLanguage = mgrI18n.getLanguage()),
            console.log("mgrOfflinePvp.loadRecord"),
            console.log("  pvpDatas", this.pvpDatas)
        }
        static saveRecord() {
            let e = {
                pvpDatas: this.pvpDatas,
                randomNameLanguage: this.randomNameLanguage,
                bInit: this.bInit,
                totalLikeCount: this.totalLikeCount
            };
            mgrRecord.setData("offline_pvp", e),
            console.log("mgrOfflinePvp.saveRecord"),
            console.log("  record", e)
        }
        static getPlayerData() {
            let e = mgrPlayer.getUid();
            for (let t = 0; t < this.pvpDatas.length; t++) {
                const a = this.pvpDatas[t];
                if (a.uid == e)
                    return a.rank = t + 1,
                    a
            }
            return null
        }
        static getPvpDatas() {
            for (let e = 0; e < this.pvpDatas.length; e++) {
                this.pvpDatas[e].rank = e + 1
            }
            let e = ul.clone(this.pvpDatas);
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                a.data = this.randomMatchHavedParts(a.data)
            }
            return e
        }
        static randomMatchHavedParts(e) {
            let t = {
                [PartType.cloth]: 1,
                [PartType.hair]: 2,
                [PartType.wing]: 3,
                [PartType.face]: 4,
                [PartType.sock]: 5,
                [PartType.headDec]: 6,
                [PartType.handDec]: 7,
                [PartType.shoe]: 8
            };
            e = (e = e.sort((e,t)=>e < t ? -1 : e > t ? 1 : 0)).sort((e,a)=>{
                let i = mgrCfg.get_from_part_db(e)
                  , s = mgrCfg.get_from_part_db(a)
                  , o = t[i.type]
                  , n = t[s.type];
                return o < n ? -1 : o > n ? 1 : 0
            }
            );
            let a = []
              , i = mgrPart.getAllLoadedPartIds()
              , s = !1;
            for (let t = 0; t < e.length; t++) {
                const o = e[t];
                let n = mgrCfg.get_from_part_db(o);
                if (i[n.type].hash[n.id])
                    a.push(o);
                else if (s) {
                    let e = i[n.type].array
                      , t = e[Tools.random(e.length) - 1];
                    t && a.push(t)
                } else
                    a.push(o),
                    s = !0
            }
            return a
        }
        static getPvpDataByUid(e) {
            for (let t = 0; t < this.pvpDatas.length; t++) {
                const a = this.pvpDatas[t];
                if (a.uid == e)
                    return a
            }
        }
        static getPkList() {
            let e = this.getPvpDatas()
              , t = [];
            return t.push(e.splice(Tools.random(e.length) - 1, 1)[0]),
            t.push(e.splice(Tools.random(e.length) - 1, 1)[0]),
            t
        }
        static like(e) {
            for (let t = 0; t < this.pvpDatas.length; t++) {
                const a = this.pvpDatas[t];
                a.uid == e && a.score++
            }
            this.pvpDatas = Tools.sortArrayByField(this.pvpDatas, "-score"),
            mgrPlayer.addItemAmount(Const.ITEM_ID_PVP_REWARD_CURR_NUM, 1, ""),
            this.addLikeCount(-1),
            this.totalLikeCount++,
            mgrGuide.isGuiding() || this.totalLikeCount % 3 != 0 || Timer.callLater(2, ()=>{
                mgrDirector.openDialog("vPvpLikeRewardDialog")
            }
            ),
            this.saveRecord(),
            this.sendMsg("MSG_LIKE")
        }
        static noLike(e) {
            mgrPlayer.addItemAmount(Const.ITEM_ID_PVP_REWARD_CURR_NUM, 1, ""),
            this.addLikeCount(-1)
        }
        static resetRewardCount() {
            let[e,t] = mgrOfflinePvp.getRewardCount();
            mgrPlayer._setItemAmount(Const.ITEM_ID_PVP_REWARD_CURR_NUM, e - t),
            this.saveRecord()
        }
        static reduceRewardCount(e) {
            mgrPlayer.addItemAmount(Const.ITEM_ID_PVP_REWARD_CURR_NUM, -e, ""),
            this.saveRecord()
        }
        static onChoosedHandler() {
            this.addLikeCount(-1),
            mgrPlayer.addItemAmount(Const.ITEM_ID_PVP_REWARD_CURR_NUM, 1, ""),
            this.saveRecord()
        }
        static getRewardCount() {
            return [mgrPlayer.getItemAmount(Const.ITEM_ID_PVP_REWARD_CURR_NUM), 15]
        }
        static updatePlayerUid(e, t) {
            let a = this.pvpDatas || [];
            for (let t = a.length - 1; t >= 0; t--) {
                let i = a[t];
                i.uid == e && i.uid
            }
            this.saveRecord()
        }
        static replacePlayerData(e, t) {
            let a = mgrPlayer.getUid()
              , i = mgrPlayer.getName()
              , s = 0
              , o = this.pvpDatas;
            for (let e = o.length - 1; e >= 0; e--) {
                let t = o[e];
                if (t && t.uid == a) {
                    s = t.score || 0,
                    o.splice(e, 1);
                    break
                }
            }
            o.push({
                uid: a,
                name: i,
                data: e,
                weight: t,
                score: s,
                rank: 0
            }),
            this.pvpDatas = Tools.sortArrayByField(o, "-score"),
            this.saveRecord(),
            mgrTip.showMsgTip(`${mgrI18n.getText("mgrOfflinePvp.1")}`),
            mgrSdk.staticPointEvent(6e3)
        }
        static buildRemainTimeStr(e) {
            let t = e - Tools.time();
            if (t <= 0)
                return `${mgrI18n.getText("mgrOfflinePvp.2")}`;
            let a = Math.floor(t / 24 / 60 / 60);
            if (a <= 0) {
                let e = Math.floor(t / 60 / 60);
                return e <= 0 ? `${mgrI18n.getText("mgrOfflinePvp.2")}` : ul.format(`${mgrI18n.getText("mgrOfflinePvp.4")}`, e)
            }
            {
                let e = Math.floor((t - 24 * a * 60 * 60) / 60 / 60);
                return ul.format(`${mgrI18n.getText("mgrOfflinePvp.3")}`, a, e)
            }
        }
        static getBadgeCount() {
            let[e,t] = this.getLikeCount() || [0, 1];
            return e + (this.getAdLikeCount() || 0)
        }
        static getLikeCount() {
            return [mgrPlayer.getItemAmount(Const.ITEM_ID_PVP_LIKE_COUNT), mgrPlayer.getRecoverMaxAmount(Const.ITEM_ID_PVP_LIKE_COUNT)]
        }
        static getAdLikeCount() {
            return mgrAd.getAdEventRemainCount("video_pvp_like_time")
        }
        static addLikeCount(e, t="点赞") {
            mgrPlayer.addItemAmount(Const.ITEM_ID_PVP_LIKE_COUNT, e, t),
            this.saveRecord()
        }
        static tryUpdateRank() {
            if (this.bInit) {
                for (let e = 0; e < this.pvpDatas.length; e++)
                    this.doRandomLike(1);
                this.pvpDatas = Tools.sortArrayByField(this.pvpDatas, "-score"),
                this.sendMsg("MSG_PVP_RANK_UPDATE")
            } else
                this.startSeason()
        }
        static doRandomLike(e) {
            let t = Tools.RoundTableProbability(this.pvpDatas, "weight");
            t.score > 150 ? Math.random() < .05 && (t.score += e) : t.score += e
        }
        static stopSeason() {
            this.pvpDatas = [],
            this.saveRecord()
        }
        static startSeason() {
            this.stopSeason(),
            this.bInit = !0;
            let e = new Date
              , t = e.getDate() - (e.getDay() - 1)
              , a = new Date;
            a.setFullYear(e.getFullYear(), e.getMonth(), t),
            a.getDate(),
            (new Date).setFullYear(e.getFullYear(), e.getMonth(), t + 6);
            let i = mgrCfg.get_from_pvp_offline_db(1)
              , s = Tools.random(i.initCountMin, i.initCountMax);
            for (let e = 1; e <= s; e++)
                this.pvpDatas.push(this.createRandomData());
            this.pvpDatas = Tools.sortArrayByField(this.pvpDatas, "-score"),
            this.saveRecord()
        }
        static createRandomData() {
            let e = ul.format("random_%06d", this.pvpDatas.length + 1)
              , t = this.createUniqueRandomName()
              , a = []
              , i = 1;
            return this.fRandomDataCreator && ([a,i] = this.fRandomDataCreator()),
            {
                uid: e,
                name: t,
                data: a,
                score: 0,
                rank: 0,
                weight: 1
            }
        }
        static createUniqueRandomName() {
            console.log("mgrOfflinePvp.createUniqueRandomName");
            let e = mgrI18n.getLanguage();
            console.log("  language", e);
            let t = {};
            for (let e = 0; e < this.pvpDatas.length; e++) {
                t[this.pvpDatas[e].name] = !0
            }
            console.log("  nameHash", t);
            for (let a = 0; a <= 1e3; a++) {
                let a = mgrPlayer.calcRandomName(e);
                if (!t[a])
                    return console.log("  ->", a),
                    a
            }
            return console.log("  -> null"),
            null
        }
        static getRandomSubject() {
            let e = mgrCfg.getDb("pvp_offline_subject_db");
            return e[Tools.random(e.length) - 1].name
        }
        static getRandomSubjectId() {
            let e = mgrCfg.getDb("pvp_offline_subject_db");
            return e[Tools.random(e.length) - 1].id
        }
        static setRandomDataCreator(e) {
            this.fRandomDataCreator = e
        }
        static getRanomVoteCount() {
            return Tools.time() - this.lastSummitTime > this.interval ? (this.lastSummitTime = Tools.time(),
            4) : 1
        }
        static onMsgI18nRefresh(e) {
            if (this.randomNameLanguage != mgrI18n.getLanguage()) {
                this.randomNameLanguage = mgrI18n.getLanguage();
                for (let e = 0; e < this.pvpDatas.length; e++) {
                    const t = this.pvpDatas[e];
                    t.uid != mgrPlayer.getUid() && (t.name = this.createUniqueRandomName())
                }
                this.saveRecord()
            }
        }
    }
    mgrOfflinePvp.pvpDatas = [],
    mgrOfflinePvp.randomNameLanguage = null,
    mgrOfflinePvp.lastSummitTime = 0,
    mgrOfflinePvp.interval = 300;
    var List = Laya.List
      , Handler = Laya.Handler;
    class ReuseList extends Laya.Box {
        constructor(e, t, a) {
            super(),
            this.index = 0,
            this.pos(0, 0),
            this.bLoop = !1,
            this.repeatX = e,
            this.repeatY = t,
            this.maxRepeat = a,
            this.list = new List,
            this.addChild(this.list)
        }
        setItemClass(e) {
            this.list.itemRender = e,
            this.setup()
        }
        setup() {
            this.x = 0,
            this.y = 0,
            this.list.x = 0,
            this.list.y = 0,
            this.list.selectEnable = !0,
            this.list.selectHandler = new Handler(this,this.onSelect),
            this.list.renderHandler = new Handler(this,this.updateItem)
        }
        setDatas(e) {
            let t = this.scrollValue;
            if (this.datas = e,
            0 != this.repeatX && 0 != this.repeatY || 0 == this.repeatX && 0 == this.repeatY)
                return;
            let a = this.repeatX || this.repeatY
              , i = Math.ceil(this.datas.length / a);
            this.maxIndex = i - this.maxRepeat,
            this.repeatX ? (this.list.repeatX = a,
            this.list.repeatY = i > this.maxRepeat ? this.maxRepeat : i,
            console.log("repeatX, repeatY:", this.list.repeatX, this.list.repeatY)) : (this.list.repeatX = i > this.maxRepeat ? this.maxRepeat : i,
            this.list.repeatY = a,
            console.log("repeatX, repeatY:", this.list.repeatX, this.list.repeatY)),
            this.list.array = e,
            this.list.height = this.height,
            this.list.width = this.width,
            this.setScroll(t)
        }
        getDatas() {
            return this.datas
        }
        updateItem(e, t) {
            e.fillByData(e.dataSource)
        }
        onSelect(e) {
            this.list.getCell(e).onSelect(this.datas[e])
        }
        scrollTo(e) {
            this.index = e,
            this.list.scrollTo(e)
        }
        tweenTo(e, t=300) {
            this.index = e,
            this.list.tweenTo(e, t)
        }
        setHorizontalMoveEnable(e) {
            this.list.hScrollBarSkin = e ? "" : null
        }
        setVerticalMoveEnable(e) {
            this.list.vScrollBarSkin = e ? "" : null
        }
        tweenToNext(e=300) {
            this.index++,
            this.bLoop ? this.index = this.index > this.maxIndex ? 0 : this.index : this.index = this.index > this.maxIndex ? this.maxIndex : this.index,
            this.list.tweenTo(this.index, e)
        }
        tweenToLast(e=300) {
            this.index--,
            this.bLoop ? this.index = this.index < 0 ? this.maxIndex : this.index : this.index = this.index < 0 ? 0 : this.index,
            this.list.tweenTo(this.index, e)
        }
        setTouchEnable(e) {
            this.list.scrollBar.touchScrollEnable = e,
            this.list.scrollBar.mouseWheelEnable = e
        }
        refresh() {
            this.list.refresh()
        }
        setSpaceX(e) {
            this.list.spaceX = e
        }
        setSpaceY(e) {
            this.list.spaceY = e
        }
        setLoop(e) {
            this.bLoop = e
        }
        getAllCells() {
            return this.list.cells
        }
        get minScrollValue() {
            return this.list.scrollBar.min
        }
        get maxScrollValue() {
            return this.list.scrollBar.max
        }
        setScroll(e) {
            this.list.scrollBar && this.list.scrollBar.setScroll(this.minScrollValue, Math.max(this.maxScrollValue, e), e)
        }
        get scrollValue() {
            return this.list.scrollBar ? this.list.scrollBar.value : 0
        }
    }
    const ARENA_MAX_RANK = 100;
    class mgrOfflineArena extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            this.registerListeners({
                MSG_I18N_REFRESH: this.onMsgI18nRefresh.bind(this)
            })
        }
        static loadRecord() {
            let e = mgrRecord.getData("offline_arena") || {};
            this.pvpDatas = e.pvpDatas || [],
            this.stageData = e.stageData || null,
            this.curSeasonRewardReceiveIndexs = e.curSeasonRewardReceiveIndexs || {},
            this.lastFreeChangeEnemyTime = e.lastFreeChangeEnemyTime || 0,
            this.lastRefreshTime = e.lastRefreshTime || 0,
            this.randomNameLanguage = e.randomNameLanguage,
            null == this.randomNameLanguage && (this.randomNameLanguage = mgrI18n.getLanguage()),
            this.tryUpdateRank()
        }
        static saveRecord() {
            let e = {
                pvpDatas: this.pvpDatas,
                stageData: this.stageData,
                curSeasonRewardReceiveIndexs: this.curSeasonRewardReceiveIndexs,
                lastFreeChangeEnemyTime: this.lastFreeChangeEnemyTime,
                randomNameLanguage: this.randomNameLanguage,
                lastRefreshTime: this.lastRefreshTime
            };
            mgrRecord.setData("offline_arena", e)
        }
        static getMaxLevel() {
            return ul.length(mgrCfg.getDb("arena_level_db"))
        }
        static getPlayerData() {
            let e = mgrPlayer.getUid();
            for (let t = 0; t < this.pvpDatas.length; t++) {
                const a = this.pvpDatas[t];
                if (a.uid == e)
                    return a.rank = t + 1,
                    a
            }
        }
        static getPlayerLevel() {
            let e = this.getPlayerData();
            return e && e.score || 1
        }
        static getPvpDatas() {
            for (let e = 0; e < this.pvpDatas.length; e++) {
                this.pvpDatas[e].rank = e + 1
            }
            return this.pvpDatas
        }
        static hadRewardCanReceive() {
            let e = this.getPlayerLevel();
            for (let t = 1; t <= e; t++) {
                let e = mgrCfg.get_from_arena_level_db(t);
                if (e && (e.havReward && !this.curSeasonRewardReceiveIndexs[t]))
                    return !0
            }
            return !1
        }
        static isCurSeasonRewardCanReceive(e) {
            return !(this.getPlayerLevel() < e) && !this.curSeasonRewardReceiveIndexs[e]
        }
        static isCurSeasonRewardReceived(e) {
            return !!this.curSeasonRewardReceiveIndexs[e]
        }
        static receiveCurSeasonReward(e) {
            if (!this.isCurSeasonRewardCanReceive(e))
                return;
            let t = mgrCfg.get_from_arena_level_db(e);
            for (let e = 0; e < t.seasonRewards.length; e++) {
                const a = t.seasonRewards[e];
                let[i,s] = a;
                mgrPlayer.addItemAmount(i, s, "段位奖励"),
                mgrTip.addGotItemTip(i, s, null, null)
            }
            this.curSeasonRewardReceiveIndexs[e] = !0,
            this.saveRecord()
        }
        static join(e, t, a) {
            let i = mgrPlayer.getUid()
              , s = this.getPlayerLevel()
              , o = this.getMaxLevel();
            if (console.log("join", e, s, o),
            mgrPlayer.addItemAmount(Const.ITEM_ID_ARENA_FREE_COUNT, -1, "精灵圣殿参赛消耗"),
            e)
                s = ul.clamp(s + 1, 1, o),
                this.faildCount = 0;
            else {
                this.faildCount++;
                let e = mgrCfg.get_from_arena_level_db(s);
                this.faildCount >= e.dropFaildCount ? (this.faildCount = 0,
                s--,
                s = ul.clamp(s, 1, o),
                console.log("降级")) : console.log("段位保护")
            }
            this.clearStageData();
            let n = this.pvpDatas;
            for (let e = n.length - 1; e >= 0; e--) {
                if (n[e].uid == i) {
                    n.splice(e, 1);
                    break
                }
            }
            n.push({
                uid: i,
                name: mgrPlayer.getName(),
                partIds: a,
                score: s,
                stageId: t,
                rank: null
            }),
            this.pvpDatas = Tools.sortArrayByField(this.pvpDatas, "-score"),
            this.saveRecord()
        }
        static clearStageData() {
            this.stageData = null,
            this.saveRecord()
        }
        static getOrCreateStageData() {
            let e = this.stageData;
            if (!e) {
                let t = this.getPlayerLevel()
                  , a = this.getMaxLevel()
                  , i = ul.clamp(Tools.random(-2, 2) + t, 1, a)
                  , s = this.createRandomStageId();
                mgrGuide.isGuiding() && (s = 1001,
                console.log("新手引导中，设置引导关卡：", s));
                let o = this.createRandomPartIds(i, s)
                  , n = (mgrCfg.get_from_stage_db(s),
                mgrStage.calcScore(s, o))
                  , r = mgrI18n.getLanguage();
                e = {
                    stageId: s,
                    enemyName: mgrPlayer.calcRandomName(r),
                    enemyLevel: i,
                    enemyPartIds: o,
                    enemyScore: n
                },
                console.log("随机生成stageData"),
                this.stageData = e,
                this.saveRecord()
            }
            return e
        }
        static getFreeChangeEnemyRemainTime() {
            let e = this.lastFreeChangeEnemyTime || 0
              , t = mgrCfg.get_from_arena_config_db(1);
            return Math.max(0, e + t.freeChangeEnemyGap - Tools.time())
        }
        static markFreeChangeEnemy() {
            this.lastFreeChangeEnemyTime = Tools.time(),
            this.saveRecord()
        }
        static getAllBadgeCount() {
            let e = 0;
            return e += this.hadRewardCanReceive() ? 1 : 0,
            e += this.getFreeCount()
        }
        static getFreeCount() {
            return mgrPlayer.getItemAmount(Const.ITEM_ID_ARENA_FREE_COUNT)
        }
        static getFreeAndMaxCount() {
            return [this.getFreeCount(), mgrPlayer.getRecoverMaxAmount(Const.ITEM_ID_ARENA_FREE_COUNT)]
        }
        static getFreeCountRecoverRemainTime() {
            return mgrPlayer.getRecoverRemainTime(Const.ITEM_ID_ARENA_FREE_COUNT)
        }
        static tryUpdateRank() {
            let e = Tools.time();
            if (Tools.isOneDay(e, this.lastRefreshTime))
                return;
            let t = mgrCfg.get_from_arena_config_db(1);
            for (let e = 0; e < this.pvpDatas.length; e++) {
                const t = this.pvpDatas[e];
                t.uid != mgrPlayer.getUid() && this.doRandomAction(t)
            }
            for (let e = 1; e <= Tools.random(t.dailyInitCountMin, t.dailyInitCountMax); e++)
                this.pvpDatas.push(this.createRandomData());
            let a = Tools.sortArrayByField(this.pvpDatas, "-score");
            for (let e = a.length - 1; e >= ARENA_MAX_RANK; e--) {
                a[e].uid != mgrPlayer.getUid() && a.splice(e, 1)
            }
            this.pvpDatas = a,
            this.lastRefreshTime = e,
            this.saveRecord()
        }
        static doRandomAction(e) {
            let t = e.score
              , a = this.getMaxLevel()
              , i = mgrCfg.get_from_arena_level_db(t)
              , s = Tools.random(i.offlineDailyLevelOffsetMin, i.offlineDailyLevelOffsetMax)
              , o = ul.clamp(t + s, 1, a);
            if (t != o) {
                let t = this.createRandomStageId()
                  , a = this.createRandomPartIds(o, t);
                e.score = o,
                e.stageId = t,
                e.partIds = a
            }
        }
        static createRandomData() {
            let e = this.createRandomInitLevel()
              , t = ul.format("random_%06d", this.pvpDatas.length + 1)
              , a = this.createUniqueRandomName()
              , i = this.createRandomStageId();
            return {
                uid: t,
                name: a,
                partIds: this.createRandomPartIds(e, i),
                score: e,
                stageId: i,
                rank: 0
            }
        }
        static createUniqueRandomName() {
            console.log("createUniqueRandomName");
            let e = mgrI18n.getLanguage();
            console.log("  language", e),
            console.log("  pvpDatas", this.pvpDatas);
            let t = {};
            for (let e = 0; e < this.pvpDatas.length; e++) {
                t[this.pvpDatas[e].name] = !0
            }
            console.log("  nameHash", t);
            for (let a = 0; a <= 10; a++) {
                let i = mgrPlayer.calcRandomName(e);
                if (console.log("  for", a, i, t[i]),
                !t[i])
                    return console.log("  ->", i),
                    i
            }
        }
        static createRandomInitLevel() {
            let e = [];
            mgrCfg.forDb_from_arena_level_db((t,a)=>{
                e.push(a)
            }
            );
            let t = Tools.calcWheelTarget(e, "offlineInitWeight");
            return t ? t.level : 1
        }
        static createRandomStageId() {
            let e = mgrCfg.get_from_arena_config_db(1).stageIds;
            return e[Tools.random(e.length) - 1]
        }
        static createRandomPartIds(e, t) {
            let a = mgrCfg.get_from_arena_level_db(e)
              , i = mgrCfg.get_from_stage_db(t)
              , s = [];
            if (!a || !i)
                return console.log("mgrOfflineArena.createRandomPartIds arenaLevel or stage not found!", e, t),
                s;
            let o = a.offlineScoreRangeMin
              , n = a.offlineScoreRangeMax
              , r = (o + n) / 2
              , l = i.tagWeights
              , h = (i.typeWeights,
            0);
            for (let e = 0; e < l.length; e++) {
                let t, a = e + 1;
                if ([PartType.hair, PartType.cloth, PartType.shoe, PartType.face, PartType.wing].indexOf(a) >= 0) {
                    let e, i = [], s = 1e7, l = this.getPartIdsByPartType(a);
                    for (let t = 0; t < l.length; t++) {
                        const a = l[t];
                        let h = Tools.random(50, 100);
                        if (h >= o && h <= n)
                            i.push(a);
                        else {
                            let t = Math.abs(r - h);
                            t < s && (s = t,
                            e = a)
                        }
                    }
                    t = i[Tools.random(i.length) - 1] || e
                } else if (Math.random() >= .3) {
                    let e = []
                      , i = this.getPartIdsByPartType(a);
                    for (let t = 0; t < i.length; t++) {
                        const a = i[t];
                        let s = Tools.random(50, 100);
                        s >= o && s <= n && e.push(a)
                    }
                    e.length > 0 && (t = e[Tools.random(e.length) - 1])
                }
                if (t && (h++,
                s.push(t)),
                h >= 8)
                    break
            }
            return s
        }
        static getPartIdsByPartType(e) {
            let t = this.PART_ID_BY_PART_TYPE_CACHE[e];
            return t || (t = [],
            mgrCfg.forDb_from_part_db((a,i)=>{
                i.type == e && t.push(i.id)
            }
            ),
            this.PART_ID_BY_PART_TYPE_CACHE[e] = t),
            t
        }
        static onMsgI18nRefresh(e) {
            if (this.randomNameLanguage != mgrI18n.getLanguage()) {
                this.randomNameLanguage = mgrI18n.getLanguage();
                for (let e = 0; e < this.pvpDatas.length; e++) {
                    const t = this.pvpDatas[e];
                    t.uid != mgrPlayer.getUid() && (t.name = this.createUniqueRandomName())
                }
                this.saveRecord(),
                this.sendMsg("MSG_PartRankName_REFRESH")
            }
        }
    }
    mgrOfflineArena.pvpDatas = [],
    mgrOfflineArena.randomNameLanguage = null,
    mgrOfflineArena.faildCount = 0,
    mgrOfflineArena.lastFreeChangeEnemyTime = 0,
    mgrOfflineArena.stageData = null,
    mgrOfflineArena.lastRefreshTime = 0,
    mgrOfflineArena.curSeasonRewardReceiveIndexs = {},
    mgrOfflineArena.PART_SCORE_CACHE = {},
    mgrOfflineArena.PART_ID_BY_PART_TYPE_CACHE = {};
    class mgrOfflinePartRank extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            this.tryUpdateDatas(),
            this.registerListeners({
                MSG_ITEM_AMOUNT_CHANGED: this.onMsgItemAmountChanged.bind(this),
                MSG_PartRankName_REFRESH: this.onMsgPartRankNameRefresh.bind(this)
            })
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("offline_part_rank") || {};
            this._partRankDatas = e._partRankDatas || {},
            this._lastRefreshTime = e._lastRefreshTime || 0
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                _partRankDatas: this._partRankDatas,
                _lastRefreshTime: this._lastRefreshTime
            };
            mgrRecord.setData("offline_part_rank", e)
        }
        static tryUpdateDatas() {
            let e = Tools.time();
            if (Tools.isOneDay(e, this._lastRefreshTime))
                return;
            let t = mgrOfflineArena.getPvpDatas()
              , a = mgrPart.getMaxPartNum();
            for (let e = 0; e < t.length; e++) {
                const i = t[e];
                let s = this._partRankDatas[i.uid];
                if (s)
                    s.partNum += Tools.random(0, 5),
                    s.partNum > a && (s.partNum = a);
                else {
                    let e = this.getInitPartNum();
                    i.rank < 100 && (e += 100 - i.rank + Tools.random(-5, 5)),
                    e > a && (e = a),
                    s = {
                        uid: i.uid,
                        name: i.name,
                        partIds: i.partIds,
                        partNum: e,
                        rank: 0
                    },
                    this._partRankDatas[i.uid] = s
                }
            }
            this.updateOwnData(),
            this._lastRefreshTime = e,
            this.saveRecord()
        }
        static getInitPartNum() {
            return Tools.random(5, 10)
        }
        static updateOwnData() {
            let e = mgrPlayer.getUid()
              , t = this._partRankDatas[e];
            mgrPlayer.getName() && (t ? (t.name = mgrPlayer.getName(),
            t.partIds = mgrPart.getLastClothes(),
            t.partNum = mgrPart.getOwnPartNum()) : (t = {
                uid: e,
                name: mgrPlayer.getName(),
                partIds: mgrPart.getLastClothes(),
                partNum: mgrPart.getOwnPartNum(),
                rank: 0
            },
            this._partRankDatas[e] = t),
            this.saveRecord())
        }
        static getAllDatas() {
            let e = [];
            for (const t in this._partRankDatas) {
                const a = this._partRankDatas[t];
                e.push(a)
            }
            e = Tools.sortArrayByField(e, "-partNum");
            for (let t = 0; t < e.length; t++) {
                e[t].rank = t + 1
            }
            return e
        }
        static getOwnData() {
            let e = mgrPlayer.getUid();
            return this._partRankDatas[e]
        }
        static onMsgItemAmountChanged(e) {
            let t = e.itemId;
            mgrCfg.get_from_part_db(t) && this.updateOwnData()
        }
        static onMsgPartRankNameRefresh() {
            let e = mgrOfflineArena.getPvpDatas();
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                this._partRankDatas[a.uid].name = a.name
            }
            this.saveRecord()
        }
    }
    mgrOfflinePartRank._partRankDatas = {},
    mgrOfflinePartRank._lastRefreshTime = 0;
    class vRankItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vRankItem",
            this.exportNodeNames = ["CC_buttonBg", "CC_labelRankNormalRank", "CC_labelName", "CC_labelScore", "CC_spriteLevelTag", "CC_spritePvpTag", "CC_spriteParTag"],
            this.size(536, 90),
            this.anchorY = 0,
            this.anchorX = 0
        }
        onOpened() {
            this.data && this.fillByData(this.data),
            mgrLoader.loadFont("rank", this.labelRankNormalRank),
            this.buttonBg.fOnClick = this.onTouchButtonBg.bind(this)
        }
        onClosed() {}
        fillByData(e) {
            this.data = e,
            this.bResLoaded && (this.labelName.text = this.data.data.name,
            this.labelRankNormalRank.text = this.data.data.rank.toString(),
            this.data.offlineRankId == Const.OFFLINE_RANK_ID_LEVEL ? (this.labelScore.text = `${this.data.data.score}`,
            this.spriteLevelTag.visible = !0,
            this.spriteParTag.visible = !1,
            this.spritePvpTag.visible = !1) : this.data.offlineRankId == Const.OFFLINE_RANK_ID_PART ? (this.labelScore.text = `${this.data.data.score}`,
            this.spriteLevelTag.visible = !1,
            this.spriteParTag.visible = !0,
            this.spritePvpTag.visible = !1) : this.data.offlineRankId == Const.OFFLINE_RANK_ID_PVP && (this.labelScore.text = `${this.data.data.score}`,
            this.spriteLevelTag.visible = !1,
            this.spriteParTag.visible = !1,
            this.spritePvpTag.visible = !0))
        }
        onTouchButtonBg() {
            this.data && this.data.fOnClick(this.data.data)
        }
    }
    class mgrOfflineLevelRank extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            this.tryUpdateDatas(),
            this.registerListeners({
                MSG_ROLE_EXP_CHANGED: this.onMsgRoleExpChanged.bind(this),
                MSG_PartRankName_REFRESH: this.onMsgPartRankNameRefresh.bind(this)
            })
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("mgrOfflineLevelRank") || {};
            this._levelRankDatas = e._levelRankDatas || {},
            this._lastRefreshTime = e._lastRefreshTime || 0
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                _levelRankDatas: this._levelRankDatas,
                _lastRefreshTime: this._lastRefreshTime
            };
            mgrRecord.setData("mgrOfflineLevelRank", e)
        }
        static tryUpdateDatas() {
            let e = Tools.time();
            if (Tools.isOneDay(e, this._lastRefreshTime))
                return;
            let t = mgrOfflineArena.getPvpDatas()
              , a = ul.length(mgrCfg.getDb("role_level_db"));
            for (let e = 0; e < t.length; e++) {
                const i = t[e];
                let s = this._levelRankDatas[i.uid];
                if (s)
                    s.level += Tools.random(0, 5),
                    s.level > a && (s.level = a);
                else {
                    let e = this.getInitLevel();
                    i.rank < 100 && (e += 100 - i.rank + Tools.random(-5, 5)),
                    e > a && (e = a),
                    s = {
                        uid: i.uid,
                        name: i.name,
                        partIds: i.partIds,
                        level: e,
                        rank: 0
                    },
                    this._levelRankDatas[i.uid] = s
                }
            }
            this.updateOwnData(),
            this._lastRefreshTime = e,
            this.saveRecord()
        }
        static getInitLevel() {
            return Tools.random(3, 10)
        }
        static updateOwnData() {
            let e = mgrPlayer.getUid()
              , t = this._levelRankDatas[e];
            mgrPlayer.getName() && (t ? (t.name = mgrPlayer.getName(),
            t.partIds = mgrPart.getLastClothes(),
            t.level = mgrInteraction.level) : (t = {
                uid: e,
                name: mgrPlayer.getName(),
                partIds: mgrPart.getLastClothes(),
                level: mgrInteraction.level,
                rank: 0
            },
            this._levelRankDatas[e] = t),
            this.saveRecord())
        }
        static getAllDatas() {
            let e = [];
            for (const t in this._levelRankDatas) {
                const a = this._levelRankDatas[t];
                e.push(a)
            }
            e = Tools.sortArrayByField(e, "-level");
            for (let t = 0; t < e.length; t++) {
                e[t].rank = t + 1
            }
            return e
        }
        static getOwnData() {
            let e = mgrPlayer.getUid();
            return this._levelRankDatas[e]
        }
        static onMsgRoleExpChanged() {
            this.updateOwnData()
        }
        static onMsgPartRankNameRefresh() {
            let e = mgrOfflineArena.getPvpDatas();
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                this._levelRankDatas[a.uid].name = a.name
            }
            this.saveRecord()
        }
    }
    var ERankSceneTag;
    mgrOfflineLevelRank._levelRankDatas = {},
    mgrOfflineLevelRank._lastRefreshTime = 0,
    function(e) {
        e[e.level = 1] = "level",
        e[e.part = 2] = "part",
        e[e.pvp = 3] = "pvp"
    }(ERankSceneTag || (ERankSceneTag = {}));
    class vRankScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vRankScene",
            this.exportNodeNames = ["CC_buttonBack", "CC_buttonRank1", "CC_imageBg1", "CC_labelNameRank1", "CC_labelScoreRank1", "CC_buttonRank2", "CC_imageBg2", "CC_labelNameRank2", "CC_labelScoreRank2", "CC_buttonRank3", "CC_imageBg3", "CC_labelNameRank3", "CC_labelScoreRank3", "CC_boxList", "CC_imageMineInfoBg", "CC_labelMyScore", "CC_buttonShare", "CC_labelGo", "CC_spriteShareIcon", "CC_labelShareAmount", "CC_labelRank", "CC_labelName", "CC_spriteIcon", "CC_buttonTagLevel", "CC_spriteTagLevelSelected", "CC_buttonTagPart", "CC_spriteTagPartSelected", "CC_buttonTagPvp", "CC_spriteTagPvpSelected"]
        }
        onOpened() {
            super.onOpened(),
            this.multilingualText1 = `${mgrI18n.getText("vRankScene.2")}`,
            Layout.widget(10, 10, this.buttonBack.__node),
            this.buttonBack.fOnClick = this.onTouchButtonBack.bind(this),
            this.buttonShare.fOnClick = this.onTouchButtonshare.bind(this),
            this.buttonTagLevel.fOnClick = this.onTouchButtonLevel.bind(this),
            this.buttonTagPvp.fOnClick = this.onTouchTagPvp.bind(this),
            this.buttonTagPart.fOnClick = this.onTouchTagPart.bind(this),
            this.buildUi(),
            this.fadeIn(),
            this.selectTag(this.context.tag || ERankSceneTag.level),
            this.registerListeners({
                MSG_PVP_RANK_UPDATE: this.onMsgPvpRankUpdate.bind(this),
                MSG_SHARE_SUCCESSFUL: this.refreshShare.bind(this)
            }),
            mgrPlayer.bRenamePlayerName || mgrDirector.openDialog("vIntitleDialog"),
            this.registerListeners({
                MSG_NEARBY_RANK_REFRESH: this.onMsgNearbyRanRefresh.bind(this),
                MSG_I18N_REFRESH: ()=>{
                    this.multilingualText1 = `${mgrI18n.getText("vRankScene.2")}`
                }
            }),
            this.refreshShare(),
            mgrSdk.staticPointEvent(7006),
            mgrI18n.trySetI18nImage(this.imageBg1, "art83.png"),
            mgrI18n.trySetI18nImage(this.imageBg2, "art72.png"),
            mgrI18n.trySetI18nImage(this.imageBg3, "art10.png")
        }
        onClosed() {
            super.onClosed()
        }
        fadeIn() {
            this.buttonRank1.__node.scale(0, 0),
            this.buttonRank2.__node.scale(0, 0),
            this.buttonRank3.__node.scale(0, 0),
            CustomTween.delayTime(this.buttonRank3.__node, 300).to({
                scaleX: 1,
                scaleY: 1
            }, 500, Laya.Ease.backOut).start(1),
            CustomTween.delayTime(this.buttonRank2.__node, 550).to({
                scaleX: 1,
                scaleY: 1
            }, 500, Laya.Ease.backOut).start(1),
            CustomTween.delayTime(this.buttonRank1.__node, 800).to({
                scaleX: 1,
                scaleY: 1
            }, 500, Laya.Ease.backOut).start(1)
        }
        buildUi() {
            this.reuseRankList = new ReuseList(1,0,30),
            this.reuseRankList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseRankList),
            this.reuseRankList.setItemClass(vRankItem),
            this.reuseRankList.setVerticalMoveEnable(!0),
            this.reuseRankList.setSpaceY(-5)
        }
        selectTag(e, t=!1) {
            (this.selectedTag != e || t) && (this.selectedTag = e,
            this.spriteTagLevelSelected.visible = this.selectedTag == ERankSceneTag.level,
            this.spriteTagPvpSelected.visible = this.selectedTag == ERankSceneTag.pvp,
            this.spriteTagPartSelected.visible = this.selectedTag == ERankSceneTag.part,
            this.selectedTag == ERankSceneTag.level ? this.fillDataLevel() : this.selectedTag == ERankSceneTag.pvp ? this.fillDataPvp() : this.selectedTag == ERankSceneTag.part && this.fillDataPart())
        }
        fillDataPart() {
            mgrOfflinePartRank.updateOwnData();
            let e = mgrOfflinePartRank.getAllDatas();
            this.labelName.text = mgrPlayer.getName();
            let t = mgrOfflinePartRank.getOwnData();
            t ? (this.labelRank.text = t.rank.toString(),
            Tools.loadImg(this.spriteIcon, "res/ui/rank/art25.png"),
            this.labelMyScore.text = `:${t.partNum}`) : (mgrI18n.trySetI18nText(this.labelRank, "vRankScene.1"),
            Tools.loadImg(this.spriteIcon, "res/ui/rank/art25.png"),
            this.labelMyScore.text = `:${mgrPart.getOwnPartNum()}`);
            let a = [];
            for (let t = 0; t < e.length; t++) {
                const i = e[t];
                if (t <= 2) {
                    let e = this[`labelNameRank ${t + 1}`]
                      , a = this[`labelScoreRank ${t + 1}`];
                    e.text = i.name,
                    a.text = `${i.partNum}`,
                    this[`buttonRank ${t + 1}`].fOnClick = (()=>{
                        this.onClickEnemy(i)
                    }
                    )
                } else
                    a.push({
                        data: {
                            name: i.name,
                            uid: i.uid,
                            partIds: i.partIds,
                            score: i.partNum,
                            type: ERankSceneTag.part,
                            rank: i.rank
                        },
                        offlineRankId: Const.OFFLINE_RANK_ID_PART,
                        fOnClick: this.onClickEnemy.bind(this)
                    })
            }
            this.reuseRankList.setDatas(a),
            this.reuseRankList.setScroll(0)
        }
        fillDataLevel() {
            this.labelName.text = mgrPlayer.getName();
            let e = mgrOfflineLevelRank.getOwnData();
            e ? this.labelRank.text = e.rank.toString() : mgrI18n.trySetI18nText(this.labelRank, "vRankScene.1"),
            Tools.loadImg(this.spriteIcon, "res/ui/rank/art24.png"),
            this.labelMyScore.text = `:${mgrInteraction.level}`;
            let t = mgrOfflineLevelRank.getAllDatas()
              , a = [];
            for (let e = 0; e < t.length; e++) {
                const i = t[e];
                if (e <= 2) {
                    let t = this[`labelNameRank ${e + 1}`]
                      , a = this[`labelScoreRank ${e + 1}`];
                    t.text = i.name,
                    a.text = `${i.level}`,
                    this[`buttonRank ${e + 1}`].fOnClick = (()=>{
                        this.onClickEnemy(i)
                    }
                    )
                } else
                    a.push({
                        data: {
                            name: i.name,
                            uid: i.uid,
                            partIds: i.partIds,
                            score: i.level,
                            type: ERankSceneTag.level,
                            rank: i.rank
                        },
                        offlineRankId: Const.OFFLINE_RANK_ID_LEVEL,
                        fOnClick: this.onClickEnemy.bind(this)
                    })
            }
            this.reuseRankList.setDatas(a),
            this.reuseRankList.setScroll(0)
        }
        fillDataPvp() {
            this.labelName.text = mgrPlayer.getName();
            let e = mgrOfflinePvp.getPlayerData();
            e ? (this.labelRank.text = e.rank.toString(),
            Tools.loadImg(this.spriteIcon, "res/ui/rank/art26.png"),
            this.labelMyScore.text = `:${e.score}`) : (mgrI18n.trySetI18nText(this.labelRank, "vRankScene.1"),
            Tools.loadImg(this.spriteIcon, "res/ui/rank/art26.png"),
            this.labelMyScore.text = ":0");
            let t = mgrOfflinePvp.getPvpDatas()
              , a = [];
            for (let e = 0; e < t.length; e++) {
                const i = t[e];
                if (e <= 2) {
                    let t = this[`labelNameRank ${e + 1}`]
                      , a = this[`labelScoreRank ${e + 1}`];
                    t.text = i.name,
                    a.text = `${i.score}`;
                    let s = {
                        name: i.name,
                        uid: i.uid,
                        score: i.score,
                        partIds: i.data,
                        type: ERankSceneTag.pvp,
                        rank: i.rank
                    };
                    this[`buttonRank ${e + 1}`].fOnClick = (()=>{
                        this.onClickEnemy(s)
                    }
                    )
                } else
                    a.push({
                        data: {
                            name: i.name,
                            uid: i.uid,
                            score: i.score,
                            partIds: i.data,
                            type: ERankSceneTag.pvp,
                            rank: i.rank
                        },
                        offlineRankId: Const.OFFLINE_RANK_ID_PVP,
                        fOnClick: this.onClickEnemy.bind(this)
                    })
            }
            this.reuseRankList.setDatas(a),
            this.reuseRankList.setScroll(0)
        }
        refreshShare() {
            this.buttonShare.__node.visible = mgrChannel.canShare();
            let e = mgrChannel.getShareRewardAmount();
            e > 0 ? (this.labelShareAmount.text = `+${e}`,
            this.labelShareAmount.visible = !0,
            this.spriteShareIcon.visible = !0) : (this.labelShareAmount.visible = !1,
            this.spriteShareIcon.visible = !1)
        }
        onClickEnemy(e) {
            mgrDirector.openDialog("vPlayerDetailDialy", {
                player: e
            }, !0)
        }
        onTouchButtonBack() {
            let e = this.context.backSceneName || "vHubScene";
            mgrDirector.open2DScene(e, this.context.backSceneContext)
        }
        onTouchButtonshare() {
            this.selectedTag == ERankSceneTag.part && mgrSdk.openShare(),
            this.selectedTag == ERankSceneTag.pvp && mgrSdk.openShare(),
            this.selectedTag == ERankSceneTag.level && mgrSdk.openShare()
        }
        onTouchTagPart() {
            this.selectTag(ERankSceneTag.part)
        }
        onTouchTagPvp() {
            this.selectTag(ERankSceneTag.pvp)
        }
        onTouchButtonLevel() {
            this.selectTag(ERankSceneTag.level)
        }
        onMsgPvpRankUpdate() {
            this.selectedTag == ERankSceneTag.pvp && this.selectTag(ERankSceneTag.pvp, !0)
        }
        onMsgNearbyRanRefresh() {
            this.selectTag(this.selectedTag, !0)
        }
    }
    class vJumpOtherGameNode extends Laya.Box {
        constructor() {
            super(),
            this.msgHander = null,
            this.JUMP_TYPE = "single",
            this.msgHander = new MsgHandler,
            this.size(62, 80),
            this.anchorX = .5,
            this.anchorY = .5,
            this.registerListeners({
                MSG_ON_OPEN_JUMP_RESULT: this.onMsgOpenJumpResult.bind(this)
            }),
            this.image = this.addChild(new Laya.Image),
            this.image.size(this.width, this.height),
            this.image.anchorX = .5,
            this.image.anchorY = .5,
            this.image.pos(this.width / 2, this.height / 2),
            mgrSdk.openJump("80", this.JUMP_TYPE),
            CustomTween.delayTime(this.image, 1e3).to({
                rotation: 5
            }, 100).to({
                rotation: -5
            }, 200).to({
                rotation: 5
            }, 200).to({
                rotation: 0
            }, 100).delayTime(1e3).callback(()=>{
                mgrSdk.openJump("80", this.JUMP_TYPE)
            }
            ).start(0),
            this.button = this.addComponent(ScaleButton),
            this.button.fOnClick = this.onTouchButtonIcon.bind(this)
        }
        destroy(e) {
            this.msgHander.stopProcMsg(),
            super.destroy(e)
        }
        registerListeners(e) {
            this.msgHander.registerListeners(e),
            this.msgHander.startProcMsg()
        }
        sendMsg(e, t) {
            this.msgHander.sendMsg(e, t)
        }
        fillData(e) {
            this.datas = e,
            this.image.skin = e[0].url
        }
        onMsgOpenJumpResult(e) {
            if (e.type == this.JUMP_TYPE) {
                let t = e.jumpInfo;
                this.fillData(t)
            }
        }
        onTouchButtonIcon() {
            this.datas && mgrSdk.jumpOtherGame(this.datas[0].index, this.JUMP_TYPE)
        }
    }
    class vWebViewDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vWebViewDialog",
            this.exportNodeNames = ["CC_buttonClose"]
        }
        onOpened() {
            super.onOpened(),
            Layout.widget(1, 0, this.buttonClose.__node, {
                x: 1,
                y: 0
            }),
            this.buttonClose.fOnClick = (()=>{
                window.conch.closeExternalLink(),
                this.closeDialog(!0)
            }
            );
            let e = window.innerWidth - 100
              , t = window.innerHeight - 200;
            window.conch.setExternalLinkEx(this.context.url, 50, 100, e, t, !1)
        }
        onClosed() {
            super.onClosed()
        }
        static openWebView(e) {
            mgrDirector.openDialog("vWebViewDialog", {
                url: e
            }, !0)
        }
    }
    class mgrReview extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord()
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("review") || {};
            this.lastAlertTime = e.lastAlertTime || 0,
            this.lastReviewTime = e.lastReviewTime || 0
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                lastAlertTime: this.lastAlertTime || 0,
                lastReviewTime: this.lastReviewTime || 0
            };
            mgrRecord.setData("review", e)
        }
        static tryShowReviewDialog() {
            if (!window.conch)
                return;
            "Conch-ios" == window.conchConfig.getOS() ? 0 == this.lastReviewTime ? Tools.isOneDay(Tools.time(), this.lastAlertTime || 0) ? console.log("[warn] mgrReview.tryShowReviewDialog today already alerted") : this.showReviewDialog() : console.log("[warn] mgrReview.tryShowReviewDialog already reviewd") : console.log("[warn] mgrReview.tryShowReviewDialog mgrSdk.bHasReviewModule is false")
        }
        static showReviewDialog() {
            mgrTip.alertPrompt2("温馨提示", "喜欢我们的游戏吗？喜欢就给游戏5星好评吧！", "以后", "好的", ()=>{
                this.lastAlertTime = Tools.time(),
                this.saveRecord()
            }
            , ()=>{
                this.lastAlertTime = Tools.time(),
                this.lastReviewTime = Tools.time(),
                this.saveRecord();
                let e = {
                    cmd: "/c/openInviteComment",
                    data: {}
                };
                mgrSdk.sendMsgToSdk(e)
            }
            )
        }
        static markUnreview() {
            this.lastAlertTime = 0,
            this.lastReviewTime = 0,
            this.saveRecord()
        }
    }
    class Queue {
        constructor() {
            this._queue = [],
            this.id = 1e4 * Tools.time()
        }
        push(e) {
            e && this._queue.push(e)
        }
        pop() {
            return this._queue.shift()
        }
        clear() {
            this._queue = []
        }
        length() {
            return this._queue.length
        }
        getElement(e) {
            return this._queue[e]
        }
    }
    let wx = window.wx
      , tt = window.tt;
    const DEFAULT_SAMPLE_RATE = 8e3;
    class SoundLibary {
        static get bCanRecord() {
            return !!wx && !tt
        }
        static get fileManager() {
            return this.__fileManager || (this.__fileManager = wx.getFileSystemManager()),
            this.__fileManager
        }
        static get audioRecoder() {
            return this.__audioRecoder || (this.__audioRecoder = wx.getRecorderManager()),
            this.__audioRecoder
        }
        static playSound(e, t) {
            let a = wx.createInnerAudioContext();
            a.src = e,
            a.play(),
            a.onEnded(()=>{
                a.destroy(),
                t()
            }
            )
        }
        static writeString(e, t, a, i=!1) {
            for (let i = 0; i < a.length; i++) {
                let s = a.charCodeAt(i);
                e.setUint8(t, s),
                t += 1
            }
        }
        static getString(e, t, a) {
            let i = "";
            for (let s = 0; s < a; s++) {
                let a = e.getUint8(t);
                t += 1,
                i += String.fromCharCode(a)
            }
            return i
        }
        static pcm2wav(e, t, a=1, i=DEFAULT_SAMPLE_RATE, s=16) {
            console.log("pcm2wav Parms:", e, t, a, i, s);
            let o = new ArrayBuffer(e.byteLength + 44)
              , n = new DataView(e)
              , r = new DataView(o)
              , l = 0;
            this.writeString(r, l, "RIFF"),
            l += 4,
            r.setUint32(l, 36 + n.byteLength, !0),
            l += 4,
            this.writeString(r, l, "WAVE"),
            l += 4,
            this.writeString(r, l, "fmt "),
            l += 4,
            r.setUint32(l, 16, !0),
            l += 4,
            r.setUint16(l, 1, !0),
            l += 2,
            r.setUint16(l, a, !0),
            l += 2,
            r.setUint32(l, i, !0),
            l += 4,
            r.setUint32(l, a * i * (s / 8), !0),
            l += 4,
            r.setUint16(l, a * (s / 8), !0),
            l += 2,
            r.setUint16(l, s, !0),
            l += 2,
            this.writeString(r, l, "data"),
            l += 4,
            r.setUint32(l, n.byteLength, !0),
            l += 4;
            for (let e = 0; e < n.byteLength; ++e)
                r.setUint8(l, n.getUint8(e)),
                l++;
            this.fileManager.writeFileSync(t, o, "binary")
        }
        static parseWavHead(e) {
            let t = this.fileManager.readFileSync(e)
              , a = new DataView(t)
              , i = {}
              , s = 0;
            return i.ChunkID = this.getString(a, s, 4),
            s += 4,
            i.ChunkSize = a.getUint32(s, !0),
            s += 4,
            i.Format = this.getString(a, s, 4),
            s += 4,
            i.Subchunk1ID = this.getString(a, s, 4),
            s += 4,
            i.Subchunk1Size = a.getUint32(s, !0),
            s += 4,
            i.AudioFormat = a.getUint16(s, !0),
            s += 2,
            i.NumChannels = a.getUint16(s, !0),
            s += 2,
            i.SampleRate = a.getUint32(s, !0),
            s += 4,
            i.ByteRate = a.getUint32(s, !0),
            s += 4,
            i.BlockAlign = a.getUint16(s, !0),
            s += 2,
            i.BitsPerSample = a.getUint16(s, !0),
            s += 2,
            i.Subchunk2Id = this.getString(a, s, 4),
            s += 4,
            i.Subchunk2Size = a.getUint32(s, !0),
            i
        }
        static startRecord(e=DEFAULT_SAMPLE_RATE, t=1, a=16, i="pcm", s=1e4, o=2 * DEFAULT_SAMPLE_RATE / 1024) {
            let n = {
                duration: s,
                sampleRate: e,
                numberOfChannels: t,
                encodeBitRate: e * t * a / 8,
                format: i,
                frameSize: o
            };
            this.audioRecoder.start(n),
            this.audioRecoder.onStart(()=>{
                console.log("recorder start"),
                console.log(n)
            }
            )
        }
        static stopRecord() {
            this.audioRecoder.stop()
        }
        static setStopCallback(e) {
            this.audioRecoder.onStop(t=>{
                e(t)
            }
            )
        }
        static setFrameSizeCallback(e) {
            let t = 0;
            this.audioRecoder.onFrameRecorded(a=>{
                t++,
                a.count = t,
                e(a)
            }
            )
        }
        static resampleData(e, t, a) {
            let i = new Int16Array(e)
              , s = i.length;
            if (t == a)
                return e;
            let o = s - 1
              , n = Math.floor(s * (a / t))
              , r = new ArrayBuffer(2 * n)
              , l = new Int16Array(r);
            for (let e = 0; e < n; e++) {
                let s = e * t / a
                  , n = Math.floor(s)
                  , r = s - n
                  , h = n == o ? o : n + 1;
                l[e] = Math.floor((1 - r) * i[n] + r * i[h])
            }
            return r
        }
        static isSampleDataUserful(e) {
            return !0
        }
        static createPcmQueue() {
            let e = new Queue;
            return this.validPcmQueues[e.id] = e,
            e.id
        }
        static destroyAllPcmQueue() {
            console.log("destroyAllPcmQueue");
            for (const e in this.validPcmQueues) {
                let t = this.validPcmQueues[e];
                t && t.clear()
            }
            this.validPcmQueues = {}
        }
        static destroyPcmQueue(e) {
            console.log(`destroyPcmQueue: ${e}`);
            let t = this.validPcmQueues[e];
            t && (t.clear(),
            this.validPcmQueues[e] = null)
        }
        static addPcm2Queue(e, t) {
            this.validPcmQueues && this.validPcmQueues[t] && this.validPcmQueues[t].push(e)
        }
        static playValidQueue(e, t=DEFAULT_SAMPLE_RATE, a) {
            let i = this.validPcmQueues[e];
            (!i || i.length() <= 0) && a && a();
            let s = 0;
            for (let e = 0; e < i.length(); e++) {
                const t = i.getElement(e);
                s += t.byteLength,
                console.log(`element.byteLength:${t.byteLength}`)
            }
            console.log(`totalByteLength:${s}`);
            let o = []
              , n = new ArrayBuffer(s)
              , r = new Int16Array(n)
              , l = 0;
            for (let e = 0; e < i.length(); e++) {
                const t = i.getElement(e);
                let a = new Int16Array(t);
                for (let e = 0; e < a.length; e++) {
                    const t = a[e];
                    r[l] = t,
                    l++,
                    o[t] || (o[t] = 0),
                    o[t]++
                }
            }
            console.log("oldPcmBuffer");
            let h = [];
            for (let e = 0; e < r.length; e++) {
                const t = r[e];
                h[t] || (h[t] = 0),
                h[t]++
            }
            console.log("newPcmBuffer");
            let d = SoundLibary.resampleData(n, DEFAULT_SAMPLE_RATE, t)
              , c = `${wx.env.USER_DATA_PATH}/temp_ ${1e3 * Tools.time()}.wav`;
            console.log(`wav path: ${c}`),
            SoundLibary.pcm2wav(d, c),
            SoundLibary.playSound(c, ()=>{
                SoundLibary.fileManager.unlinkSync(c),
                a && a()
            }
            )
        }
        static recoderVaildVoice(e, t, a, i) {
            try {
                let s = this.createPcmQueue();
                console.log(`queueId: ${s}`);
                let o = !1
                  , n = !1;
                SoundLibary.startRecord(),
                SoundLibary.setFrameSizeCallback(r=>{
                    console.log("=== 每帧回调 ===="),
                    console.log(r),
                    SoundLibary.isSampleDataUserful(r.frameBuffer) ? (t && t(),
                    o = !0) : o && (n || (SoundLibary.stopRecord(),
                    n = !0)),
                    o && this.addPcm2Queue(r.frameBuffer, s),
                    r.isLastFrame && (a && a(),
                    this.playValidQueue(s, DEFAULT_SAMPLE_RATE / e, ()=>{
                        this.destroyPcmQueue(s),
                        i && i()
                    }
                    ))
                }
                ),
                SoundLibary.setStopCallback(e=>{
                    console.log("结束回调"),
                    SoundLibary.fileManager.unlinkSync(e.tempFilePath)
                }
                )
            } catch (e) {
                console.log(e)
            }
        }
    }
    SoundLibary.validPcmQueues = {};
    const AD_EVENT_ID_FREE_GOLD = "free_gold";
    class vTopBar extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vTopBar",
            this.exportNodeNames = ["CC_buttonGold", "CC_imageGoldIcon", "CC_labelGoldCount", "CC_spriteAdd", "CC_imageDiamond", "CC_imageDiamondIcon", "CC_labelDiamondCount"],
            this.anchorX = .5,
            this.anchorY = .5,
            this.width = 250,
            this.height = 50
        }
        onOpened() {
            this.widget(),
            this.fadeIn(),
            this.buildUI(),
            this.fillData(),
            this.registerListeners({
                MSG_ITEM_AMOUNT_CHANGED: this.onMsgItemAmountChanged.bind(this),
                MSG_GOLD_FLY_END: this.onMsgGoldFlyEnd.bind(this),
                MSG_Diamond_FLY_END: this.onMsgDiamondFlyEnd.bind(this)
            }),
            this.buttonGold.bTween = !1,
            this.buttonGold.fOnClick = this.onTouchButtonGold.bind(this)
        }
        onClosed() {}
        widget() {}
        fadeIn() {}
        buildUI() {
            Tools.loadImg(this.imageGoldIcon, mgrCfg.get_from_item_template_db(Const.ITEM_ID_GOLD).icon),
            Tools.loadImg(this.imageDiamondIcon, mgrCfg.get_from_item_template_db(Const.ITEM_ID_DIAMONDS).icon)
        }
        fillData() {
            this.labelDiamondCount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_DIAMONDS)}`,
            this.labelGoldCount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_GOLD)}`;
            let e = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID_FREE_GOLD);
            this.spriteAdd.visible = e
        }
        onMsgItemAmountChanged(e) {
            this.fillData()
        }
        onMsgGoldFlyEnd() {
            CustomTween.to(this.imageGoldIcon, {
                scaleX: 1.1,
                scaleY: 1.1
            }, 100).to({
                scaleX: 1,
                scaleY: 1
            }, 100).start(1)
        }
        onMsgDiamondFlyEnd() {
            CustomTween.to(this.imageDiamondIcon, {
                scaleX: 1.1,
                scaleY: 1.1
            }, 100).to({
                scaleX: 1,
                scaleY: 1
            }, 100).start(1)
        }
        onTouchButtonGold() {
            this.spriteAdd.visible && mgrDirector.openDialog("vLuckGoldDialog")
        }
    }
    class mgrDailyTask extends Manager {
        static onLoad() {
            super.onLoad(),
            mgrCfg.forDb_from_daily_task_config_db((e,t)=>{
                this._rewardDatas[t.id] = t
            }
            ),
            this.loadRecord(),
            Tools.isOneDay(this.lastRefreshTime, Tools.time()) || (this._rewardsTaked = [],
            this.lastRefreshTime = Tools.time())
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("dailyTask") || {};
            this._rewardsTaked = e._rewardsTaked || [],
            this.lastRefreshTime = e.lastRefreshTime || 0
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                _rewardsTaked: this._rewardsTaked,
                lastRefreshTime: this.lastRefreshTime
            };
            mgrRecord.setData("dailyTask", e)
        }
        static getActiveCount() {
            let e = 0;
            return mgrCfg.forDb_from_achievement_db((t,a)=>{
                if (1 == a.category) {
                    mgrAchievement.getAchievement(a.id).state == AchievementState.received && e++
                }
            }
            ),
            e
        }
        static getRewardIndex() {
            let e = 1;
            for (; mgrDailyTask.isGetedRewards(e); )
                e++;
            return e = ul.clamp(e, 1, ul.length(mgrCfg.getDb("daily_task_config_db")))
        }
        static getRewardDatas() {
            return this._rewardDatas
        }
        static getTaskIds() {
            let e = this.getRewardIndex();
            return this.getRewardDatas()[e].aids
        }
        static getCanFinishTaskIds() {
            let e = []
              , t = this.getTaskIds();
            for (let a = 0; a < t.length; a++) {
                const i = t[a];
                this.__canFinish(i) && e.push(i)
            }
            return e
        }
        static isGetedRewards(e) {
            return this._rewardsTaked.indexOf(e) >= 0
        }
        static canObtainReward(e, t=!0) {
            if (this.isGetedRewards(e))
                return t && mgrTip.showMsgTip(`${mgrI18n.getText("mgrDailyTask.2")}`),
                !1;
            let a = this._rewardDatas[e];
            return !(this.getActiveCount() < a.targetActiveCount) || (t && mgrTip.showMsgTip(`${mgrI18n.getText("mgrDailyTask.1")}`),
            !1)
        }
        static obtainReward(e, t=1) {
            if (this.isGetedRewards(e))
                return mgrTip.showMsgTip(`${mgrI18n.getText("mgrDailyTask.2")}`),
                !1;
            let a = this._rewardDatas[e];
            this.getActiveCount();
            this._rewardsTaked.push(e),
            this.saveRecord();
            let i = a.rewardItemId
              , s = a.rewardAmount;
            return mgrPlayer.addItemAmount(i, s * t, "日常任务发奖"),
            mgrTip.addGotItemTip(i, s * t, null, {
                fOnClose: ()=>{}
            }),
            mgrSdk.staticPointEvent(8e3),
            !0
        }
        static getBadageCount() {
            let e = this.getCanFinishTaskIds();
            for (const t in e) {
                let a = e[t]
                  , i = mgrAchievement.getAchievement(a);
                if (i && i.state == AchievementState.finished)
                    return 1
            }
            for (const e in this._rewardDatas)
                if (this.canObtainReward(parseInt(e), !1))
                    return 1;
            return 0
        }
        static __canFinish(e) {
            let t = mgrCfg.get_from_achievement_db(e);
            return !(14 == t.targetType && !mgrChannel.canShare()) && 13 != t.targetType
        }
    }
    mgrDailyTask._rewardsTaked = [],
    mgrDailyTask._rewardDatas = [];
    const MINUTE_INCOME = Math.floor(12.5)
      , OFFLINE_MAX_TIME = 28800
      , OFFLINE_SETTLE_MIN_TIME = 3600;
    class mgrOfflineReward extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            this.trySettlementLastOfflineTime(),
            this.goOfflineTime = Tools.time(),
            Timer.callLoop(60, ()=>{
                this.goOfflineTime = Tools.time(),
                this.saveRecord()
            }
            , !0)
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("offline_reward") || {};
            this.goOfflineTime = e.goOfflineTime || Tools.time(),
            this.willSettlementOfflineTimeQueue = e.willSettlementOfflineTimeQueue || [],
            this.saveRecord()
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                goOfflineTime: this.goOfflineTime,
                willSettlementOfflineTimeQueue: this.willSettlementOfflineTimeQueue
            };
            mgrRecord.setData("offline_reward", e)
        }
        static trySettlementLastOfflineTime() {
            let e = Tools.time()
              , t = Math.floor(e - this.goOfflineTime);
            if (t >= OFFLINE_SETTLE_MIN_TIME) {
                this.willSettlementOfflineTimeQueue.push(t);
                let e = this.goOfflineTime;
                return mgrGuide.isAllGuideFinished() && Timer.callLater(.016, ()=>{
                    mgrInteraction.restState = E_REST_STATE.rest,
                    mgrInteraction.lastRefreshTime = e
                }
                , this),
                !0
            }
            return !1
        }
        static getOfflineReward() {
            let e = 0
              , t = 0;
            for (let t = 0; t < this.willSettlementOfflineTimeQueue.length; t++) {
                e += this.willSettlementOfflineTimeQueue[t]
            }
            return [e, t = Math.ceil(e / 60 * MINUTE_INCOME)]
        }
        static markOfflineRewardGeted() {
            this.willSettlementOfflineTimeQueue = [],
            this.goOfflineTime = Tools.time(),
            this.saveRecord()
        }
    }
    var HUB_ROLE_STATE;
    mgrOfflineReward.goOfflineTime = 0,
    mgrOfflineReward.willSettlementOfflineTimeQueue = [],
    function(e) {
        e[e.idle = 1] = "idle",
        e[e.resting = 2] = "resting",
        e[e.hungry = 3] = "hungry",
        e[e.tired = 4] = "tired",
        e[e.listen = 5] = "listen",
        e[e.speeking = 6] = "speeking",
        e[e.interacting = 7] = "interacting",
        e[e.wanna_motion = 8] = "wanna_motion",
        e[e.wanna_learn = 9] = "wanna_learn"
    }(HUB_ROLE_STATE || (HUB_ROLE_STATE = {}));
    const TIP_CION = {
        learn: ["res/ui/common/tipIcon5.png"],
        motion: ["res/ui/common/tipIcon3.png", "res/ui/common/tipIcon4.png"],
        rest: ["res/ui/common/tipIcon2.png"],
        eat: ["res/ui/common/tipIcon1.png"]
    }
      , MASK_NIGHT_ALPHA = 0;
    class vHubScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vHubScene",
            this.exportNodeNames = ["CC_spriteBg", "CC_spriteBgBlack", "CC_spriteEffect1", "CC_spriteMask", "CC_buttonLevel", "CC_progressBarLevel", "CC_labelLevel", "CC_boxLeftList", "CC_buttonTask", "CC_imageTask", "CC_buttonRank", "CC_imageRank", "CC_buttonIllustrateHandbook", "CC_imageIllustrateHandbook", "CC_buttonWishPool", "CC_imageWishPool", "CC_buttonShop", "CC_imageShop", "CC_boxRightList", "CC_buttonSuperEasy", "CC_spriteSuperEasy", "CC_buttonNotice", "CC_buttonMoreGame", "CC_buttonRewardMoreGame", "CC_buttonShortCut", "CC_spriteShortLight1", "CC_spriteShortLight2", "CC_imageShortCut", "CC_buttonFindeMe", "CC_imageFindeMe", "CC_buttonOnlineReward", "CC_buttonSign", "CC_imageSign", "CC_buttonFreeWear", "CC_imageFreeWear", "CC_buttonAdH5", "CC_imageAdH5", "CC_boxBottom", "CC_buttonPvp", "CC_imagePvp", "CC_buttonStage", "CC_imageStage", "CC_buttonGarden", "CC_imageGarden", "CC_buttonInteraction", "CC_spriteInteractionBgNormal", "CC_spriteInteractionBgWarn", "CC_progressBarInteractionFg", "CC_spriteJumpOtherGame", "CC_imagePaopao1", "CC_imagePaopao2", "CC_imagePaopao3", "CC_buttonTipIcon", "CC_buttonRecord", "CC_spriteRecordTip", "CC_progressBarRecord", "CC_sprite4399", "CC_buttonGameCenter", "CC_boxGameCenterReadPoint"],
            this.crossRecommendState = !1,
            this.bBuildUiEnded = !1,
            this.avatar = null,
            this.lastIndex = -1,
            vHubScene.hubScene = this
        }
        onOpened() {
            super.onOpened(),
            this.multilingualText1 = `${mgrI18n.getText("vHubScene.1")}`,
            this.buttonLevel.fOnClick = this.onTouchbuttonLevel.bind(this),
            this.buttonSign.fOnClick = this.onTouchButtonSign.bind(this),
            this.buttonWishPool.fOnClick = this.onTouchButtonWish.bind(this),
            this.buttonShop.fOnClick = this.onTouchButtonShop.bind(this),
            this.buttonOnlineReward.fOnClick = this.onTouchButtonOnlineReward.bind(this),
            this.buttonFreeWear.fOnClick = this.onTouchButtonFreeWear.bind(this),
            this.buttonTask.fOnClick = this.onTouchButtonTask.bind(this),
            this.buttonFindeMe.fOnClick = this.onTouchButtonFindMe.bind(this),
            this.buttonRank.fOnClick = this.onTouchButtonRank.bind(this),
            this.buttonIllustrateHandbook.fOnClick = this.onTouchButtonIllustrateHandbook.bind(this),
            this.buttonMoreGame.fOnClick = this.onTouchButtonMoreGame.bind(this),
            this.buttonRewardMoreGame.fOnClick = this.onTouchButtonRewardMoreGame.bind(this),
            this.buttonShortCut.fOnClick = this.onTouchButtonShortcut.bind(this),
            this.buttonStage.fOnClick = this.onTouchButtonStage.bind(this),
            this.buttonGarden.fOnClick = this.onTouchButtonGarden.bind(this),
            this.buttonInteraction.fOnClick = this.onTouchButtonInteraction.bind(this),
            this.buttonRecord.onTouchBegin = this.onTouchButtonBegin.bind(this),
            this.buttonRecord.onTouchEnd = this.onTouchButtonEnd.bind(this),
            this.buttonRecord.onTouchCancle = this.onTouchButtonCancle.bind(this),
            this.buttonSuperEasy.fOnClick = this.onTouchButtonSuperEasy.bind(this),
            this.buttonGameCenter.fOnClick = this.onTouchButtonGameCenter.bind(this),
            window.conch || !SoundLibary.bCanRecord ? this.buttonRecord.__node.visible = !1 : this.buttonRecord.__node.visible = !0,
            this.spriteRecordTip.scale(0, 0),
            this.buttonRecord.__node.scale(0, 0),
            this.progressBarRecord.style = ULPROGRESSBAR_STYLE.fan,
            this.progressBarLevel.barName = this.progressBarLevel.owner.name,
            this.progressBarLevel.style = ULPROGRESSBAR_STYLE.ver,
            this.progressBarInteractionFg.barName = this.progressBarInteractionFg.owner.name,
            this.progressBarInteractionFg.style = ULPROGRESSBAR_STYLE.ver,
            Tools.registerTouchHander(this.spriteBg, this.onTouchSpriteBg.bind(this)),
            this.buttonPvp.fOnClick = this.onTouchButtonPvp.bind(this),
            this.buttonAdH5.fOnClick = this.onTouchButtonAdH5.bind(this),
            this.buttonNotice.fOnClick = this.onTouchButtonNotice.bind(this),
            this.buttonTipIcon.fOnClick = this.onTouchButtonTipIcon.bind(this),
            this.buttonRecord.bPlaySoundEffect = !1,
            this.init(),
            this.fillData(),
            this.widget(),
            this.addEffect(),
            this.registerListeners({
                MSG_DEBUG_KEY_DOWN: this.onKeyDown.bind(this),
                MSG_ROLE_EXP_CHANGED: this.onMsgRoleExpChanged.bind(this),
                MSG_INTERACTION_PROGRESS_REFRESH: this.onMsgInteractionProgressRefresh.bind(this),
                MSG_I18N_REFRESH: ()=>{
                    this.multilingualText1 = `${mgrI18n.getText("vHubScene.1")}`
                }
            }),
            this.refresh(),
            Timer.callLoop(1, this.refresh.bind(this), this),
            Timer.callLoop(.017, this.refreshCrossRecommend.bind(this), this),
            mgrSdk.staticPointEvent(5e3),
            mgrI18n.trySetI18nImage(this.imageTask, "btn_task.png"),
            mgrI18n.trySetI18nImage(this.imageRank, "btn_rank.png"),
            mgrI18n.trySetI18nImage(this.imageIllustrateHandbook, "art12.png"),
            mgrI18n.trySetI18nImage(this.imageWishPool, "btn_wishPool.png"),
            mgrI18n.trySetI18nImage(this.imageShop, "art81.png"),
            mgrI18n.trySetI18nImage(this.spriteSuperEasy, "chaoxiuxian.png"),
            mgrI18n.trySetI18nImage(this.imageSign, "btn_sign.png"),
            mgrI18n.trySetI18nImage(this.imageFreeWear, "btn_freeWear.png")
        }
        addEffect() {
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_guanka_glow, this.buttonStage.__node, 0),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_guanka_glow, this.buttonGarden.__node, 0),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_guanka_glow, this.buttonPvp.__node, 0),
            this.scene3DFront.zOrder = -3
        }
        refreshCrossRecommend() {
            mgrChannel._isSupportRecommendationBtn && (DialogBase.ShowingDialog.length > 0 ? this.crossRecommendState && (mgrSdk.closeCrossRecommend(),
            this.crossRecommendState = !1,
            console.log("=======>>>>>>>> close Recommend")) : this.crossRecommendState || (mgrSdk.openCrossRecommend(Laya.Browser.clientWidth - 60, 80, 0),
            mgrChannel.isChannelBaidu() && mgrSdk.openCrossRecommend(Laya.Browser.clientWidth - 120, 80, 1),
            this.crossRecommendState = !0,
            console.log("=======>>>>>>>> open Recommend")))
        }
        onClosed() {
            super.onClosed(),
            vHubScene.hubScene = null,
            mgrSdk.closeCrossRecommend()
        }
        getPreLoadAnimationIds() {
            return [ANIMATION_ID.idle]
        }
        customWait(e) {
            Timer.callLoop(.016, t=>{
                this.bBuildUiEnded && (t.stop(),
                e())
            }
            , this)
        }
        init() {
            CustomTween.roke(this.buttonShortCut.__node),
            CustomTween.to(this.spriteShortLight1, {
                alpha: 0
            }, 500).to({
                alpha: 1
            }, 500).start(0),
            CustomTween.rotateForever(this.spriteShortLight2),
            this.imagePaopao1.scale(0, 0),
            this.imagePaopao2.scale(0, 0),
            this.imagePaopao3.scale(0, 0),
            this.buildUi(()=>{
                this.bBuildUiEnded = !0,
                this.avatar.transform.scale = new Laya.Vector3(.65,.65,.65),
                this.avatar.transform.position = new Laya.Vector3(0,.25,0),
                this.flower.transform.scale = new Laya.Vector3(1,1,1),
                this.roleStManager = new FSMObject,
                this.roleStManager.registerState(HUB_ROLE_STATE.idle, this.inIdle.bind(this), this.exeIdle.bind(this), this.outIdle.bind(this)),
                this.roleStManager.registerState(HUB_ROLE_STATE.resting, this.inResting.bind(this), this.exeResting.bind(this), this.outResting.bind(this)),
                this.roleStManager.registerState(HUB_ROLE_STATE.tired, this.inTired.bind(this), this.exeTired.bind(this), this.outTired.bind(this)),
                this.roleStManager.registerState(HUB_ROLE_STATE.hungry, this.inHungry.bind(this), this.exeHungry.bind(this), this.outHungry.bind(this)),
                this.roleStManager.registerState(HUB_ROLE_STATE.listen, this.inListen.bind(this), this.exeListen.bind(this), this.outListen.bind(this)),
                this.roleStManager.registerState(HUB_ROLE_STATE.speeking, this.inSpeaking.bind(this), this.exeSpeaking.bind(this), this.outSpeaking.bind(this)),
                this.roleStManager.registerState(HUB_ROLE_STATE.interacting, this.inInteracting.bind(this), this.exeInteracting.bind(this), this.outInteracting.bind(this)),
                this.roleStManager.registerState(HUB_ROLE_STATE.wanna_motion, this.inWannaMotion.bind(this), this.exeWannaMotion.bind(this), this.outWannaMotion.bind(this)),
                this.roleStManager.registerState(HUB_ROLE_STATE.wanna_learn, this.inWannaLearn.bind(this), this.exeWannaLearn.bind(this), this.outWannaLearn.bind(this));
                let e = this.flower.getChildByName("flower");
                mgrInteraction.restState == E_REST_STATE.rest ? (this.roleStManager.setNextState(HUB_ROLE_STATE.resting),
                this.cameraBack.fieldOfView = 30,
                this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,1.2,5.2),
                this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-6),
                this.context.bFromLoading,
                this.cameraBack.transform.position = new Laya.Vector3(0,1.2,5.2),
                this.cameraBack.transform.rotationEuler = new Laya.Vector3(-6),
                this.buttonRecord.__node.scale(0, 0),
                e.active = !0) : mgrInteraction.restState == E_REST_STATE.none && (this.roleStManager.setNextState(HUB_ROLE_STATE.idle),
                this.buttonRecord.__node.scale(0, 0),
                CustomTween.delayTime(this.buttonRecord.__node, 2e3).to({
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).start(1),
                this.cameraBack.fieldOfView = 30,
                this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,.95,3.25),
                this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-6),
                this.context.bFromLoading ? (this.cameraBack.transform.position = new Laya.Vector3(0,.95,4.5),
                this.cameraBack.transform.rotationEuler = new Laya.Vector3(-6),
                this.avatar.playFaceAnimation(ANIMATION_ID.face.shuohua),
                Timer.callLater(3, ()=>{
                    this.avatar.playFaceAnimation(ANIMATION_ID.face.kaixin01)
                }
                , this)) : (this.cameraBack.transform.position = new Laya.Vector3(0,.95,3.25),
                this.cameraBack.transform.rotationEuler = new Laya.Vector3(-6)),
                e.active = !1),
                Timer.callLoop(.016, ()=>{
                    this.roleStManager.update()
                }
                , this),
                this.roleStManager.update(),
                mgrInteraction.restState == E_REST_STATE.rest ? (this.spriteMask.alpha = MASK_NIGHT_ALPHA,
                this.spriteBgBlack.alpha = 1,
                this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_zhujiemian_night, this.spriteEffect1, 0, .97),
                mgrSound.play(7)) : mgrInteraction.restState == E_REST_STATE.none && (this.spriteMask.alpha = 0,
                this.spriteBgBlack.alpha = 0,
                this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_zhujiemian_bgstar, this.spriteEffect1, 0, .97),
                mgrSound.play(1),
                Timer.callLater(1, ()=>{
                    mgrGuide.isGuiding()
                }
                , this)),
                Tools.active3dObjectRayCheck(this.scene3DBack, this.cameraBack, this.onRaycastResult.bind(this))
            }
            )
        }
        widget() {
            Layout.widget(.5, 45, this.topBar, {
                x: .5,
                y: 0
            }),
            Layout.widget(10, -1, this.buttonLevel.__node),
            Layout.widget(Laya.stage.width - 40, -1, this.spriteJumpOtherGame, {
                x: 1,
                y: 0
            }),
            Layout.widget(20, -1, this.boxLeftList),
            Layout.widget(Laya.stage.width - 20, -1, this.boxRightList, {
                x: 1,
                y: 0
            }),
            1 == mgrSdk.getCopNumberValueByKey("ui_layout_down_hub") ? Layout.widget(.5, Laya.stage.height - 20, this.boxBottom, {
                x: .5,
                y: 1
            }) : Layout.widget(.5, Laya.stage.height - 220, this.boxBottom, {
                x: .5,
                y: 1
            }),
            this.boxLeftList._orgX = this.boxLeftList.x,
            this.boxRightList._orgX = this.boxRightList.x,
            this.buttonLevel.__node._orgX = this.buttonLevel.__node.x,
            this.buttonGameCenter.__node._orgY = this.buttonGameCenter.__node.y,
            this.buttonGameCenter.__node.y -= 500,
            this.boxLeftList.x -= 300,
            this.boxRightList.x += 300,
            this.buttonLevel.__node.x -= 300,
            this.buttonPvp.__node.scale(0, 0),
            this.buttonStage.__node.scale(0, 0),
            this.buttonGarden.__node.scale(0, 0),
            this.buttonInteraction.__node.scale(0, 0),
            this.topBar.alpha = 0
        }
        fadeIn() {
            this.topBar.alpha = 1,
            CustomTween.from(this.topBar, {
                y: this.topBar.y - 300
            }, 300, Laya.Ease.backOut).start(1),
            Timer.callLater(0, ()=>{
                !mgrGuide.isGuiding() && CustomTween.to(this.boxLeftList, {
                    x: this.boxLeftList._orgX
                }, 500, Laya.Ease.backOut).start(1),
                !mgrGuide.isGuiding() && CustomTween.to(this.boxRightList, {
                    x: this.boxRightList._orgX
                }, 500, Laya.Ease.backOut).start(1),
                !mgrGuide.isGuiding() && CustomTween.to(this.buttonLevel.__node, {
                    x: this.buttonLevel.__node._orgX
                }, 500, Laya.Ease.backOut).start(1),
                !mgrGuide.isGuiding() && CustomTween.to(this.buttonGameCenter.__node, {
                    y: this.buttonGameCenter.__node._orgY
                }, 500, Laya.Ease.backOut).start(1)
            }
            , this)
        }
        tryStartGuide() {
            mgrGuide.registerGuideNode("vHubScene.buttonGarden", this.buttonGarden.__node),
            mgrGuide.registerGuideNode("vHubScene.buttonStage", this.buttonStage.__node),
            mgrGuide.registerGuideNode("vHubScene.buttonPvp", this.buttonPvp.__node),
            mgrGuide.registerGuideNode("vHubScene.buttonInteraction", this.buttonInteraction.__node),
            mgrGuide.isFinished(601) ? mgrGuide.isFinished(701) ? mgrGuide.isFinished(801) ? (mgrInteraction.bMotioned = !0,
            mgrInteraction.bRested = !0,
            mgrInteraction.bStudyed = !0,
            mgrInteraction.bEated = !0) : mgrGuide.startGuide(801) : mgrGuide.startGuide(701) : mgrGuide.startGuide(601)
        }
        showSomeDialogOther() {
            if (mgrChannel.canGameInterPushIcon() && !this.context.vJumpOtherGameNode && (this.context.vJumpOtherGameNode = this.spriteJumpOtherGame.addChild(new vJumpOtherGameNode)),
            this.tryStartGuide(),
            mgrGuide.isGuiding())
                return;
            let[e,t] = mgrOfflineReward.getOfflineReward();
            if (t > 0)
                return void mgrDirector.openDialog("vOfflineDialog", {
                    fOnClose: ()=>{
                        Timer.callLoop(.016, e=>{
                            0 == DialogBase.ShowingDialog.length && (e.stop(),
                            mgrSign.getBadgeCout() > 0) && mgrDirector.openDialog("vSignDialog", {
                                bDisableInt: this.context.bFromLoading,
                                fOnClose: ()=>{}
                            })
                        }
                        , this)
                    }
                    ,
                    bDisableInt: this.context.bFromLoading
                });
            if (mgrSign.getBadgeCout() > 0)
                return void mgrDirector.openDialog("vSignDialog", {
                    bDisableInt: this.context.bFromLoading,
                    fOnClose: ()=>{}
                });
            if (1 == mgrSdk.getCopNumberValueByKey("ui_layout_down_hub")) {
                if (Tools.random(1, 100) <= mgrSdk.getCopNumberValueByKey("ui_pop_dialog_ratio_hub") && mgrPlayer.isPopBannerTipDialogCding())
                    return void mgrDirector.openDialog("vHubRestingTipDialog")
            }
            console.log("新手引导全部完成，则主界面尝试触发评分弹出框");
            let a = mgrSdk.getCopNumberValueByKey("pop_review_ratio") || 0;
            Tools.random(100) <= a ? mgrReview.tryShowReviewDialog() : console.log("  概率不满足")
        }
        buildUi(e) {
            this.bottomSkeleton = ULSkeleton.create("ui_zjm", ()=>{
                let e = this.context.bFromLoading ? .5 : .016;
                Timer.callLater(e, ()=>{
                    this.context.bFromLoading ? this.bottomSkeleton.playAnimation("idle1", !1) : this.bottomSkeleton.playAnimation("idle2", !1);
                    let e = 0;
                    e = this.context.bFromLoading ? 0 : -50,
                    CustomTween.delayTime(this.buttonPvp.__node, (75 + e) / 30 * 1e3).to({
                        scaleX: .82,
                        scaleY: 1.15
                    }, 5 / 30 * 1e3).to({
                        scaleX: 1.1,
                        scaleY: .68
                    }, 100).to({
                        scaleX: .7,
                        scaleY: 1.16
                    }, 4 / 30 * 1e3).to({
                        scaleX: 1,
                        scaleY: 1
                    }, 5 / 30 * 1e3).start(1),
                    CustomTween.delayTime(this.buttonStage.__node, (80 + e) / 30 * 1e3).to({
                        scaleX: .74,
                        scaleY: 1.09
                    }, 5 / 30 * 1e3).to({
                        scaleX: 1.21,
                        scaleY: .72
                    }, 100).to({
                        scaleX: .72,
                        scaleY: 1.14
                    }, 4 / 30 * 1e3).to({
                        scaleX: 1,
                        scaleY: 1
                    }, 5 / 30 * 1e3).start(1),
                    CustomTween.delayTime(this.buttonGarden.__node, (85 + e) / 30 * 1e3).to({
                        scaleX: .82,
                        scaleY: 1.14
                    }, 5 / 30 * 1e3).to({
                        scaleX: 1.09,
                        scaleY: .66
                    }, 100).to({
                        scaleX: .87,
                        scaleY: 1.14
                    }, 4 / 30 * 1e3).to({
                        scaleX: 1,
                        scaleY: 1
                    }, 5 / 30 * 1e3).start(1),
                    CustomTween.delayTime(this.buttonInteraction.__node, (80 + e) / 30 * 1e3).callback(()=>{
                        this.fadeIn(),
                        this.showSomeDialogOther()
                    }
                    ).to({
                        scaleX: .67,
                        scaleY: 1.09
                    }, 5 / 30 * 1e3).to({
                        scaleX: 1.19,
                        scaleY: .68
                    }, 100).to({
                        scaleX: .73,
                        scaleY: 1.18
                    }, 4 / 30 * 1e3).to({
                        scaleX: 1,
                        scaleY: 1
                    }, 5 / 30 * 1e3).start(1)
                }
                , this)
            }
            ),
            this.boxBottom.addChild(this.bottomSkeleton),
            this.bottomSkeleton.pos(this.boxBottom.width / 2, this.boxBottom.height),
            this.bottomSkeleton.zOrder = -2,
            this.spriteBg.zOrder = -4,
            this.topBar = new vTopBar({}),
            this.addChild(this.topBar);
            let t = new TaskManager
              , a = [];
            a.push(e=>{
                mgrLoader.loadModeWithModeId("item_huabao", ()=>{
                    this.flower = mgrLoader.Pool.getModel("item_huabao"),
                    this.flower.transform.scale = new Laya.Vector3;
                    let[t] = mgrMaterial.setCartonShader(this.flower, "item_huabao");
                    mgrInteraction.restState == E_REST_STATE.rest ? t.albedoColor = new Laya.Vector4(190 / 255,212 / 255,246 / 255,1) : t.albedoColor = new Laya.Vector4(1,1,1,1),
                    this.add3DEffectAtBack(this.flower, 0),
                    this.flowerAnimator = this.flower.getComponent(Laya.Animator),
                    mgrInteraction.restState == E_REST_STATE.rest ? mgrMaterial.playAnimation(this.flowerAnimator, ANIMATION_ID.hua.closeIdle, 0) : mgrInteraction.restState == E_REST_STATE.none && mgrMaterial.playAnimation(this.flowerAnimator, ANIMATION_ID.hua.openIdle, 0),
                    e()
                }
                , this, 1)
            }
            ),
            this.avatar = new RoleAvatar,
            this.add3DEffectAtBack(this.avatar, 0),
            this.avatar.transform.scale = new Laya.Vector3,
            this.avatar.fillByPartIds(mgrPart.getLastClothes()),
            a.push(e=>{
                this.avatar.registerLoadEndCallback(()=>{
                    e()
                }
                )
            }
            ),
            t.push(a),
            t.start(()=>{
                e()
            }
            , this)
        }
        startListen() {
            SoundLibary.recoderVaildVoice(1.5, ()=>{}
            , ()=>{
                this.roleStManager && this.roleStManager.setNextState(HUB_ROLE_STATE.speeking)
            }
            , ()=>{
                this.roleStManager && this.roleStManager.setNextState(HUB_ROLE_STATE.idle),
                mgrSound.resumeSound("vHubScene_Record")
            }
            ),
            mgrSdk.staticPointEvent(8006)
        }
        stopListen() {
            try {
                SoundLibary.stopRecord()
            } catch (e) {
                console.log(e)
            }
        }
        fillData() {
            this.labelLevel.text = `${mgrInteraction.level}`,
            this.progressBarLevel.progress = mgrInteraction.levelProgress,
            this.refreshInteractionProgress()
        }
        refreshInteractionProgress() {
            let e = mgrCfg.get_from_role_level_db(mgrInteraction.level)
              , t = mgrInteraction.energy / e.restProgressValue
              , a = mgrInteraction.eatFillValue / e.eatProgressValue
              , i = mgrInteraction.motionProgress / e.motionProgressValue
              , s = mgrInteraction.learnProgress / e.learnProgressValue
              , o = Math.min(t, a, i, s);
            this.progressBarInteractionFg.progress = o,
            this.spriteInteractionBgWarn.visible = o <= .1
        }
        onKeyDown(e) {}
        refresh() {
            this.buttonSuperEasy.__node.visible = mgrChannel._isJumpLeisureEnabled,
            this.sprite4399.visible = mgrChannel.isChannel4399(),
            this.buttonMoreGame.__node.visible = mgrChannel.canGameInterPushMoreGame(),
            this.buttonRewardMoreGame.__node.visible = mgrChannel.canGameInterPushRewardMoreGame(),
            this.buttonNotice.__node.visible = !!mgrSdk.getCopByKey("url_nortice"),
            this.buttonFindeMe.__node.visible = mgrChannel.canShowFindMe(),
            this.buttonShortCut.__node.visible = mgrChannel._isSupportInstallShortcut && !mgrChannel.isTakedInstallShortCutReward();
            let e = mgrAd.preCheckAdNoCd("double_online");
            mgrTip.showBadgeWithNumber(this.buttonSign.__node, mgrSign.getBadgeCout(), new Laya.Point(15,15)),
            this.buttonSign.__node.visible = mgrSign.getState() != SignState.signed,
            this.buttonOnlineReward.__node.visible = e && !this.buttonSign.__node.visible && !1,
            mgrTip.showBadgeWithNumber(this.buttonWishPool.__node, mgrWishPool.getBadegCount(), new Laya.Point(15,15)),
            mgrTip.showBadgeWithNumber(this.buttonTask.__node, mgrDailyTask.getBadageCount(), new Laya.Point(15,15)),
            mgrTip.showBadgeWithNumber(this.buttonIllustrateHandbook.__node, mgrPart.getBadgeCount(), new Laya.Point(15,15)),
            mgrTip.showBadgeWithNumber(this.buttonStage.__node, mgrPlayer.getItemAmount(Const.ITEM_ID_ENERGY), new Laya.Point(10,10)),
            mgrTip.showBadgeWithNumber(this.buttonPvp.__node, mgrOfflinePvp.getBadgeCount(), new Laya.Point(15,15)),
            mgrTip.showBadgeWithNumber(this.buttonGarden.__node, mgrGarden.getBadgeCount(), new Laya.Point(15,15)),
            mgrTip.showBadgeWithNumber(this.boxGameCenterReadPoint, 1, new Laya.Point(15,15)),
            this.buttonAdH5.__node.visible = mgrChannel._isShowUrlAdIcon && 1 == mgrCop.getNumberValue("for_ad_h5"),
            mgrPart.getBadgeCount() > 0 ? this.context.illustrateTween || (this.context.illustrateTween = CustomTween.roke(this.buttonIllustrateHandbook.__node, 7, 100, 1e3)) : (this.context.illustrateTween && this.context.illustrateTween.stop(),
            mgrWishPool.getBadegCount() > 0 ? this.context.wishTween || (this.context.wishTween = CustomTween.roke(this.buttonWishPool.__node, 7, 100, 1e3)) : (this.context.wishTween && this.context.wishTween.stop(),
            mgrOfflinePvp.getBadgeCount() > 0 ? this.context.pvpTween || (this.context.pvpTween = CustomTween.roke(this.buttonPvp.__node, 7, 100, 1e3)) : this.context.pvpTween && this.context.pvpTween.stop()))
        }
        onMsgRoleExpChanged() {
            this.labelLevel.text = `${mgrInteraction.level}`,
            this.progressBarLevel.progress = mgrInteraction.levelProgress
        }
        onTouchButtonAdH5() {
            mgrAd.triggerAdEvent("ad_h5")
        }
        onTouchButtonPvp() {
            mgrDirector.warpSceneWidthEffect("vPvpScene"),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vHubScene.clickButtonPvp"
            })
        }
        onTouchbuttonLevel() {
            mgrDirector.openDialog("vSettingDialog")
        }
        onTouchButtonSign() {
            mgrDirector.openDialog("vSignDialog")
        }
        onTouchButtonWish() {
            mgrDirector.open2DScene("vWishPoolMianScene")
        }
        onTouchButtonOnlineReward() {
            let e = mgrPlayer.getRecoverMaxAmount(Const.ITEM_ID_FANCE_COUNT);
            mgrPlayer.getItemAmount(Const.ITEM_ID_FANCE_COUNT) < e ? mgrTip.showMsgTip(`${this.multilingualText1}`) : mgrDirector.openDialog("vFanceRewardDialog")
        }
        onTouchButtonChallenge() {
            mgrDirector.open2DScene("vArenaMainScene"),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vHubScene.clickArena"
            })
        }
        onTouchButtonShop() {
            mgrDirector.openDialog("vShopDialog", null, !0)
        }
        onTouchButtonTask() {
            mgrDirector.openDialog("vDailyTaskDialog")
        }
        onTouchButtonFindMe() {
            mgrChannel.isChannelBaidu() ? mgrDirector.openDialog("vFindMeDialogBaidu") : mgrChannel.isChannelWeixin() ? mgrDirector.openDialog("vFindMeDialogWeixin") : mgrChannel.isChannelHeadline() ? mgrDirector.openDialog("vFindMeDialogToutiao") : mgrChannel.isChannelPlatformDouyin() && mgrDirector.openDialog("vFindMeDialogDouyin")
        }
        onTouchButtonRank() {
            mgrDirector.open2DScene("vRankScene", {
                tag: ERankSceneTag.level
            })
        }
        onTouchButtonIllustrateHandbook() {
            mgrDirector.open2DScene("vIllustrateScene")
        }
        onTouchButtonMoreGame() {
            window.conch ? mgrSdk.openULMoreGame() : mgrDirector.openDialog("vMoreGameDialog")
        }
        onTouchButtonRewardMoreGame() {
            mgrDirector.openDialog("vRewardMoreGame")
        }
        onTouchButtonNotice() {
            window.conch && vWebViewDialog.openWebView(mgrCop.get("url_nortice"))
        }
        onTouchButtonStage() {
            mgrDirector.warpSceneWidthEffect("vStageScene"),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vHubScene.clickButtonStage"
            })
        }
        onTouchButtonDesignRoom() {
            mgrDirector.open2DScene("vDesignerScene")
        }
        onTouchButtonFreeWear() {
            mgrDirector.warpSceneWidthEffect("vRoomScene")
        }
        onTouchButtonShortcut() {
            mgrSdk.installShortcut()
        }
        onTouchButtonGarden() {
            mgrDirector.warpSceneWidthEffect("vGardenMainScene"),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vHubScene.clickButtonGarden"
            })
        }
        onTouchButtonInteraction() {
            let e = mgrCfg.get_from_role_level_db(mgrInteraction.level)
              , t = mgrInteraction.energy / e.restProgressValue
              , a = mgrInteraction.eatFillValue / e.eatProgressValue
              , i = mgrInteraction.motionProgress / e.motionProgressValue
              , s = mgrInteraction.learnProgress / e.learnProgressValue
              , o = Math.min(t, a, i, s);
            mgrInteraction.restState == E_REST_STATE.rest ? mgrDirector.warpSceneWidthEffect("vRestScene") : t == o ? mgrDirector.warpSceneWidthEffect("vRestScene") : a == o ? mgrDirector.warpSceneWidthEffect("vEatingScene") : i == o ? mgrDirector.warpSceneWidthEffect("vMotionMainScene") : s == o && mgrDirector.warpSceneWidthEffect("vAnswerQuestionScene"),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vHubScene.clickButtonInteraction"
            })
        }
        onTouchSpriteBg(e) {
            if (e.isBegin && (this.bTouchBg = !0,
            this.lastTouchBgPos = e.pos),
            (e.isCancel || e.isEnd) && (this.bTouchBg = !1),
            this.bTouchBg) {
                let t = e.pos.x - this.lastTouchBgPos.x;
                this.lastTouchBgPos = e.pos,
                this.avatar && this.avatar.transform.rotate(new Laya.Vector3(0,t,0), !0, !1)
            }
        }
        onMsgInteractionProgressRefresh() {
            this.refreshInteractionProgress()
        }
        onRaycastResult(e) {
            if (DialogBase.ShowingDialog.length > 0)
                return;
            if (this.roleStManager.getCurState() == HUB_ROLE_STATE.listen || this.roleStManager.getCurState() == HUB_ROLE_STATE.speeking)
                return;
            if (!e.succeeded)
                return;
            if (this.roleStManager.getCurState() == HUB_ROLE_STATE.resting)
                return void mgrDirector.openDialog("vWeakupTipDialog");
            let t;
            if ("Click_head" == e.collider.owner.name ? t = 1 : "Click_body" == e.collider.owner.name ? t = 2 : "Click_foot" == e.collider.owner.name && (t = 3),
            !t)
                return;
            mgrSound.play(102);
            let a = mgrCfg.get_from_click_feedback_db(t);
            if (-1 == this.lastIndex)
                this.lastIndex = 0;
            else
                for (; ; ) {
                    let e = Tools.random(a.length) - 1;
                    if (e != this.lastIndex) {
                        this.lastIndex = e;
                        break
                    }
                }
            this.sendMsg("MSG_CLICK_ROLE", {
                pos: t
            }),
            this.roleStManager.setNextState(HUB_ROLE_STATE.interacting);
            let i = a[this.lastIndex];
            mgrSound.play(i.soundId),
            this.avatar.playFaceAnimation(i.faceAnimaitonIds[Tools.random(0, i.faceAnimaitonIds.length - 1)]),
            this.avatar.playAnimation(i.animationId, .1, null, ()=>{
                this.roleStManager.setNextState(HUB_ROLE_STATE.idle)
            }
            )
        }
        inIdle() {
            this.avatar.playAnimation(ANIMATION_ID.idle),
            this.avatar.playFaceAnimation(ANIMATION_ID.face.idle),
            mgrMaterial.playAnimation(this.flowerAnimator, ANIMATION_ID.hua.openIdle, 0),
            this.avatar.showWings();
            let e = ()=>{
                Timer.callLater(8, ()=>{
                    if (this.roleStManager.getCurState() != HUB_ROLE_STATE.idle)
                        return;
                    let t = mgrCfg.get_from_role_level_db(mgrInteraction.level);
                    mgrInteraction.energy / t.restProgressValue < .1 ? this.roleStManager.setNextState(HUB_ROLE_STATE.tired) : mgrInteraction.eatFillValue / t.eatProgressValue < .1 ? this.roleStManager.setNextState(HUB_ROLE_STATE.hungry) : mgrInteraction.motionProgress / t.motionProgressValue < .1 ? this.roleStManager.setNextState(HUB_ROLE_STATE.wanna_motion) : mgrInteraction.learnProgress / t.learnProgressValue < .1 ? this.roleStManager.setNextState(HUB_ROLE_STATE.wanna_learn) : Math.random() > .5 ? (this.avatar.playFaceAnimation(ANIMATION_ID.face.shuohua),
                    this.avatar.playAnimation(ANIMATION_ID.idle02, 0, null, ()=>{
                        this.avatar.playFaceAnimation(ANIMATION_ID.face.idle),
                        e()
                    }
                    )) : (this.avatar.playFaceAnimation(ANIMATION_ID.face.shuohua),
                    this.avatar.playAnimation(ANIMATION_ID.idle03, 0, null, ()=>{
                        this.avatar.playFaceAnimation(ANIMATION_ID.face.idle),
                        e()
                    }
                    ))
                }
                , this)
            }
            ;
            e()
        }
        exeIdle() {}
        outIdle() {}
        inResting() {
            this.avatar.playAnimation("shuijiao02-shuijiao02_idle"),
            mgrMaterial.playAnimation(this.flowerAnimator, ANIMATION_ID.hua.closeIdle, 0),
            this.avatar.transform.scale = new Laya.Vector3;
            mgrLoader.loadModeWithModeId("e_sj", ()=>{
                let e = mgrLoader.Pool.getModel("e_sj");
                this.add3DEffectAtBack(e, 0),
                e.transform.position = new Laya.Vector3(0,1.1,0),
                e.transform.scale = new Laya.Vector3(1,1,1),
                e.transform.rotationEuler = new Laya.Vector3(0,90,0)
            }
            , this, 1);
            let e = ()=>{
                mgrSound.play(237)
            }
            ;
            e(),
            Timer.callLoop(5, e, this)
        }
        exeResting() {}
        outResting() {}
        inTired() {
            mgrSound.play(236),
            this.avatar.playFaceAnimation(ANIMATION_ID.face.haqian),
            this.playPaopaoTip(),
            this.avatar.playAnimation(ANIMATION_ID.tired01, .1, null, ()=>{
                this.roleStManager && this.roleStManager.setNextState(HUB_ROLE_STATE.idle)
            }
            )
        }
        exeTired() {}
        outTired() {}
        inHungry() {
            mgrSound.play(233),
            this.avatar.playFaceAnimation(ANIMATION_ID.face.ele01),
            this.avatar.playAnimation(ANIMATION_ID.hungry01),
            this.playPaopaoTip(),
            Timer.callLater(3, ()=>{
                this.roleStManager.getCurState() == HUB_ROLE_STATE.hungry && this.roleStManager.setNextState(HUB_ROLE_STATE.idle)
            }
            , this)
        }
        exeHungry() {}
        outHungry() {}
        inListen() {
            let e = ["lingting01-lingting01", "lingting02-lingting02"];
            this.avatar.playAnimation(e[Tools.random(e.length) - 1], .05)
        }
        exeListen() {}
        outListen() {}
        inSpeaking() {
            let e = ["shuohua01-shuohua01", "shuohua02-shuohua02", "shuohua03-shuohua03"];
            this.avatar.playAnimation(e[Tools.random(e.length) - 1], .25),
            this.avatar.playFaceAnimation(ANIMATION_ID.face.shuohua)
        }
        exeSpeaking() {}
        outSpeaking() {}
        inInteracting() {}
        exeInteracting() {}
        outInteracting() {}
        inWannaMotion() {
            this.avatar.playFaceAnimation(ANIMATION_ID.face.kaixin01),
            this.avatar.playAnimation(ANIMATION_ID.motion.idle),
            this.playPaopaoTip(),
            Timer.callLater(3, ()=>{
                this.roleStManager.getCurState() == HUB_ROLE_STATE.wanna_motion && this.roleStManager.setNextState(HUB_ROLE_STATE.idle)
            }
            , this)
        }
        exeWannaMotion() {}
        outWannaMotion() {}
        inWannaLearn() {
            this.avatar.playFaceAnimation(ANIMATION_ID.face.kaixin01),
            this.avatar.playAnimation(ANIMATION_ID.idle),
            this.playPaopaoTip(),
            Timer.callLater(3, ()=>{
                this.roleStManager.getCurState() == HUB_ROLE_STATE.wanna_learn && this.roleStManager.setNextState(HUB_ROLE_STATE.idle)
            }
            , this)
        }
        exeWannaLearn() {}
        outWannaLearn() {}
        playPaopaoTip() {
            let e = ""
              , t = this.roleStManager.getCurState();
            t == HUB_ROLE_STATE.hungry ? e = TIP_CION.eat[Tools.random(TIP_CION.eat.length) - 1] : t == HUB_ROLE_STATE.tired ? e = TIP_CION.rest[Tools.random(TIP_CION.rest.length) - 1] : t == HUB_ROLE_STATE.wanna_learn ? e = TIP_CION.learn[Tools.random(TIP_CION.learn.length) - 1] : t == HUB_ROLE_STATE.wanna_motion && (e = TIP_CION.motion[Tools.random(TIP_CION.motion.length) - 1]),
            Tools.loadImg(this.buttonTipIcon.__node, e),
            this.imagePaopao1.scale(0, 0),
            this.imagePaopao2.scale(0, 0),
            this.imagePaopao3.scale(0, 0),
            CustomTween.to(this.imagePaopao1, {
                scaleX: 1,
                scaleY: 1
            }, 500).callback(()=>{
                CustomTween.to(this.imagePaopao2, {
                    scaleX: 1,
                    scaleY: 1
                }, 500).callback(()=>{
                    CustomTween.to(this.imagePaopao3, {
                        scaleX: 1,
                        scaleY: 1
                    }, 500, Laya.Ease.backOut).delayTime(3e3).callback(()=>{
                        CustomTween.to(this.imagePaopao3, {
                            scaleX: 0,
                            scaleY: 0
                        }, 250).start(1),
                        CustomTween.delayTime(this.imagePaopao2, 250).to({
                            scaleX: 0,
                            scaleY: 0
                        }, 250).start(1),
                        CustomTween.delayTime(this.imagePaopao1, 500).to({
                            scaleX: 0,
                            scaleY: 0
                        }, 250).start(1)
                    }
                    ).start(1)
                }
                ).start(1)
            }
            ).start(1)
        }
        onTouchButtonTipIcon() {
            let e = this.roleStManager.getCurState();
            e == HUB_ROLE_STATE.hungry ? mgrDirector.warpSceneWidthEffect("vEatingScene") : e == HUB_ROLE_STATE.tired ? mgrDirector.warpSceneWidthEffect("vRestScene") : e == HUB_ROLE_STATE.wanna_learn ? mgrDirector.warpSceneWidthEffect("vAnswerQuestionScene") : e == HUB_ROLE_STATE.wanna_motion && mgrDirector.warpSceneWidthEffect("vMotionMainScene")
        }
        onTouchButtonSuperEasy() {
            mgrSdk.openMoreWonderful()
        }
        onTouchButtonGameCenter() {
            mgrDirector.warpSceneWidthEffect("vGameCenterScene")
        }
        onTouchButtonBegin() {
            this.spriteRecordTip.scale(1, 1),
            CustomTween.actionFloat(this.spriteRecordTip, 1, 0, 5e3, e=>{
                this.progressBarRecord.progress = e
            }
            ).callback(()=>{
                this.onTouchButtonEnd()
            }
            ).start(1),
            this.roleStManager && this.roleStManager.setNextState(HUB_ROLE_STATE.listen),
            mgrSound.pauseSound("vHubScene_Record"),
            Timer.callLater(.1, ()=>{
                this.startListen()
            }
            , this)
        }
        onTouchButtonEnd() {
            this.spriteRecordTip.scale(0, 0),
            this.stopListen()
        }
        onTouchButtonCancle() {
            this.spriteRecordTip.scale(0, 0),
            this.roleStManager && this.roleStManager.setNextState(HUB_ROLE_STATE.idle),
            SoundLibary.destroyAllPcmQueue(),
            this.stopListen(),
            mgrSound.resumeSound("vHubScene_Record")
        }
    }
    class vStarLevelItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vStarLevelItem",
            this.exportNodeNames = ["CC_boxStars"],
            this.starLevel = -1
        }
        onOpened() {
            this.name = "vStarLevelItem",
            -1 != this.starLevel && this.fillByData(this.starLevel)
        }
        onClosed() {}
        fillByData(e) {
            if (this.starLevel = e,
            !this.bResLoaded)
                return;
            let t = 75 - 22 * e / 2 + 11;
            for (let a = 0; a < 5; a++) {
                let i = this.boxStars.getChildAt(a);
                a < e ? (i.visible = !0,
                i.pos(t + 22 * a, 15, !0)) : i.visible = !1
            }
        }
    }
    class vWishPoolPart extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vWishPoolPart",
            this.exportNodeNames = ["CC_buttonBg", "CC_ImageIcon", "CC_spriteHavedTag", "CC_spritePriceBg", "CC_spriteConsumeCount", "CC_labelConsumeCount"],
            this.size(108, 122),
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.buttonBg.fOnClick = this.onTouchButtonBg.bind(this),
            this.data && this.fillByData(this.data)
        }
        onClosed() {}
        onTouchButtonBg() {
            this.data && this.data.fOnClick && this.data.fOnClick(this.data.wishData)
        }
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            let t = mgrCfg.get_from_part_db(this.data.wishData.partId);
            Tools.loadImg(this.ImageIcon, t.icon),
            this.spriteHavedTag.visible = mgrPlayer.getItemAmount(this.data.wishData.partId) > 0,
            this.labelConsumeCount.text = `${this.data.wishData.buyConsumeItemAmount}`,
            this.starLevelNode || (this.starLevelNode = new vStarLevelItem({}),
            this.buttonBg.__node.addChild(this.starLevelNode),
            this.starLevelNode.pos(this.width / 2, this.height - 20, !0),
            this.starLevelNode.scale(.7, .7, !0)),
            this.starLevelNode.fillByData(t.level)
        }
    }
    const AD_EVENT_ID_WISH = "free_wish";
    class vWishPoolScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vWishPoolScene",
            this.exportNodeNames = ["CC_spriteBg", "CC_buttonBack", "CC_spriteTitle", "CC_buttonSuit", "CC_spriteSuit", "CC_buttonExchange", "CC_spriteSStar", "CC_boxButtonLayout", "CC_buttonFreeWish", "CC_labelFreeWish", "CC_buttonAdWish", "CC_spriteAdIcon", "CC_labelAdWish", "CC_spriteCoinBg", "CC_imageExchangeIcon", "CC_labelExchangeCount", "CC_spriteSuitName", "CC_labelSuitName", "CC_spriteListBg", "CC_boxList", "CC_buttonCloseExchange", "CC_spriteEffect"],
            this.avatar = null
        }
        onOpened() {
            super.onOpened(),
            this.buttonBack.fOnClick = this.onTouchButtonBack.bind(this),
            this.buttonSuit.fOnClick = this.onTouchButtonSuit.bind(this),
            this.buttonAdWish.fOnClick = this.onTouchButtonAdWish.bind(this),
            this.buttonFreeWish.fOnClick = this.onTouchButtonFreeWish.bind(this),
            this.buttonExchange.fOnClick = this.onTouchButtonExchange.bind(this),
            this.buttonCloseExchange.fOnClick = this.onTouchButtonCloseExchange.bind(this),
            Tools.registerTouchHander(this.spriteBg, this.onTouchSpriteBg.bind(this)),
            this.buildUi(),
            this.fillData(),
            this.updateButtonStatus(),
            this.fadeIn(),
            Timer.callLoop(1, this.updateButtonStatus.bind(this), this),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccess.bind(this)
            }),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_qiyuan_glow, this.spriteEffect, 0, .97),
            this.scene3DFront.zOrder = -2,
            this.spriteBg.zOrder = -3,
            1005 == this.context.suitId ? mgrSdk.staticPointEvent(8001) : mgrSdk.staticPointEvent(8002),
            mgrI18n.trySetI18nImage(this.spriteTitle, "art04.png"),
            mgrI18n.trySetI18nImage(this.spriteSStar, "art05.png"),
            mgrI18n.trySetI18nImage(this.spriteSuit, "art12.png")
        }
        onClosed() {
            super.onClosed(),
            vWishPoolScene.spriteCoinIcon = null
        }
        getPreLoadAnimationIds() {
            return [ANIMATION_ID.STAGE.fly_idle]
        }
        onTouchSpriteBg(e) {
            if (e.isBegin && (this.bTouchBg = !0,
            this.lastTouchBgPos = e.pos),
            (e.isCancel || e.isEnd) && (this.bTouchBg = !1),
            this.bTouchBg) {
                let t = e.pos.x - this.lastTouchBgPos.x;
                this.lastTouchBgPos = e.pos,
                this.avatar && this.avatar.transform.rotate(new Laya.Vector3(0,t,0), !0, !1)
            }
            e.isClick && CustomTween.to(this.spriteListBg, {
                scaleY: 0
            }, 200).start(1)
        }
        fadeIn() {
            Layout.widget(10, 10, this.buttonBack.__node),
            Layout.widget(.5, 45, this.spriteCoinBg, {
                x: .5,
                y: 0
            }),
            Layout.widget(10, -1, this.buttonSuit.__node),
            Layout.widget(10, -1, this.buttonExchange.__node),
            Layout.widget(Laya.stage.width - 10, -1, this.spriteSuitName, {
                x: 1,
                y: 1
            }),
            Layout.widget(.5, Laya.stage.height - 260, this.spriteListBg, {
                x: .5,
                y: 1
            }),
            Layout.widget(.5, Laya.stage.height - 200, this.boxButtonLayout, {
                x: .5,
                y: 1
            }),
            this.spriteListBg.scaleY = 0,
            CustomTween.from(this.buttonBack.__node, {
                x: this.buttonBack.__node.x - 100
            }, 700, Laya.Ease.backOut).start(1),
            CustomTween.from(this.buttonSuit.__node, {
                x: this.buttonSuit.__node.x - 100
            }, 700, Laya.Ease.backOut).start(1),
            CustomTween.from(this.spriteSuitName, {
                x: this.spriteSuitName.x + 100
            }, 700, Laya.Ease.backOut).start(1),
            CustomTween.from(this.buttonExchange.__node, {
                x: this.buttonExchange.__node.x - 100
            }, 700, Laya.Ease.backOut).start(1),
            CustomTween.from(this.spriteCoinBg, {
                y: this.spriteCoinBg.y - 100
            }, 700, Laya.Ease.backOut).start(1),
            this.boxButtonLayout.scale(0, 0),
            CustomTween.delayTime(this.boxButtonLayout, 1e3).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1)
        }
        buildUi() {
            this.reuseList = new ReuseList(4,0,10),
            this.reuseList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseList),
            this.reuseList.setItemClass(vWishPoolPart),
            this.reuseList.setHorizontalMoveEnable(!0),
            this.reuseList.setSpaceX(10),
            this.reuseList.setSpaceY(10),
            this.avatar = new RoleAvatar,
            this.add3DEffectAtBack(this.avatar, 0),
            this.spriteBg.zOrder = -2,
            this.cameraBack.fieldOfView = 25,
            this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,1.3,4.65),
            this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-10,0,0),
            this.cameraBack.transform.position = new Laya.Vector3(0,1.3,8.65),
            this.cameraBack.transform.rotationEuler = new Laya.Vector3(-10,0,0);
            let e = [];
            for (let t = 1; t <= 20; t++) {
                let a = mgrCfg.get_from_wish_pool_db(this.context.poolId, t - 1);
                if (!a)
                    break;
                e.push(a.partId)
            }
            this.avatar.fillByPartIds(e),
            this.avatar.transform.scale = new Laya.Vector3,
            mgrTip.showLoadingTip("vWishPoolScene_loadingAvatar"),
            this.avatar.registerLoadEndCallback(()=>{
                this.avatar.transform.scale = new Laya.Vector3(.75,.75,.75),
                this.avatar.playAnimation(ANIMATION_ID.STAGE.fly_idle),
                this.avatar.hideShadow(),
                mgrTip.hideLoadingTip("vWishPoolScene_loadingAvatar")
            }
            )
        }
        fillData() {
            let e;
            for (let t = 1; t <= 20; t++) {
                let a = mgrCfg.get_from_wish_pool_db(this.context.poolId, t - 1);
                if (!a)
                    break;
                e = a
            }
            let t = mgrCfg.get_from_suit_db(e.suitId);
            this.context.suitId = e.suitId,
            this.labelSuitName.text = t.name,
            this.labelExchangeCount.text = mgrPlayer.getItemAmount(Const.ITEM_ID_WISHPOOL_EXCHANGE).toString(),
            Tools.loadImg(this.imageExchangeIcon, mgrCfg.get_from_item_template_db(Const.ITEM_ID_WISHPOOL_EXCHANGE).icon);
            let a = [];
            for (let e = 1; e <= 20; e++) {
                let t = mgrCfg.get_from_wish_pool_db(this.context.poolId, e - 1);
                if (!t)
                    break;
                a.push({
                    wishData: t,
                    fOnClick: this.onClickExchangePart.bind(this)
                })
            }
            this.reuseList.setDatas(a)
        }
        onClickExchangePart(e) {
            mgrPlayer.getItemAmount(e.partId) > 0 ? mgrTip.showItemDetailDialog(e.partId, !0) : (mgrWishPool.exchange(e),
            this.fillData())
        }
        updateButtonStatus() {
            let[e,t] = mgrWishPool.getFreeWishCount(this.context.poolId)
              , a = e < t;
            this.buttonFreeWish.__node.visible = a,
            mgrTip.showBadgeWithNumber(this.buttonFreeWish.__node, 1);
            let i = mgrAd.preCheckAdNoCd(AD_EVENT_ID_WISH);
            if (this.buttonAdWish.__node.visible = i && !a,
            i && !a) {
                let e = mgrAd.getAdEventRemainCd(AD_EVENT_ID_WISH);
                e > 0 ? this.labelAdWish.text = `${Tools.formatTime(e, "%M:%S")}` : mgrI18n.trySetI18nText(this.labelAdWish, "vWishPoolScene.2")
            }
        }
        wish() {
            mgrDirector.openDialog("vWishDialog", {
                fOnFinish: ()=>{
                    mgrWishPool.wish(this.context.poolId, !0),
                    this.fillData()
                }
            }, !0)
        }
        onMsgAdEventSuccess(e) {
            e.adEventId == AD_EVENT_ID_WISH && this.wish()
        }
        onTouchButtonBack() {
            mgrDirector.open2DScene("vWishPoolMianScene")
        }
        onTouchButtonSuit() {
            mgrDirector.open2DScene("vIllustrateScene", {
                backSceneName: "vWishPoolScene",
                suitId: this.context.suitId,
                backSceneContext: this.context
            })
        }
        onTouchButtonFreeWish() {
            this.wish()
        }
        onTouchButtonAdWish() {
            mgrAd.triggerAdEvent(AD_EVENT_ID_WISH)
        }
        onTouchButtonExchange() {
            CustomTween.to(this.spriteListBg, {
                scaleY: 1,
                scaleX: 1
            }, 200, Laya.Ease.backOut).start(1)
        }
        onTouchButtonCloseExchange() {
            CustomTween.to(this.spriteListBg, {
                scaleY: 0,
                scaleX: 0
            }, 200).start(1)
        }
    }
    class vJumpOtherGameBanner extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vJumpOtherGameBanner",
            this.exportNodeNames = ["CC_boxList"],
            this.size(576, 150),
            this.anchorX = .5,
            this.anchorY = .5
        }
        onOpened() {
            this.registerListeners({
                MSG_ON_OPEN_JUMP_RESULT: this.onMsgOpenJumpResult.bind(this)
            }),
            mgrSdk.openJump("80", "list")
        }
        onClosed() {}
        buildUi(e) {
            if (this.datas)
                return;
            this.datas = e,
            this.reuseList = new ReuseList(0,1,10),
            this.reuseList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseList),
            this.reuseList.setItemClass(vJumpOtherGameItem),
            this.reuseList.setHorizontalMoveEnable(!0),
            this.reuseList.setSpaceX(10),
            this.reuseList.setDatas(e),
            this.context.index = 0;
            let t, a = 1;
            this.context.scroolTimer = Timer.callLoop(2, ()=>{
                if (this.reuseList) {
                    this.context.index += a;
                    let e = this.reuseList.getDatas().length;
                    (this.context.index <= 0 || this.context.index >= e - 6) && (a = -a),
                    this.reuseList.tweenTo(this.context.index, 2e3)
                }
            }
            , this),
            Tools.registerTouchHander(this.reuseList, e=>{
                e.isBegin ? (this.context.scroolTimer.stop(),
                t = e.pos) : (e.isEnd || e.isCancel) && this.context.scroolTimer.start(!1)
            }
            )
        }
        onMsgOpenJumpResult(e) {
            if ("list" == e.type) {
                let t = e.jumpInfo;
                this.buildUi(t)
            }
        }
    }
    class vJumpOtherGameItem extends ReuseListItem {
        constructor() {
            super();
            this.size(124 * .6, 96),
            this.anchorX = 0,
            this.anchorY = 0,
            this.image = new Laya.Image,
            this.image.size(124 * .6, 96),
            this.image.anchorX = .5,
            this.image.anchorY = .5,
            this.image.x = 124 * .6 / 2,
            this.image.y = 48,
            this.addChild(this.image),
            this.button = this.image.addComponent(ScaleButton),
            this.button.fOnClick = this.onTouchButton.bind(this)
        }
        onTouchButton() {
            this.data && mgrSdk.jumpOtherGame(this.data.index, "list")
        }
        fillByData(e) {
            this.image.skin = e.url,
            this.data = e
        }
    }
    class mgrNativeAdSdk extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            this.registerListeners({
                MSG_SDK_OPEN_NATIVE_ADV_RESULT: this.onMsgOpenNativeAdvResult.bind(this),
                MSG_SDK_CLICK_NATIVE_ADV_RESULT: this.onMsgClickNativeAdvResult.bind(this),
                MSG_SDK_CLOSE_NATIVE_ADV_RESULT: this.onMsgCloseNativeAdvResult.bind(this)
            })
        }
        static loadRecord() {
            super.loadRecord()
        }
        static saveRecord() {
            super.saveRecord()
        }
        static getNativeDataByNativeType(e) {
            return this.cacheNativeDatas[e]
        }
        static cleanNativeDataByNativeType(e) {
            this.cacheNativeDatas[e] = null,
            console.log("原生缓存清除成功！！！ advId = ", e)
        }
        static onClickNativeAd(e, t, a) {
            this.getNativeDataByNativeType(e) ? mgrSdk.clickNativeAdv(e, JSON.stringify(t), a) : console.warn(" inbuild sdk: onClickNativeAd: nativeData not found! advId= ", e)
        }
        static onCloseNativeAd(e, t, a) {
            console.log("inbuild sdk: onCloseNativeAd: advId=", e),
            mgrSdk.closeAdv(e, JSON.stringify(t))
        }
        static _onReceiveNativeData(e, t, a) {
            e && t && (this.NATIVE_DATA_SERIAL_NUMBER++,
            t.serialNumber = this.NATIVE_DATA_SERIAL_NUMBER,
            t.advId = e,
            t.title.length > 6 && (t.title = t.title.substring(0, 6)),
            t.desc.length > 24 && (t.desc = t.desc.substring(0, 24)),
            this.cacheNativeDatas[e] = t,
            this.sendMsg("MSG_NATIVE_AD_SDK_NATIVE_DATA_REFRESH", {
                advId: e,
                userData: a
            }))
        }
        static onMsgOpenNativeAdvResult(e) {
            console.log("inbuild sdk: onMsgOpenNativeAdvResult", e);
            let t = e.code
              , a = (e.msg,
            e.advId)
              , i = JSON.parse(e.userData || "") || {}
              , s = e.nativeData;
            1 == t ? this._onReceiveNativeData(a, s, i) : (this.cacheNativeDatas[a] = null,
            this.sendMsg("MSG_NATIVE_AD_SDK_NATIVE_DATA_REFRESH", {
                advId: a,
                userData: i
            }))
        }
        static onMsgClickNativeAdvResult(e) {
            parseInt(e.code),
            e.msg;
            let t = e.advId
              , a = JSON.parse(e.userData || "") || {};
            console.log("inbuild sdk: onMsgClickNativeAdvResult", a),
            this.sendMsg("MSG_NATIVE_AD_SDK_CLICK_SUCCESS", {
                advId: t,
                userData: a
            }),
            this.cacheNativeDatas[t] = null,
            mgrAdNative.__invokeRefreshData(a),
            this.sendMsg("MSG_NATIVE_AD_SDK_NATIVE_DATA_REFRESH", {
                advId: t,
                userData: a
            }),
            this.onCloseNativeAd(t, a, a.adEventId)
        }
        static onMsgCloseNativeAdvResult(e) {
            parseInt(e.code),
            e.msg,
            e.advId,
            JSON.parse(e.userData || "")
        }
    }
    mgrNativeAdSdk.cacheNativeDatas = {},
    mgrNativeAdSdk.NATIVE_DATA_SERIAL_NUMBER = 0;
    class vNativeDialogBig extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vNativeDialogBig",
            this.exportNodeNames = ["CC_imageIcon", "CC_labelName", "CC_labelDesc", "CC_buttonDownLoad", "CC_labelTarget", "CC_spriteClickArenaForModel2", "CC_spriteClickArenaForModel4", "CC_buttonFullScreen", "CC_buttonClose", "CC_spriteCloseBg"],
            vNativeDialogBig.instance = this
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.buttonFullScreen.fOnClick = this.onTouchButtonFullScreen.bind(this),
            this.buttonDownLoad.fOnClick = this.onTouchButtonGo.bind(this),
            Tools.registerTouchHander(this.spriteClickArenaForModel2, e=>{
                e.isClick && this.onTouchClickModeArena2()
            }
            ),
            Tools.registerTouchHander(this.spriteClickArenaForModel4, e=>{
                e.isClick && this.onTouchClickModeArena4()
            }
            ),
            this.adEventId = this.context.adEventId,
            this.userData = this.context.userData,
            this.fillData(),
            this.registerListeners({
                MSG_NATIVE_AD_SDK_CLICK_SUCCESS: this.onMsgNativeAdSdkClickSuccess.bind(this)
            })
        }
        onClosed() {
            super.onClosed(),
            mgrAdNative.onNativeAdViewClenup(this.context.adEventId),
            vNativeDialogBig.instance = null
        }
        fillData() {
            let e = mgrAdNative.getNativeDataByAdEventId(this.adEventId);
            e ? (this.labelName.text = e.title,
            this.labelDesc.text = e.desc,
            this.labelTarget.text = e.targetTitle,
            Tools.loadAdImg(this.imageIcon, e.url)) : mgrTip.showMsgTip(`${mgrI18n.getText("vNativeDialogBig.1")}`);
            let t = mgrSdk.getCopNumberValueByKey("native_insert_mode");
            this.spriteClickArenaForModel2.visible = 2 == t,
            this.buttonFullScreen.__node.visible = 3 == t,
            this.spriteClickArenaForModel4.visible = 4 == t,
            1 == mgrSdk.getCopNumberValueByKey("native_insert_close_size_mode") ? (this.buttonClose.__node.size(50, 50),
            this.spriteCloseBg.size(50, 50),
            Layout.widget(.5, .5, this.spriteCloseBg, {
                x: .5,
                y: .5
            }, this.buttonClose.__node)) : 2 == mgrSdk.getCopNumberValueByKey("native_insert_close_size_mode") ? (this.buttonClose.__node.size(80, 80),
            this.spriteCloseBg.size(80, 80),
            Layout.widget(.5, .5, this.spriteCloseBg, {
                x: .5,
                y: .5
            }, this.buttonClose.__node)) : 3 == mgrSdk.getCopNumberValueByKey("native_insert_close_size_mode") ? (this.buttonClose.__node.size(80, 80),
            this.spriteCloseBg.size(50, 50),
            Layout.widget(.5, .5, this.spriteCloseBg, {
                x: .5,
                y: .5
            }, this.buttonClose.__node)) : mgrAd.todayNativeInsertScaleCount < mgrSdk.getCopNumberValueByKey("native_insert_scale_close_count") && (mgrAd.todayNativeInsertScaleIntervalCount++,
            mgrAd.todayNativeInsertScaleIntervalCount >= mgrSdk.getCopNumberValueByKey("native_insert_scale_close_interval") ? (mgrAd.todayNativeInsertScaleIntervalCount = 0,
            this.buttonClose.__node.size(35, 35),
            Layout.widget(.5, .5, this.spriteCloseBg, {
                x: .5,
                y: .5
            }, this.buttonClose.__node),
            mgrAd.todayNativeInsertScaleCount++) : (this.buttonClose.__node.size(50, 50),
            Layout.widget(.5, .5, this.spriteCloseBg, {
                x: .5,
                y: .5
            }, this.buttonClose.__node)),
            mgrAd.saveRecord())
        }
        onTouchButtonClose() {
            this.closeDialog()
        }
        onTouchButtonGo() {
            mgrAdNative.clickNative(this.adEventId)
        }
        onTouchButtonFullScreen() {
            mgrAdNative.clickNative(this.adEventId)
        }
        onTouchClickModeArena2() {
            mgrAdNative.clickNative(this.adEventId)
        }
        onTouchClickModeArena4() {
            mgrAdNative.clickNative(this.adEventId)
        }
        onMsgNativeAdSdkClickSuccess() {
            mgrTip.showMsgTip(`${mgrI18n.getText("vNativeDialogBig.2")}`),
            this.closeDialog()
        }
    }
    var NATIVE_AD_TYPE;
    !function(e) {
        e[e.banner = 1] = "banner",
        e[e.insert = 2] = "insert",
        e[e.embed = 3] = "embed"
    }(NATIVE_AD_TYPE || (NATIVE_AD_TYPE = {}));
    class mgrAdNative extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            this.registerListeners({
                MSG_NATIVE_AD_SDK_NATIVE_DATA_REFRESH: this.onMsgNativeDataRefresh
            })
        }
        static loadRecord() {
            super.loadRecord()
        }
        static saveRecord() {
            super.saveRecord()
        }
        static requestSomeNativeAdAtStart() {}
        static getNativeDataByAdEventId(e) {
            let t = mgrCfg.get_from_ad_event_db(e);
            return t ? mgrNativeAdSdk.getNativeDataByNativeType(t.advId) : null
        }
        static onNativeAdViewClenup(e, t=!0) {
            if (!e)
                return;
            if (!this.getNativeDataByAdEventId(e))
                return;
            if (t) {
                let t = mgrCfg.get_from_ad_event_db(e);
                t && mgrNativeAdSdk.cleanNativeDataByNativeType(t.advId)
            }
            let a = mgrCfg.get_from_ad_event_db(e)
              , i = {};
            this.nativeBannerRefreshFun[e] && (i = this.nativeBannerRefreshFun[e].userData),
            mgrNativeAdSdk.onCloseNativeAd(a.advId, i, e)
        }
        static __invokeRefreshData(e) {
            let t = e.adEventId || 0;
            if (!t)
                return;
            let a = mgrCfg.get_from_ad_event_db(t);
            a && (a.nativeType != NATIVE_AD_TYPE.embed && a.nativeType != NATIVE_AD_TYPE.banner || (console.log("__invokeRefresh: adEventId = ", t),
            this.__invokeClientRefresh(t, !0)))
        }
        static __invokeClientRefresh(e, t) {
            mgrAd.triggerAdEvent(e, null, t)
        }
        static registerNativeBannerRefreshFun(e, t, a) {
            let i = mgrCfg.quietGet("ad_event_db", e);
            if (i) {
                this.nativeBannerRefreshFun[e] = {
                    fun: t,
                    node: a,
                    userData: this.nativeBannerRefreshFun[e] ? this.nativeBannerRefreshFun[e].userData : null
                },
                Tools.registerTouchHander(a, t=>{
                    if (!t.isClick)
                        return;
                    let a = this.getNativeDataByAdEventId(e);
                    console.log(this.nativeBannerRefreshFun),
                    a && this.nativeBannerRefreshFun[e] && this.nativeBannerRefreshFun[e].userData && (console.log("on touch native !!!"),
                    mgrNativeAdSdk.onClickNativeAd(i.advId, e, this.nativeBannerRefreshFun[e].userData))
                }
                ),
                a.addComponent(Laya.Script).onDestroy = (()=>{
                    Timer.callLater(.3, ()=>{
                        this.onNativeAdViewClenup(e)
                    }
                    )
                }
                ),
                mgrAd.triggerAdEvent(e),
                this.sendMsg("MSG_NATIVE_AD_SDK_NATIVE_DATA_REFRESH", {
                    advId: i.advId,
                    userData: {
                        adEventId: e
                    }
                })
            }
        }
        static clickNative(e) {
            let t = mgrCfg.get_from_ad_event_db(e);
            mgrNativeAdSdk.onClickNativeAd(t.advId, this.nativeBannerRefreshFun[e].userData, e)
        }
        static refreshNativeBanner(e) {
            let t = this.nativeBannerRefreshFun[e];
            if (!t)
                return void console.warn(ul.format(":)adEventId:%s isn't regist!!!"));
            if (!t.node || t.node.destroyed)
                return;
            let a = this.getNativeDataByAdEventId(e);
            try {
                t.fun(a)
            } catch (e) {
                console.log(e)
            }
        }
        static onMsgNativeDataRefresh(e) {
            let t = e
              , a = t.userData.adEventId;
            console.log("onMsgNativeDataRefresh", a);
            let i = this.getNativeDataByAdEventId(a);
            if (i || (i = {}),
            this.nativeBannerRefreshFun[a] || (this.nativeBannerRefreshFun[a] = {}),
            this.nativeBannerRefreshFun[a].userData = t.userData,
            console.log(" try down load image!!!"),
            this.__tryRefreshLogic(t.advId),
            i.url) {
                i.url = i.url.replace("https://", "http://");
                let e = mgrCfg.get_from_ad_event_db(a);
                e && e.nativeType == NATIVE_AD_TYPE.insert && ul.length(i) > 0 && !vNativeDialogBig.instance && mgrDirector.openDialog("vNativeDialogBig", {
                    adEventId: a,
                    userData: t.userData
                }),
                this.__tryRefreshLogic(t.advId)
            }
            this.sendMsg("MSG_NATIVE_DATA_REFRESH", {
                advId: t.advId
            })
        }
        static __tryRefreshLogic(e) {
            Tools.forEachMap(this.nativeBannerRefreshFun, (t,a)=>{
                let i = mgrCfg.quietGet("ad_event_db", t);
                i && e && i.advId == e && this.refreshNativeBanner(t)
            }
            )
        }
    }
    mgrAdNative.nativeBannerRefreshFun = {};
    class vNativeBanner extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vNativeBanner",
            this.exportNodeNames = ["CC_imageIcon", "CC_labelName", "CC_labelDesc", "CC_buttonDownload", "CC_labelTarget", "CC_buttonClose"],
            this.width = 601,
            this.height = 180
        }
        onOpened() {
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.buttonDownload.fOnClick = this.onTouchButtonGo.bind(this),
            this.alpha = 0,
            this.adEventId && this.refreshBanner()
        }
        onClosed() {}
        refreAd(e) {
            this.bResLoaded && (e ? (this.labelName.text = e.title,
            this.labelDesc.text = e.desc,
            this.labelTarget.text = e.targetTitle,
            this.alpha = 255,
            Tools.loadAdImg(this.imageIcon, e.url)) : this.alpha = 0)
        }
        refreshBanner() {
            let e = mgrAdNative.getNativeDataByAdEventId(this.adEventId);
            this.refreAd(e)
        }
        show(e, t) {
            mgrAd.triggerAdEvent(e),
            this.adEventId = e,
            this.targetViewName = t,
            this.refreshBanner()
        }
        onTouchButtonGo() {
            mgrAdNative.clickNative(this.context.adEventId)
        }
        onTouchButtonClose() {
            this.destroy(),
            this.sendMsg("MSG_USER_CLOSE_NATIVE_BANNER", {
                viewName: this.targetViewName
            })
        }
    }
    class vItemTip extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vItemTip",
            this.exportNodeNames = ["CC_spriteBg", "CC_imageIcon", "CC_labelTip"]
        }
        onOpened() {
            this.labelTip.text = this.context.pointStr || `${this.context.amount > 0 ? "+" : ""}${this.context.amount}`;
            let e = mgrCfg.get_from_item_template_db(this.context.itemId);
            Tools.loadImg(this.imageIcon, e.icon),
            this.alpha = 0,
            this.scale(.5, .5),
            this.y -= 180,
            CustomTween.to(this, {
                scaleX: 1,
                scaleY: 1,
                alpha: 1,
                y: this.y - 40
            }, 300).to({
                y: this.y - 120
            }, 600).to({
                y: this.y - 160,
                alpha: 0
            }, 300).callback(()=>{
                this.destroy()
            }
            ).start(1),
            this.spriteBg.width = ul.clamp(this.imageIcon.width + this.labelTip.width + 50, 154, 400)
        }
        onClosed() {}
    }
    class vJumpOtherDrag extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vJumpOtherDrag",
            this.exportNodeNames = ["CC_boxList", "CC_buttonOpen"],
            this.JUMP_TYPE = "list",
            this.bOpen = !1,
            this.size(183, 576),
            this.anchorX = 0,
            this.anchorY = .5
        }
        onOpened() {
            this.buttonOpen.fOnClick = this.onTouchButtonOpen.bind(this),
            this.registerListeners({
                MSG_ON_OPEN_JUMP_RESULT: this.onMsgOpenJumpResult.bind(this)
            }),
            mgrSdk.openJump("80", this.JUMP_TYPE)
        }
        onClosed() {}
        onMsgOpenJumpResult(e) {
            if (e.type == this.JUMP_TYPE) {
                let t = e.jumpInfo;
                this.fillData(t)
            }
        }
        fillData(e) {
            if (this.datas)
                return;
            this.reuseList = new ReuseList(1,0,10),
            this.reuseList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseList),
            this.reuseList.setItemClass(vJumpOtherGameItem$1),
            this.reuseList.setVerticalMoveEnable(!0),
            this.reuseList.setSpaceY(10),
            this.reuseList.setDatas(e),
            this.datas = e,
            this.context.index = 0;
            let t, a = 1;
            this.context.scroolTimer = Timer.callLoop(2, ()=>{
                if (this.reuseList) {
                    this.context.index += a;
                    let e = this.reuseList.getDatas().length;
                    (this.context.index <= 0 || this.context.index >= e - 6) && (a = -a),
                    this.reuseList.tweenTo(this.context.index, 2e3)
                }
            }
            , this),
            Tools.registerTouchHander(this.reuseList, e=>{
                e.isBegin ? (this.context.scroolTimer.stop(),
                t = e.pos) : (e.isEnd || e.isCancel) && this.context.scroolTimer.start(!1)
            }
            )
        }
        onTouchButtonOpen() {
            null == this.context.__originX && (this.context.__originX = this.x);
            let e = this.context.__originX;
            this.bOpen ? (CustomTween.to(this, {
                x: e
            }, 300).start(1),
            this.bOpen = !1) : (CustomTween.to(this, {
                x: e + 115
            }, 300).start(1),
            this.bOpen = !0)
        }
    }
    class vJumpOtherGameItem$1 extends ReuseListItem {
        constructor() {
            super();
            this.size(124 * .6, 96),
            this.anchorX = 0,
            this.anchorY = 0,
            this.image = new Laya.Image,
            this.image.size(124 * .6, 96),
            this.image.anchorX = .5,
            this.image.anchorY = .5,
            this.image.x = 124 * .6 / 2,
            this.image.y = 48,
            this.addChild(this.image),
            this.button = this.image.addComponent(ScaleButton),
            this.button.fOnClick = this.onTouchButton.bind(this)
        }
        onTouchButton() {
            this.data && mgrSdk.jumpOtherGame(this.data.index, "list")
        }
        fillByData(e) {
            this.image.skin = e.url,
            this.data = e
        }
    }
    class mgrTip extends Manager {
        static onLoad() {
            super.onLoad(),
            this.initItemGotEffectTip()
        }
        static loadRecord() {
            super.loadRecord()
        }
        static saveRecord() {
            super.saveRecord()
        }
        static showPicker(e, t, a) {
            mgrDirector.openDialog("DebugPickerDialog", {
                title: e,
                datas: t,
                fOnClick: a
            }, !1)
        }
        static alertPrompt2(e, t, a, i, s, o, n=!1) {
            return this._alertPrompt(e, t, [a, i], [s, o], n)
        }
        static _alertPrompt(e, t, a, i, s=!1) {
            mgrDirector.openDialog("vPromptDialog", {
                title: e,
                content: t,
                btnTexts: a,
                callbacks: i,
                bShowAd: s
            })
        }
        static showBadgeWithNumber(e, t, a=new Laya.Point(5,5)) {
            return t > 0 ? this.showBadge(e, a) : (this.hideBadge(e),
            !1)
        }
        static showBadge(e, t=new Laya.Point(5,5)) {
            let a = e.__badge;
            return a ? (a.pos(e.width - t.x, t.y),
            !1) : ((a = new Laya.Image).anchorX = .5,
            a.anchorY = .5,
            Tools.loadImg(a, "res/ui/common/redPoint.png", !0, ()=>{}
            ),
            e.__badge = a,
            e.addChild(a),
            CustomTween.to(a, {
                scaleX: 1.25,
                scaleY: 1.25
            }, 500).to({
                scaleX: 1,
                scaleY: 1
            }, 500).start(0),
            a.pos(e.width - t.x, t.y),
            !0)
        }
        static hideBadge(e) {
            e.__badge && (e.removeChild(e.__badge),
            e.__badge = null)
        }
        static showMsgTip(e, t) {
            console.warn("showMsgTip", e),
            t || (t = new Laya.Vector2(Laya.stage.width / 2 * Laya.stage.clientScaleX,Laya.stage.height / 2 * Laya.stage.clientScaleY));
            let a = new (Const.require.requireModule("vMsgTip"))({
                content: e
            });
            mgrDirector.getTipRoot().addChild(a)
        }
        static showItemTip(e, t, a) {
            let i = new vItemTip({
                itemId: e,
                amount: t,
                pointStr: a
            });
            mgrDirector.getTipRoot().addChild(i)
        }
        static showWeekNetTip(e) {
            let t = mgrDirector.getTipRoot().getChildByName("week_net_tip");
            t || ((t = new Laya.Label).name = "week_net_tip",
            t.fontSize = 20,
            t.color = "#ffffff",
            t.stroke = 2,
            t.strokeColor = "#222222",
            t.text = `网络好像丢失了, res:${e}`,
            t.pivotX = t.width / 2,
            mgrDirector.getTipRoot().addChild(t),
            Tools.widget(.5, .5, t))
        }
        static hideWeekNetTip() {
            let e = mgrDirector.getTipRoot().getChildByName("week_net_tip");
            e && e.removeSelf()
        }
        static addGotItemTip(e, t, a, i) {
            let s = this.defaultGotItemQueue.length;
            1 == this.gotItemDialogShowingFlags[0] && s++,
            this.defaultGotItemQueue.push({
                itemId: e,
                amount: t,
                amountSteps: a,
                customerContext: i,
                orderOfQueue: s
            }),
            this._tryShowGotItemDialog()
        }
        static insertGotItemTip(e, t, a, i) {
            this.defaultGotItemQueue.unshift({
                itemId: e,
                amount: t,
                amountSteps: a,
                customerContext: i
            }),
            this._tryShowGotItemDialog()
        }
        static addGotItemTipGroup(e) {
            let t = null;
            Tools.forEachMap(this.gotItemQueues, (e,a)=>{
                if (a != this.defaultGotItemQueue && a.length <= 0)
                    return t = a,
                    !0
            }
            ),
            t || (t = [],
            this.gotItemQueues.push(t));
            for (let a = 0; a < e.length; a++) {
                const i = e[a];
                t.push(i)
            }
            this._tryShowGotItemDialog()
        }
        static _tryShowGotItemDialog() {
            if (vRoleLevelUpDialog.instance)
                Timer.callLoop(.016, e=>{
                    vRoleLevelUpDialog.instance || (e.stop(),
                    this._tryShowGotItemDialog())
                }
                , this);
            else
                for (let e = 0; e < this.gotItemQueues.length; e++) {
                    const t = this.gotItemQueues[e];
                    if (!this.gotItemDialogShowingFlags[e] && t.length > 0) {
                        this.gotItemDialogShowingFlags[e] = !0;
                        let a = t.shift();
                        if (a.amount < 0)
                            mgrTip.showItemTip(a.itemId, a.amount),
                            Timer.callLater(.5, ()=>{
                                this.gotItemDialogShowingFlags[e] = !1,
                                this._tryShowGotItemDialog()
                            }
                            , this);
                        else {
                            if (a.itemId == Const.ITEM_ID_INTERACTION_EXP)
                                return mgrTip.showGotItemEffect(a.itemId, a.amount, new Laya.Point(Laya.stage.width / 2,Laya.stage.height / 5 * 3)),
                                void Timer.callLater(2, ()=>{
                                    this.gotItemDialogShowingFlags[e] = !1,
                                    this._tryShowGotItemDialog()
                                }
                                , this);
                            if ([Const.ITEM_ID_WISHPOOL_EXCHANGE, Const.ITEM_ID_ENERGY, Const.ITEM_ID_GARDEN_WATER, Const.ITEM_ID_GARDEN_FERTILIZER, Const.ITEM_ID_GOLD, Const.ITEM_ID_DIAMONDS].indexOf(a.itemId) < 0 && a.itemId < 100)
                                return this.gotItemDialogShowingFlags[e] = !1,
                                void this._tryShowGotItemDialog();
                            let t = "vGotItemDialog";
                            mgrCfg.get_from_part_db(a.itemId) && (t = "vGotPartDialog");
                            let i = {};
                            a.customerContext && Tools.forEachMap(a.customerContext, (e,t)=>{
                                i[e] = t
                            }
                            ),
                            i.bFromAd = a.bFromAd,
                            i.orderOfQueue = a.orderOfQueue,
                            i.itemId = a.itemId,
                            i.amount = a.amount,
                            i.amountSteps = a.amountSteps,
                            i.fOnClose = (()=>{
                                this.gotItemDialogShowingFlags[e] = !1,
                                a.customerContext && a.customerContext.fOnClose instanceof Function && a.customerContext.fOnClose(),
                                this._tryShowGotItemDialog()
                            }
                            ),
                            mgrDirector.openDialog(t, i)
                        }
                    }
                }
        }
        static isAllGotItemTipDisplayed() {
            let e = !1;
            if (Tools.forEachMap(this.gotItemDialogShowingFlags, (t,a)=>{
                if (a)
                    return e = !0,
                    !0
            }
            ),
            e)
                return !1;
            for (let e = 0; e < this.gotItemQueues.length; e++) {
                if (this.gotItemQueues[e].length > 0)
                    return !1
            }
            return !0
        }
        static isWaitingDialogOpened() {
            return null != this.waitingDialog
        }
        static openWaitingDialog(e, t) {
            this.isWaitingDialogOpened()
        }
        static closeWaitingDialog() {
            this.waitingDialog && (this.waitingDialog.closeDialog(),
            this.waitingDialog = null)
        }
        static isReconnectDialogShowed() {
            return !!this.ReconnectDialog
        }
        static showReconnectDialog() {
            this.isReconnectDialogShowed() || (this.ReconnectDialog = mgrDirector.openDialog("vPromptDialog", {
                title: `${mgrI18n.getText("mgrTip.1")}`,
                content: `${mgrI18n.getText("mgrTip.2")}`,
                btnTexts: [`${mgrI18n.getText("mgrTip.3")}`],
                fOnClose: ()=>{
                    this.ReconnectDialog = null
                }
            }))
        }
        static hideReconnectDialog() {
            this.ReconnectDialog && (this.ReconnectDialog.closeDialog(),
            this.ReconnectDialog = null)
        }
        static showAdGetDialog(e) {
            mgrDirector.openDialog("AdRewardDialog", e)
        }
        static showItemDetailDialog(e, t, a, i) {
            mgrCfg.get_from_part_db(e) ? mgrDirector.openDialog("vPartDetailDialog", {
                itemId: e,
                ignoreRouter: t,
                fOnClose: i,
                fOnRouter: a
            }) : mgrTip.showMsgTip("暂未实现!!!")
        }
        static showLoadingTip(e, t=new Laya.Vector2, a=0) {
            let i = this.__loadingTipRouters.length > 0;
            if (-1 == this.__loadingTipRouters.indexOf(e) && this.__loadingTipRouters.push(e),
            i)
                return;
            let s = new Laya.Box;
            s.size(768, 1280),
            s.anchorY = .5,
            s.anchorX = .5,
            mgrDirector.getTipRoot().addChild(s),
            s.y -= 30;
            let o = new Laya.Image;
            o.alpha = a / 255,
            s.addChild(o),
            o.size(768, 1280),
            o.anchorX = .5,
            o.anchorY = .5,
            o.pos(s.width / 2, s.height / 2),
            Tools.loadImg(o, "res/ui/common/mask.png");
            let n = new Laya.Image;
            n.anchorX = .5,
            n.anchorY = .5,
            s.addChild(n),
            n.x += t.x + s.width / 2,
            n.y += t.y + s.height / 2,
            Tools.loadImg(n, "res/ui/loading/loading.png", !0);
            let r = new Laya.Label;
            r.color = "#ffffff",
            r.fontSize = 18,
            r.align = "center",
            r.anchorX = .5,
            r.anchorY = .5,
            s.addChild(r),
            r.pos(n.x, n.y + 50),
            CustomTween.rotateForever(n, 2e3),
            this.__loadingTipNode = s,
            s.alpha = 0,
            Timer.callLater(.2, ()=>{
                CustomTween.to(s, {
                    alpha: 1
                }, 100).start(1)
            }
            , s),
            Tools.registerTouchHander(o, ()=>{
                console.log(" touch loading mask ")
            }
            )
        }
        static hideLoadingTip(e) {
            let t = this.__loadingTipRouters.indexOf(e);
            if (t >= 0 && this.__loadingTipRouters.splice(t, 1),
            !(this.__loadingTipRouters.length > 0))
                return this.__loadingTipNode && this.__loadingTipNode.destroy(),
                this.__loadingTipNode = null,
                !0
        }
        static isShowingLoadingTip() {
            return !!this.__loadingTipNode
        }
        static updateLoadingProgress() {
            this.isShowingLoadingTip()
        }
        static showCoinGetEffect(e=Const.ITEM_ID_GOLD, t) {
            if (t) {
                let e = mgrDirector.getTipRoot().globalToLocal(new Laya.Point(t.x,t.y));
                t = new Laya.Vector2(e.x,e.y)
            }
            let a = Math.ceil(5 * Math.random()) + 8;
            for (let i = 1; i <= a; i++) {
                let a = new Laya.Image;
                a.anchorX = .5,
                a.anchorY = .5,
                mgrDirector.getTipRoot().addChild(a),
                a.x = 200 * (Math.random() - .5),
                a.y = 100 * (Math.random() - .5);
                let i = new Laya.Image;
                a.addChild(i),
                i.width = 25,
                i.height = 25,
                i.anchorX = .5,
                i.anchorY = .5,
                Tools.loadImg(i, mgrCfg.get_from_item_template_db(e).icon);
                let s = 25;
                mgrDirector.isDeviceOverHeight() && (s = 75);
                let o = new Laya.Vector2(-mgrDirector.width / 2 + 20,-mgrDirector.height / 2 + s);
                if (vHubScene.hubScene || (o = new Laya.Vector2(-45,-mgrDirector.height / 2 + 20)),
                e == Const.ITEM_ID_DIAMONDS && (o = new Laya.Vector2(-mgrDirector.width / 2 + 150,-mgrDirector.height / 2 + s)),
                e == Const.ITEM_ID_WISHPOOL_EXCHANGE && vWishPoolScene.spriteCoinIcon) {
                    let e = mgrDirector.getTipRoot().globalToLocal(vWishPoolScene.spriteCoinIcon.localToGlobal(new Laya.Point(15,15)));
                    o = new Laya.Vector2(e.x,e.y)
                }
                let n = 3 * (Math.random() - .5)
                  , r = [new Laya.Vector2(a.x,a.y), new Laya.Vector2(a.x / 2 + 200 * n,(a.y + o.y) / 2 + 100 * n), t || o]
                  , l = 1.2;
                a.scale(0, 0),
                CustomTween.to(a, {
                    scaleX: 0,
                    scaleY: 0
                }, 0, Laya.Ease.backOut).delayTime(1e3 * Math.random()).callback(()=>{
                    CustomTween.bezierCurveMotion(r[0], r[1], r[2], a, 800).start(1),
                    CustomTween.to(a, {
                        scaleX: .1 * l,
                        scaleY: 1.3 * l
                    }, 100).to({
                        scaleX: l,
                        scaleY: l
                    }, 100).repeat(4).to({
                        alpha: 0
                    }, 200).callback(()=>{
                        e == Const.ITEM_ID_GOLD && this.sendMsg("MSG_GOLD_FLY_END"),
                        e == Const.ITEM_ID_DIAMONDS && this.sendMsg("MSG_Diamond_FLY_END"),
                        e == Const.ITEM_ID_WISHPOOL_EXCHANGE && this.sendMsg("MSG_Exchange_FLY_END"),
                        mgrSound.play(106),
                        a.destroy()
                    }
                    ).start(1)
                }
                ).start(1)
            }
        }
        static showIconFlyEffect(e=Const.ITEM_ID_GOLD, t) {
            let a = Math.ceil(5 * Math.random()) + 8;
            for (let i = 1; i <= a; i++) {
                let a = new Laya.Image;
                a.anchorX = .5,
                a.anchorY = .5,
                mgrDirector.getTipRoot().addChild(a),
                a.x = 200 * (Math.random() - .5),
                a.y = 100 * (Math.random() - .5);
                let i = new Laya.Image;
                a.addChild(i),
                i.width = 25,
                i.height = 25,
                i.anchorX = .5,
                i.anchorY = .5,
                Tools.loadImg(i, mgrCfg.get_from_item_template_db(e).icon);
                let s = 25;
                mgrDirector.isDeviceOverHeight() && (s = 75);
                let o = new Laya.Vector2(-mgrDirector.width / 2 + 20,-mgrDirector.height / 2 + s);
                if (vHubScene.hubScene || (o = new Laya.Vector2(-45,-mgrDirector.height / 2 + 20)),
                e == Const.ITEM_ID_DIAMONDS && (o = new Laya.Vector2(-mgrDirector.width / 2 + 150,-mgrDirector.height / 2 + s)),
                e == Const.ITEM_ID_WISHPOOL_EXCHANGE && vWishPoolScene.spriteCoinIcon) {
                    let e = mgrDirector.getTipRoot().globalToLocal(vWishPoolScene.spriteCoinIcon.localToGlobal(new Laya.Point(15,15)));
                    o = new Laya.Vector2(e.x,e.y)
                }
                let n = 3 * (Math.random() - .5)
                  , r = [new Laya.Vector2(a.x,a.y), new Laya.Vector2(a.x / 2 + 200 * n,(a.y + o.y) / 2 + 100 * n), t || o]
                  , l = 1.2;
                a.scale(0, 0),
                CustomTween.to(a, {
                    scaleX: 0,
                    scaleY: 0
                }, 0, Laya.Ease.backOut).delayTime(1e3 * Math.random()).callback(()=>{
                    CustomTween.bezierCurveMotion(r[0], r[1], r[2], a, 800).start(1),
                    CustomTween.to(a, {
                        scaleX: .1 * l,
                        scaleY: 1.3 * l
                    }, 100).to({
                        scaleX: l,
                        scaleY: l
                    }, 100).repeat(4).to({
                        alpha: 0
                    }, 200).callback(()=>{
                        e == Const.ITEM_ID_GOLD && this.sendMsg("MSG_GOLD_FLY_END"),
                        e == Const.ITEM_ID_DIAMONDS && this.sendMsg("MSG_Diamond_FLY_END"),
                        e == Const.ITEM_ID_WISHPOOL_EXCHANGE && this.sendMsg("MSG_Exchange_FLY_END"),
                        e == Const.ITEM_ID_INTERACTION_EXP && this.sendMsg("MSG_EXP_FLY_END"),
                        mgrSound.play(106),
                        a.destroy()
                    }
                    ).start(1)
                }
                ).start(1)
            }
        }
        static showJumpOtherGameBanner(e) {
            return !!mgrChannel.canGameInterPushBanner() && (this.jumpOtherGameBanner || (this.jumpOtherGameBanner = new vJumpOtherGameBanner({}),
            e.addChild(this.jumpOtherGameBanner)),
            Layout.widget(.5, mgrDirector.height - 210, this.jumpOtherGameBanner, {
                x: .5,
                y: 1
            }),
            !0)
        }
        static hideJumpOtherGameBanner(e) {
            this.jumpOtherGameBanner && this.jumpOtherGameBanner.parent == e && (this.jumpOtherGameBanner.destroy(),
            this.jumpOtherGameBanner = null)
        }
        static showJumpOtherGameDrag(e) {
            return !!mgrChannel.canGameInterPushBannerDrag() && (this.jumpOtherGameDrag || (this.jumpOtherGameDrag = new vJumpOtherDrag({}),
            e.addChild(this.jumpOtherGameDrag)),
            Layout.widget(-115, .5, this.jumpOtherGameDrag, {
                x: 0,
                y: .5
            }),
            !0)
        }
        static hideJumpOtherGameDrag(e) {
            this.jumpOtherGameDrag && this.jumpOtherGameDrag.parent.name == e && (this.jumpOtherGameDrag.destroy(),
            this.jumpOtherGameDrag = null)
        }
        static showNativeBanner(e, t, a=new Laya.Vector2) {
            this.nativeAdBanner && !this.nativeAdBanner.destroyed || (this.nativeAdBanner = new vNativeBanner({
                adEventId: e
            }),
            t.addChild(this.nativeAdBanner)),
            Layout.widget(mgrDirector.width / 2 + a.x, mgrDirector.height + a.y, this.nativeAdBanner, {
                x: .5,
                y: 1
            }),
            this.nativeAdBanner.active = !0
        }
        static hideNativeBanner() {
            this.nativeAdBanner && (this.nativeAdBanner.destroy(),
            this.nativeAdBanner = null)
        }
        static showGuidingTip(e, t=new Laya.Vector2, a=0) {
            let i = this.__guidingTipRouters.length > 0;
            if (-1 == this.__guidingTipRouters.indexOf(e) && this.__guidingTipRouters.push(e),
            i)
                return;
            let s = new Laya.Box;
            s.size(768, 1280),
            s.anchorY = .5,
            s.anchorX = .5,
            mgrDirector.getTipRoot().addChild(s);
            let o = new Laya.Image;
            o.alpha = a / 255,
            s.addChild(o),
            o.size(768, 1280),
            o.anchorX = .5,
            o.anchorY = .5,
            o.pos(s.width / 2, s.height / 2),
            Tools.loadImg(o, "res/ui/common/mask.png"),
            this.__guidingTipNode = s,
            Tools.registerTouchHander(o, ()=>{
                console.log(" touch guiding mask ")
            }
            )
        }
        static hideGuidingTip(e) {
            let t = this.__guidingTipRouters.indexOf(e);
            if (t >= 0 && this.__guidingTipRouters.splice(t, 1),
            !(this.__guidingTipRouters.length > 0))
                return this.__guidingTipNode && this.__guidingTipNode.destroy(),
                this.__guidingTipNode = null,
                !0
        }
        static isShowGuidingTip() {
            return !!this.__guidingTipNode
        }
        static initItemGotEffectTip() {
            let e = Const.require.requireModule("vItemGotEffectDialog");
            this.vItemGotEffect = new e,
            mgrDirector.get2DDialogLayer().addChild(this.vItemGotEffect),
            this.vItemGotEffect.visible = !1
        }
        static showGotItemEffect(e, t, a) {
            this.vItemGotEffect.playAction(e, t, a)
        }
    }
    mgrTip.defaultGotItemQueue = [],
    mgrTip.gotItemQueues = [mgrTip.defaultGotItemQueue],
    mgrTip.gotItemDialogShowingFlags = {},
    mgrTip.waitingDialog = null,
    mgrTip.__loadingTipRouters = [],
    mgrTip.__guidingTipRouters = [];
    class vWarpSceneNode extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vWarpSceneNode",
            this.exportNodeNames = ["CC_spriteBg", "CC_imageMask", "CC_imageFlower"]
        }
        onOpened() {
            this.spriteBg.cacheAs = "bitmap",
            this.imageMask.blendMode = "destination-out",
            this.imageMask.graphics.clear(),
            this.imageMask.graphics.drawCircle(this.imageMask.width / 2, this.imageMask.height / 2, this.imageMask.width / 2, "#ff0000"),
            this.bPlayingClose && this.playCloseAnimation(this.closeCallback.bind(this), !0)
        }
        onClosed() {}
        playCloseAnimation(e, t=!1) {
            this.bPlayingClose && !t || (this.bPlayingClose = !0,
            this.closeCallback = e,
            this.bResLoaded && (this.spriteBg.alpha = 0,
            this.spriteBg.scale(8, 8),
            this.imageFlower.alpha = 0,
            this.imageFlower.rotation = 90,
            CustomTween.to(this.spriteBg, {
                alpha: 1
            }, 200).to({
                scaleX: 1,
                scaleY: 1
            }, 500).delayTime(300).callback(()=>{
                this.bPlayingClose = !1,
                this.closeCallback && this.closeCallback()
            }
            ).start(1),
            CustomTween.delayTime(this.imageFlower, 500).to({
                alpha: 1,
                rotation: 0
            }, 500).callback(()=>{
                CustomTween.rotateForever(this.imageFlower, 6e3, !1)
            }
            ).start(1)))
        }
        playOpenAnimation() {
            this.spriteBg.alpha = 1,
            this.spriteBg.scale(1, 1),
            this.imageFlower.alpha = 1,
            this.imageFlower.rotation = 90,
            CustomTween.to(this.spriteBg, {
                scaleX: 8,
                scaleY: 8
            }, 500).to({
                alpha: 0
            }, 200).callback(()=>{
                this.spriteBg.alpha = 0
            }
            ).start(1),
            CustomTween.to(this.imageFlower, {
                alpha: 0
            }, 500).start(1)
        }
    }
    const ST_READ_HEAD = 1
      , ST_READ_DATA = 2;
    class SeasionWS extends Laya.EventDispatcher {
        constructor() {
            super(),
            this.instanceId = 0,
            this.uuid = null,
            this.revDataBuffer = "",
            this.socket = null,
            this.readState = ST_READ_HEAD,
            this.head = {},
            this.instanceId = 0,
            this.uuid = null,
            this.revDataBuffer = "",
            this.socket = null,
            this.readState = ST_READ_HEAD,
            this.head = {}
        }
        setUuid(e) {
            this.uuid = e
        }
        setSocket(e) {
            this.socket = e,
            this.socket.onopen = (()=>{
                this.event("open")
            }
            ),
            this.socket.onclose = (()=>{
                this.event("close")
            }
            ),
            this.socket.onerror = (e=>{
                this.event("error")
            }
            ),
            this.socket.onmessage = (e=>{
                if (this.revDataBuffer += e.data,
                this.readState == ST_READ_HEAD) {
                    let e = /({.+?})/.exec(this.revDataBuffer);
                    if (e) {
                        let t = e.shift();
                        this.revDataBuffer = this.revDataBuffer.replace(t, ""),
                        this.head = JSON.parse(t),
                        this.readState = ST_READ_DATA
                    }
                }
                if (this.readState == ST_READ_DATA && this.revDataBuffer.length >= this.head.dataLength) {
                    let e = this.revDataBuffer.slice(0, this.revDataBuffer.length);
                    try {
                        let t = JSON.parse(e);
                        this.event("data", t)
                    } catch (e) {
                        console.error("ST_READ_DATA error:", e)
                    }
                    this.revDataBuffer = this.revDataBuffer.replace(e, ""),
                    this.readState = ST_READ_HEAD
                }
            }
            )
        }
        write(e) {
            let t = JSON.stringify(e)
              , a = {
                dataLength: t.length
            };
            this.socket.send(JSON.stringify(a) + t)
        }
        close() {
            this.socket.close()
        }
    }
    class NetworkWS {
        static newSeasion(e, t) {
            let a = "ws://" + e + ":" + t.toString();
            console.log("连接地址:", a);
            let i = new WebSocket(a)
              , s = new SeasionWS;
            return s.setSocket(i),
            s
        }
    }
    class GameRemoteRouter {
        constructor(e) {
            this.__seasion = null,
            this.__registedRouter = null,
            this.seasion = e,
            this.seasion ? this.seasion.on("data", this, e=>{
                this.__router(e)
            }
            ) : console.error("没有设置seasion")
        }
        get seasion() {
            return this.__seasion
        }
        set seasion(e) {
            this.__seasion = e
        }
        sendMsgToServer(e) {
            this.seasion.write(e)
        }
        registerRouter(e, t) {
            e && t && (this.__registedRouter[e] = t)
        }
        __router(e) {
            if (!e)
                return;
            if (!e.route)
                return;
            if (!this.__registedRouter[e.route])
                return;
            (0,
            this.__registedRouter[e.route])(e.data)
        }
    }
    const VIEW_BANNER_STATUS_NOTHING = 0
      , VIEW_BANNER_STATUS_OPEN = 1
      , VIEW_BANNER_STATUS_CLOSE = 2;
    class mgrBannerInt extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            this.bannerViewNameStack = [],
            this.currShowingBannerEventId = null,
            this.nativeBanner = null,
            this.lastOpenBannerTime = 0,
            this.loadRecord(),
            this.registerListeners({
                MSG_DIALOG_OPEN: this.onMsgDialogOpen,
                MSG_DIALOG_CLOSE: this.onMsgDialogClose,
                MSG_WARP_SCENE_START: this.onMsgWarpSceneStart,
                MSG_WARP_SCENE_COMPLETED: this.onMsgWarpSceneCompleted,
                MSG_USER_CLOSE_NATIVE_BANNER: this.onMsgUserCloseNativeBanner,
                MSG_NATIVE_DATA_REFRESH: this.onMsgNativeDataRefresh
            })
        }
        static loadRecord() {
            mgrRecord.getData("banner_record")
        }
        static saveRecord() {
            mgrRecord.setData("banner_record", {})
        }
        static isBannerView(e) {
            return this.getAdInfoByViewName(e).bannerStatus == VIEW_BANNER_STATUS_OPEN
        }
        static closeBannerOnce() {
            this.closeBanner()
        }
        static readaptViewBanner() {
            this.adaptBanner()
        }
        static onViewOpen(e) {
            console.log("--------------e=", e);
            let t = e.viewName;
            if (!t)
                return;
            let a = t.lastIndexOf(".");
            a > 0 && (t = t.substr(a + 1, 100)),
            console.log("------------onViewOpen----viewName=", t);
            let i = !1
              , s = this.getAdInfoByViewName(t)
              , o = s.bannerStatus
              , n = s.bannerEventId;
            if (o == VIEW_BANNER_STATUS_OPEN ? n && "" != n && mgrAd.preCheckCanTriggerAdEvent(n) && (i = !0) : o == VIEW_BANNER_STATUS_CLOSE && (i = !0),
            console.log("------------onViewOpen----bHandleStack=", i, o, n),
            i) {
                let a = e.customUuid || 0
                  , i = e.zIndex || 0
                  , o = e.sceneFlag || s.sceneFlag || 0;
                this.bannerViewNameStack.push({
                    sceneFlag: o,
                    viewName: t,
                    bannerEventId: n,
                    customUuid: a,
                    zIndex: i
                }),
                console.log(this.bannerViewNameStack),
                this.bannerViewNameStack = Tools.sortArrayByField(this.bannerViewNameStack, ["-sceneFlag", "zIndex", "customUuid"])
            }
            let r = !0
              , l = s.intEventId;
            l && !e.bDisableInt && (mgrAd.triggerAdEvent(l, null, !0),
            1 == mgrSdk.getCopNumberValueByKey("b_int_banner_mute") && (this.closeBannerOnce(),
            r = !1)),
            r && this.adaptBanner()
        }
        static adaptBanner() {
            let e = ul.length(this.bannerViewNameStack || []);
            if (0 == e)
                return void this.closeBanner();
            let t = this.bannerViewNameStack[e - 1].viewName
              , a = this.getAdInfoByViewName(t)
              , i = a.bannerStatus
              , s = a.bannerEventId;
            i == VIEW_BANNER_STATUS_OPEN ? s && "" != s && mgrAd.preCheckCanTriggerAdEvent(s) && (this.showBanner(s, t),
            console.log("-------adaptBanner-----------打开banner bannerEventId=", s)) : i == VIEW_BANNER_STATUS_CLOSE ? (console.log("-------adaptBanner-----------关闭banner"),
            this.closeBanner()) : console.log("-------adaptBanner-----------不做处理")
        }
        static getAdInfoByViewName(e) {
            if (!e || "" == e)
                return {
                    bannerStatus: VIEW_BANNER_STATUS_NOTHING,
                    bannerEventId: null,
                    intEventId: null
                };
            let t = mgrCfg.get("ad_banner_int_ui_db", e);
            if (!t)
                return {
                    bannerStatus: VIEW_BANNER_STATUS_CLOSE,
                    bannerEventId: null,
                    sceneFlag: 0,
                    intEventId: null
                };
            let a = null;
            return t.bBannerDoNothing && (a = {
                bannerStatus: VIEW_BANNER_STATUS_NOTHING,
                bannerEventId: null,
                sceneFlag: t.sceneFlag || 0,
                intEventId: null
            }),
            a = t.bannerEventId && "" != t.bannerEventId && mgrAd.preCheckCanTriggerAdEvent(t.bannerEventId) && !this.isUserClosedNativeBanner(e) ? {
                bannerStatus: VIEW_BANNER_STATUS_OPEN,
                bannerEventId: t.bannerEventId,
                sceneFlag: t.sceneFlag || 0,
                intEventId: null
            } : {
                bannerStatus: VIEW_BANNER_STATUS_CLOSE,
                bannerEventId: null,
                sceneFlag: t.sceneFlag || 0,
                intEventId: null
            },
            t.intEventId && "" != t.intEventId && mgrAd.preCheckCanTriggerAdEvent(t.intEventId) && (a.intEventId = t.intEventId),
            console.log("-----------------retData=", a),
            a
        }
        static isUserClosedNativeBanner(e) {
            if (!e)
                return !1;
            let t = this.userClosedNativeBannerTimeViewNameDict[e];
            return !!(t && Tools.time() - t < mgrSdk.getCopNumberValueByKey("close_native_banner_cd"))
        }
        static onMsgDialogOpen(e) {
            console.log("------------onMsgDialogOpen----="),
            this.onViewOpen(e)
        }
        static onMsgDialogClose(e) {
            console.log("------------onMsgDialogClose---=");
            let t = ul.length(this.bannerViewNameStack);
            if (t <= 0)
                return;
            let a = e.zIndex;
            if (!a)
                return;
            console.log("------------onMsgDialogClose----full viewName=", e.viewName, a);
            let i = !1;
            for (let e = t - 1; e >= 0; e--) {
                if (this.bannerViewNameStack[e].zIndex == a) {
                    this.bannerViewNameStack.splice(e, 1),
                    e == t - 1 && (i = !0);
                    break
                }
            }
            i && this.adaptBanner()
        }
        static onMsgWarpSceneStart(e) {
            console.log("-------banner-----------有scene开始切换");
            let t = ul.length(this.bannerViewNameStack);
            if (t <= 0)
                return;
            let a = !1;
            for (let e = t - 1; e >= 0; e--) {
                if (-1 == this.bannerViewNameStack[e].zIndex) {
                    this.bannerViewNameStack.splice(e, 1),
                    e == t - 1 && (a = !0);
                    break
                }
            }
            a && this.adaptBanner()
        }
        static onMsgWarpSceneCompleted(e) {
            console.log("-------banner-----------有scene结束切换"),
            this.onViewOpen(e)
        }
        static onMsgUserCloseNativeBanner(e) {
            e.viewName && (this.userClosedNativeBannerTimeViewNameDict[e.viewName] = Tools.time(),
            this.closeBanner())
        }
        static onMsgNativeDataRefresh(e) {
            let t = this.currShowingBannerEventId;
            if (t && e.advId == mgrCfg.get("ad_event_db", t, "advId") && (console.log("--------------onMsgNativeDataRefresh data=", e),
            this.nativeBanner && !this.nativeBanner.destroyed))
                try {
                    this.nativeBanner.refreshBanner()
                } catch (e) {
                    console.log("-----Error------- this.bannerDialog.refreshBanne=")
                }
        }
        static cleanBanner() {
            console.log("-------banner-----------关闭所有banner"),
            this.closeBanner(),
            this.bannerViewNameStack = []
        }
        static showBanner(e, t) {
            let a = mgrSdk.getCopNumberValueByKey("banner_open_gap") || 0;
            if (Tools.time() - this.lastOpenBannerTime < a)
                console.log("----------showBanner 在cd内，不展示=", Tools.time() - this.lastOpenBannerTime, a);
            else {
                if (this.closeBanner(),
                console.log("----------showBanner 不在cd内，成功展示"),
                this.currShowingBannerEventId = e,
                !this.nativeBanner) {
                    let e = new vNativeBanner({});
                    mgrDirector.get2DDialogLayer().addChild(e),
                    e.zOrder = 1e5,
                    this.nativeBanner = e,
                    Layout.widget(mgrDirector.width / 2, mgrDirector.height, this.nativeBanner, {
                        x: .5,
                        y: 1
                    })
                }
                this.nativeBanner.show(e, t),
                this.lastOpenBannerTime = Tools.time()
            }
        }
        static closeBanner() {
            this.currShowingBannerEventId ? (mgrAd.closeAdvByType("banner"),
            mgrAdNative.onNativeAdViewClenup(this.currShowingBannerEventId),
            this.currShowingBannerEventId = null,
            console.log("-------banner-----------关闭banner bannerEventId=", this.currShowingBannerEventId)) : console.log("-------banner-----------关闭banner 前面没有打开的banner 不做操作");
            try {
                this.nativeBanner && (this.nativeBanner.destroy(),
                console.log("----------------bannerDialog destroy"))
            } catch (e) {
                console.log("-----------remove Error")
            }
            this.nativeBanner = null
        }
    }
    mgrBannerInt.bannerViewNameStack = [],
    mgrBannerInt.userClosedNativeBannerTimeViewNameDict = [];
    class mgrExtract extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            this.init(),
            this.registerListeners({})
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("mgrExtract") || {};
            this.todayFreeExtractCount = e.todayFreeExtractCount || 0,
            this.curPointCount = e.curPointCount || 0,
            this.lastRefreshTime = e.lastRefreshTime || 0,
            this.todayRewardPool = e.todayRewardPool || []
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                todayFreeExtractCount: this.todayFreeExtractCount,
                curPointCount: this.curPointCount,
                lastRefreshTime: this.lastRefreshTime,
                todayRewardPool: this.todayRewardPool
            };
            mgrRecord.setData("mgrExtract", e)
        }
        static init() {
            Tools.isOneDay(this.lastRefreshTime, Tools.time()) || (this.lastRefreshTime = Tools.time(),
            this.todayFreeExtractCount = 0,
            this.curPointCount = 0,
            this.refreshRewardPool(),
            this.saveRecord())
        }
        static get needPointCount() {
            return mgrSdk.getCopNumberValueByKey("extract_need_point_count") || 20
        }
        static get everyRewardGoldCount() {
            return mgrSdk.getCopNumberValueByKey("every_point_reward_gold") || 10
        }
        static get dailyFreeExtractCount() {
            return mgrSdk.getCopNumberValueByKey("daily_free_extrat_count") || 3
        }
        static get pointProgress() {
            return this.curPointCount / this.needPointCount
        }
        static get bFree() {
            return this.todayFreeExtractCount < this.dailyFreeExtractCount
        }
        static addExtractCount() {
            if (this.curPointCount++,
            this.curPointCount >= this.needPointCount) {
                let e = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.ad_extract_part);
                (this.bFree || e) && mgrDirector.openDialog("vExtractDialog", null, !0),
                this.curPointCount = 0
            }
            return mgrPlayer.addItemAmount(Const.ITEM_ID_GOLD, this.everyRewardGoldCount, "点击金币"),
            this.saveRecord(),
            this.everyRewardGoldCount
        }
        static refreshRewardPool() {
            this.isPoolExtractFinied(1) ? this.refreshRewardPoolWithPool(2) : this.refreshRewardPoolWithPool(1)
        }
        static isPoolExtractFinied(e) {
            let t = mgrCfg.get_from_extract_db(e);
            for (let e = 0; e < t.length; e++) {
                const a = t[e];
                if (a.bNecessary)
                    for (let e = 0; e < a.items.length; e++) {
                        const t = a.items[e];
                        if (mgrPlayer.getItemAmount(t[0]) <= 0)
                            return !1
                    }
            }
            return !0
        }
        static refreshRewardPoolWithPool(e) {
            this.todayRewardPool = [];
            let t = 9
              , a = 0
              , i = mgrCfg.get_from_extract_db(e);
            for (let e = 0; e < i.length; e++) {
                const s = i[e];
                let o = Tools.random(s.spaceCount[0], s.spaceCount[1])
                  , n = [];
                for (let e = 0; e < s.items.length; e++) {
                    const t = s.items[e];
                    (s.bNecessary && mgrPlayer.getItemAmount(t[0]) <= 0 || !s.bNecessary) && n.push({
                        itemId: t[0],
                        amount: t[1],
                        weight: t[2]
                    })
                }
                let r = o + a;
                r = ul.clamp(r, 0, n.length),
                a += o - (r = ul.clamp(r, 0, t));
                for (let e = 1; e <= r; e++) {
                    let e = Tools.RoundTableProbability(n, "weight");
                    this.todayRewardPool.push(e),
                    n.splice(n.indexOf(e), 1),
                    t--
                }
            }
            let s = [];
            for (; this.todayRewardPool.length > 0; ) {
                let e = Tools.random(0, this.todayRewardPool.length - 1)
                  , t = this.todayRewardPool[e];
                s.push(t),
                this.todayRewardPool.splice(e, 1)
            }
            this.todayRewardPool = s
        }
        static getTodayRewardPool() {
            return this.todayRewardPool
        }
        static extract(e=!0) {
            let t;
            for (; ; ) {
                t = Tools.RoundTableProbability(this.todayRewardPool, "weight");
                let e = !!mgrCfg.get_from_part_db(t.itemId);
                if (e && mgrPlayer.getItemAmount(t.itemId) <= 0)
                    break;
                if (!e)
                    break
            }
            return mgrPlayer.addItemAmount(t.itemId, t.amount, "抽奖"),
            e && this.todayFreeExtractCount++,
            this.saveRecord(),
            t
        }
    }
    const T_GAME_CENTER_PARAM_KEYS = {
        game01DailyFreeCount: "game01DailyFreeCount",
        game01EveryPrice: "game01EveryPrice",
        game01EveryRewardCount: "game01EveryRewardCount",
        game01EveryHoleCount: "game01EveryHoleCount",
        game02DailyFreeCount: "game02DailyFreeCount",
        game02EveryPrice: "game02EveryPrice",
        game02MinRewardCount: "game02MinRewardCount",
        game02MaxRewardCount: "game02MaxRewardCount",
        game02MinCrownRewardCount: "game02MinCrownRewardCount",
        game02MaxCrownRewardCount: "game02MaxCrownRewardCount",
        game02EveryRebornPrice: "game02EveryRebornPrice",
        game02EveryRebornRatio: "game02EveryRebornRatio",
        game02EveryMaxCrownCount: "game02EveryMaxCrownCount",
        game02EveryMaxBombCount: "game02EveryMaxBombCount",
        game02EveryMaxKnifeCount: "game02EveryMaxKnifeCount",
        game02EveryKnifeShowRatio: "game02EveryKnifeShowRatio",
        game02EveryMinProgress: "game02EveryMinProgress",
        game02EveryMaxProgress: "game02EveryMaxProgress"
    };
    class mgrGameCenter extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord(),
            this.init()
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("mgrGameCenter") || {};
            this.game01DailyUseCount = e.game01DailyUseCount || 1,
            this.game02DailyUseCount = e.game02DailyUseCount || 1,
            this.lastRefreshTime = e.lastRefreshTime || 0
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                game01DailyUseCount: this.game01DailyUseCount,
                game02DailyUseCount: this.game02DailyUseCount,
                lastRefreshTime: this.lastRefreshTime
            };
            mgrRecord.setData("mgrGameCenter", e)
        }
        static init() {
            Tools.isOneDay(this.lastRefreshTime, Tools.time()) || (this.lastRefreshTime = Tools.time(),
            this.game01DailyUseCount = 0,
            this.game02DailyUseCount = 0,
            this.saveRecord())
        }
        static game01GetFreeCount() {
            let e = mgrCfg.get_from_small_game_center_config_db(T_GAME_CENTER_PARAM_KEYS.game01DailyFreeCount).value;
            return ul.clamp(e - this.game01DailyUseCount, 0, e)
        }
        static game01CanOperation() {
            if (this.game01GetFreeCount() > 0)
                return !0;
            let e = mgrCfg.get_from_small_game_center_config_db(T_GAME_CENTER_PARAM_KEYS.game01EveryPrice).value;
            return mgrPlayer.getItemAmount(Const.ITEM_ID_GOLD) >= e
        }
        static game01Operation() {
            if (this.game01GetFreeCount() <= 0) {
                let e = mgrCfg.get_from_small_game_center_config_db(T_GAME_CENTER_PARAM_KEYS.game01EveryPrice).value;
                mgrPlayer.addItemAmount(Const.ITEM_ID_GOLD, -e, "弹珠")
            }
            this.game01DailyUseCount++,
            mgrSdk.staticPointEvent(9005),
            this.saveRecord()
        }
        static game02GetFreeCount() {
            let e = mgrCfg.get_from_small_game_center_config_db(T_GAME_CENTER_PARAM_KEYS.game02DailyFreeCount).value;
            return ul.clamp(e - this.game02DailyUseCount, 0, e)
        }
        static game02CanOperation() {
            if (this.game02GetFreeCount() > 0)
                return !0;
            let e = mgrCfg.get_from_small_game_center_config_db(T_GAME_CENTER_PARAM_KEYS.game02EveryPrice).value;
            return mgrPlayer.getItemAmount(Const.ITEM_ID_GOLD) >= e
        }
        static game02Operation() {
            if (this.game02GetFreeCount() <= 0) {
                let e = mgrCfg.get_from_small_game_center_config_db(T_GAME_CENTER_PARAM_KEYS.game02EveryPrice).value;
                mgrPlayer.addItemAmount(Const.ITEM_ID_GOLD, -e, "弹珠")
            }
            this.game02DailyUseCount++,
            mgrSdk.staticPointEvent(9007),
            this.saveRecord()
        }
        static randomOneGame02() {
            let e = {
                gameCurProgress: 0,
                gameNeedProgress: 0,
                gameCrownCount: 0,
                gameBombCount: 0,
                gameRebornCount: 0,
                gameHavedKnifeCount: 0,
                gameRewardCount: 0
            }
              , t = mgrCfg.get_from_small_game_center_config_db(T_GAME_CENTER_PARAM_KEYS.game02EveryMinProgress).value
              , a = mgrCfg.get_from_small_game_center_config_db(T_GAME_CENTER_PARAM_KEYS.game02EveryMaxProgress).value;
            e.gameNeedProgress = Tools.random(t, a);
            let i = mgrCfg.get_from_small_game_center_config_db(T_GAME_CENTER_PARAM_KEYS.game02EveryMaxCrownCount).value;
            e.gameCrownCount = Tools.random(1, i);
            let s = mgrCfg.get_from_small_game_center_config_db(T_GAME_CENTER_PARAM_KEYS.game02EveryMaxBombCount).value;
            if (e.gameBombCount = Tools.random(0, s),
            Math.random() < mgrCfg.get_from_small_game_center_config_db(T_GAME_CENTER_PARAM_KEYS.game02EveryKnifeShowRatio).value) {
                let t = mgrCfg.get_from_small_game_center_config_db(T_GAME_CENTER_PARAM_KEYS.game02EveryMaxKnifeCount).value;
                e.gameHavedKnifeCount = Tools.random(1, t)
            }
            let o = mgrCfg.get_from_small_game_center_config_db(T_GAME_CENTER_PARAM_KEYS.game02MinRewardCount).value
              , n = mgrCfg.get_from_small_game_center_config_db(T_GAME_CENTER_PARAM_KEYS.game02MaxRewardCount).value;
            return e.gameRewardCount = Tools.random(o, n),
            e
        }
    }
    class vLoadingScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vLoadingScene",
            this.exportNodeNames = ["CC_progressBarProgress", "CC_spriteBar", "CC_spriteXingxing", "CC_labelTipAuthor", "CC_spriteLogo", "CC_spriteLogoNative", "CC_boxProgress"],
            this.curProgress = 0,
            this.fakeProgress = 0
        }
        onOpened() {
            super.onOpened(),
            window.conch ? (window.conchConfig.getOS(),
            this.labelTipAuthor.visible = !1,
            this.spriteLogo.visible = !0,
            this.spriteLogoNative.visible = !1) : (this.labelTipAuthor.visible = !1,
            this.spriteLogo.visible = !0,
            this.spriteLogoNative.visible = !1);
            for (let e = 1; e <= 7; e++)
                this[`star ${e}`] = new ULSkeleton("res/spine/ui_loading.sk"),
                this[`star ${e}`].playAnimation("idle1"),
                this.boxProgress.addChild(this[`star ${e}`]),
                Tools.layoutH(this.boxProgress, 476 / 6);
            CustomTween.to(this.spriteXingxing, {
                rotation: 360
            }, 2e3).callback(()=>{
                this.spriteXingxing.rotation = 0
            }
            ).start(0),
            CustomTween.from(this.spriteLogo, {
                x: this.spriteLogo.x - 576
            }, 500, Laya.Ease.backOut).start(1),
            CustomTween.from(this.spriteLogoNative, {
                x: this.spriteLogo.x - 576
            }, 500, Laya.Ease.backOut).start(1),
            this.beginLoading(),
            this.registerListeners({
                MSG_SDK_CHANNEL_INFO_RESULT: this.onMsgChannelInfoResult.bind(this)
            }),
            this.updateProgress(),
            this.updateTimer = Timer.callLoop(.016, ()=>{
                this.updateProgress()
            }
            , this)
        }
        onClosed() {
            super.onClosed()
        }
        beginLoading() {
            this.context.beginTime = Tools.time();
            let e = new TaskManager((e,t)=>{
                this.curProgress = e / t
            }
            )
              , t = [];
            t.push(e=>{
                console.log("==>初始化自定义shader"),
                CartoonMaterial.initShader(),
                e()
            }
            );
            let a = mgrCfg.getLoadUrls();
            for (const e in a) {
                let i = a[e];
                t.push(e=>{
                    console.log(`加载配置表: ${i}`),
                    Laya.loader.load(i, new Laya.Handler(this,t=>{
                        t && e()
                    }
                    ))
                }
                )
            }
            e.push(t),
            e.push([e=>{
                console.log("处理加载完毕事宜!!"),
                this.initGameData(e)
            }
            ]),
            t = [];
            let i = ["item_huabao", "map_hudong"];
            window.conch && (i.push("fairy_001_toufa"),
            i.push("fairy_001_yifu"));
            for (let e = 0; e < i.length; e++) {
                const a = i[e];
                t.push(e=>{
                    mgrLoader.loadModeWithModeId(a, ()=>{
                        this.add3DEffectAtFront(a, {
                            x: 1e4,
                            y: 1e4
                        }, 1),
                        Timer.callLater(1, ()=>{
                            e()
                        }
                        , this)
                    }
                    , this, 0)
                }
                )
            }
            t.push(e=>{
                console.log("vLoadingScene onLoadingComplete"),
                mgrSdk.onLoadingComplete(),
                e()
            }
            ),
            t.push(e=>{
                console.log("vLoadingScene task wait sdk language"),
                Timer.callLoop(.016, t=>{
                    mgrI18n.isReceiveSdkLanguage() ? (console.log("vLoadingScene sdk language received"),
                    t.stop(),
                    e()) : t.count > 180 && (console.log("vLoadingScene sdk language timeout"),
                    t.stop(),
                    e())
                }
                , this)
            }
            ),
            e.push(t),
            e.start(()=>{
                let e = Tools.time() - this.context.beginTime;
                console.log(`加载完毕, 总共用时: ${1e3 * e}毫秒`),
                vLoadingScene.bInit = !0
            }
            , this)
        }
        initGameData(e) {
            mgrCfg.processDb(),
            this.__importAllManager(),
            Manager.loadAllManagers(e),
            mgrI18n.trySetI18nImage(this.spriteLogo, "art33.png"),
            ScaleButton.setSoundPlayId(101)
        }
        __importAllManager() {
            let e = [mgrNative, mgrRecord, mgrSound, mgrCfg, mgrI18n, mgrPlayer, mgrInteraction, mgrDirector, mgrSdk, mgrTip, mgrDebug, mgrAd, mgrCop, mgrStage, mgrOfflineArena, mgrOfflinePartRank, mgrOfflinePvp, mgrOfflineLevelRank, mgrGarden, mgrPart, mgrWishPool, mgrSign, mgrAchievement, mgrDailyTask, mgrGuide, mgrShop, mgrLoader, mgrChannel, mgrReview, mgrAdNative, mgrNativeAdSdk, mgrOfflineNearbyRank, mgrOfflineReward, mgrBannerInt, mgrExtract, mgrGameCenter];
            for (let t = 0; t < e.length; t++) {
                e[t].__init()
            }
        }
        updateProgress() {
            this.fakeProgress = .5 * this.fakeProgress + .5 * this.curProgress,
            this.progressBarProgress.progress = this.fakeProgress,
            this.spriteXingxing.x = this.spriteBar.width * this.fakeProgress;
            for (let e = 0; e <= 6; e++) {
                let t = this[`star ${e + 1}`];
                this.fakeProgress >= e / 6 - .1 && "idle1" == t.playingAnimationName && t.playAnimation("idle2", !1, ()=>{
                    t.playAnimation("idle3", !0)
                }
                )
            }
            this.fakeProgress >= .99 && (this.updateTimer.stop(),
            this.startGame())
        }
        startGame() {
            if (Laya.Browser.onPC) {
                let e = NetworkWS.newSeasion("127.0.0.1", 8081);
                e.on("open", this, ()=>{
                    Timer.callLater(1, ()=>{
                        mgrTip.showMsgTip("链接存档服务器成功！可以存档！")
                    }
                    ),
                    Const.GlobalRouter = new GameRemoteRouter(e)
                }
                ),
                e.on("error", this, ()=>{
                    console.log("链接存档服务器失败!")
                }
                )
            }
            mgrInteraction.bBorn ? mgrDirector.warpSceneWidthEffect("vHubScene", {
                bFromLoading: !0,
                bDisableInt: !0
            }) : mgrI18n.isReceiveSdkLanguage() && null == mgrI18n.getRecordLanguage() ? mgrDirector.openDialog("vSetLanguageDialog", {
                fOnClose: ()=>{
                    mgrDirector.open2DScene("vBornScene")
                }
            }) : mgrDirector.open2DScene("vBornScene")
        }
        onMsgChannelInfoResult() {
            console.log("收到初始化回调!!!"),
            mgrOfflineNearbyRank.updateSelfInfo()
        }
    }
    class StageTouchEvent extends Laya.Script {
        onStart() {}
        onStageMouseDown(e) {
            console.log(Tools.time()),
            vLoadingScene.bInit && mgrDirector.add3DEffectAtFront(MODEL_ID.effect.shubiao_dianji, {
                x: e.stageX,
                y: e.stageY
            }, 3)
        }
    }
    class vWarpSceneNodeWhite extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vWarpSceneNodeWhite",
            this.exportNodeNames = ["CC_spriteBg"]
        }
        onOpened() {
            this.bPlayingClose && this.playCloseAnimation(this.closeCallback.bind(this), !0)
        }
        onClosed() {}
        playCloseAnimation(e, t=!1) {
            this.bPlayingClose && !t || (this.bPlayingClose = !0,
            this.closeCallback = e,
            this.bResLoaded && (this.spriteBg.alpha = 0,
            CustomTween.to(this.spriteBg, {
                alpha: 1
            }, 300).callback(()=>{
                this.bPlayingClose = !1,
                this.closeCallback && this.closeCallback()
            }
            ).start(1)))
        }
        playOpenAnimation() {
            this.spriteBg.alpha = 1,
            CustomTween.delayTime(this.spriteBg, 100).to({
                alpha: 0
            }, 300).callback(()=>{
                this.spriteBg.alpha = 0
            }
            ).start(1)
        }
    }
    var LAYER_ZORDER;
    !function(e) {
        e[e.layer2dScene = 1e3] = "layer2dScene",
        e[e.layer2dDialog = 1e4] = "layer2dDialog",
        e[e.layer3d = 2e4] = "layer3d",
        e[e.layer2dTip = 3e4] = "layer2dTip"
    }(LAYER_ZORDER || (LAYER_ZORDER = {}));
    class mgrDirector extends Manager {
        static onLoad() {
            super.onLoad(),
            console.log("mgrDirector.onLoad")
        }
        static initScene() {
            this.init2DLayer(),
            this.init3DLayer()
        }
        static init2DLayer() {
            this.Layer2D || (this.Layer2D = Laya.stage.addChild(new Laya.Sprite),
            this.Layer2D.size(0, 0),
            this.Layer2D.pos(Laya.stage.width / 2, Laya.stage.height / 2),
            this.Layer2D.name = "Layer2D",
            this.Layer2D.zOrder = 1e3,
            this.Layer2D.addComponent(StageTouchEvent),
            this.Layer2DScene = this.Layer2D.addChild(new Laya.Sprite),
            this.Layer2DScene.size(0, 0),
            this.Layer2DScene.pos(0, 0),
            this.Layer2DScene.name = "Layer2DScene",
            this.Layer2DScene.zOrder = LAYER_ZORDER.layer2dScene,
            this.Layer2DDialog = this.Layer2D.addChild(new Laya.Sprite),
            this.Layer2DDialog.size(0, 0),
            this.Layer2DDialog.pos(0, 0),
            this.Layer2DDialog.name = "Layer2DDialog",
            this.Layer2DDialog.zOrder = LAYER_ZORDER.layer2dDialog)
        }
        static get2DLayer() {
            return this.Layer2D
        }
        static get2DSceneLayer() {
            return this.Layer2DScene
        }
        static get2DDialogLayer() {
            return this.Layer2DDialog
        }
        static getTipRoot() {
            return this.__tipRoot || (this.__tipRoot = this.get2DLayer().addChild(new Laya.Sprite),
            this.__tipRoot.zOrder = LAYER_ZORDER.layer2dTip),
            this.__tipRoot
        }
        static set3DLayerAtSceneFont() {}
        static set3DLayerAtDialogFont() {}
        static set3DLayerAtBack() {}
        static init3DLayer() {
            if (!this.Layer3D) {
                this.Layer3D = new Laya.Sprite,
                this.Layer2D.addChild(this.Layer3D),
                this.Layer3D.size(0, 0),
                this.Layer3D.pos(0, 0),
                this.Layer3D.name = "Layer3D",
                this.Layer3D.zOrder = LAYER_ZORDER.layer3d,
                this.Layer3DBg = new Laya.Sprite,
                this.Layer3D.addChild(this.Layer3DBg),
                this.Layer3DBg.size(0, 0),
                this.Layer3DBg.pos(0, 0),
                this.Layer3DBg.name = "Layer3DBg",
                this.Layer3DBg.zOrder = 0,
                this.Layer3DScene = new Laya.Scene3D,
                this.Layer3D.addChild(this.Layer3DScene);
                var e = this.Layer3DScene.addChild(new Laya.Camera(0,.1,100));
                e.transform.position = new Laya.Vector3(0,200,0),
                e.clearFlag = 2,
                e.orthographic = !0,
                this.Layer3DSceneCamera = e,
                this.Layer3DDirectionLight = this.Layer3DScene.addChild(new Laya.DirectionLight),
                this.Layer3DDirectionLight.transform.rotationEuler = new Laya.Vector3(-15.1,-41.31,-17.27),
                this.Layer3DDirectionLight.color = new Laya.Vector3(1,0,0),
                this.Layer3DSceneRoot = this.Layer3DScene.addChild(new Laya.Sprite3D),
                this.Layer3DSceneRoot.name = "Layer3DSceneRoot"
            }
        }
        static get3DLayer() {
            return this.Layer3D
        }
        static get3DBgLayer() {
            return this.Layer3DBg
        }
        static get3DRoot() {
            return this.Layer3DSceneRoot
        }
        static get3DCamera() {
            return this.Layer3DSceneCamera
        }
        static Create3DScene(e, t=null, a=new Laya.Vector3(0,0,0), i=!0) {
            if (i && this.get3DRoot().removeChildren(),
            t)
                mgrLoader.loadModeWithModeId(t, i=>{
                    if (i) {
                        let i = mgrLoader.Pool.getModel(t);
                        this.get3DRoot().addChild(i),
                        i.transform.position = a,
                        e(i)
                    }
                }
                , this, 1);
            else {
                let t = new Laya.Sprite3D;
                this.get3DRoot().addChild(t),
                t.transform.position = a,
                e(t)
            }
        }
        static clear3DScene() {
            this.get3DRoot().destroyChildren(),
            this.get3DBgLayer().destroyChildren()
        }
        static warpSceneWidthEffect(e, t) {
            if (this.__loadingSceneName)
                return;
            let a = Const.require.requireModule("SceneBase");
            a.showingSceneName != e && (mgrTip.hideJumpOtherGameDrag(a.showingSceneName),
            a.showingSceneName = e,
            this.__loadingSceneName = e,
            this.warpSceneNode || (this.warpSceneNode = new vWarpSceneNode({}),
            this.getTipRoot().addChild(this.warpSceneNode)),
            this.sendMsg("MSG_WARP_SCENE_START"),
            this.warpSceneNode.playCloseAnimation(()=>{
                let a = [];
                for (let e = this.get2DSceneLayer().numChildren - 1; e >= 0; e--)
                    a.push(this.get2DSceneLayer().getChildAt(e));
                for (let e = 0; e < a.length; e++) {
                    a[e].destroy()
                }
                mgrLoader.autoReleaseRes();
                let i = Const.require.requireModule(e);
                (t = t || {}).fOnLoadingFinished = (()=>{
                    this.__loadingSceneName = null,
                    this.warpSceneNode.playOpenAnimation();
                    let a = t;
                    a.viewName = e,
                    a.zIndex = -1,
                    this.sendMsg("MSG_WARP_SCENE_COMPLETED", a)
                }
                );
                let s = new i(t);
                this.get2DSceneLayer().addChild(s),
                s.name = e
            }
            ))
        }
        static warpSceneWidthEffectWhite(e, t) {
            if (this.__loadingSceneName)
                return;
            let a = Const.require.requireModule("SceneBase");
            a.showingSceneName != e && (mgrTip.hideJumpOtherGameDrag(a.showingSceneName),
            a.showingSceneName = e,
            this.__loadingSceneName = e,
            this.warpSceneNodeWhite || (this.warpSceneNodeWhite = new vWarpSceneNodeWhite({}),
            this.getTipRoot().addChild(this.warpSceneNodeWhite)),
            this.sendMsg("MSG_WARP_SCENE_START"),
            this.warpSceneNodeWhite.playCloseAnimation(()=>{
                let a = [];
                for (let e = this.get2DSceneLayer().numChildren - 1; e >= 0; e--)
                    a.push(this.get2DSceneLayer().getChildAt(e));
                for (let e = 0; e < a.length; e++) {
                    a[e].destroy()
                }
                mgrLoader.autoReleaseRes();
                let i = Const.require.requireModule(e);
                (t = t || {}).fOnLoadingFinished = (()=>{
                    this.__loadingSceneName = null,
                    this.warpSceneNodeWhite.playOpenAnimation();
                    let a = t;
                    a.viewName = e,
                    a.zIndex = -1,
                    this.sendMsg("MSG_WARP_SCENE_COMPLETED", a)
                }
                );
                let s = new i(t);
                this.get2DSceneLayer().addChild(s),
                s.name = e
            }
            ))
        }
        static open2DScene(e, t) {
            if (this.__loadingSceneName)
                return;
            let a = Const.require.requireModule("SceneBase");
            if (a.showingSceneName == e)
                return;
            mgrTip.hideJumpOtherGameDrag(a.showingSceneName),
            a.showingSceneName = e,
            this.__loadingSceneName = e,
            this.sendMsg("MSG_WARP_SCENE_START");
            let i = [];
            for (let e = this.get2DSceneLayer().numChildren - 1; e >= 0; e--)
                i.push(this.get2DSceneLayer().getChildAt(e));
            for (let e = 0; e < i.length; e++) {
                i[e].destroy()
            }
            mgrLoader.autoReleaseRes();
            let s = Const.require.requireModule(e);
            t = t || {},
            mgrTip.showLoadingTip("sceneLoad"),
            t.fOnLoadingFinished = (()=>{
                this.__loadingSceneName = null,
                mgrTip.hideLoadingTip("sceneLoad");
                let a = t;
                a.viewName = e,
                a.zIndex = -1,
                this.sendMsg("MSG_WARP_SCENE_COMPLETED", a)
            }
            );
            let o = new s(t);
            this.get2DSceneLayer().addChild(o),
            o.name = e
        }
        static getCur2DSceneName() {
            return this.get2DSceneLayer().getChildAt(0) ? this.get2DSceneLayer().getChildAt(0).name : ""
        }
        static clear2DScene() {
            this.get2DSceneLayer().destroyChildren()
        }
        static openDialog(e, t, a=!1) {
            let i = Const.require.requireModule(e);
            if (!i)
                return;
            t = t || {},
            mgrTip.showLoadingTip("dialogOpen"),
            t.fOnLoadingFinished = (()=>{
                mgrTip.hideLoadingTip("dialogOpen")
            }
            );
            let s = new i(t);
            s.name = e;
            let o = t;
            return o.viewName = e,
            o.zIndex = DialogBase.curZIndex,
            this.sendMsg("MSG_DIALOG_OPEN", o),
            s.openDialog(a),
            s
        }
        static clear2DDialog() {
            this.get2DDialogLayer().destroyChildren()
        }
        static add3DEffectAtFront(e, t, a, i=1, s) {
            let o = 0
              , n = 0;
            if (t instanceof Laya.Sprite) {
                let e = t.localToGlobal(new Laya.Point(0,0));
                o = e.x,
                n = e.y
            } else
                o = t.x,
                n = t.y;
            let r = new Laya.Vector3;
            if (this.Layer3DSceneCamera.convertScreenCoordToOrthographicCoord(new Laya.Vector3(o,n,0), r),
            e instanceof Laya.Sprite3D)
                return this.get3DRoot().addChild(e),
                e.transform.position = r,
                e.transform.scale = new Laya.Vector3(i,i,i),
                void (s && s(e));
            mgrLoader.loadModeWithModeId(e, ()=>{
                let t = mgrLoader.Pool.getModel(e);
                this.get3DRoot().addChild(t),
                t.transform.position = r,
                t.transform.scale = new Laya.Vector3(i,i,i),
                a > 0 && Timer.callLater(a, ()=>{
                    mgrLoader.Pool.recoverModel(t)
                }
                , this),
                s && s(t)
            }
            , this, 1)
        }
        static isDeviceOverHeight() {
            return Laya.stage.height / Laya.stage.width >= 2
        }
        static get width() {
            return Laya.stage.width
        }
        static get height() {
            return Laya.stage.height
        }
    }
    mgrDirector.__loadingSceneName = null;
    class PoolManager {
        constructor() {
            this.pool = {}
        }
        getAllocCount(e) {
            let t = this.pool[e];
            return t && t.objs ? t.allocCount : 0
        }
        preAllocModel(e, t, a) {
            if (this.isHaveClone(e.toString()))
                return void a();
            let i = this.getModel(e);
            mgrDirector.get3DRoot().addChild(i),
            -1 == PoolManager.loadedModelIds.indexOf(e) ? (PoolManager.loadedModelIds.push(e),
            Timer.callLater(.5, ()=>{
                this.recoverModel(i),
                a()
            }
            , this)) : (this.recoverModel(i),
            a())
        }
        getModel(e) {
            this.pool[e] || (this.pool[e] = {
                lastGetTime: Tools.gameExecuteTime(),
                allocCount: 0,
                objs: [],
                poolId: e
            });
            let t = this.pool[e].objs;
            for (let e = t.length - 1; e >= 0; e--) {
                let a = t[e];
                a && a.transform || t.splice(e, 1)
            }
            this.pool[e].objs.length <= 0 && (this.pool[e].objs.push(mgrLoader.getModeWithModeId(e)),
            this.pool[e].allocCount++),
            this.pool[e].lastGetTime = Tools.gameExecuteTime();
            let a = this.pool[e].objs.shift();
            return a && a.transform && (a.transform.position = new Laya.Vector3),
            a
        }
        recoverModel(e) {
            let t = e.__modelId;
            t && (this.pool[t].objs.indexOf(e) >= 0 || (e.removeSelf(),
            this.pool[t].objs.push(e)))
        }
        clearAll() {
            Tools.forEachMap(this.pool, (e,t)=>{
                if (t.allocCount > t.objs.length)
                    console.warn(`warning resource isn't full recover, please checkout alloc/cur: ${e}:${t.allocCount}/${t.objs.length}`);
                else {
                    for (let e = 0; e < t.objs.length; e++) {
                        const a = t.objs[e];
                        a instanceof Laya.Sprite3D && (a.destroyed || a.destroy())
                    }
                    t.objs = [],
                    t.allocCount = 0
                }
            }
            )
        }
        _releaseResourceWithPoolId(e, t=0) {
            let a = this.pool[e]
              , i = [];
            for (let e = 0; e < a.objs.length; e++) {
                const s = a.objs[e];
                e < t ? i.push(s) : s instanceof Laya.Sprite3D && (s.destroyed || s.destroy())
            }
            this.pool[e].objs = i,
            a.allocCount = t
        }
        _autoReleaseWithPoolId(e) {
            let t = this.pool[e];
            return 0 != t.allocCount && (Tools.gameExecuteTime() - t.lastGetTime < 100 || (this._releaseResourceWithPoolId(e),
            !1))
        }
        autoRelease() {
            let e = 0
              , t = [];
            Tools.forEachMap(this.pool, (e,a)=>{
                t.push(a)
            }
            ),
            t = Tools.sortArrayByField(t, "lastGetTime"),
            Tools.forEachMap(t, (t,a)=>{
                let i = a.poolId;
                a.allocCount > a.objs.length || (e <= 20 ? this._autoReleaseWithPoolId(i) && e++ : this._releaseResourceWithPoolId(i))
            }
            )
        }
        isHaveClone(e) {
            let t = this.pool[e];
            return !!t && (!!t.objs && t.allocCount > 0)
        }
    }
    PoolManager.loadedModelIds = [];
    class mgrLoader extends Manager {
        static onLoad() {
            super.onLoad()
        }
        static get Pool() {
            return this.__pool__ || (this.__pool__ = new PoolManager),
            this.__pool__
        }
        static isLoadedWithModelId(e) {
            let t = mgrCfg.get_from_model_db(e);
            if (!t)
                return !1;
            let a = `${t.modelPath}${t.modelName}.lh`;
            return !!this.allRess[a]
        }
        static loadModeWithModeId(e, t, a, i) {
            let s = mgrCfg.get_from_model_db(e);
            if (!s)
                return console.warn("[error]:找不到模型配置:" + e),
                void t(!1);
            let o = `${s.modelPath}${s.modelName}.lh`;
            this.allRess[o] ? t(!0) : this.LoadRes(o, a=>{
                if (a) {
                    this.allRess[o].__modelId = e;
                    try {
                        t(!0)
                    } catch (e) {
                        console.log("[error] mgrLoader.loadModeWithModeId has exception", e)
                    }
                } else
                    try {
                        t(!1)
                    } catch (e) {
                        console.log("[error] mgrLoader.loadModeWithModeId has exception", e)
                    }
            }
            , a, i)
        }
        static getModeWithModeId(e) {
            let t = mgrCfg.get_from_model_db(e);
            if (!t)
                return console.warn("[error]:找不到模型配置:" + e),
                null;
            let a = this.GetRes(`${t.modelPath}${t.modelName}.lh`, e);
            return a || console.warn("[error]:资源尚未加载" + e),
            a
        }
        static preCompileShader(e) {
            if (e instanceof Laya.RenderableSprite3D) {
                let i = e._render;
                if (i)
                    for (var t = i.materials, a = 0; a < t.length; a++) {
                        let e = (t[a]._shader || {})._subShaders || [];
                        for (let t = 0; t < e.length; t++) {
                            let a = e[t]._passes;
                            for (let e = 0; e < a.length; e++) {
                                a[e]
                            }
                        }
                    }
            }
            for (let t = 0; t < e.numChildren; t++) {
                let a = e.getChildAt(t);
                this.preCompileShader(a)
            }
        }
        static GetRes(e, t) {
            let a = this.allRess[e];
            if (a) {
                let e = Laya.Sprite3D.instantiate(a.res);
                return e.__modelId = t,
                e
            }
            return null
        }
        static LoadRes(e, t, a, i) {
            Laya.Sprite3D.load(e, new Laya.Handler(this,s=>{
                if (s) {
                    if (this.allRess[e] = {
                        tag: i,
                        res: s
                    },
                    this.preCompileShader(s),
                    !a)
                        return;
                    if (a instanceof Laya.Node) {
                        if (!a.parent)
                            return
                    } else if (a.destroyed)
                        return;
                    try {
                        t(!0)
                    } catch (e) {
                        console.warn("mgrLoader.LoadRes callback has exception", e)
                    }
                } else {
                    if (!a)
                        return;
                    if (a instanceof Laya.Node) {
                        if (!a.parent)
                            return
                    } else if (a.destroyed)
                        return;
                    console.warn("[error] 加载资源失败 再次尝试: " + e),
                    Timer.callLater(.01, ()=>{
                        this.LoadRes(e, t, a, i)
                    }
                    , this)
                }
            }
            ))
        }
        static releaseAllRes(e) {}
        static autoReleaseRes() {
            this.Pool.autoRelease(),
            Tools.forEachMap(this.allRess, (e,t)=>{
                let a = t.__modelId;
                this.Pool.isHaveClone(a) || 1 != t.tag || (console.log(`mgrloader->autorelease : ${a}`),
                t.res.destroy(),
                this.allRess[e] = null)
            }
            ),
            Laya.Resource.destroyUnusedResources()
        }
        static releseAllResourceByModelId(e) {
            let t = mgrCfg.get_from_model_db(e)
              , a = `${t.modelPath}${t.modelName}.lh`;
            Laya.loader.load(a, new Laya.Handler(this,e=>{
                let t = this.findAllResources(e);
                for (let e = 0; e < t.length; e++) {
                    const a = t[e];
                    let i = Laya.Resource.getResourceByURL(a);
                    i && (i.destroy(),
                    console.log(`释放资源: ${a}`))
                }
            }
            ), null, Laya.Loader.JSON)
        }
        static findAllResources(e) {
            let t = [];
            for (const a in e) {
                let i = e[a];
                if (i) {
                    let e = ul.getType(i);
                    if ("object" === e || "array" == e)
                        t = t.concat(this.findAllResources(i));
                    else {
                        ["mesh", "material", "path", "clipPath", "meshPath"].indexOf(a) >= 0 && t.push(i)
                    }
                }
            }
            return t
        }
        static Load2dRes(e, t, a, i, s) {
            if (t != Laya.Loader.PREFAB && t != Laya.Loader.JSON || /.json/.test(e) || (e += ".json"),
            /http/.test(e) || /https/.test(e)) {
                if (/\.webp/.test(e)) {
                    let t = new XMLHttpRequest;
                    return t.open("get", e),
                    t.overrideMimeType ? t.overrideMimeType("text/plain; charset=x-user-defined") : t.setRequestHeader("Accept-Charset", "x-user-defined"),
                    t.onreadystatechange = function() {
                        if (4 == t.readyState) {
                            if (void 0 === t.responseBody)
                                var e = t.responseText.split("").map(function(e) {
                                    return String.fromCharCode(255 & e.charCodeAt(0))
                                }).join("");
                            window.WebPDecodeAndDraw(e, e=>{
                                try {
                                    i(e)
                                } catch (e) {
                                    console.warn("mgrLoader.Load2dRes callback has exception", e)
                                }
                            }
                            )
                        }
                    }
                    ,
                    void t.send(null)
                }
            } else
                "res" != e.substring(0, e.indexOf("/")) && (e = "res/" + e);
            Laya.loader.load(e, new Laya.Handler(this,o=>{
                if (this.checkCaller(a))
                    if (o)
                        try {
                            i(o)
                        } catch (e) {
                            console.warn("mgrLoader.Load2dRes callback has exception", e)
                        }
                    else
                        Timer.callLater(.3, ()=>{
                            console.warn("[error] 加载资源失败 再次尝试: " + e),
                            this.Load2dRes(e, t, a, i, s)
                        }
                        , a)
            }
            ), new Laya.Handler(this,e=>{
                try {
                    s && s(e)
                } catch (e) {
                    console.warn("mgrLoader.Load2dRes progress has exception", e)
                }
            }
            ), t)
        }
        static checkCaller(e) {
            return !!e && !e.destroyed
        }
        static processRemoteResLoad() {
            if (this.curLoadingRemoteResInfo)
                console.log(`正在加载远程资源...: url:${this.curLoadingRemoteResInfo.url}`);
            else if (!(this.RemoteResLoadQueue.length <= 0)) {
                this.curLoadingRemoteResInfo = this.RemoteResLoadQueue.shift(),
                console.log(`开始加载远程资源:${this.curLoadingRemoteResInfo.url}`);
                try {
                    this.loadRemoteResQg(this.curLoadingRemoteResInfo.url, (e,t)=>{
                        if (this.curLoadingRemoteResInfo.bHaveCaller && !this.checkCaller(this.curLoadingRemoteResInfo.caller))
                            return console.log(`远程资源:${this.curLoadingRemoteResInfo.url} 调用者销毁`),
                            void (this.curLoadingRemoteResInfo = null);
                        if (e)
                            console.log(`远程资源加载失败: 放在队尾重试: ${this.curLoadingRemoteResInfo.url}`),
                            this.RemoteResLoadQueue.push(this.curLoadingRemoteResInfo),
                            this.curLoadingRemoteResInfo = null;
                        else {
                            console.log(`远程资源加载成功: ${this.curLoadingRemoteResInfo.url}`);
                            try {
                                this.curLoadingRemoteResInfo.callback(e, t)
                            } catch (e) {
                                console.warn("[error] mgrLoader.processRemoteResLoad this.curLoadingRemoteResInfo.callback has exception", e)
                            }
                        }
                    }
                    )
                } catch (e) {
                    console.log(e),
                    console.log(`远程资源加载失败: 放在队尾重试: ${this.curLoadingRemoteResInfo.url}`),
                    this.RemoteResLoadQueue.push(this.curLoadingRemoteResInfo),
                    this.curLoadingRemoteResInfo = null
                }
            }
        }
        static loadRemoteResQg(e, t) {
            if (this.__cachedRemoteTexture[e])
                return void t(null, this.__cachedRemoteTexture[e]);
            let a = new Image
              , i = ()=>{
                a.removeEventListener("load", i),
                a.removeEventListener("error", s),
                console.log("IMAGE 加载成功!!", e);
                let o = new Laya.Texture2D;
                o.loadImageSource(o),
                this.__cachedRemoteTexture[e] = o;
                try {
                    t(null, o)
                } catch (e) {
                    console.warn("[error] mgrLoader.loadRemoteResQg callback has exception", e)
                }
            }
              , s = ()=>{
                a.removeEventListener("load", i),
                a.removeEventListener("error", s),
                console.log("IMAGE 加载失败!!", e);
                try {
                    t({
                        error: "error"
                    }, null)
                } catch (e) {
                    console.warn("[error] mgrLoader.loadRemoteResQg callback has exception", e)
                }
            }
            ;
            a.addEventListener("load", i),
            a.addEventListener("error", s),
            a.src = e
        }
        static loadFont(e, t, a) {
            if (!t)
                return;
            if (this.loadedFontname[e])
                return void (t.font = e);
            console.log(`开始加载字体:${e}`);
            let i = new Laya.BitmapFont;
            i.loadFont(`res/font/${e}.fnt`, new Laya.Handler(this,()=>{
                if (Laya.Text.registerBitmapFont(e, i),
                this.loadedFontname[e] = !0,
                !t || t.destroyed)
                    return;
                t.font = e;
                let a = t.text;
                t.text = "",
                t.text = a
            }
            ))
        }
        static batchLoadResources(e, t, a) {
            let i = new TaskManager
              , s = [];
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                s.push(e=>{
                    mgrLoader.loadModeWithModeId(a, ()=>{
                        e()
                    }
                    , this, 1)
                }
                )
            }
            for (let e = 0; e < t.length; e++) {
                const a = t[e];
                let i = mgrCfg.get_from_animation_db(a);
                s.push(e=>{
                    Laya.AnimationClip.load(i.path, new Laya.Handler(this,t=>{
                        e()
                    }
                    ))
                }
                )
            }
            i.push(s),
            i.start(()=>{
                try {
                    a && a()
                } catch (e) {
                    console.warn("[error] mgrLoader.batchLoadResources callback has exception", e)
                }
            }
            , null)
        }
    }
    mgrLoader.allRess = {},
    mgrLoader.RemoteResLoadQueue = [],
    mgrLoader.curLoadingRemoteResInfo = null,
    mgrLoader.__cachedRemoteTexture = {},
    mgrLoader.loadedFontname = {};
    class Tools {
        static time() {
            return null != this._debugTime ? this._debugTime : (new Date).getTime() / 1e3
        }
        static gameExecuteTime() {
            return this.gameRuingTime
        }
        static autoIncrementRuingTime() {
            this.gameRuingTime || (this.gameRuingTime = 0),
            this.gameRuingTime += Math.min(this.delta(), 1)
        }
        static _setDebugTime(e) {
            this._debugTime = e
        }
        static isOneDay(e, t) {
            var a = new Date(1e3 * e)
              , i = new Date(1e3 * t);
            return a.getFullYear() == i.getFullYear() && a.getMonth() == i.getMonth() && a.getDate() == i.getDate()
        }
        static getObjSize(e) {
            if (!e)
                return 0;
            if (Array.isArray(e))
                return e.length;
            let t = 0;
            return Tools.forEachMap(e, (e,a)=>{
                t++
            }
            ),
            t
        }
        static random(e, t) {
            return null == e && null == t ? Math.random() : null == t ? Math.floor(Math.random() * e + 1) : Math.floor(Math.random() * (t - e + 1) + e)
        }
        static scaleInRange(e, t, a, i, s) {
            return t < a ? (e < t && (e = t),
            e > a && (e = a)) : (e < a && (e = a),
            e > t && (e = t)),
            (e - t) / (a - t) * (s - i) + i
        }
        static calcWheelTarget(e, t) {
            let a = 0;
            for (let i = 0; i < e.length; i++) {
                const s = e[i];
                let o = parseInt(s[t]);
                if (isNaN(o))
                    return console.warn(ul.format("Tools.calcWheelTarget weight field not found! key=[%s]", t)),
                    null;
                a += o
            }
            let i = this.random(a);
            for (let a = 0; a < e.length; a++) {
                const s = e[a];
                let o = parseInt(s[t]);
                if (i <= o)
                    return s;
                i -= o
            }
            return null
        }
        static sortArrayByField(e, t) {
            t = "string" == typeof t ? [t] : t;
            let a = [];
            for (let e in t) {
                let i = t[e];
                if (i && "" != i)
                    if ("-" === i.substring(0, 1)) {
                        let e = i.substring(1, i.length);
                        e && "" != e && a.push([e, !0])
                    } else
                        a.push([i, !1])
            }
            let i = [];
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                i.push(a)
            }
            return i.sort((e,t)=>{
                let i = 0;
                for (let s in a) {
                    let o = a[s]
                      , n = o[0]
                      , r = o[1]
                      , l = e[n]
                      , h = t[n];
                    if (null != l && 0 != (i = r ? h - l : l - h))
                        return i
                }
                return i
            }
            ),
            i
        }
        static bubbleSort(e, t) {
            for (var a = e.length, i = 0; i < a; i++)
                for (var s = 0; s < a - 1 - i; s++) {
                    if (t(e[s], e[s + 1]) > 0) {
                        var o = e[s + 1];
                        e[s + 1] = e[s],
                        e[s] = o
                    }
                }
            return e
        }
        static forEachMap(e, t) {
            if (!e)
                return;
            let a = Object.keys(e);
            for (let i = 0; i < a.length; i++) {
                let s = a[i]
                  , o = e[s];
                if (null != o && t(s, o))
                    break
            }
        }
        static _origin_sortTiles(e) {
            let t = (e,t)=>t.right > e.x && t.top > e.y
              , a = []
              , i = e.length;
            for (let s = 0; s < i; s++) {
                let i = e[s]
                  , o = a.indexOf(i);
                for (let n = 0, r = e.length; n < r; n++) {
                    if (s == n)
                        continue;
                    let r = e[n];
                    if (t(i, r)) {
                        let e = a.indexOf(r);
                        o < 0 && (a.push(i),
                        o = a.length - 1),
                        e < 0 && (a.push(r),
                        e = a.length - 1),
                        e < o && (a.splice(o, 1),
                        a.splice(e, 0, i),
                        o = e)
                    }
                }
            }
            for (let t = 0; t < e.length; t++) {
                let i = e[t];
                a.indexOf(i) < 0 && a.push(i)
            }
            return a
        }
        static sortTiles(e) {
            let t = (e,t)=>t.right > e.x && t.top > e.y;
            for (let t = 0; t < e.length; t++) {
                e[t]._id = t
            }
            let a = []
              , i = {}
              , s = e.length;
            for (let o = 0; o < s; o++) {
                let n = e[o]
                  , r = i[n._id];
                for (let l = 0; l < s; l++) {
                    if (o == l)
                        continue;
                    let s = e[l];
                    if (t(n, s)) {
                        let e = i[s._id];
                        if (null == r && (a.push(n),
                        r = a.length - 1,
                        i[n._id] = r),
                        null == e && (a.push(s),
                        e = a.length - 1,
                        i[s._id] = e),
                        e < r) {
                            for (let t = e; t < r; t++) {
                                i[a[t]._id]++
                            }
                            a.splice(r, 1),
                            a.splice(e, 0, n),
                            r = e,
                            i[n._id] = r
                        }
                    }
                }
            }
            for (let t = 0; t < e.length; t++) {
                let s = e[t];
                null == i[s._id] && a.push(s)
            }
            return a
        }
        static formatTime(e, t) {
            let a = Math.floor(e / 3600)
              , i = Math.floor(e / 60) % 60
              , s = Math.floor(e) % 60;
            return t.match("%h") && (t = t.replace("%h", a.toString())),
            t.match("%H") && (t = t.replace("%H", ul.format("%02d", a))),
            t.match("%m") && (t = t.replace("%m", i.toString())),
            t.match("%M") && (t = t.replace("%M", ul.format("%02d", i))),
            t.match("%s") && (t = t.replace("%s", s.toString())),
            t.match("%S") && (t = t.replace("%S", ul.format("%02d", s))),
            t
        }
        static formatFullTime(e, t) {
            var a = new Date(e)
              , i = a.getFullYear()
              , s = a.getMonth() + 1
              , o = a.getDate()
              , n = a.getHours()
              , r = a.getMinutes()
              , l = a.getSeconds();
            return t.match("%y") && (t = t.replace("%y", i.toString())),
            t.match("%m") && (t = t.replace("%m", s.toString())),
            t.match("%M") && (t = t.replace("%M", ul.format("%02d", s))),
            t.match("%d") && (t = t.replace("%d", o.toString())),
            t.match("%D") && (t = t.replace("%D", ul.format("%02d", o))),
            t.match("%h") && (t = t.replace("%h", n.toString())),
            t.match("%H") && (t = t.replace("%H", ul.format("%02d", n))),
            t.match("%tm") && (t = t.replace("%tm", r.toString())),
            t.match("%TM") && (t = t.replace("%TM", ul.format("%02d", r))),
            t.match("%s") && (t = t.replace("%s", l.toString())),
            t.match("%S") && (t = t.replace("%S", ul.format("%02d", l))),
            t
        }
        static generateUUID() {
            let e = (new Date).getTime();
            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, t=>{
                var a = (e + 16 * Math.random()) % 16 | 0;
                return e = Math.floor(e / 16),
                ("x" == t ? a : 3 & a | 8).toString(16)
            }
            )
        }
        static parseLogicExpressionArray(e) {
            let t = !0
              , a = !1
              , i = null;
            for (let s = 0; s < e.length; s++) {
                let o = e[s];
                switch (Array.isArray(o) && (o = this.parseLogicExpressionArray(o)),
                typeof o) {
                case "string":
                    switch (o) {
                    case "not":
                        a = !a;
                        break;
                    case "and":
                        i && console.warn(ul.format("Tools.parseLogicExpressionArray exp='%s' symbol overload index=[%d], origin_symbol=[%s], new_symbol=[%s]", JSON.stringify(e), s, i, o)),
                        i = "and";
                        break;
                    case "or":
                        i && console.warn(ul.format("Tools.parseLogicExpressionArray exp='%s' symbol overload index=[%d], origin_symbol=[%s], new_symbol=[%s]", JSON.stringify(e), s, i, o)),
                        i = "or";
                        break;
                    default:
                        console.warn(ul.format("Tools.parseLogicExpressionArray exp='%s' unknown symbol index=[%d], symbol=[%s]", JSON.stringify(e), s, o))
                    }
                    break;
                case "boolean":
                    a && (o = !o,
                    a = !1),
                    t = i && "and" != i ? t || o : t && o
                }
            }
            return t
        }
        static formatNumToStr(e) {
            let t = e.toString();
            return e >= 1e12 ? t = Math.floor(e / 10 / 1e3 / 1e3 / 1e3) / 100 + "mm" : e >= 1e9 ? t = Math.floor(e / 10 / 1e3 / 1e3) / 100 + "km" : e >= 1e6 ? t = Math.floor(e / 10 / 1e3) / 100 + "m" : e >= 1e3 && (t = Math.floor(e / 10) / 100 + "k"),
            t
        }
        static isIntersectLineWithLine(e, t, a, i) {
            return this.quickReject(e, t, a, i) && this.straddle(e, t, a, i)
        }
        static quickReject(e, t, a, i) {
            let s = Math.max(e.x, t.x)
              , o = Math.max(e.y, t.y)
              , n = Math.min(e.x, t.x)
              , r = Math.min(e.y, t.y)
              , l = Math.max(a.x, i.x)
              , h = Math.max(a.y, i.y)
              , d = Math.min(a.x, i.x)
              , c = Math.min(a.y, i.y);
            return !(s < d || o < c || l < n || h < r)
        }
        static straddle(e, t, a, i) {
            let s = e.x
              , o = t.x
              , n = e.y
              , r = t.y
              , l = a.x
              , h = i.x
              , d = a.y
              , c = i.y;
            return !(((s - l) * (c - d) - (n - d) * (h - l)) * ((o - l) * (c - d) - (r - d) * (h - l)) > 0 || ((l - s) * (r - n) - (d - n) * (o - s)) * ((h - s) * (r - n) - (c - n) * (o - s)) > 0)
        }
        static getIntersectPointLineWithLine(e, t, a, i) {
            let s = e.x
              , o = t.x
              , n = e.y
              , r = t.y
              , l = a.x
              , h = i.x
              , d = a.y
              , c = i.y;
            var g = (r - n) * (h - l) - (s - o) * (d - c);
            if (0 == g)
                return null;
            var _ = ((o - s) * (h - l) * (d - n) + (r - n) * (h - l) * s - (c - d) * (o - s) * l) / g
              , m = -((r - n) * (c - d) * (l - s) + (o - s) * (c - d) * n - (h - l) * (r - n) * d) / g;
            return (_ - s) * (_ - o) <= 0 && (m - n) * (m - r) <= 0 && (_ - l) * (_ - h) <= 0 && (m - d) * (m - c) <= 0 ? new Laya.Vector2(_,m) : null
        }
        static registerListeners(e) {
            this.msgHander || (this.msgHander = new MsgHandler),
            this.msgHander.registerListeners(e),
            this.msgHander.startProcMsg()
        }
        static sendMsg(e, t) {
            this.msgHander || (this.msgHander = new MsgHandler),
            this.msgHander.sendMsg(e, t)
        }
        static registerTouchHander(e, t) {
            e.on(Laya.Event.MOUSE_DOWN, e, a=>{
                e.__b_touch = !0,
                t({
                    isClick: !1,
                    isBegin: !0,
                    isMove: !1,
                    isEnd: !1,
                    isCancel: !1,
                    pos: {
                        x: a.stageX,
                        y: a.stageY
                    }
                })
            }
            ),
            e.on(Laya.Event.MOUSE_UP, e, a=>{
                e.__b_touch && (e.__b_touch = !1,
                t({
                    isClick: !1,
                    isBegin: !1,
                    isMove: !1,
                    isEnd: !0,
                    isCancel: !1,
                    pos: {
                        x: a.stageX,
                        y: a.stageY
                    }
                }))
            }
            ),
            e.on(Laya.Event.MOUSE_MOVE, e, a=>{
                1 == e.__b_touch && t({
                    isClick: !1,
                    isBegin: !1,
                    isMove: !0,
                    isEnd: !1,
                    isCancel: !1,
                    pos: {
                        x: a.stageX,
                        y: a.stageY
                    }
                })
            }
            ),
            e.on(Laya.Event.MOUSE_OUT, e, a=>{
                e.__b_touch && (e.__b_touch = !1,
                t({
                    isClick: !1,
                    isBegin: !1,
                    isMove: !1,
                    isEnd: !1,
                    isCancel: !0,
                    pos: {
                        x: a.stageX,
                        y: a.stageY
                    }
                }))
            }
            ),
            e.on(Laya.Event.CLICK, e, e=>{
                t({
                    isClick: !0,
                    isBegin: !1,
                    isMove: !1,
                    isEnd: !1,
                    isCancel: !1,
                    pos: {
                        x: e.stageX,
                        y: e.stageY
                    }
                })
            }
            )
        }
        static unRegisterTouchHander(e) {
            e.offAll(Laya.Event.MOUSE_DOWN),
            e.offAll(Laya.Event.MOUSE_UP),
            e.offAll(Laya.Event.MOUSE_MOVE),
            e.offAll(Laya.Event.MOUSE_OUT),
            e.offAll(Laya.Event.CLICK)
        }
        static delta() {
            return Laya.timer.delta / 1e3 * this.timeScale
        }
        static constDelata() {
            return Laya.stage.frameRate == Laya.Stage.FRAME_SLOW ? .032 / 3 : .016 / 3
        }
        static forward(e, t) {
            let a = new Laya.Vector3;
            Laya.Vector3.subtract(t, e.position, a);
            let i = new Laya.Vector3;
            Laya.Vector3.subtract(e.position, a, i),
            i.y = e.position.y,
            e.lookAt(i, new Laya.Vector3(0,1,0), !1)
        }
        static forwardDirection(e, t) {
            let a = new Laya.Vector3;
            Laya.Vector3.subtract(e.position, t, a),
            e.lookAt(a, new Laya.Vector3(0,1,0), !1)
        }
        static tranlateWorld3D2Screen(e, t) {
            if (!e)
                return {
                    bSuccessful: !1,
                    outPos: null
                };
            let a = new Laya.Vector3
              , i = ul.clone(t);
            return e.viewport.project(i, e.projectionViewMatrix, a),
            a.x /= Laya.stage.clientScaleX,
            a.y /= Laya.stage.clientScaleY,
            {
                bSuccessful: !0,
                outPos: a
            }
        }
        static castRayWithDirecton(e, t, a, i=100, s) {
            Laya.Vector3.normalize(a, a);
            let o = new Laya.Ray(t,a);
            if (s = s || new Laya.HitResult,
            e.physicsSimulation.rayCast(o, s, i),
            s.succeeded) {
                return s.collider.owner
            }
            return null
        }
        static castRayAllWithDirecton(e, t, a, i=100) {
            Laya.Vector3.normalize(a, a);
            let s = new Laya.Ray(t,a)
              , o = [];
            e.physicsSimulation.rayCastAll(s, o, i);
            let n = [];
            for (let e = 0; e < o.length; e++) {
                let t = o[e].collider.owner;
                n.push(t)
            }
            return n
        }
        static castRayFromTo(e, t, a, i) {
            if (i = i || new Laya.HitResult,
            e.physicsSimulation.raycastFromTo(t, a, i),
            i.succeeded) {
                return i.collider.owner
            }
            return null
        }
        static castRayAllFromTo(e, t, a) {
            let i = [];
            e.physicsSimulation.raycastAllFromTo(t, a, i);
            let s = [];
            for (let e = 0; e < i.length; e++) {
                let t = i[e].collider.owner;
                s.push(t)
            }
            return s
        }
        static normalize(e) {
            let t = new Laya.Vector3;
            return Laya.Vector3.normalize(e, t),
            t
        }
        static calcCosSeta(e, t) {
            if (!e)
                return 0;
            if (!t)
                return 0;
            let a = Laya.Vector3.scalarLength(e)
              , i = Laya.Vector3.scalarLength(t);
            return a && i ? Laya.Vector3.dot(e, t) / (a * i) : 0
        }
        static calcAngleA2B(e, t) {
            if (!e)
                return 0;
            if (!t)
                return 0;
            let a = Laya.Vector3.scalarLength(e)
              , i = Laya.Vector3.scalarLength(t);
            if (!a)
                return 0;
            if (!i)
                return 0;
            let s = Laya.Vector3.dot(e, t) / (a * i)
              , o = Math.acos(s);
            if (Math.abs(Math.sin(o)) < .001)
                return e.x * t.x < 0 || e.y * t.y < 0 || e.z * t.z < 0 ? 180 : 0;
            let n = new Laya.Vector3;
            Laya.Vector3.cross(e, t, n);
            let r = 0 != n.y ? n.y : 0 != n.x ? n.x : n.z;
            return r >= 0 ? 180 * o / Math.PI : r < 0 ? 180 * -o / Math.PI : void 0
        }
        static calcReflexVector(e, t) {
            let a = new Laya.Vector3;
            Laya.Vector3.cross(e, t, a);
            let i = new Laya.Vector3(-e.x,-e.y,-e.z)
              , s = Laya.Vector3.scalarLength(i)
              , o = Laya.Vector3.scalarLength(t)
              , n = Laya.Vector3.dot(t, i) / (s * o)
              , r = Math.acos(n);
            console.log(r / Math.PI * 180);
            let l = new Laya.Matrix4x4;
            Laya.Matrix4x4.createRotationAxis(a, -r, l);
            let h = new Laya.Matrix4x4;
            h.setForward(e);
            let d = new Laya.Matrix4x4;
            Laya.Matrix4x4.multiply(h, l, d);
            let c = new Laya.Vector3;
            return d.getForward(c),
            c
        }
        static widget(e, t, a) {
            let i = Laya.stage.width * e
              , s = Laya.stage.height * t
              , o = a.parent.globalToLocal(new Laya.Point(i,s));
            a.pos(o.x, o.y, !0)
        }
        static layoutH(e, t=8, a=.5) {
            let i = 0
              , s = 0;
            for (let t = 0; t < e._children.length; t++) {
                const a = e._children[t];
                a.visible && (i += a.width * a.scaleX,
                s++)
            }
            i += (s - 1) * t;
            let o = e.width * a;
            .5 == a && (o -= i / 2);
            let n = o;
            for (let a = 0; a < e._children.length; a++) {
                const i = e._children[a];
                i.visible && (n += i.pivotX * i.scaleX,
                i.x = n,
                n += (i.width - i.pivotX) * i.scaleX + t)
            }
        }
        static layoutV(e, t=8, a=.5) {
            let i = 0
              , s = 0;
            for (let t = 0; t < e._children.length; t++) {
                const a = e._children[t];
                a.visible && (i += a.height * a.scaleY,
                s++)
            }
            i += (s - 1) * t;
            let o = e.height * a;
            .5 == a && (o -= i / 2);
            let n = o;
            for (let a = 0; a < e._children.length; a++) {
                const i = e._children[a];
                i.visible && (n += i.pivotY * i.scaleY,
                i.y = n,
                n += (i.height - i.pivotY) * i.scaleY + t)
            }
        }
        static center(e, t=.5, a=.5) {
            let i = e.parent;
            i && e.pos(i.width * t - e.width * (.5 - e.pivotX / e.width), i.height * a - e.height * (.5 - e.pivotY / e.height), !0)
        }
        static hCenter(e) {
            let t = e.parent;
            t && e.pos(t.width / 2 - e.width * (.5 - e.pivotX / e.width), e.y, !0)
        }
        static hPersent(e, t=.5) {
            let a = e.parent;
            a && e.pos(a.width * t, e.y, !0)
        }
        static vCenter(e) {
            let t = e.parent;
            t && e.pos(e.x, t.height / 2 - e.height * (.5 - e.pivotY / e.height), !0)
        }
        static ConvertToScreenPos(e, t) {
            let a = new Laya.Vector3;
            return e.viewport.project(t, e.projectionViewMatrix, a),
            a
        }
        static isInScreen(e, t) {
            return !0
        }
        static inRange(e, t, a) {
            return !(Laya.Vector3.distanceSquared(e, t) > a * a)
        }
        static rotate(e, t) {
            let a = t.clone();
            Laya.Vector2.normalize(a, a);
            let i = a.y
              , s = a.x
              , o = Math.sin(e)
              , n = Math.cos(e);
            return a.x = s * n - i * o,
            a.y = i * n + s * o,
            a
        }
        static rotateY(e, t) {
            let a = t.clone();
            a.y = 0,
            Laya.Vector3.normalize(a, a);
            let i = a.z
              , s = a.x
              , o = Math.sin(e)
              , n = Math.cos(e);
            return a.x = s * n - i * o,
            a.z = i * n + s * o,
            a
        }
        static isClipExist(e, t) {
            if (!e)
                return !1;
            let a = e.getControllerLayer(0);
            return a ? !!a._statesMap[t] : (console.log("[error] haven't layer", e),
            !1)
        }
        static play(e, t) {
            if (!this.isClipExist(e, t))
                return !1;
            return e.getControllerLayer(0)._statesMap[t] ? (e.play(t),
            !0) : (console.warn(`[error] play havn't "${t}"`),
            !1)
        }
        static crossFade(e, t, a=.1) {
            if (!this.isClipExist(e, t))
                return !1;
            return e.getControllerLayer(0)._statesMap[t] ? (e.crossFade(t, a, 0),
            !0) : (console.warn(`[error] crossFade havn't "${t}"`),
            !1)
        }
        static shark(e) {
            let t = e._children;
            for (let e = 0; e < t.length; e++) {
                const a = t[e];
                if (a.skinnedMeshRenderer) {
                    let e = a.skinnedMeshRenderer.material;
                    e && (e.albedoIntensity = 3,
                    Timer.callLater(.15, ()=>{
                        e.albedoIntensity = 1
                    }
                    , this))
                }
            }
        }
        static link2Node(e, t, a) {
            if (t.name == e)
                return t.addChild(a),
                a.transform.localPosition = new Laya.Vector3,
                !0;
            let i = 0
              , s = null;
            for (; s = t.getChildAt(i); ) {
                if (s.name == e)
                    return s.addChild(a),
                    a.transform.localPosition = new Laya.Vector3,
                    !0;
                if (this.link2Node(e, s, a))
                    return !0;
                i++
            }
            return !1
        }
        static unLink2Node(e) {
            e.removeSelf()
        }
        static RoundTableProbability(e, t) {
            let a = 0;
            Tools.forEachMap(e, (e,i)=>{
                a += i[t]
            }
            );
            let i = 0
              , s = Math.random() * a
              , o = null;
            return Tools.forEachMap(e, (a,n)=>{
                if (s > i && s <= i + n[t])
                    return o = e[a],
                    !0;
                i += n[t]
            }
            ),
            o
        }
        static loadImg(e, t, a=!1, i) {
            e && t ? mgrLoader.Load2dRes(t, Laya.Loader.IMAGE, e, t=>{
                let s = e.width
                  , o = e.height
                  , n = 0
                  , r = 0;
                a ? (n = t.sourceWidth,
                r = t.sourceHeight) : (n = s,
                r = o),
                e.texture = null,
                e.graphics.clear(!0);
                let l = 0
                  , h = 0;
                e.anchorX && e.anchorX > 0 && (l = e.anchorX * (n - e.width),
                h = e.anchorY * (r - e.height)),
                e.graphics.drawImage(t, 0 - l, 0 - h, n, r),
                i && i()
            }
            ) : i && i()
        }
        static loadAdImg(e, t) {
            e && t && mgrLoader.Load2dRes(t, Laya.Loader.IMAGE, e, t=>{
                let a = e.width
                  , i = e.height
                  , s = t.sourceWidth
                  , o = t.sourceHeight
                  , n = a / s
                  , r = i / o
                  , l = Math.min(n, r)
                  , h = s * l
                  , d = o * l;
                e.texture = null,
                e.graphics.clear(!0);
                let c = 0
                  , g = 0;
                e.anchorX && e.anchorX > 0 && (c = e.anchorX * (h - e.width),
                g = e.anchorY * (d - e.height)),
                e.graphics.drawImage(t, 0 - c, 0 - g, h, d)
            }
            )
        }
        static TransformDirection(e, t) {
            let a = new Laya.Vector3;
            return Laya.Vector3.transformCoordinate(t, e.worldMatrix, a),
            a
        }
        static __colorToHex(e) {
            return `#${this.__toHex(e.r)}${this.__toHex(e.g)}${this.__toHex(e.b)}`
        }
        static __toHex(e) {
            let t = 0;
            for (; e >= 16; )
                t++,
                e -= 16;
            let a = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
            return a[t] + a[e]
        }
        static registerAsHSlider(e, t, a, i=1) {
            let s = e.getChildAt(0);
            s.x = e.width * t / i;
            let o = !1;
            Tools.registerTouchHander(e, t=>{
                if (t.isBegin && (o = !0),
                (t.isEnd || t.isCancel) && (o = !1),
                o) {
                    let o = e.globalToLocal(new Laya.Point(t.pos.x,t.pos.y));
                    o.y = e.height / 2,
                    o.x = ul.clamp(o.x, 0, e.width),
                    s.x = o.x,
                    s.y = o.y,
                    a(o.x / e.width * i)
                }
            }
            ),
            a(t)
        }
        static syncNodeA2NodeB(e, t, a) {
            if (e.name != t.name) {
                if (!a.test(e.name)) {
                    let a = e.clone();
                    t.parent.addChild(a)
                }
            } else
                for (let i = 0; i < e.numChildren; i++) {
                    let s = e.getChildAt(i)
                      , o = t.getChildByName(s.name);
                    o ? this.syncNodeA2NodeB(s, o, a) : a.test(s.name) || (o = s.clone(),
                    t.addChild(o))
                }
        }
        static syncNodeATransform2NodeBTransform(e, t, a) {
            for (let i = 0; i < e.numChildren; i++) {
                let s = e.getChildAt(i)
                  , o = t.getChildByName(s.name);
                o && (o.transform.position = s.transform.position,
                o.transform.rotation = s.transform.rotation,
                o.transform.scale = s.transform.scale,
                this.syncNodeATransform2NodeBTransform(s, o, a))
            }
        }
        static getBigNumberStr(e, t=3) {
            let a = 3 == t ? 1e3 : 1e4
              , i = 3 == t ? ["", "K", "M", "B", "T", "AA", "AB", "AC", "AD", "AE", "AF", "AG", "AH"] : ["", "万", "亿", "兆", "京", "垓", "杼", "穰", "沟", "涧", "正", "载"]
              , s = 0
              , o = e;
            for (; o > a; )
                s++,
                o /= a;
            return `${0 == s ? o : o.toFixed(1)}${i[s]}`
        }
        static getBigDistanceStr(e) {
            let t = ["", "K", "M", "B", "T", "AA", "AB", "AC", "AD", "AE", "AF", "AG", "AH"]
              , a = 0
              , i = e;
            for (; i > 1e3; )
                a++,
                i /= 1e3;
            return `${0 == a ? i : i.toFixed(1)}${t[a]}M`
        }
        static subNumberText(e) {
            if (null == e)
                return "";
            if (e.concat("."))
                for (; ; ) {
                    if ("0" != e.charAt(e.length - 1)) {
                        e.endsWith(".") && (e = e.substring(0, e.length - 1));
                        break
                    }
                    e = e.substring(0, e.length - 1)
                }
            return e
        }
        static active3dObjectRayCheck(e, t, a) {
            let i = e.name;
            if (!this.rayCheckInfo[i]) {
                let s = e=>{
                    let t = this.rayCheckInfo[i];
                    if (t.scene.destroyed)
                        return Laya.stage.off(Laya.Event.MOUSE_DOWN, this, t.onMouseDown),
                        void (this.rayCheckInfo[i] = null);
                    t.point.x = Laya.MouseManager.instance.mouseX,
                    t.point.y = Laya.MouseManager.instance.mouseY,
                    t.camera.viewportPointToRay(t.point, t.ray),
                    t.scene.physicsSimulation.rayCast(t.ray, t.outHitResult),
                    t.callback(t.outHitResult, new Laya.Vector2(e.stageX,e.stageY))
                }
                  , o = {
                    scene: e,
                    point: new Laya.Vector2,
                    ray: new Laya.Ray(new Laya.Vector3(0,0,10),new Laya.Vector3(0,0,-1e3)),
                    outHitResult: new Laya.HitResult,
                    onMouseDown: s,
                    camera: t,
                    callback: a
                };
                this.rayCheckInfo[i] = o,
                Laya.stage.on(Laya.Event.MOUSE_DOWN, this, o.onMouseDown)
            }
        }
        static unactive3dObjectRayCheck(e) {
            let t = e.name
              , a = this.rayCheckInfo[t];
            a && (Laya.stage.off(Laya.Event.MOUSE_DOWN, this, a.onMouseDown),
            this.rayCheckInfo[t] = null)
        }
        static castRayFromScreenPos(e, t, a) {
            let i = new Laya.Ray(new Laya.Vector3(0,0,10),new Laya.Vector3(0,0,-1e3));
            a.x *= Laya.stage.clientScaleX,
            a.y *= Laya.stage.clientScaleY,
            t.viewportPointToRay(a, i);
            let s = new Laya.HitResult;
            return e.physicsSimulation.rayCast(i, s),
            s
        }
        static findChild(e, t) {
            let a = t.split("/")
              , i = e;
            for (let e = 0; e < a.length; e++) {
                const t = a[e];
                if (t) {
                    if (!(i = i.getChildByName(t)))
                        break;
                    if (e == a.length - 1)
                        return i
                }
            }
            return e
        }
        static syncNodeWith3DPos(e, t, a) {
            if (!e || e.destroyed)
                return;
            let i = e.parent
              , s = this.tranlateWorld3D2Screen(a, t)
              , o = i.globalToLocal(new Laya.Point(s.outPos.x,s.outPos.y));
            e.pos(o.x, o.y)
        }
    }
    Tools._debugTime = null,
    Tools.msgHander = null,
    Tools.timeScale = 1,
    Tools.bigNumberStrs = ["K", "M", "G", "B", "T"],
    Tools.rayCheckInfo = {};
    class vBoringTipDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vBoringTipDialog",
            this.exportNodeNames = ["CC_labelContent", "CC_buttonClose", "CC_buttonGoLearn", "CC_buttonGoMotion"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonGoMotion.fOnClick = this.onTouchButtonGoMotion.bind(this),
            this.buttonGoLearn.fOnClick = this.onTouchButtonGoLearn.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonBack.bind(this);
            let e = mgrCfg.get_from_role_level_db(mgrInteraction.level)
              , t = mgrInteraction.motionProgress / e.motionProgressValue
              , a = mgrInteraction.learnProgress / e.learnProgressValue;
            t < .2 ? (this.buttonGoMotion.__node.visible = !0,
            this.buttonGoLearn.__node.visible = !1) : a < .2 ? (this.buttonGoMotion.__node.visible = !1,
            this.buttonGoLearn.__node.visible = !0) : (this.buttonGoMotion.__node.visible = !0,
            this.buttonGoLearn.__node.visible = !1),
            mgrTip.showJumpOtherGameBanner(this)
        }
        onClosed() {
            super.onClosed()
        }
        onTouchButtonGoMotion() {
            mgrDirector.warpSceneWidthEffect("vMotionMainScene"),
            this.closeDialog()
        }
        onTouchButtonGoLearn() {
            mgrDirector.warpSceneWidthEffect("vAnswerQuestionScene"),
            this.closeDialog()
        }
        onTouchButtonBack() {
            this.closeDialog()
        }
    }
    class vCardDetailPart extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vCardDetailPart",
            this.exportNodeNames = ["CC_imageIcon", "CC_spriteSelected", "CC_spriteHaved"],
            this.size(100, 100),
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.data && this.fillByData(this.data),
            this.registerListeners({
                MSG_PLAY_SELECT_ACTION: this.onMsgPlaySelectAction.bind(this),
                MSG_PLAY_SELECT_ACTION_FOVER: this.onMsgPlaySelectActionForver.bind(this)
            })
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            let t = mgrCfg.get_from_part_db(this.data.partId);
            Tools.loadImg(this.imageIcon, t.icon),
            this.starLevelNode || (this.starLevelNode = new vStarLevelItem({}),
            this.addChild(this.starLevelNode)),
            this.starLevelNode.pos(50, 80, !0),
            this.starLevelNode.scale(.7, .7, !0),
            this.starLevelNode.fillByData(t.level),
            this.spriteHaved.visible = mgrPlayer.getItemAmount(this.data.partId) > 0,
            this.spriteSelected.alpha = 0
        }
        onMsgPlaySelectAction(e) {
            this.data && e == this.data.index && (mgrSound.play(121),
            this.spriteSelected.alpha = 1,
            CustomTween.delayTime(this.spriteSelected, 100).to({
                alpha: 0
            }, 500).start(1))
        }
        onMsgPlaySelectActionForver(e) {
            this.data && e == this.data.index && (mgrSound.play(121),
            CustomTween.delayTime(this.spriteSelected, 100).to({
                alpha: 0
            }, 150).to({
                alpha: 1
            }, 150).start(3))
        }
    }
    class vCardDetailDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vCardDetailDialog",
            this.exportNodeNames = ["CC_spriteBg", "CC_spriteDescBg", "CC_labelFlower", "CC_labelSymbolize", "CC_labelColor", "CC_labelElement", "CC_labelSkill", "CC_labelOutward", "CC_labelNature", "CC_labelIdentity", "CC_labelSaying", "CC_labeltitle", "CC_buttonBack", "CC_spriteEffect1", "CC_buttonShare", "CC_labelGo", "CC_spriteShareIcon", "CC_labelShareAmount", "CC_spriteBottom", "CC_boxList"],
            this.bFadeOuting = !1
        }
        onOpened() {
            super.onOpened(),
            this.buttonBack.fOnClick = (()=>{
                this.fadeOut()
            }
            ),
            this.buttonShare.fOnClick = this.onTouchButtonshare.bind(this),
            this.buildUi(),
            this.fillData(),
            this.fadeIn(),
            this.registerListeners({
                MSG_SHARE_SUCCESSFUL: this.refreshShare.bind(this)
            }),
            this.refreshShare()
        }
        onClosed() {
            super.onClosed()
        }
        getPreLoadModelIds() {
            return [MODEL_ID.ka_normal]
        }
        isShowShadow() {
            return !1
        }
        fadeOut() {
            this.bFadeOuting || (this.buttonBack.__node.scale(0, 0),
            CustomTween.to(this.spriteDescBg, {
                x: this.spriteDescBg.__originX + this.spriteDescBg.width
            }, 500, Laya.Ease.backOut).start(1),
            CustomTween.to(this.spriteBottom, {
                y: this.spriteBottom.y + 500
            }, 500).start(1),
            CustomTween.to(this.spriteBg, {
                alpha: 0
            }, 500).start(1),
            CustomTween.actionFloat(this.card, this.card.transform.position.x, this.card.transform.position.x - 3, 500, e=>{
                this.card.transform.position = new Laya.Vector3(e,this.card.transform.position.y,this.card.transform.position.z)
            }
            ).callback(()=>{
                this.closeDialog(!0)
            }
            ).start(1))
        }
        fadeIn() {
            CustomTween.actionFloat(this.card, -180, -720, 1e3, e=>{
                this.card.transform.localRotationEulerY = e,
                this.card.transform.position = new Laya.Vector3(0,-e / 540 * .05,0);
                let t = -e / 540 * .3 + 1;
                this.card.transform.scale = new Laya.Vector3(t,t,t)
            }
            ).callback(()=>{
                this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_card_star, this.spriteEffect1)
            }
            ).start(1),
            this.spriteDescBg.__originX = this.spriteDescBg.x,
            this.spriteDescBg.x += this.spriteDescBg.width,
            this.buttonBack.__node.scale(0, 0),
            CustomTween.to(this.spriteDescBg, {
                x: this.spriteDescBg.__originX
            }, 500, Laya.Ease.backOut).callback(()=>{
                CustomTween.to(this.buttonBack.__node, {
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).start(1)
            }
            ).start(1),
            CustomTween.from(this.spriteBottom, {
                y: this.spriteBottom.y + 500
            }, 500, Laya.Ease.backOut).start(1),
            Layout.widget(10, 10, this.buttonBack.__node)
        }
        buildUi() {
            this.spriteBg.zOrder = -2,
            this.card = mgrLoader.Pool.getModel(MODEL_ID.ka_normal),
            this.cardMaterials = mgrMaterial.setCartonShader(this.card, MODEL_ID.ka_normal),
            this.card.transform.position = new Laya.Vector3,
            this.card.transform.localRotationEulerY = -180,
            this.card.transform.localRotationEulerZ = 0,
            this.add3DEffectAtBack(this.card, 0),
            this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,-.1,4.5),
            this.cameraBack.getComponent(CameraFollow).lerpValue = 1,
            this.cameraBack.fieldOfView = 20,
            this.reuseList = new ReuseList(4,0,2),
            this.reuseList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseList),
            this.reuseList.setItemClass(vCardDetailPart),
            this.reuseList.setSpaceX(10),
            this.reuseList.setSpaceY(10)
        }
        fillData() {
            let e = mgrCfg.get_from_card_db(this.context.cardId);
            this.labeltitle.text = e.descTitle,
            this.labelFlower.text = e.descFlower,
            this.labelColor.text = e.descColor,
            this.labelElement.text = e.descElement,
            this.labelIdentity.text = e.descIdentity,
            this.labelNature.text = e.descNature,
            this.labelOutward.text = e.descOutward,
            this.labelSkill.text = e.descSkill,
            this.labelSymbolize.text = e.descSymbolize,
            this.labelSaying.text = e.descSaying,
            mgrLoader.Load2dRes(e.icon, Laya.Loader.IMAGE, this, e=>{
                this.card.getChildAt(0).meshRenderer.sharedMaterials[0].albedoTexture = e
            }
            );
            let t = []
              , a = mgrCfg.get_from_random_box_db(e.boxId);
            for (let e = 0; e < a.length; e++) {
                const i = a[e];
                t.push({
                    partId: i.itemId
                })
            }
            this.reuseList.setDatas(t)
        }
        refreshShare() {
            this.buttonShare.__node.visible = mgrChannel.canShare();
            let e = mgrChannel.getShareRewardAmount();
            e > 0 ? (this.labelShareAmount.text = `+${e}`,
            this.labelShareAmount.visible = !0,
            this.spriteShareIcon.visible = !0) : (this.labelShareAmount.visible = !1,
            this.spriteShareIcon.visible = !1),
            this.buttonShare.__node.scale(0, 0),
            CustomTween.delayTime(this.buttonShare.__node, 1e3).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1)
        }
        onTouchButtonshare() {
            mgrSdk.openShare()
        }
    }
    class vCardIllustrateBookItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vCardIllustrateBookItem",
            this.exportNodeNames = ["CC_spriteIcon", "CC_spriteMask", "CC_spriteLock", "CC_spriteNew"],
            this.width = 136,
            this.height = 318,
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            Tools.registerTouchHander(this, e=>{
                e.isClick && this.data && this.data.fOnClick(this.data.cardId)
            }
            ),
            this.spriteMask.removeSelf(),
            this.spriteIcon.mask = this.spriteMask,
            this.spriteMask.graphics.clear(),
            this.spriteMask.graphics.drawRect(0, 0, this.spriteMask.width, this.spriteMask.height, "#ffffff"),
            this.data && this.fillByData(this.data),
            mgrI18n.trySetI18nImage(this.spriteNew, "art89.png")
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            let t = mgrGarden.isCardUnlocked(this.data.cardId);
            if (t) {
                let e = mgrCfg.get_from_card_db(this.data.cardId);
                Tools.loadImg(this.spriteIcon, e.icon)
            } else
                Tools.loadImg(this.spriteIcon, "res/card/tl_f.png");
            this.spriteLock.visible = !t;
            let a = mgrGarden.isNewCard(this.data.cardId);
            this.spriteNew.scale(0, 0),
            a && CustomTween.to(this.spriteNew, {
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1)
        }
    }
    class vCardIllstrateBookDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vCardIllstrateBookDialog",
            this.exportNodeNames = ["CC_spriteBg", "CC_SpriteTitle", "CC_spriteText", "CC_buttonClose", "CC_boxList"],
            this.bFadeOuting = !1
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = (()=>{
                this.fadeOut()
            }
            ),
            this.buildUi(),
            this.fillData(),
            this.fadeIn(),
            mgrI18n.trySetI18nImage(this.spriteText, "art38.png")
        }
        onClosed() {
            super.onClosed()
        }
        fadeIn() {
            CustomTween.from(this.spriteBg, {
                x: this.spriteBg.x + 500
            }, 500, Laya.Ease.backOut).start(1)
        }
        fadeOut() {
            this.bFadeOuting || (this.bFadeOuting = !0,
            this.buttonClose.__node.scale(0, 0),
            CustomTween.to(this.spriteBg, {
                x: this.spriteBg.x + 576
            }, 300).callback(()=>{
                this.closeDialog(!0)
            }
            ).start(1))
        }
        buildUi() {
            this.reuseList = new ReuseList(3,0,3),
            this.reuseList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseList),
            this.reuseList.setItemClass(vCardIllustrateBookItem),
            this.reuseList.setVerticalMoveEnable(!0),
            this.reuseList.setSpaceX(10),
            this.reuseList.setSpaceY(7)
        }
        fillData() {
            let e = [];
            mgrCfg.forDb_from_card_db((t,a)=>{
                e.push({
                    cardId: a.id,
                    fOnClick: this.onClickCard.bind(this)
                })
            }
            ),
            this.reuseList.setDatas(e)
        }
        onClickCard(e) {
            if (mgrGarden.isCardUnlocked(e))
                mgrDirector.openDialog("vCardDetailDialog", {
                    cardId: e
                }),
                mgrGarden.deleteNewCard(e),
                this.reuseList.refresh();
            else {
                let t = mgrCfg.get_from_card_db(e)
                  , a = mgrCfg.get_from_seed_db(t.fromSeedId);
                mgrTip.showMsgTip(`${mgrI18n.getText("vCardIllstrateBookDialog.1")} ${mgrI18n.getText(`${a.name}`)} ${mgrI18n.getText("vCardIllstrateBookDialog.2")}`)
            }
        }
    }
    class vCardSelectedDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vCardSelectedDialog",
            this.exportNodeNames = ["CC_spriteBg", "CC_buttonCardNormal", "CC_spriteCardNormol", "CC_buttonCardGold", "CC_spriteCardGold", "CC_spriteRare", "CC_labelNormalAmount", "CC_labelGoldAmount", "CC_buttonClose", "CC_buttonOpenNormal", "CC_labelOpenNormal", "CC_buttonOpenGold", "CC_labelOpenGold", "CC_spriteEffect1", "CC_spriteEffect2"],
            this.normalCards = [],
            this.goldCards = [],
            this.goldAmount = 0,
            this.normalAmount = 0
        }
        onOpened() {
            super.onOpened(),
            this.multilingualText1 = `${mgrI18n.getText("vCardSelectedDialog.1")}`,
            this.multilingualText2 = `${mgrI18n.getText("vCardSelectedDialog.2")}`,
            this.multilingualText3 = `${mgrI18n.getText("vCardSelectedDialog.3")}`,
            this.multilingualText4 = `${mgrI18n.getText("vCardSelectedDialog.4")}`,
            this.multilingualText5 = `${mgrI18n.getText("vCardSelectedDialog.5")}`,
            this.multilingualText6 = `${mgrI18n.getText("vCardSelectedDialog.6")}`,
            this.init(),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_card_star, this.spriteEffect1),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_card_star, this.spriteEffect2),
            this.registerListeners({
                MSG_I18N_REFRESH: ()=>{
                    this.multilingualText1 = `${mgrI18n.getText("vCardSelectedDialog.1")}`,
                    this.multilingualText2 = `${mgrI18n.getText("vCardSelectedDialog.2")}`,
                    this.multilingualText3 = `${mgrI18n.getText("vCardSelectedDialog.3")}`,
                    this.multilingualText4 = `${mgrI18n.getText("vCardSelectedDialog.4")}`,
                    this.multilingualText5 = `${mgrI18n.getText("vCardSelectedDialog.5")}`,
                    this.multilingualText6 = `${mgrI18n.getText("vCardSelectedDialog.6")}`
                }
            }),
            mgrI18n.trySetI18nImage(this.spriteRare, "art53.png"),
            mgrI18n.trySetI18nImage(this.spriteCardNormol, "art46.png"),
            mgrI18n.trySetI18nImage(this.spriteCardGold, "art63.png"),
            mgrI18n.trySetI18nImage(this.spriteBg, "art94.png")
        }
        onClosed() {
            super.onClosed()
        }
        init() {
            this.buttonClose.fOnClick = (()=>{
                this.closeDialog()
            }
            ),
            this.buttonCardNormal.fOnClick = this.onTouchButtonCardNormal.bind(this),
            this.buttonCardGold.fOnClick = this.onTouchButtonCardGold.bind(this),
            this.buttonOpenGold.fOnClick = this.onTouchButtonOpenGold.bind(this),
            this.buttonOpenNormal.fOnClick = this.onTouchButtonOpenNormal.bind(this),
            this.fillData()
        }
        fillData() {
            this.normalCards = [],
            this.goldCards = [],
            mgrCfg.forDb_from_card_pack_db((e,t)=>{
                if (1 == t.type) {
                    let e = mgrPlayer.getItemAmount(t.id);
                    this.normalCards.push({
                        itemId: t.id,
                        amount: e
                    }),
                    this.normalAmount += e
                } else if (2 == t.type) {
                    let e = mgrPlayer.getItemAmount(t.id);
                    this.goldCards.push({
                        itemId: t.id,
                        amount: e
                    }),
                    this.goldAmount += e
                }
            }
            ),
            this.labelNormalAmount.text = `${this.multilingualText1} ${this.normalAmount}`,
            this.labelGoldAmount.text = `${this.multilingualText2} ${this.goldAmount}`,
            0 == this.normalAmount ? this.labelOpenNormal.text = `${this.multilingualText3}` : this.labelOpenNormal.text = `${this.multilingualText4}`,
            0 == this.goldAmount ? this.labelOpenGold.text = `${this.multilingualText3}` : this.labelOpenGold.text = `${this.multilingualText4}`
        }
        onTouchButtonCardNormal() {
            if (0 == this.normalAmount)
                mgrTip.alertPrompt2("", `${this.multilingualText3}?`, `${this.multilingualText5}`, `${this.multilingualText6}`, null, ()=>{
                    this.closeDialog()
                }
                );
            else
                for (let e = 0; e < this.normalCards.length; e++) {
                    const t = this.normalCards[e];
                    if (t.amount > 0)
                        return mgrDirector.openDialog("vOpenCardDialog", {
                            cardPackId: t.itemId,
                            fOnClose: ()=>{
                                mgrDirector.openDialog("vCardSelectedDialog")
                            }
                        }, !0),
                        void this.closeDialog(!0)
                }
        }
        onTouchButtonCardGold() {
            if (0 == this.goldAmount)
                this.closeDialog();
            else
                for (let e = 0; e < this.goldCards.length; e++) {
                    const t = this.goldCards[e];
                    if (t.amount > 0)
                        return mgrDirector.openDialog("vOpenCardDialog", {
                            cardPackId: t.itemId,
                            fOnClose: ()=>{
                                mgrDirector.openDialog("vCardSelectedDialog")
                            }
                        }, !0),
                        void this.closeDialog(!0)
                }
        }
        onTouchButtonOpenGold() {
            this.onTouchButtonCardGold()
        }
        onTouchButtonOpenNormal() {
            this.onTouchButtonCardNormal()
        }
    }
    class vDailyTaskDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vDailyTaskDialog",
            this.exportNodeNames = ["CC_buttonTask1", "CC_spriteTask1Finished", "CC_boxTaskContent1", "CC_spritePaopao1", "CC_spriteIcon1", "CC_labelDesc1", "CC_labelProgress1", "CC_spriteGeted1", "CC_labelGetedName1", "CC_buttonTask2", "CC_spriteTask2Finished", "CC_boxTaskContent2", "CC_spritePaopao2", "CC_spriteIcon2", "CC_labelDesc2", "CC_labelProgress2", "CC_spriteGeted2", "CC_labelGetedName2", "CC_buttonTask3", "CC_spriteTask3Finished", "CC_boxTaskContent3", "CC_spritePaopao3", "CC_spriteIcon3", "CC_labelDesc3", "CC_labelProgress3", "CC_spriteGeted3", "CC_labelGetedName3", "CC_buttonTask4", "CC_spriteTask4Finished", "CC_boxTaskContent4", "CC_spritePaopao4", "CC_spriteIcon4", "CC_labelDesc4", "CC_labelProgress4", "CC_spriteGeted4", "CC_labelGetedName4", "CC_buttonTask5", "CC_spriteTask5Finished", "CC_boxTaskContent5", "CC_spritePaopao5", "CC_spriteIcon5", "CC_labelDesc5", "CC_labelProgress5", "CC_spriteGeted5", "CC_labelGetedName5", "CC_spriteOutlineLight", "CC_spriteGiftGg", "CC_spriteMask", "CC_spriteLight", "CC_progressBarGift", "CC_labelProgress", "CC_buttonOpenGift", "CC_spriteTitle", "CC_buttonClose"],
            this.progressBarActionDelayTime = 0
        }
        onOpened() {
            super.onOpened(),
            this.init(),
            mgrI18n.trySetI18nImage(this.spriteTitle, "art27.png")
        }
        onClosed() {
            super.onClosed()
        }
        init() {
            this.progressBarGift.style = ULPROGRESSBAR_STYLE.ver,
            this.progressBarGift.barName = "bar",
            this.buttonOpenGift.fOnClick = this.onTouchButtonOpenGift.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.buttonTask1.fOnClick = this.onTouchButtonTask1.bind(this),
            this.buttonTask2.fOnClick = this.onTouchButtonTask2.bind(this),
            this.buttonTask3.fOnClick = this.onTouchButtonTask3.bind(this),
            this.buttonTask4.fOnClick = this.onTouchButtonTask4.bind(this),
            this.buttonTask5.fOnClick = this.onTouchButtonTask5.bind(this),
            this.buttonTask1.bTween = !1,
            this.buttonTask2.bTween = !1,
            this.buttonTask3.bTween = !1,
            this.buttonTask4.bTween = !1,
            this.buttonTask5.bTween = !1,
            this.buttonOpenGift.bTween = !1,
            this.fadeIn(),
            this.fillData(),
            this.progressBarGift.progress = .01,
            mgrTip.showJumpOtherGameBanner(this),
            mgrSdk.staticPointEvent(7005)
        }
        fadeIn() {
            this.spriteMask.visible = !1,
            this.spriteLight.scale(0, 0),
            this.buttonOpenGift.__node.scale(0, 0),
            this.spriteGiftGg.alpha = 0,
            this.buttonTask1.__node.alpha = 0,
            this.buttonTask2.__node.alpha = 0,
            this.buttonTask3.__node.alpha = 0,
            this.buttonTask4.__node.alpha = 0,
            this.buttonTask5.__node.alpha = 0,
            this.buttonTask1.__node.scale(.2, .2),
            this.buttonTask2.__node.scale(.2, .2),
            this.buttonTask3.__node.scale(.2, .2),
            this.buttonTask4.__node.scale(.2, .2),
            this.buttonTask5.__node.scale(.2, .2),
            this.spriteOutlineLight.alpha = 0,
            this.spriteTitle.alpha = 0,
            this.buttonClose.__node.alpha = 0,
            this.progressBarActionDelayTime = 0,
            CustomTween.to(this.spriteGiftGg, {
                alpha: 1
            }, 300).callback(()=>{
                CustomTween.to(this.buttonTask1.__node, {
                    alpha: 1,
                    scaleX: 1,
                    scaleY: 1
                }, 200, Laya.Ease.backOut).start(1),
                CustomTween.delayTime(this.buttonTask2.__node, 200).to({
                    alpha: 1,
                    scaleX: 1,
                    scaleY: 1
                }, 200, Laya.Ease.backOut).start(1),
                CustomTween.delayTime(this.buttonTask3.__node, 400).to({
                    alpha: 1,
                    scaleX: 1,
                    scaleY: 1
                }, 200, Laya.Ease.backOut).start(1),
                CustomTween.delayTime(this.buttonTask4.__node, 600).to({
                    alpha: 1,
                    scaleX: 1,
                    scaleY: 1
                }, 200, Laya.Ease.backOut).start(1),
                CustomTween.delayTime(this.buttonTask5.__node, 800).to({
                    alpha: 1,
                    scaleX: 1,
                    scaleY: 1
                }, 200, Laya.Ease.backOut).callback(()=>{
                    this.spriteTitle.alpha = 1,
                    CustomTween.from(this.spriteTitle, {
                        y: this.spriteTitle.y - 300
                    }, 500, Laya.Ease.backOut).callback(()=>{
                        CustomTween.to(this.buttonClose.__node, {
                            alpha: 1
                        }, 300).start(1),
                        CustomTween.to(this.spriteOutlineLight, {
                            alpha: 1
                        }, 1e3).to({
                            alpha: 0
                        }, 1e3).start(0)
                    }
                    ).start(1)
                }
                ).start(1)
            }
            ).start(1)
        }
        fillData() {
            let e = mgrDailyTask.getTaskIds()
              , t = 0;
            for (let a = 1; a <= 5; a++) {
                let i = e[a - 1]
                  , s = this[`spriteIcon ${a}`]
                  , o = this[`spriteGeted ${a}`]
                  , n = this[`labelDesc ${a}`]
                  , r = this[`labelGetedName ${a}`]
                  , l = this[`labelProgress ${a}`]
                  , h = this[`spritePaopao ${a}`]
                  , d = this[`spriteTask ${a}Finished`]
                  , c = mgrAchievement.getAchievement(i);
                Tools.loadImg(s, c.template.icon),
                o.visible = c.state == AchievementState.received,
                n.text = `${mgrI18n.getText(`${c.template.name}`)}`,
                r.text = `${mgrI18n.getText(`${c.template.name}`)}`,
                l.text = `${c.count}/${c.maxCount}`,
                h.visible = c.state != AchievementState.received,
                n.visible = c.state != AchievementState.received,
                l.visible = c.state != AchievementState.received,
                d.visible = c.state >= AchievementState.finished,
                c.state == AchievementState.received && t++;
                let g = "res/ui/dailyTask/art16.png";
                c.state == AchievementState.finished && (g = "res/ui/dailyTask/art04.png"),
                Tools.loadImg(h, g),
                c.state == AchievementState.finished ? (CustomTween.roke(h),
                mgrTip.showBadgeWithNumber(h, 1, new Laya.Point(15,15))) : (CustomTween.to(h, {
                    alpha: 1
                }, 100).start(1),
                mgrTip.showBadgeWithNumber(h, 0))
            }
            let a = t / 5;
            this.labelProgress.text = `${t}/5`,
            CustomTween.delayTime(this.progressBarGift.__node, this.progressBarActionDelayTime).actionFloat(this.progressBarGift.progress, a, 500, e=>{
                this.progressBarGift.progress = e
            }
            ).callback(()=>{
                1 != this.progressBarGift.progress || mgrDailyTask.isGetedRewards(mgrDailyTask.getRewardIndex()) || this.showGiftJump()
            }
            ).start(1),
            this.progressBarActionDelayTime = 0
        }
        showGiftJump() {
            this.spriteMask.visible = !0,
            this.spriteMask.alpha = 0,
            this.labelProgress.alpha = 0,
            CustomTween.to(this.spriteMask, {
                alpha: .3
            }, 500).start(1),
            CustomTween.to(this.progressBarGift.__node, {
                scaleX: 1.5,
                scaleY: 1.5
            }, 300, Laya.Ease.backOut).start(1),
            CustomTween.to(this.spriteLight, {
                scaleX: 1.25,
                scaleY: 1.25
            }, 300).callback(()=>{
                CustomTween.rotateForever(this.spriteLight, 1e4),
                CustomTween.to(this.buttonOpenGift.__node, {
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).start(1)
            }
            ).delayTime(500).callback(()=>{
                this.heartbeatTween = CustomTween.heartBeat(this.progressBarGift.__node)
            }
            ).start(1)
        }
        showGiftBack() {
            CustomTween.to(this.spriteMask, {
                alpha: 0
            }, 500).callback(()=>{
                this.spriteMask.visible = !1,
                this.labelProgress.alpha = 1
            }
            ).start(1),
            this.heartbeatTween && this.heartbeatTween.clear(),
            CustomTween.to(this.progressBarGift.__node, {
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            CustomTween.to(this.spriteLight, {
                scaleX: 0,
                scaleY: 0
            }, 300).start(1),
            CustomTween.to(this.buttonOpenGift.__node, {
                scaleX: 0,
                scaleY: 0
            }, 300, Laya.Ease.backOut).start(1)
        }
        onTouchButtonOpenGift() {
            mgrDailyTask.obtainReward(mgrDailyTask.getRewardIndex()) && (mgrDailyTask.getRewardIndex() > mgrDailyTask.getRewardDatas().length ? this.closeDialog() : (this.fillData(),
            this.showGiftBack()))
        }
        onTouchButtonClose() {
            this.closeDialog()
        }
        onTouchButtonTask1() {
            this.onTouchButtonTask(1)
        }
        onTouchButtonTask2() {
            this.onTouchButtonTask(2)
        }
        onTouchButtonTask3() {
            this.onTouchButtonTask(3)
        }
        onTouchButtonTask4() {
            this.onTouchButtonTask(4)
        }
        onTouchButtonTask5() {
            this.onTouchButtonTask(5)
        }
        onTouchButtonTask(e) {
            let t = mgrDailyTask.getTaskIds()[e - 1]
              , a = mgrAchievement.getAchievement(t);
            if (a.state != AchievementState.received) {
                if (a.state == AchievementState.finished) {
                    let[a,i] = mgrAchievement.obtainReward(t, "每日任务")
                      , s = this[`spriteIcon ${e}`]
                      , o = new Laya.Image(mgrCfg.get_from_item_template_db(a).icon);
                    o.anchorX = .5,
                    o.anchorY = .5,
                    this.addChild(o);
                    let n = this.globalToLocal(s.localToGlobal(new Laya.Point(s.width / 2,s.height / 2)));
                    o.pos(n.x, n.y);
                    let r = this.globalToLocal(this.progressBarGift.__node.localToGlobal(new Laya.Point(this.progressBarGift.__node.width / 2,this.progressBarGift.__node.height / 2)))
                      , l = new Laya.Vector2(n.x,n.y)
                      , h = new Laya.Vector2((n.x + r.x) / 2,(n.y + r.y) / 2 - 200)
                      , d = new Laya.Vector2(r.x,r.y);
                    return CustomTween.bezierCurveMotion(l, h, d, o, 300).start(1),
                    void CustomTween.to(o, {
                        scaleX: .5,
                        scaleY: .5
                    }, 300, Laya.Ease.sineOut).callback(()=>{
                        this.fillData(),
                        CustomTween.to(this.spriteGiftGg, {
                            scaleX: 1.1,
                            scaleY: 1.1
                        }, 150).to({
                            scaleX: 1,
                            scaleY: 1
                        }, 150).start(1),
                        o.destroy()
                    }
                    ).start(1)
                }
                a.state == AchievementState.unlocked && (a.router(),
                this.closeDialog())
            }
        }
    }
    class vDebugDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vDebugDialog",
            this.exportNodeNames = ["CC_labelCop", "CC_buttonClose", "CC_buttonModelPreview", "CC_buttonAddGoldDiamond", "CC_boxLock", "CC_buttonPwdConfrim", "CC_buttonResetRecord"],
            this.prevX = 0,
            this.prevY = 0
        }
        onOpened() {
            super.onOpened(),
            this.boxLock.visible = !0,
            this.buttonClose.fOnClick = (()=>{
                this.closeDialog()
            }
            ),
            this.buttonModelPreview.fOnClick = (()=>{}
            ),
            this.buttonResetRecord.fOnClick = (()=>{
                mgrRecord.resetRecord()
            }
            ),
            this.buttonPwdConfrim.fOnClick = (()=>{
                let e = this.boxLock.getChildByName("inputPwd")
                  , t = new Date;
                e.text == `ul_ ${ul.format("%02d", t.getHours())}` && (this.boxLock.visible = !1)
            }
            ),
            this.buttonAddGoldDiamond.fOnClick = (()=>{
                mgrPlayer.addItemAmount(Const.ITEM_ID_DIAMONDS, 5e3, "测试"),
                mgrPlayer.addItemAmount(Const.ITEM_ID_GOLD, 5e4, "测试")
            }
            );
            let e = mgrCop.getCops()
              , t = `渠道名：${mgrChannel._channelName}\n`;
            t += `sdcardPath: ${Const.sdcardPath}\n`,
            t += `packageVersion: ${Const.packageVersion}\n`,
            t += `copChannelId: ${Const.copChannelId}\n`,
            t += `ulsdkVersion: ${Const.ulsdkVersion}\n`,
            t += `cdkChannelId: ${Const.cdkChannelId}\n`,
            t += "\n",
            t += `_cardType: ${mgrChannel._cardType}\n`,
            t += `_isThirdExit: ${mgrChannel._isThirdExit}\n`,
            t += `_isAbout: ${mgrChannel._isAbout}\n`,
            t += `_isMoreGame: ${mgrChannel._isMoreGame}\n`,
            t += `_isULMoreGame: ${mgrChannel._isULMoreGame}\n`,
            t += `_isShowUrlAdIcon: ${mgrChannel._isShowUrlAdIcon}\n`,
            t += `_isPayEnabled: ${mgrChannel._isPayEnabled}\n`,
            t += `_isShareEnabled: ${mgrChannel._isShareEnabled}\n`,
            t += `_isUseSdkRank: ${mgrChannel._isUseSdkRank}\n`,
            t += `_isSupportRecordShare: ${mgrChannel._isSupportRecordShare}\n`,
            t += `_isSupportClipboardData: ${mgrChannel._isSupportClipboardData}\n`,
            t += `_isSupportInstallShortcut: ${mgrChannel._isSupportInstallShortcut}\n`,
            t += `_isSupportFindMinigames: ${mgrChannel._isSupportFindMinigames}\n`,
            t += `_isSupportRecommendationBtn: ${mgrChannel._isSupportRecommendationBtn}\n`,
            t += `interPushConfig Length: ${mgrChannel.interPushConfig.length}\n`,
            t += "\n",
            Tools.forEachMap(e, (e,a)=>{
                t += `\n ${e}：${a}`,
                console.log(`\n ${e}：${a}`)
            }
            ),
            this.labelCop.text = t,
            this.labelCop.on(Laya.Event.MOUSE_DOWN, this, this.startScrollText)
        }
        onClosed() {
            super.onClosed()
        }
        startScrollText(e) {
            this.prevX = this.labelCop.mouseX,
            this.prevY = this.labelCop.mouseY,
            Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.scrollText),
            Laya.stage.on(Laya.Event.MOUSE_UP, this, this.finishScrollText)
        }
        finishScrollText(e) {
            Laya.stage.off(Laya.Event.MOUSE_MOVE, this, this.scrollText),
            Laya.stage.off(Laya.Event.MOUSE_UP, this, this.finishScrollText)
        }
        scrollText(e) {
            var t = this.labelCop.mouseX
              , a = this.labelCop.mouseY;
            this.labelCop.textField.scrollX += this.prevX - t,
            this.labelCop.textField.scrollY += this.prevY - a,
            this.prevX = t,
            this.prevY = a
        }
    }
    const AD_EVENT_ID_POTION = "free_hungry_potion";
    class vEatFullTipDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vEatFullTipDialog",
            this.exportNodeNames = ["CC_labelContent", "CC_buttonClose", "CC_buttonUse", "CC_buttonBuy", "CC_labelPrice", "CC_imagePrice", "CC_buttonAd"]
        }
        onOpened() {
            super.onOpened(),
            mgrSound.play(227),
            this.buttonUse.fOnClick = this.onTouchButtonUse.bind(this),
            this.buttonBuy.fOnClick = this.onTouchButtonBuy.bind(this),
            this.buttonAd.fOnClick = this.onTouchButtonAd.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.fillData(),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            }),
            mgrTip.showJumpOtherGameBanner(this)
        }
        onClosed() {
            super.onClosed()
        }
        fillData() {
            if (mgrPlayer.getItemAmount(Const.ITEM_ID_INTERACTION_HUNGER) > 0)
                this.buttonUse.__node.visible = !0,
                this.buttonBuy.__node.visible = !1,
                this.buttonAd.__node.visible = !1;
            else {
                if (this.buttonUse.__node.visible = !1,
                mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID_POTION))
                    this.buttonBuy.__node.visible = !1,
                    this.buttonAd.__node.visible = !0;
                else {
                    this.buttonBuy.__node.visible = !0,
                    this.buttonAd.__node.visible = !1;
                    let e = mgrCfg.get_from_shop_template_db(Const.ITEM_ID_INTERACTION_HUNGER);
                    this.labelPrice.text = `${e.price}`,
                    Tools.loadImg(this.imagePrice, mgrCfg.get_from_item_template_db(e.priceUnit).icon)
                }
            }
        }
        onTouchButtonUse() {
            mgrInteraction.eatFood(Const.ITEM_ID_INTERACTION_HUNGER),
            this.closeDialog()
        }
        onTouchButtonBuy() {
            mgrShop.requestBuy(Const.ITEM_ID_INTERACTION_HUNGER) && this.fillData()
        }
        onTouchButtonAd() {
            mgrAd.triggerAdEvent(AD_EVENT_ID_POTION, null, !0)
        }
        onTouchButtonClose() {
            this.closeDialog()
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID_POTION && (mgrPlayer.addItemAmount(Const.ITEM_ID_INTERACTION_HUNGER, 1, "看广告获得饥饿药水"),
            mgrInteraction.eatFood(Const.ITEM_ID_INTERACTION_HUNGER),
            this.closeDialog())
        }
    }
    class vEditorColorDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vEditorColorDialog",
            this.exportNodeNames = ["CC_spriteMain", "CC_spriteSide", "CC_spriteColor", "CC_labelColor"]
        }
        onOpened() {
            super.onOpened(),
            this.__fillSideColor(),
            this.mainColor = this.__getSideColorByPos(0, 0),
            this.curColor = this.mainColor,
            this.__fillMainColor(),
            this.__fillCurColor(),
            this.registerTouch()
        }
        onClosed() {
            super.onClosed()
        }
        isShowShadow() {
            return !1
        }
        isShadowClose() {
            return !0
        }
        registerTouch() {
            Tools.registerTouchHander(this.spriteSide, e=>{
                if (!e.isClick)
                    return;
                let t = this.spriteSide.globalToLocal(new Laya.Point(e.pos.x,e.pos.y));
                this.mainColor = this.__getSideColorByPos(t.x, t.y),
                this.__fillMainColor()
            }
            ),
            Tools.registerTouchHander(this.spriteMain, e=>{
                if (!e.isClick)
                    return;
                let t = this.spriteMain.globalToLocal(new Laya.Point(e.pos.x,e.pos.y));
                this.curColor = this.__getMainColorByPos(t.x, t.y),
                this.__fillCurColor(),
                this.context.colorChange && this.context.colorChange(this.curColor)
            }
            )
        }
        __fillSideColor() {
            this.spriteSide.graphics.clear(!0);
            for (let e = 0; e <= this.spriteSide.width; e++)
                for (let t = 0; t <= this.spriteSide.height; t++) {
                    let a = this.__getSideColorByPos(e, t)
                      , i = `#${this.__toHex(a.r)}${this.__toHex(a.g)}${this.__toHex(a.b)}`;
                    this.spriteSide.graphics.drawRect(e, t, 1, 1, i)
                }
        }
        __fillMainColor() {
            this.spriteMain.graphics.clear(!0);
            for (let e = 0; e <= this.spriteMain.width; e++)
                for (let t = 0; t <= this.spriteMain.height; t++) {
                    let a = this.__getMainColorByPos(e, t)
                      , i = `#${this.__toHex(a.r)}${this.__toHex(a.g)}${this.__toHex(a.b)}`;
                    this.spriteMain.graphics.drawRect(e, t, 1, 1, i)
                }
        }
        __fillCurColor() {
            let e = this.__colorToHex(this.curColor);
            this.labelColor.text = e,
            this.spriteColor.graphics.clear(!0),
            this.spriteColor.graphics.drawPie(this.spriteColor.width / 2, this.spriteColor.height / 2, 15, 0, 360, e)
        }
        __getSideColorByPos(e, t) {
            let a = this.spriteSide.height;
            if (t < 0 || t > a)
                return new Laya.Color(0,0,0,0);
            let i = [255, 255, 0, 0, 0, 255, 255]
              , s = [0, 255, 255, 255, 0, 0, 0]
              , o = [0, 0, 0, 255, 255, 255, 0]
              , n = t / a;
            for (let e = 1; e <= 6; e++)
                if (n <= e / 6) {
                    let t = (n - (e - 1) / 6) / (1 / 6);
                    return new Laya.Color(Math.floor(i[e - 1] * (1 - t) + i[e] * t),Math.floor(s[e - 1] * (1 - t) + s[e] * t),Math.floor(o[e - 1] * (1 - t) + o[e] * t))
                }
        }
        __getMainColorByPos(e, t) {
            let a = e / this.spriteMain.width
              , i = t / this.spriteMain.height
              , s = 255 * (1 - a) + this.mainColor.r * a
              , o = 255 * (1 - a) + this.mainColor.g * a
              , n = 255 * (1 - a) + this.mainColor.b * a;
            return s = s * (1 - i) + 0 * i,
            o = o * (1 - i) + 0 * i,
            n = n * (1 - i) + 0 * i,
            s = Math.floor(s),
            o = Math.floor(o),
            n = Math.floor(n),
            new Laya.Color(s,o,n)
        }
        __colorToHex(e) {
            return `#${this.__toHex(e.r)}${this.__toHex(e.g)}${this.__toHex(e.b)}`
        }
        __toHex(e) {
            let t = 0;
            for (; e >= 16; )
                t++,
                e -= 16;
            let a = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
            return a[t] + a[e]
        }
    }
    class vExtractDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vExtractDialog",
            this.exportNodeNames = ["CC_buttonFreeExtract", "CC_labelFreeExtract", "CC_buttonAdExtract", "CC_spriteAdIcon", "CC_labelAdExtract", "CC_spriteLight1", "CC_spriteLight2", "CC_spriteSuitPreview", "CC_spriteItem1", "CC_spriteSelect1", "CC_spriteIcon1", "CC_spriteHaved1", "CC_labelAmount1", "CC_spriteItem2", "CC_spriteSelect2", "CC_spriteIcon2", "CC_spriteHaved2", "CC_labelAmount2", "CC_spriteItem3", "CC_spriteSelect3", "CC_spriteIcon3", "CC_spriteHaved3", "CC_labelAmount3", "CC_spriteItem4", "CC_spriteSelect4", "CC_spriteIcon4", "CC_spriteHaved4", "CC_labelAmount4", "CC_spriteItem5", "CC_spriteSelect5", "CC_spriteIcon5", "CC_spriteHaved5", "CC_labelAmount5", "CC_spriteItem6", "CC_spriteSelect6", "CC_spriteIcon6", "CC_spriteHaved6", "CC_labelAmount6", "CC_spriteItem7", "CC_spriteSelect7", "CC_spriteIcon7", "CC_spriteHaved7", "CC_labelAmount7", "CC_spriteItem8", "CC_spriteSelect8", "CC_spriteIcon8", "CC_spriteHaved8", "CC_labelAmount8", "CC_spriteItem9", "CC_spriteSelect9", "CC_spriteIcon9", "CC_spriteHaved9", "CC_labelAmount9", "CC_buttonBack"],
            vExtractDialog.instance = this
        }
        onOpened() {
            super.onOpened(),
            this.buttonBack.fOnClick = this.onTouchButtonBack.bind(this),
            this.buttonAdExtract.fOnClick = this.onTouchButtonAdExtract.bind(this),
            this.buttonFreeExtract.fOnClick = this.onTouchButtonFreeExtract.bind(this),
            this.fillData(),
            this.fadeIn(),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this),
                MSG_PLAY_EXTRACT_ACTION: this.onMsgPlayExtractAction.bind(this),
                MSG_PLAY_EXTRACT_ACTION_FOVER: this.onMsgPlayExtractActionForver.bind(this)
            })
        }
        onClosed() {
            super.onClosed(),
            vExtractDialog.instance = null
        }
        fadeIn() {
            Layout.widget(10, 10, this.buttonBack.__node),
            this.spriteSuitPreview.alpha = 0,
            CustomTween.to(this.spriteSuitPreview, {
                alpha: 1
            }, 1e3).start(1),
            this.spriteLight1.alpha = 0,
            CustomTween.to(this.spriteLight1, {
                alpha: 1
            }, 1e3).to({
                alpha: 0
            }, 1e3).start(0),
            CustomTween.rotateForever(this.spriteLight2, 8e3),
            this.spriteItem1.scale(0, 0),
            CustomTween.delayTime(this.spriteItem1, 0).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.spriteItem2.scale(0, 0),
            CustomTween.delayTime(this.spriteItem2, 200).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.spriteItem3.scale(0, 0),
            CustomTween.delayTime(this.spriteItem3, 400).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.spriteItem4.scale(0, 0),
            CustomTween.delayTime(this.spriteItem4, 600).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.spriteItem5.scale(0, 0),
            CustomTween.delayTime(this.spriteItem5, 800).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.spriteItem6.scale(0, 0),
            CustomTween.delayTime(this.spriteItem6, 1e3).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.spriteItem7.scale(0, 0),
            CustomTween.delayTime(this.spriteItem7, 1200).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.spriteItem8.scale(0, 0),
            CustomTween.delayTime(this.spriteItem8, 1400).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.spriteItem9.scale(0, 0),
            CustomTween.delayTime(this.spriteItem9, 1600).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.buttonBack.__node.scale(0, 0),
            CustomTween.delayTime(this.buttonBack.__node, 1e3).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.buttonAdExtract.__node.scale(0, 0),
            CustomTween.delayTime(this.buttonAdExtract.__node, 1e3).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.buttonFreeExtract.__node.scale(0, 0),
            CustomTween.delayTime(this.buttonFreeExtract.__node, 1e3).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1)
        }
        fillData() {
            this.buttonAdExtract.__node.visible = !mgrExtract.bFree,
            this.buttonFreeExtract.__node.visible = mgrExtract.bFree;
            let e, t = mgrExtract.getTodayRewardPool();
            for (let e = 0; e < t.length; e++) {
                const a = t[e];
                let i = this[`spriteIcon ${e + 1}`]
                  , s = this[`spriteSelect ${e + 1}`]
                  , o = this[`spriteHaved ${e + 1}`]
                  , n = mgrCfg.get_from_item_template_db(a.itemId)
                  , r = !!mgrCfg.get_from_part_db(a.itemId)
                  , l = this[`labelAmount ${e + 1}`];
                r ? i.size(80, 80) : i.size(50, 50),
                Tools.loadImg(i, n.icon),
                l.text = `x ${a.amount}`,
                s.alpha = 0,
                o.visible = mgrCfg.get_from_part_db(a.itemId) && mgrPlayer.getItemAmount(a.itemId) > 0
            }
            e = mgrExtract.isPoolExtractFinied(1) ? mgrCfg.get_from_suit_db(1025) : mgrCfg.get_from_suit_db(1024),
            Tools.loadImg(this.spriteSuitPreview, e.icon, !0)
        }
        playExtractEffect(e) {
            let t = .5
              , a = 0
              , i = 27;
            i += mgrExtract.getTodayRewardPool().indexOf(e) + 1;
            for (let e = 0; e < i; e++)
                e != i - 1 ? Timer.callLater(a, ()=>{
                    this.sendMsg("MSG_PLAY_EXTRACT_ACTION", e % 9 + 1)
                }
                , this) : Timer.callLater(a, ()=>{
                    this.sendMsg("MSG_PLAY_EXTRACT_ACTION_FOVER", e % 9 + 1)
                }
                , this),
                a += t,
                e >= 0 && e <= 8 ? t -= .1 : e >= 27 && (t += .1),
                t = ul.clamp(t, .1, .5);
            Timer.callLater(a + 1, ()=>{
                mgrTip.addGotItemTip(e.itemId, e.amount),
                this.closeDialog()
            }
            , this)
        }
        onMsgPlayExtractAction(e) {
            mgrSound.play(121);
            let t = this[`spriteSelect ${e}`];
            t.alpha = 1,
            CustomTween.delayTime(t, 100).to({
                alpha: 0
            }, 500).start(1)
        }
        onMsgPlayExtractActionForver(e) {
            let t = this[`spriteSelect ${e}`];
            t.alpha = 1,
            CustomTween.delayTime(t, 100).callback(()=>{
                mgrSound.play(121)
            }
            ).to({
                alpha: 0
            }, 150).to({
                alpha: 1
            }, 150).start(3)
        }
        onTouchButtonBack() {
            this.closeDialog()
        }
        onTouchButtonAdExtract() {
            mgrAd.triggerAdEvent(AD_EVENT_ID.VIDEO.ad_extract_part, null, !0)
        }
        onTouchButtonFreeExtract() {
            this.buttonFreeExtract.__node.visible = !1,
            this.buttonBack.__node.visible = !1;
            let e = mgrExtract.extract();
            this.playExtractEffect(e)
        }
        onMsgAdEventSuccessed(e) {
            if (e.adEventId == AD_EVENT_ID.VIDEO.ad_extract_part) {
                this.buttonAdExtract.__node.visible = !1,
                this.buttonBack.__node.visible = !1;
                let e = mgrExtract.extract(!1);
                this.playExtractEffect(e)
            }
        }
    }
    class mgrHouse extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord()
        }
        static loadRecord() {
            super.loadRecord();
            let e = mgrRecord.getData("houseUpGradeInfo") || {};
            this._curHouseLevelList = e.curHouseLevelList || []
        }
        static saveRecord() {
            super.saveRecord();
            let e = {
                curHouseLevelList: this._curHouseLevelList
            };
            mgrRecord.setData("houseUpGradeInfo", e)
        }
        static getHouseCurLevelById(e) {
            if (this._curHouseLevelList)
                return this._curHouseLevelList[e] || 0
        }
        static getHouseInfoById(e) {
            return mgrCfg.get_from_draw_lots_event_house_db(e)
        }
        static getHouseUpGradeDbByIdAndLevel(e, t=null) {
            return null == t && (t = this.getHouseCurLevelById(e)),
            mgrCfg.get_from_house_up_grade_db(e, t)
        }
        static houseUpGrade(e, t=1) {
            let a = this.getHouseUpGradeDbByIdAndLevel(e)
              , i = a.costId
              , s = this.getUpGradeCostCount(e, t)
              , o = mgrPlayer.getItemAmount(i)
              , n = mgrCfg.get_from_item_template_db(i);
            if (o < s)
                return mgrTip.showMsgTip(`${mgrI18n.getText(`${n.name}`)}不足！`),
                !1;
            {
                let o = this.getHouseInfoById(e);
                mgrPlayer.addItemAmount(i, -s, `升级建筑：${o.name}`);
                let n = a.level + t;
                return this._curHouseLevelList[e] = n,
                this.saveRecord(),
                !0
            }
        }
        static getUpGradeCostCount(e, t=1) {
            let a = 0
              , i = this.getHouseCurLevelById(e);
            for (let s = 0; s < t; s++)
                a += this.getHouseUpGradeDbByIdAndLevel(e, i + s).costNum;
            return a
        }
        static getHouseProfitSpeed() {
            let e = mgrCfg.getDb("draw_lots_event_house_db")
              , t = Object.keys(e)
              , a = 0;
            for (let e = 0; e < t.length; e++) {
                let i = Number.parseInt(t[e]);
                a += this.getHouseUpGradeDbByIdAndLevel(i).profitSpeed
            }
            return a
        }
        static startOnLineProfit() {
            this.profitTimer || (this.profitTimer = Timer.callLoop(this.profitTimerSpan, ()=>{
                let e = this.getHouseProfitSpeed();
                if (e > 0) {
                    let t = this.profitTimerSpan * e;
                    mgrPlayer.addItemAmount(Const.ITEM_ID_GOLD, t, "巡演建筑在线产出"),
                    this.sendMsg("MSG_ON_HOUSE_PROFIT", t),
                    mgrRecord.setData("HOUSE_LAST_PROFIT_TIME", Tools.time())
                }
            }
            , !0))
        }
        static calcuOffLineProfit() {
            if (0 == this.offLineProfitCalcu) {
                this.offLineProfitCalcu = !0;
                let e = mgrRecord.getData("HOUSE_LAST_PROFIT_TIME") || Tools.time()
                  , t = Tools.time() - e
                  , a = mgrRecord.getData("HOUSE_OFF_LINE_TOTAL_TIME") || 0;
                a += t,
                mgrRecord.setData("HOUSE_OFF_LINE_TOTAL_TIME", a),
                mgrRecord.setData("HOUSE_LAST_PROFIT_TIME", Tools.time()),
                a < this.offLineInterval ? this.offLineProfit = 0 : (a = Math.min(a, 28800),
                this.offLineProfit = Math.ceil(a * this.getHouseProfitSpeed())),
                this.offLineTime = a,
                this.startOnLineProfit()
            }
            return {
                total: this.offLineProfit,
                offlineTime: this.offLineTime
            }
        }
        static getOffLineProfit(e=1) {
            let t = this.offLineProfit * e;
            return mgrPlayer.addItemAmount(Const.ITEM_ID_GOLD, t, "建筑离线产出"),
            mgrRecord.setData("HOUSE_OFF_LINE_TOTAL_TIME", 0),
            this.offLineProfit = 0,
            this.offLineTime = 0,
            t
        }
    }
    mgrHouse.profitTimerSpan = 3,
    mgrHouse.offLineInterval = 300,
    mgrHouse.offLineProfit = 0,
    mgrHouse.offLineTime = 0,
    mgrHouse.offLineProfitCalcu = !1;
    const AD_EVENT_ID_ONLINE = "double_online";
    class vFanceRewardDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vFanceRewardDialog",
            this.exportNodeNames = ["CC_spriteTitle", "CC_labelContent", "CC_spriteRewardIcon", "CC_labelRewardCount", "CC_labelRatio", "CC_buttonWatchAd", "CC_labelAd", "CC_spriteAdIcon", "CC_buttonClose"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.buttonWatchAd.fOnClick = this.onTouchButtonWatchAd.bind(this),
            this.buttonWatchAd.__node.scale(0, 0),
            CustomTween.delayTime(this.buttonWatchAd.__node, 400).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.fillData(),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccess.bind(this)
            }),
            mgrTip.showNativeBanner("ba_fance_dialog", this),
            mgrI18n.trySetI18nImage(this.spriteTitle, "art32.png")
        }
        onClosed() {
            super.onClosed()
        }
        onAnimationFinished() {
            mgrTip.showJumpOtherGameBanner(this)
        }
        onTouchButtonClose() {
            this.closeDialog()
        }
        onTouchButtonWatchAd() {
            mgrAd.triggerAdEvent(AD_EVENT_ID_ONLINE, {}, null)
        }
        fillData() {
            let e = [];
            mgrCfg.forDb_from_random_tip_db((t,a)=>{
                a.type == ERandomTipType.onlineFance && e.push(a.word1)
            }
            ),
            this.labelContent.text = e[Tools.random(e.length) - 1];
            let t = mgrCfg.get_from_item_template_db(Const.ITEM_ID_FANCE_COUNT)
              , a = t.data.itemId
              , i = t.data.amount
              , s = mgrCfg.get_from_item_template_db(a);
            Tools.loadImg(this.spriteRewardIcon, s.icon),
            this.labelRewardCount.text = `${Tools.getBigNumberStr(i * mgrHouse.getHouseProfitSpeed())}`
        }
        onMsgAdEventSuccess(e) {
            if (e.adEventId == AD_EVENT_ID_ONLINE) {
                this.closeDialog(),
                mgrPlayer.addItemAmount(Const.ITEM_ID_FANCE_COUNT, -mgrPlayer.getItemAmount(Const.ITEM_ID_FANCE_COUNT), "人气拍摄");
                let e = mgrCfg.get_from_item_template_db(Const.ITEM_ID_FANCE_COUNT)
                  , t = e.data.itemId
                  , a = e.data.amount;
                mgrPlayer.addItemAmount(t, 2 * a * mgrHouse.getHouseProfitSpeed(), "人气拍摄"),
                mgrTip.addGotItemTip(t, 2 * a * mgrHouse.getHouseProfitSpeed(), null, null)
            }
        }
    }
    class vFindMeDialogBaidu extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vFindMeDialogBaidu",
            this.exportNodeNames = ["CC_buttonClose"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = (()=>{
                this.closeDialog()
            }
            )
        }
        onClosed() {
            super.onClosed()
        }
    }
    class vFindMeDialogDouyin extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vFindMeDialogDouyin",
            this.exportNodeNames = ["CC_buttonClose"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = (()=>{
                this.closeDialog()
            }
            )
        }
        onClosed() {
            super.onClosed()
        }
    }
    class vFindMeDialogToutiao extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vFindMeDialogToutiao",
            this.exportNodeNames = ["CC_buttonClose"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = (()=>{
                this.closeDialog()
            }
            )
        }
        onClosed() {
            super.onClosed()
        }
    }
    class vFindMeDialogWeixin extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vFindMeDialogWeixin",
            this.exportNodeNames = ["CC_buttonClose"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = (()=>{
                this.closeDialog()
            }
            )
        }
        onClosed() {
            super.onClosed()
        }
    }
    class vFoodDiscountDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vFoodDiscountDialog",
            this.exportNodeNames = ["CC_spriteTitle", "CC_buttonConsume", "CC_labelConsumeCount", "CC_imageConsumeIcon", "CC_buttonClose", "CC_imageFood1", "CC_imageFood2", "CC_labelDesc"]
        }
        onOpened() {
            super.onOpened(),
            CustomTween.roke(this.spriteTitle),
            mgrAd.triggerAdEvent(AD_EVENT_ID.INTER.food_discount_dialog),
            this.buttonClose.fOnClick = (()=>{
                this.closeDialog()
            }
            );
            let e = [];
            mgrCfg.forDb_from_food_db((t,a)=>{
                e.push(a.id)
            }
            );
            let t = e[Tools.random(0, e.length - 1)]
              , a = e[Tools.random(0, e.length - 1)]
              , i = mgrCfg.get_from_food_db(t)
              , s = mgrCfg.get_from_food_db(a);
            Tools.loadImg(this.imageFood1, i.icon),
            Tools.loadImg(this.imageFood2, s.icon);
            let o = mgrCfg.get_from_shop_template_db(t)
              , n = mgrCfg.get_from_shop_template_db(a)
              , r = Math.floor(.9 * (o.price + n.price));
            this.labelConsumeCount.text = `${r}`,
            this.buttonConsume.fOnClick = (()=>{
                this.__bClosing || (mgrPlayer.getItemAmount(Const.ITEM_ID_GOLD) < r ? mgrShop.tipItemNotEnough(Const.ITEM_ID_GOLD) : (mgrPlayer.addItemAmount(Const.ITEM_ID_GOLD, -r, "购买九折优惠"),
                mgrPlayer.addItemAmount(t, 1, "九折优惠"),
                mgrPlayer.addItemAmount(a, 1, "九折优惠"),
                mgrTip.addGotItemTip(t, 1),
                mgrTip.addGotItemTip(a, 1),
                this.closeDialog()))
            }
            ),
            mgrI18n.trySetI18nImage(this.spriteTitle, "art40.png")
        }
        onClosed() {
            super.onClosed()
        }
    }
    class vFoodShopItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vFoodShopItem",
            this.exportNodeNames = ["CC_buttonBg", "CC_imageTag", "CC_imageConsumeIcon", "CC_labelConsume", "CC_imageFoodIcon", "CC_spriteAd", "CC_spriteAdIcon", "CC_labelAdWish", "CC_spriteRecomend"],
            this.width = 120,
            this.height = 150,
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.buttonBg.fOnClick = this.onClickBg.bind(this),
            this.data && this.fillByData(this.data),
            CustomTween.scaleForever(this.spriteRecomend, .8, 1, 1e3),
            mgrI18n.trySetI18nImage(this.spriteRecomend, "art85.png")
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            let t = mgrCfg.get_from_shop_template_db(this.data.shopId)
              , [a,i] = t.items[0]
              , [s,o] = [t.priceUnit, t.price];
            Tools.loadImg(this.imageFoodIcon, mgrCfg.get_from_item_template_db(a).icon),
            this.labelConsume.text = `${o}`,
            Tools.loadImg(this.imageConsumeIcon, mgrCfg.get_from_item_template_db(s).icon);
            let n = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.free_food)
              , r = mgrInteraction.getTodayRecommendFoodId();
            this.spriteAd.visible = n && r == this.data.shopId,
            this.spriteRecomend.visible = r == this.data.shopId
        }
        onClickBg() {
            let e = this.imageFoodIcon.localToGlobal(new Laya.Point(this.imageFoodIcon.width / 2,this.imageFoodIcon.height / 2));
            this.data && this.data.fOnClick(this.data.shopId, e, e=>{
                e && CustomTween.to(this.imageFoodIcon, {
                    scaleX: 0,
                    scaleY: 0
                }, 0).delayTime(300).to({
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).start(1)
            }
            )
        }
    }
    class vFoodShopDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vFoodShopDialog",
            this.exportNodeNames = ["CC_spriptTop", "CC_spriteNativeEmbed", "CC_spriteNativeIcon", "CC_labelNativeTitle", "CC_labelNativeDesc", "CC_buttonNativeGo", "CC_labelNativeGo", "CC_spriteNativeAdTag", "CC_boxList", "CC_spriteBasket", "CC_boxBasket", "CC_buttonClose", "CC_labelRightFreeWish"],
            this.yDistance = 20,
            this.xDistance = 40,
            this.yCursor = -1,
            this.xCursor = -1
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = (()=>{
                this.closeDialog()
            }
            ),
            this.buildUi(),
            this.fillData(),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            }),
            this.spriteNativeEmbed.scale(0, 0),
            mgrAdNative.registerNativeBannerRefreshFun(AD_EVENT_ID.embed.food_shop_dialog, this.refreshEmbedNative.bind(this), this.spriteNativeEmbed),
            mgrI18n.trySetI18nImage(this.spriptTop, "art74.png")
        }
        onClosed() {
            super.onClosed()
        }
        buildUi() {
            this.reuseList = new ReuseList(3,0,10),
            this.reuseList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseList),
            this.reuseList.setItemClass(vFoodShopItem),
            this.reuseList.setSpaceX(25),
            this.reuseList.setSpaceY(-35)
        }
        fillData() {
            let e = mgrShop.getAllShopItemListByCategory([Const.SHOP_FOOD_TAG])
              , t = [];
            for (let a = 0; a < e.length; a++) {
                const i = e[a];
                t.push({
                    shopId: i.id,
                    fOnClick: this.onClickShop.bind(this)
                })
            }
            this.reuseList.setDatas(t)
        }
        refreshEmbedNative(e) {
            e ? (Tools.loadAdImg(this.spriteNativeIcon, e.url),
            this.labelNativeTitle.text = e.title,
            this.labelNativeGo.text = e.targetTitle,
            this.labelNativeDesc.text = e.desc,
            CustomTween.to(this.spriteNativeEmbed, {
                scaleX: 1,
                scaleY: 1
            }, 300).start(1)) : CustomTween.to(this.spriteNativeEmbed, {
                scaleX: 0,
                scaleY: 0
            }, 300).start(1)
        }
        onClickShop(e, t, a) {
            let i = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.free_food)
              , s = mgrInteraction.getTodayRecommendFoodId();
            return i && s == e ? (this.context.adShopId = e,
            this.context.adCallback = a,
            this.context.adWorldPos = t,
            void mgrAd.triggerAdEvent(AD_EVENT_ID.VIDEO.free_food, null, !0)) : (a && a(this.buyShop(e, t)),
            !1)
        }
        buyShop(e, t, a=!1) {
            let i = mgrShop.requestBuy(e, a);
            if (i) {
                -1 == this.xCursor ? (this.xCursor = 35,
                this.yCursor = this.boxBasket.height - 60) : this.xCursor > this.boxBasket.width - 20 && (this.xCursor = 35,
                this.yCursor -= (Math.random() / 2 + .5) * this.yDistance);
                let a = mgrCfg.get_from_shop_template_db(e)
                  , i = mgrCfg.get_from_item_template_db(a.items[0][0])
                  , s = new Laya.Image(i.icon);
                s.width = 80,
                s.height = 80,
                s.anchorX = .5,
                s.anchorY = .5,
                this.boxBasket.addChild(s);
                let o = this.boxBasket.globalToLocal(t);
                s.pos(o.x, o.y, !0),
                s.zOrder = Tools.random(1, 10);
                let n = new Laya.Vector2(o.x,o.y)
                  , r = new Laya.Vector2((o.x + this.xCursor) / 2,(o.y + this.yCursor) / 2 - 200)
                  , l = new Laya.Vector2(this.xCursor,this.yCursor);
                CustomTween.bezierCurveMotion(n, r, l, s, 500).start(1),
                this.xCursor += (Math.random() / 2 + .5) * this.xDistance,
                mgrSdk.staticPointEvent(5021)
            }
            return i
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID.VIDEO.free_food && this.context.adCallback(this.buyShop(this.context.adShopId, this.context.adWorldPos, !0))
        }
    }
    const AD_EVENT_ID_FREE_UNLOCK = "free_unlock_flowerpot";
    class vFreeUnlockFlowerpotDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vFreeUnlockFlowerpotDialog",
            this.exportNodeNames = ["CC_labelContent", "CC_buttonClose", "CC_buttonWatchAd", "CC_labelWatchAd"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.buttonWatchAd.fOnClick = this.onTouchButtonWatchAd.bind(this),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            })
        }
        onClosed() {
            super.onClosed()
        }
        onTouchButtonClose() {
            this.closeDialog()
        }
        onTouchButtonWatchAd() {
            mgrAd.triggerAdEvent(AD_EVENT_ID_FREE_UNLOCK, null, !0)
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID_FREE_UNLOCK && (this.closeDialog(),
            mgrGarden.unlockFlowerpot(this.context.potId))
        }
    }
    class vGardenAchievementItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vGardenAchievementItem",
            this.exportNodeNames = ["CC_buttonBg", "CC_spriteIcon", "CC_labelDesc", "CC_labelProgress", "CC_progressBar", "CC_spriteStarBg", "CC_imageStar", "CC_labelRewardCount", "CC_spriteGeted"],
            this.width = 397,
            this.height = 93,
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.data && this.fillByData(this.data),
            this.buttonBg.fOnClick = this.onTouchButtonBg.bind(this),
            this.buttonBg.bTween = !1,
            mgrI18n.trySetI18nImage(this.spriteGeted, "art03.png")
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            let t = mgrAchievement.getAchievement(this.data.aid);
            Tools.loadImg(this.spriteIcon, t.template.icon),
            this.labelDesc.text = `${mgrI18n.getText(`${t.template.name}`)}`,
            this.progressBar.progress = t.count / t.maxCount,
            this.labelProgress.text = `${t.count}/ ${t.maxCount}`,
            Tools.loadImg(this.imageStar, mgrCfg.get_from_item_template_db(t.template.rewardItemId).icon),
            this.labelRewardCount.text = `x ${t.template.rewardAmount}`,
            t.state == AchievementState.finished ? (mgrTip.showBadgeWithNumber(this.spriteStarBg, 1),
            this.curtween = CustomTween.to(this.imageStar, {
                scaleY: .75
            }, 100).to({
                scaleY: 1
            }, 50).to({
                scaleY: 1.1
            }, 300).to({
                scaleY: 1
            }, 300).to({
                scaleY: .75
            }, 100).to({
                scaleY: 1
            }, 100).delayTime(500).start(0)) : (mgrTip.showBadgeWithNumber(this.spriteStarBg, 0),
            this.curtween && this.curtween.clear(),
            CustomTween.to(this.imageStar, {
                scaleY: 1,
                y: 60
            }, 300, Laya.Ease.backOut).start(1)),
            this.spriteGeted.visible = t.state == AchievementState.received,
            mgrGuide.registerGuideNode(`vGardenAchievementDialog.start ${t.template.id}`, this.imageStar)
        }
        onTouchButtonBg() {
            this.data && (this.data.fOnClick(this.data.aid, this.imageStar.localToGlobal(new Laya.Point(this.imageStar.width / 2,this.imageStar.height / 2))) && this.fillByData(this.data),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: `vGardenAchievementDialog.clickStart ${this.data.aid}`
            }))
        }
    }
    class vGardeAchievementRewardItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vGardeAchievementRewardItem",
            this.exportNodeNames = ["CC_imageIcon", "CC_labelName"],
            this.width = 60,
            this.height = 60,
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            let e = this.context.itemId
              , t = mgrCfg.get_from_item_template_db(e);
            Tools.loadImg(this.imageIcon, t.icon),
            this.labelName.text = `${mgrI18n.getText(`${t.name}`)}x ${this.context.amount}`
        }
        onClosed() {}
    }
    class vGardenAchievementDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vGardenAchievementDialog",
            this.exportNodeNames = ["CC_spriteTitle", "CC_boxList", "CC_spriteTitleBg", "CC_progressBar", "CC_labelProgress", "CC_imageXingxing", "CC_spriteCurTitle", "CC_spriteNewTitle", "CC_spriteRewardPaoapo", "CC_boxRewardItemsList", "CC_buttonClose", "CC_buttonReward"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonReward.onTouchBegin = this.onTouchRewardBegin.bind(this),
            this.buttonReward.onTouchEnd = this.onTouchRewardEnd.bind(this),
            this.buttonReward.onTouchCancle = this.onTouchRewardEnd.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.spriteRewardPaoapo.scale(0, 0),
            this.buildUi(),
            this.fillData(),
            mgrTip.showJumpOtherGameBanner(this),
            mgrI18n.trySetI18nImage(this.spriteTitle, "art21.png")
        }
        onClosed() {
            super.onClosed()
        }
        buildUi() {
            this.reuseList = new ReuseList(1,0,6),
            this.reuseList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseList),
            this.reuseList.setItemClass(vGardenAchievementItem),
            this.reuseList.setVerticalMoveEnable(!0),
            this.reuseList.setSpaceY(5),
            Tools.loadImg(this.imageXingxing, mgrCfg.get_from_item_template_db(25).icon)
        }
        fillData() {
            let e = []
              , t = mgrAchievement.getAchievementsByCategory(2);
            for (let a = 0; a < t.length; a++) {
                const i = t[a];
                let s = i.template.order;
                i.state == AchievementState.finished && (s = -1),
                i.state == AchievementState.received && (s = 1e4),
                e.push({
                    aid: i.id,
                    fOnClick: this.onClickAchievement.bind(this),
                    __order: s
                })
            }
            e = Tools.sortArrayByField(e, "__order"),
            this.reuseList.setDatas(e);
            let a = mgrGarden.title
              , i = mgrGarden.maxTitle
              , s = a == i ? i : a + 1
              , o = mgrCfg.get_from_garden_title_db(a)
              , n = mgrCfg.get_from_garden_title_db(s);
            if (o && Tools.loadImg(this.spriteCurTitle, o.icon),
            Tools.loadImg(this.spriteNewTitle, n.icon),
            a == i)
                mgrI18n.trySetI18nText(this.labelProgress, "vGardenAchievementDialog.1"),
                this.progressBar.progress = 1;
            else {
                let e = mgrPlayer.getItemAmount(Const.ITEM_ID_GARDEN_COLLECTION)
                  , t = n.needCollects[1];
                this.progressBar.progress = e / t,
                this.labelProgress.text = `${e}/${t}`
            }
            for (let e = 0; e < n.rewards.length; e++) {
                const [t,a] = n.rewards[e];
                let i = new vGardeAchievementRewardItem({
                    itemId: t,
                    amount: a
                });
                this.boxRewardItemsList.addChild(i),
                i.y = this.boxRewardItemsList.height / 2 - i.height / 2
            }
            Tools.layoutH(this.boxRewardItemsList)
        }
        onClickAchievement(e, t) {
            let a = mgrAchievement.getAchievement(e);
            if (a.state == AchievementState.unlocked)
                return void mgrTip.showMsgTip(`${mgrI18n.getText("vGardenAchievementDialog.2")}`);
            if (a.state == AchievementState.received)
                return void mgrTip.showMsgTip(`${mgrI18n.getText("vGardenAchievementDialog.3")}`);
            let i = mgrGarden.title
              , [s,o] = mgrAchievement.obtainReward(e, "花园成就")
              , n = mgrGarden.title
              , r = mgrGarden.maxTitle
              , l = n == r ? r : n + 1
              , h = mgrCfg.get_from_garden_title_db(n)
              , d = mgrCfg.get_from_garden_title_db(l);
            mgrOfflineNearbyRank.updateSelfInfo();
            let c = mgrPlayer.getItemAmount(Const.ITEM_ID_GARDEN_COLLECTION)
              , g = d.needCollects[1]
              , _ = mgrGarden.obtainTitleReward(n)
              , m = new Laya.Image(mgrCfg.get_from_item_template_db(Const.ITEM_ID_GARDEN_COLLECTION).icon);
            m.anchorX = .5,
            m.anchorY = .5,
            this.addChild(m);
            let u = this.globalToLocal(t);
            m.pos(u.x, u.y);
            let p = this.imageXingxing.localToGlobal(new Laya.Point(this.imageXingxing.width / 2,this.imageXingxing.height / 2));
            p = this.globalToLocal(p);
            let C = new Laya.Vector2((u.x + p.x) / 2,(u.y + p.y) / 2 - 200);
            return n > i && this.buttonClose.__node.scale(0, 0),
            CustomTween.bezierCurveMotion(new Laya.Vector2(u.x,u.y), C, new Laya.Vector2(p.x,p.y), m, 500).callback(()=>{
                m.destroy(),
                CustomTween.to(this.imageXingxing, {
                    scaleX: 1.3,
                    scaleY: 1.3
                }, 100).to({
                    scaleX: 1,
                    scaleY: 1
                }, 100).start(1),
                CustomTween.actionFloat(this.progressBar.__node, c - o, c, 300, e=>{
                    this.progressBar.progress = e / g,
                    this.labelProgress.text = `${Math.floor(e)}/${g}`
                }
                ).callback(()=>{
                    n > i && (mgrSound.play(104),
                    CustomTween.to(this.spriteCurTitle, {
                        scaleX: 0,
                        scaleY: 0
                    }, 300).callback(()=>{
                        Tools.loadImg(this.spriteCurTitle, h.icon)
                    }
                    ).to({
                        scaleX: 1,
                        scaleY: 1
                    }, 300, Laya.Ease.backOut).start(1),
                    Timer.callLater(1.8, ()=>{
                        CustomTween.to(this.buttonClose.__node, {
                            scaleX: 1,
                            scaleY: 1
                        }, 300, Laya.Ease.backOut).start(1);
                        for (let e = 0; e < _.length; e++) {
                            const t = _[e];
                            mgrTip.addGotItemTip(t.itemId, t.amount)
                        }
                        Timer.callLoop(.016, e=>{
                            1 == DialogBase.ShowingDialog.length && (mgrGuide.registerGuideNode("vGardenAchievementDialog.buttonClose", this.buttonClose.__node),
                            e.stop())
                        }
                        , this)
                    }
                    , this),
                    CustomTween.delayTime(this.spriteNewTitle, 600).to({
                        scaleX: 0,
                        scaleY: 0
                    }, 300).callback(()=>{
                        Tools.loadImg(this.spriteNewTitle, d.icon)
                    }
                    ).to({
                        scaleX: 1,
                        scaleY: 1
                    }, 300, Laya.Ease.backOut).callback(()=>{
                        CustomTween.to(this.buttonReward.__node, {
                            scaleX: 0,
                            scaleY: 0
                        }, 300).to({
                            scaleX: 1,
                            scaleY: 1
                        }, 300).start(1)
                    }
                    ).delayTime(600).callback(()=>{}
                    ).start(1))
                }
                ).start(1)
            }
            ).start(1),
            !0
        }
        onTouchRewardBegin() {
            this.spriteRewardPaoapo.scale(1, 1)
        }
        onTouchRewardEnd() {
            this.spriteRewardPaoapo.scale(0, 0)
        }
        onTouchButtonClose() {
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vGardenAchievementDialog.clickButtonClose"
            }),
            this.closeDialog()
        }
    }
    class vGardenAdHarvestDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vGardenAdHarvestDialog",
            this.exportNodeNames = ["CC_labelContent", "CC_buttonClose", "CC_buttonWatchAd", "CC_labelWatchAd", "CC_progressBar", "CC_spriteTipPoint"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonWatchAd.fOnClick = this.onTouchButtonAd.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonBack.bind(this),
            this.progressBar.barName = "bar",
            this.progressBar.style = ULPROGRESSBAR_STYLE.fan,
            this.fillData(),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            })
        }
        onClosed() {
            super.onClosed()
        }
        fillData() {
            let e = AD_EVENT_ID.VIDEO.one_key_harvest
              , t = mgrAd.preCheckCanTriggerAdEvent(e);
            this.buttonWatchAd.__node.visible = t,
            this.progressTween = CustomTween.actionFloat(this.progressBar.__node, 0, 1, 5e3, e=>{
                this.progressBar.progress = e,
                this.spriteTipPoint.rotation = 360 * e
            }
            ).callback(()=>{
                this.onTouchButtonBack()
            }
            ).start(1)
        }
        onTouchButtonAd() {
            this.progressTween.clear(),
            mgrAd.triggerAdEvent(AD_EVENT_ID.VIDEO.one_key_harvest, null, !0)
        }
        onTouchButtonBack() {
            this.context.cancleCallback && this.context.cancleCallback(),
            this.closeDialog()
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID.VIDEO.one_key_harvest && (this.context.onAdCallback && this.context.onAdCallback(),
            this.closeDialog())
        }
    }
    class vGetItemWatchAdDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vGetItemWatchAdDialog",
            this.exportNodeNames = ["CC_boxContent", "CC_spriteDiamondBuy", "CC_spriteLightDiamond", "CC_spriteTitleDiamond", "CC_spriteDiamondWaterTitle", "CC_spriteDiamondFerlizerTitle", "CC_labelRewardAmountDiamond", "CC_imageIconDiamond2", "CC_buttonBuyDiamond", "CC_spriteConsumeIcon", "CC_labelAmount", "CC_spriteDiamondFerlizerIcon", "CC_spriteDiamondWaterIcon", "CC_spriteDesc", "CC_buttonClose", "CC_spriteEffect1", "CC_spriteAdBuy", "CC_spriteLightAd", "CC_spriteTitleAd", "CC_spriteAdWaterTitle", "CC_spriteAdFeilizerTitle", "CC_labelRewardAmountAd", "CC_imageIconAd2", "CC_buttonBuyAd", "CC_spriteAdFerlizerIcon", "CC_spriteAdWaterIcon", "CC_labelLeftAdCount", "CC_spriteEffect2"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = (()=>{
                this.closeDialog()
            }
            ),
            this.buttonBuyDiamond.fOnClick = this.onTouchButtonConsume.bind(this),
            this.buttonBuyAd.fOnClick = this.onTouchButtonWatchAd.bind(this),
            this.adEventId = this.context.adEventId,
            this.itemId = this.context.itemId,
            this.fillData(),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            }),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_card_star, this.spriteEffect2),
            CustomTween.rotateForever(this.spriteLightDiamond, 8e3),
            CustomTween.rotateForever(this.spriteLightAd, 8e3),
            mgrAd.triggerAdEvent(AD_EVENT_ID.INTER.watch_ad_get_item),
            mgrI18n.trySetI18nImage(this.spriteDiamondWaterTitle, "art77.png"),
            mgrI18n.trySetI18nImage(this.spriteDiamondFerlizerTitle, "art71.png"),
            mgrI18n.trySetI18nImage(this.spriteAdWaterTitle, "art60.png"),
            mgrI18n.trySetI18nImage(this.spriteAdFeilizerTitle, "art55.png"),
            mgrI18n.trySetI18nImage(this.spriteDesc, "art29.png")
        }
        onClosed() {
            super.onClosed()
        }
        fillData() {
            this.itemId == Const.ITEM_ID_GARDEN_FERTILIZER ? (this.spriteAdFerlizerIcon.visible = !0,
            this.spriteDiamondFerlizerIcon.visible = !0,
            this.spriteDiamondFerlizerTitle.visible = !0,
            this.spriteAdFeilizerTitle.visible = !0,
            this.spriteAdWaterIcon.visible = !1,
            this.spriteAdWaterTitle.visible = !1,
            this.spriteDiamondWaterTitle.visible = !1,
            this.spriteDiamondWaterIcon.visible = !1) : (this.spriteAdFerlizerIcon.visible = !1,
            this.spriteDiamondFerlizerIcon.visible = !1,
            this.spriteDiamondFerlizerTitle.visible = !1,
            this.spriteAdFeilizerTitle.visible = !1,
            this.spriteAdWaterIcon.visible = !0,
            this.spriteAdWaterTitle.visible = !0,
            this.spriteDiamondWaterTitle.visible = !0,
            this.spriteDiamondWaterIcon.visible = !0);
            let e = mgrCfg.get_from_item_template_db(this.itemId);
            Tools.loadImg(this.imageIconDiamond2, e.icon),
            Tools.loadImg(this.imageIconAd2, e.icon);
            let t = mgrCfg.get_from_shop_template_db(this.itemId);
            this.labelRewardAmountDiamond.text = `${t.items[0][1]}`,
            this.labelRewardAmountAd.text = `${2 * t.items[0][1]}`;
            let a = mgrCfg.get_from_item_template_db(t.priceUnit);
            this.labelAmount.text = `${t.price * Math.pow(5, mgrShop.getTodayBuyShopCount(this.itemId))}`,
            Tools.loadImg(this.spriteConsumeIcon, a.icon);
            let i = mgrAd.preCheckCanTriggerAdEvent(this.adEventId);
            this.spriteAdBuy.visible = i,
            this.labelLeftAdCount.text = `${mgrI18n.getText("vGetItemWatchAdDialog.1")} ${mgrAd.getAdEventRemainCount(this.adEventId)}`
        }
        onTouchButtonConsume() {
            mgrShop.requestBuy(this.itemId, !1, Math.pow(5, mgrShop.getTodayBuyShopCount(this.itemId))) && this.closeDialog()
        }
        onTouchButtonWatchAd() {
            mgrAd.triggerAdEvent(this.adEventId, null, !0)
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == this.adEventId && (mgrShop.requestBuy(this.itemId, !0, 1, 2),
            this.closeDialog())
        }
    }
    class vGotCardPackDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vGotCardPackDialog",
            this.exportNodeNames = ["CC_spriteLight", "CC_spriteBg", "CC_spriteTitleNormal", "CC_spriteTitleGold", "CC_spriteHaved", "CC_spriteHavedIcon", "CC_labelHavedAmount", "CC_spriteRewardBg", "CC_spriteReward", "CC_labelAmount", "CC_spriteNativeEmbed", "CC_spriteNativeIcon", "CC_labelNativeTitle", "CC_labelNativeDesc", "CC_buttonNativeGo", "CC_labelNativeGo", "CC_spriteNativeAdTag", "CC_buttonGet", "CC_buttonClose", "CC_spriteActionIcon", "CC_spriteEffect1"]
        }
        onOpened() {
            super.onOpened(),
            1 == mgrCfg.get_from_card_pack_db(this.context.itemId).type ? this.spriteTitleGold.visible = !1 : this.spriteTitleNormal.visible = !1,
            this.fillData(),
            this.playAction(),
            this.spriteNativeEmbed.scale(0, 0),
            mgrAdNative.registerNativeBannerRefreshFun(AD_EVENT_ID.embed.got_card_pack, this.refreshEmbedNative.bind(this), this.spriteNativeEmbed),
            mgrTip.showJumpOtherGameBanner(this),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_card_star, this.spriteEffect1),
            mgrAd.triggerAdEvent(AD_EVENT_ID.INTER.go_card_pack),
            mgrI18n.trySetI18nImage(this.spriteTitleNormal, "art68.png"),
            mgrI18n.trySetI18nImage(this.spriteTitleGold, "art59.png")
        }
        onClosed() {
            super.onClosed()
        }
        onAnimationFinished() {}
        fillData() {
            let e = this.context.seedId
              , t = this.context.itemId
              , a = this.context.amount
              , i = mgrCfg.get_from_item_template_db(t);
            Tools.loadImg(this.spriteHavedIcon, i.icon),
            Tools.loadImg(this.spriteReward, i.icon),
            Tools.loadImg(this.spriteActionIcon, i.icon);
            let s = mgrCfg.get_from_card_pack_db(t)
              , o = 0;
            mgrCfg.forDb_from_card_pack_db((e,t)=>{
                t.type == s.type && (o += mgrPlayer.getItemAmount(t.id))
            }
            ),
            this.labelHavedAmount.text = `${o}`,
            this.labelAmount.text = `x ${a}`;
            let n = mgrCfg.get_from_flower_harvest_db(e);
            this.flower = ULSkeleton.create(n.spineId),
            this.flower.playAnimation(n.idleAnimationId),
            this.addChild(this.flower),
            this.flower.pos(this.width / 2 + 30, this.height / 2 + 412),
            this.flower.scale(.85, .85)
        }
        playAction() {
            this.spriteBg.alpha = 0,
            this.spriteLight.alpha = 0;
            this.flower.alpha = 0,
            this.spriteActionIcon.y += 150,
            this.spriteActionIcon.scale(0, 0),
            !mgrGuide.isGuiding() && Tools.registerTouchHander(this.nodeResource, e=>{
                e.isClick && (this.flower.visible = !1,
                this.spriteActionIcon.visible = !1,
                CustomTween.to(this.spriteBg, {
                    alpha: 1
                }, 500).start(1),
                CustomTween.to(this.spriteLight, {
                    alpha: 1
                }, 500).callback(()=>{
                    CustomTween.rotateForever(this.spriteLight, 8e3)
                }
                ).start(1),
                Tools.unRegisterTouchHander(this.nodeResource),
                this.buttonClose.fOnClick = (()=>{
                    this.closeDialog(),
                    this.sendMsg("MSG_CLOSE_GOT_CARD_DIALOG", {
                        cardId: this.context.itemId
                    })
                }
                ),
                this.buttonGet.fOnClick = (()=>{
                    this.closeDialog(),
                    mgrDirector.openDialog("vOpenCardDialog", {
                        cardPackId: this.context.itemId
                    }, !0),
                    this.sendMsg("MSG_GUIDE_EVENT", {
                        id: "vGotCardDialog.clickButtonOpen"
                    })
                }
                ),
                mgrGuide.registerGuideNode("vGotCardDialog.buttonOpen", this.buttonGet.__node))
            }
            ),
            CustomTween.to(this.flower, {
                alpha: 1
            }, 1e3).callback(()=>{
                let e = this.context.seedId
                  , t = mgrCfg.get_from_flower_harvest_db(e);
                this.flower.playAnimation(t.playAnimationId, !1),
                Timer.callLater(.1, ()=>{
                    CustomTween.to(this.spriteActionIcon, {
                        scaleX: 1,
                        scaleY: 1,
                        y: this.spriteActionIcon.y - 150,
                        alpha: 1
                    }, 1e3).callback(()=>{
                        this.buttonClose.fOnClick = (()=>{
                            this.closeDialog(),
                            this.sendMsg("MSG_CLOSE_GOT_CARD_DIALOG", {
                                cardId: this.context.itemId
                            })
                        }
                        ),
                        this.buttonGet.fOnClick = (()=>{
                            this.closeDialog(),
                            mgrDirector.openDialog("vOpenCardDialog", {
                                cardPackId: this.context.itemId
                            }, !0),
                            this.sendMsg("MSG_GUIDE_EVENT", {
                                id: "vGotCardDialog.clickButtonOpen"
                            })
                        }
                        ),
                        mgrGuide.registerGuideNode("vGotCardDialog.buttonOpen", this.buttonGet.__node),
                        mgrSound.play(103),
                        CustomTween.to(this.spriteBg, {
                            alpha: 1
                        }, 500).callback(()=>{}
                        ).start(1),
                        CustomTween.to(this.spriteLight, {
                            alpha: 1
                        }, 500).callback(()=>{
                            CustomTween.rotateForever(this.spriteLight, 8e3)
                        }
                        ).start(1),
                        CustomTween.to(this.flower, {
                            alpha: 0
                        }, 500).start(1)
                    }
                    ).start(1)
                }
                )
            }
            ).start(1)
        }
        refreshEmbedNative(e) {
            e ? (Tools.loadAdImg(this.spriteNativeIcon, e.url),
            this.labelNativeTitle.text = e.title,
            this.labelNativeGo.text = e.targetTitle,
            this.labelNativeDesc.text = e.desc,
            CustomTween.to(this.spriteNativeEmbed, {
                scaleX: 1,
                scaleY: 1
            }, 300).start(1),
            this.buttonGet.__node.y = 30) : (CustomTween.to(this.spriteNativeEmbed, {
                scaleX: 0,
                scaleY: 0
            }, 300).start(1),
            this.buttonGet.__node.y = 0)
        }
    }
    class vGotItemAdvertisementDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vGotItemAdvertisementDialog",
            this.exportNodeNames = ["CC_spriteLight", "CC_spriteTitle", "CC_imageSpriteIcon", "CC_labelCount", "CC_labelDesc", "CC_boxLayout", "CC_imageGold", "CC_imageGoldIcon", "CC_labelGoldCount", "CC_imageDiamond", "CC_imageDiamondIcon", "CC_labelDiamondCount", "CC_imageWishExchange", "CC_imageWishExchangeIcon", "CC_labelWishExchange", "CC_imageBuildCoin", "CC_imageBuildIconIcon", "CC_labelBuildIcon", "CC_buttonGet", "CC_labelGet", "CC_buttonAdGet", "CC_spriteAdIcon", "CC_labelAdWish", "CC_boxLayout2", "CC_checkBoxGou", "CC_buttonClose"]
        }
        onOpened() {
            super.onOpened(),
            CustomTween.rotateForever(this.spriteLight, 8e3),
            this.buttonGet.fOnClick = this.onTouchButtonClose.bind(this),
            this.buttonAdGet.fOnClick = this.onTouchButtonAd.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.fillData(),
            this.fillAd(),
            mgrSound.play(102),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            })
        }
        onClosed() {
            super.onClosed()
        }
        onAnimationFinished() {}
        fillData() {
            let e = this.context.itemId
              , t = mgrCfg.get_from_item_template_db(e);
            Tools.loadImg(this.imageSpriteIcon, t.icon),
            this.labelCount.text = `${Tools.getBigNumberStr(this.context.amount)}`,
            this.labelDesc.text = `${mgrI18n.getText(`${t.desc}`)}`,
            this.labelGoldCount.text = `${Tools.getBigNumberStr(mgrPlayer.getItemAmount(Const.ITEM_ID_GOLD))}`,
            this.labelDiamondCount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_DIAMONDS)}`,
            this.labelWishExchange.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_WISHPOOL_EXCHANGE)}`,
            Tools.loadImg(this.imageGoldIcon, mgrCfg.get_from_item_template_db(Const.ITEM_ID_GOLD).icon),
            Tools.loadImg(this.imageDiamondIcon, mgrCfg.get_from_item_template_db(Const.ITEM_ID_DIAMONDS).icon),
            Tools.loadImg(this.imageWishExchangeIcon, mgrCfg.get_from_item_template_db(Const.ITEM_ID_WISHPOOL_EXCHANGE).icon)
        }
        fillAd() {
            let e = mgrAd.getAdModeByAdEventId(this.context.adEventId);
            e == AD_MODE.mcprc ? (this.boxLayout2.visible = !1,
            this.buttonGet.__node.visible = !0) : e == AD_MODE.online && (this.boxLayout2.visible = !0,
            this.buttonGet.__node.visible = !1,
            this.spriteAdIcon.visible = this.checkBoxGou.bCheck,
            this.labelAdWish.text = this.checkBoxGou.bCheck ? `${mgrI18n.getText("vGotItemAdvertisementDialog.2")}` : `${mgrI18n.getText("vGotItemAdvertisementDialog.4")}`,
            this.checkBoxGou.changeCallback = (()=>{
                this.fillAd()
            }
            ))
        }
        onTouchButtonClose() {
            this.closeDialog()
        }
        onTouchButtonAd() {
            let e = mgrAd.getAdModeByAdEventId(this.context.adEventId);
            e == AD_MODE.mcprc ? mgrAd.triggerAdEvent(this.context.adEventId, null, !0) : e == AD_MODE.online && (this.checkBoxGou.bCheck ? mgrAd.triggerAdEvent(this.context.adEventId, null, !0) : this.closeDialog())
        }
        onMsgAdEventSuccessed(e) {
            if (e.adEventId == this.context.adEventId) {
                mgrPlayer.addItemAmount(this.context.itemId, this.context.amount, "再领一次"),
                this.labelGet.text = `${mgrI18n.getText("vGotItemAdvertisementDialog.4")}`,
                this.buttonGet.__node.visible = !0,
                this.buttonAdGet.__node.visible = !1,
                this.boxLayout2.visible = !1,
                this.fillData();
                let e = this.context.itemId
                  , t = new Laya.Point;
                e == Const.ITEM_ID_GOLD ? t = mgrDirector.getTipRoot().globalToLocal(this.imageGoldIcon.localToGlobal(new Laya.Point(14,14))) : e == Const.ITEM_ID_DIAMONDS ? t = mgrDirector.getTipRoot().globalToLocal(this.imageDiamondIcon.localToGlobal(new Laya.Point(14,14))) : e == Const.ITEM_ID_WISHPOOL_EXCHANGE && (t = mgrDirector.getTipRoot().globalToLocal(this.imageWishExchangeIcon.localToGlobal(new Laya.Point(14,14)))),
                mgrTip.showCoinGetEffect(e, new Laya.Vector2(t.x,t.y))
            }
        }
    }
    class vGotItemDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vGotItemDialog",
            this.exportNodeNames = ["CC_spriteLight", "CC_imageSpriteIcon", "CC_labelCount", "CC_buttonGet", "CC_labelName", "CC_spriteEffect1", "CC_buttonAdGet", "CC_labelAdRewardAmount", "CC_buttonClose", "CC_boxLayoutShareConsume", "CC_labelShareTip", "CC_buttonVideoShare"]
        }
        onOpened() {
            super.onOpened(),
            CustomTween.rotateForever(this.spriteLight, 8e3),
            this.buttonGet.fOnClick = (()=>{
                this.closeDialog(),
                mgrTip.showGotItemEffect(this.context.itemId, this.context.amount, this.imageSpriteIcon.localToGlobal(new Laya.Point(this.imageSpriteIcon.width / 2,this.imageSpriteIcon.height / 2)))
            }
            ),
            this.buttonClose.fOnClick = (()=>{
                this.closeDialog(),
                mgrTip.showGotItemEffect(this.context.itemId, this.context.amount, this.imageSpriteIcon.localToGlobal(new Laya.Point(this.imageSpriteIcon.width / 2,this.imageSpriteIcon.height / 2))),
                this.buttonAdGet.__node.visible && mgrAd.markFinished(AD_EVENT_ID.VIDEO.random_gold)
            }
            ),
            this.buttonAdGet.fOnClick = this.onTouchButtonAdGet.bind(this),
            this.buttonVideoShare.fOnClick = this.onTouchButtonVideoShare.bind(this),
            this.buttonGet.__node.scale(0, 0),
            this.buttonAdGet.__node.scale(0, 0),
            this.fillData(),
            mgrSound.play(103),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgSuccessed.bind(this)
            })
        }
        onClosed() {
            super.onClosed()
        }
        onAnimationFinished() {
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_card_star, this.spriteEffect1),
            this.context.itemId == Const.ITEM_ID_DIAMONDS ? (this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_jiesuan_zuanshi, this.imageSpriteIcon),
            mgrSound.play(110)) : this.context.itemId == Const.ITEM_ID_GOLD ? (this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_jiesuan_jinbi, this.imageSpriteIcon),
            mgrSound.play(110)) : this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_jiesuan_glow, this.imageSpriteIcon),
            CustomTween.delayTime(this.buttonGet.__node, 200).to({
                scaleX: 1,
                scaleY: 1
            }, 500, Laya.Ease.backOut).callback(()=>{
                this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_yindao_ring, this.buttonGet.__node, 0, .8)
            }
            ).start(1),
            CustomTween.delayTime(this.buttonAdGet.__node, 200).to({
                scaleX: 1,
                scaleY: 1
            }, 500, Laya.Ease.backOut).callback(()=>{}
            ).start(1),
            mgrTip.showJumpOtherGameBanner(this)
        }
        fillData() {
            let e = this.context.itemId
              , t = mgrCfg.get_from_item_template_db(e);
            Tools.loadImg(this.imageSpriteIcon, t.icon);
            let a = this.context.amount;
            this.labelCount.text = `${Tools.getBigNumberStr(a)}`,
            this.labelName.text = `${mgrI18n.getText(`${t.name}`)}`;
            let i = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.random_gold) && 0 == this.context.orderOfQueue;
            this.buttonGet.__node.visible = !i,
            this.buttonAdGet.__node.visible = i,
            this.buttonClose.__node.visible = i;
            let s = mgrCfg.get_from_ad_event_db(AD_EVENT_ID.VIDEO.random_gold).param.rewards[0][1];
            this.labelAdRewardAmount.text = `+${s}`,
            this.buttonVideoShare.__node.visible = this.context.bCanShareVideo;
            let o = mgrChannel.getRecordRewardAmount();
            this.labelShareTip.text = `${mgrI18n.getText("vGotItemDialog.1")} ${Tools.getBigNumberStr(o)}`,
            this.boxLayoutShareConsume.visible = o > 0 && this.context.bCanShareVideo
        }
        onTouchButtonAdGet() {
            mgrAd.triggerAdEvent(AD_EVENT_ID.VIDEO.random_gold)
        }
        onTouchButtonVideoShare() {
            mgrSdk.shareGameVideo(),
            this.boxLayoutShareConsume.visible = !1,
            this.buttonVideoShare.__node.visible = !1
        }
        onMsgSuccessed(e) {
            e.adEventId == AD_EVENT_ID.VIDEO.random_gold && (this.closeDialog(),
            mgrTip.showGotItemEffect(this.context.itemId, this.context.amount, this.imageSpriteIcon.localToGlobal(new Laya.Point(this.imageSpriteIcon.width / 2,this.imageSpriteIcon.height / 2))))
        }
    }
    class vGotPartDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vGotPartDialog",
            this.exportNodeNames = ["CC_spriteLight", "CC_spriteBg", "CC_spriteTitle", "CC_labelName", "CC_spriteRewardBg", "CC_imageSpriteIcon", "CC_labelCount", "CC_spriteIcon", "CC_boxTags", "CC_spriteHaved", "CC_buttonGet", "CC_buttonClose", "CC_buttonAdGet", "CC_labelAdRewardAmount", "CC_buttonShare", "CC_labelShare", "CC_boxLayoutShareConsume", "CC_labelShareTip", "CC_buttonVideoShare", "CC_spriteEffect1"]
        }
        onOpened() {
            super.onOpened(),
            CustomTween.rotateForever(this.spriteLight, 8e3),
            this.buttonClose.fOnClick = (()=>{
                if (this.closeDialog(),
                mgrPlayer.getRepeatSellCount(this.context.itemId) > 0) {
                    let e = mgrCfg.get_from_item_template_db(this.context.itemId);
                    mgrTip.showGotItemEffect(e.sellItemId, e.sellItemAmount, this.imageSpriteIcon.localToGlobal(new Laya.Point(this.imageSpriteIcon.width / 2,this.imageSpriteIcon.height / 2)))
                }
                this.sendMsg("MSG_GUIDE_EVENT", {
                    id: "vGotPartDialog.ClickClose"
                })
            }
            ),
            this.buttonShare.fOnClick = this.onTouchButtonShare.bind(this),
            this.buttonVideoShare.fOnClick = this.onTouchButtonVideoShare.bind(this),
            this.buttonGet.fOnClick = this.buttonClose.fOnClick,
            this.buttonAdGet.fOnClick = this.onTouchButtonAdGet.bind(this),
            this.imageSpriteIcon.scale(0, 0),
            this.buttonGet.__node.scale(0, 0),
            this.buttonAdGet.__node.scale(0, 0),
            this.fillData(),
            mgrSound.play(103),
            mgrGuide.registerGuideNode("vGotPartDialog.buttonClose", this.buttonClose.__node),
            this.spriteHaved.alpha = 0,
            this.spriteHaved.scale(1.5, 1.5),
            this.spriteHaved.y -= 60,
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgSuccessed.bind(this)
            }),
            mgrI18n.trySetI18nImage(this.spriteTitle, "art68.png")
        }
        onClosed() {
            super.onClosed()
        }
        onAnimationFinished() {
            if (mgrTip.showJumpOtherGameBanner(this),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_card_star, this.spriteEffect1),
            mgrPlayer.getRepeatSellCount(this.context.itemId) > 0) {
                let e = mgrCfg.get_from_item_template_db(this.context.itemId);
                this.labelCount.text = `${e.sellItemAmount}`,
                Tools.loadImg(this.imageSpriteIcon, mgrCfg.get_from_item_template_db(e.sellItemId).icon),
                CustomTween.to(this.spriteIcon, {
                    scaleX: 1,
                    scaleY: 1
                }, 10 / 30 * 1e3).callback(()=>{
                    CustomTween.to(this.spriteHaved, {
                        scaleX: 1,
                        scaleY: 1,
                        alpha: 1,
                        y: this.spriteHaved.y + 60
                    }, 300, Laya.Ease.backOut).start(1)
                }
                ).delayTime(500).to({
                    scaleX: .5,
                    scaleY: .5
                }, 5 / 30 * 1e3).callback(()=>{
                    this.spriteIcon.scale(0, 0),
                    this.imageSpriteIcon.scale(.5, .5),
                    this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_jiesuan_jinbi, this.spriteRewardBg),
                    CustomTween.to(this.imageSpriteIcon, {
                        scaleX: 1.2,
                        scaleY: 1.2
                    }, 5 / 30 * 1e3).to({
                        scaleX: .8,
                        scaleY: .8
                    }, 5 / 30 * 1e3).to({
                        scaleX: 1,
                        scaleY: 1
                    }, 5 / 30 * 1e3).callback(()=>{
                        CustomTween.delayTime(this.buttonGet.__node, 0).to({
                            scaleX: 1,
                            scaleY: 1
                        }, 500, Laya.Ease.backOut).callback(()=>{
                            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_yindao_ring, this.buttonGet.__node, 0, .8)
                        }
                        ).start(1),
                        CustomTween.delayTime(this.buttonAdGet.__node, 0).to({
                            scaleX: 1,
                            scaleY: 1
                        }, 500, Laya.Ease.backOut).callback(()=>{}
                        ).start(1)
                    }
                    ).start(1)
                }
                ).start(1)
            } else
                this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_jiesuan_glow, this.spriteIcon),
                CustomTween.delayTime(this.buttonGet.__node, 200).to({
                    scaleX: 1,
                    scaleY: 1
                }, 500, Laya.Ease.backOut).callback(()=>{
                    this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_yindao_ring, this.buttonGet.__node)
                }
                ).start(1),
                CustomTween.delayTime(this.buttonAdGet.__node, 200).to({
                    scaleX: 1,
                    scaleY: 1
                }, 500, Laya.Ease.backOut).callback(()=>{}
                ).start(1)
        }
        onTouchButtonShare() {
            mgrSdk.openShare(),
            this.boxLayoutShareConsume.visible = !1,
            this.buttonShare.__node.visible = !1
        }
        onTouchButtonVideoShare() {
            mgrSdk.shareGameVideo(),
            this.boxLayoutShareConsume.visible = !1,
            this.buttonVideoShare.__node.visible = !1
        }
        fillData() {
            let e = this.context.itemId
              , t = mgrCfg.get_from_part_db(e);
            Tools.loadImg(this.spriteIcon, t.icon),
            this.labelName.text = t.name;
            let a = mgrPart.getRecommendTagsByPartId(e);
            for (let e = 0; e < a.length; e++) {
                const t = a[e];
                let i = new Laya.Image;
                i.size(35, 35),
                i.pivot(i.width / 2, i.height / 2),
                Tools.loadImg(i, t.icon),
                this.boxTags.addChild(i)
            }
            if (this.starLevelNode || (this.starLevelNode = new vStarLevelItem({}),
            this.spriteIcon.addChild(this.starLevelNode),
            this.starLevelNode.pos(this.spriteIcon.width / 2, 140, !0),
            this.starLevelNode.scale(1, 1, !0)),
            this.starLevelNode.fillByData(t.level),
            this.context.bCanShareVideo) {
                this.buttonShare.__node.visible = !1,
                this.buttonVideoShare.__node.visible = !0;
                let e = mgrChannel.getRecordRewardAmount();
                this.labelShareTip.text = `${mgrI18n.getText("vGotPartDialog.3")} ${Tools.getBigNumberStr(e)}`,
                this.boxLayoutShareConsume.visible = e > 0
            } else {
                this.buttonShare.__node.visible = mgrChannel.canShare(),
                this.buttonVideoShare.__node.visible = !1;
                let e = mgrChannel.getShareRewardAmount();
                this.labelShareTip.text = `${mgrI18n.getText("vGotPartDialog.1")} ${Tools.getBigNumberStr(e)}`,
                this.boxLayoutShareConsume.visible = e > 0
            }
            let i = mgrCfg.get_from_ad_event_db(AD_EVENT_ID.VIDEO.random_gold).param.rewards[0][1];
            this.labelAdRewardAmount.text = `+${i}`;
            let s = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.random_gold);
            this.buttonGet.__node.visible = !s,
            this.buttonAdGet.__node.visible = s,
            this.buttonClose.__node.visible = s
        }
        onTouchButtonAdGet() {
            mgrAd.triggerAdEvent(AD_EVENT_ID.VIDEO.random_gold)
        }
        onMsgSuccessed(e) {
            e.adEventId == AD_EVENT_ID.VIDEO.random_gold && this.closeDialog()
        }
    }
    class vHubRestingTipDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vHubRestingTipDialog",
            this.exportNodeNames = ["CC_buttonClose", "CC_labelContent", "CC_spriteNativeEmbed", "CC_spriteNativeIcon", "CC_labelNativeTitle", "CC_labelNativeDesc", "CC_buttonNativeGo", "CC_labelNativeGo", "CC_spriteNativeAdTag", "CC_buttonGoGarden", "CC_imageGarden", "CC_buttonGoStage", "CC_imageStage", "CC_buttonGoWeakUp", "CC_buttonGoLearn", "CC_buttonGoMotion", "CC_buttonGoEating", "CC_buttonGoRest"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonGoGarden.fOnClick = this.onTouchButtonGoGarden.bind(this),
            this.buttonGoStage.fOnClick = this.onTouchButtonGoStage.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonBack.bind(this),
            this.buttonGoWeakUp.fOnClick = this.onTouchButtonGoWeakUp.bind(this),
            this.buttonGoMotion.fOnClick = this.onTouchButtonGoMotion.bind(this),
            this.buttonGoLearn.fOnClick = this.onTouchButtonGoLearn.bind(this),
            this.buttonGoEating.fOnClick = this.onTouchButtonGoEating.bind(this),
            this.buttonGoRest.fOnClick = this.onTouchButtonGoRest.bind(this),
            this.spriteNativeEmbed.scale(0, 0),
            mgrAdNative.registerNativeBannerRefreshFun(AD_EVENT_ID.embed.resting_tip, this.refreshEmbedNative.bind(this), this.spriteNativeEmbed),
            mgrTip.showJumpOtherGameBanner(this);
            let e = mgrCfg.get_from_role_level_db(mgrInteraction.level)
              , t = mgrInteraction.energy / e.restProgressValue
              , a = mgrInteraction.eatFillValue / e.eatProgressValue
              , i = mgrInteraction.motionProgress / e.motionProgressValue
              , s = mgrInteraction.learnProgress / e.learnProgressValue
              , o = Math.min(t, a, i, s);
            mgrInteraction.restState == E_REST_STATE.rest ? (this.buttonGoWeakUp.__node.visible = !0,
            this.buttonGoRest.__node.visible = !1,
            this.buttonGoEating.__node.visible = !1,
            this.buttonGoMotion.__node.visible = !1,
            this.buttonGoLearn.__node.visible = !1) : (this.buttonGoRest.__node.visible = t == o,
            this.buttonGoEating.__node.visible = a == o,
            this.buttonGoMotion.__node.visible = i == o,
            this.buttonGoLearn.__node.visible = s == o,
            this.buttonGoWeakUp.__node.visible = !1)
        }
        onClosed() {
            super.onClosed()
        }
        refreshEmbedNative(e) {
            e ? (Tools.loadAdImg(this.spriteNativeIcon, e.url),
            this.labelNativeTitle.text = e.title,
            this.labelNativeGo.text = e.targetTitle,
            this.labelNativeDesc.text = e.desc,
            CustomTween.to(this.spriteNativeEmbed, {
                scaleX: 1,
                scaleY: 1
            }, 300).start(1)) : CustomTween.to(this.spriteNativeEmbed, {
                scaleX: 0,
                scaleY: 0
            }, 300).start(1)
        }
        onTouchButtonGoGarden() {
            mgrDirector.warpSceneWidthEffect("vGardenMainScene"),
            this.closeDialog()
        }
        onTouchButtonGoStage() {
            mgrDirector.warpSceneWidthEffect("vStageScene"),
            this.closeDialog()
        }
        onTouchButtonBack() {
            this.closeDialog()
        }
        onTouchButtonGoWeakUp() {
            mgrDirector.warpSceneWidthEffect("vRestScene"),
            this.closeDialog()
        }
        onTouchButtonGoMotion() {
            mgrDirector.warpSceneWidthEffect("vMotionMainScene"),
            this.closeDialog()
        }
        onTouchButtonGoLearn() {
            mgrDirector.warpSceneWidthEffect("vAnswerQuestionScene"),
            this.closeDialog()
        }
        onTouchButtonGoEating() {
            mgrDirector.warpSceneWidthEffect("vEatingScene"),
            this.closeDialog()
        }
        onTouchButtonGoRest() {
            mgrDirector.warpSceneWidthEffect("vRestScene"),
            this.closeDialog()
        }
    }
    class vHungryTipDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vHungryTipDialog",
            this.exportNodeNames = ["CC_labelContent", "CC_buttonClose", "CC_buttonGo", "CC_label2"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonGo.fOnClick = this.onTouchButtonGo.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            mgrSound.play(206),
            mgrTip.showJumpOtherGameBanner(this)
        }
        onClosed() {
            super.onClosed()
        }
        onTouchButtonGo() {
            mgrDirector.warpSceneWidthEffect("vEatingScene"),
            this.closeDialog()
        }
        onTouchButtonClose() {
            this.closeDialog()
        }
    }
    class vIntitleDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vIntitleDialog",
            this.exportNodeNames = ["CC_spriteTitle", "CC_labelName", "CC_buttonRandom", "CC_buttonSure", "CC_label2"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonRandom.fOnClick = this.onTouchButtonRandom.bind(this),
            this.buttonSure.fOnClick = this.onTouchButtonSure.bind(this);
            let e = mgrI18n.getLanguage();
            this.labelName.text = mgrPlayer.calcRandomName(e),
            mgrI18n.trySetI18nImage(this.spriteTitle, "art43.png")
        }
        onClosed() {
            super.onClosed()
        }
        onTouchButtonRandom() {
            let e = mgrI18n.getLanguage();
            this.labelName.text = mgrPlayer.calcRandomName(e)
        }
        onTouchButtonSure() {
            mgrPlayer.setName(this.labelName.text),
            this.closeDialog()
        }
    }
    const AD_EVENT_ID_FERTILIZER = "free_fertilizer"
      , AD_EVENT_ID_WATER = "free_water";
    var FLOWER_POT_STATE;
    !function(e) {
        e[e.locking = 1] = "locking",
        e[e.nonePlant = 2] = "nonePlant",
        e[e.waittingWater = 3] = "waittingWater",
        e[e.waittingFertilizer = 4] = "waittingFertilizer",
        e[e.growing = 5] = "growing",
        e[e.waittingGetReward = 6] = "waittingGetReward",
        e[e.waittingHarvest = 7] = "waittingHarvest"
    }(FLOWER_POT_STATE || (FLOWER_POT_STATE = {}));
    const OPERATION_TIP_ICON = {
        WARTER: "res/ui/garden/flowerpot/art07.png",
        WARTER_NOT_ENOUGH: "res/ui/garden/flowerpot/art07.png",
        FERTILIZER: "res/ui/garden/flowerpot/art04.png",
        FERTILIZER_NOT_ENOUGH: "res/ui/garden/flowerpot/art04.png",
        GOLD: "res/ui/garden/flowerpot/art12.png",
        GROWING: "res/ui/garden/flowerpot/art08.png",
        HARVEST: "res/ui/garden/flowerpot/art03.png",
        PLANT: "res/ui/garden/flowerpot/art09.png"
    };
    class vGardenFlowerpot extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vGardenFlowerpot",
            this.exportNodeNames = ["CC_spriteFlowerPot", "CC_buttonPlant", "CC_spriteLock", "CC_labelUnlockLevel", "CC_spriteAdUnlock", "CC_labelCd", "CC_buttonPaopao", "CC_progressBarPaoPao", "CC_spriteTipIcon"],
            this.bOperating = !1,
            this.width = 140,
            this.height = 200,
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.buttonPlant.fOnClick = this.onClickButtonPlant.bind(this),
            this.buttonPaopao.fOnClick = this.onClickButtonPaopao.bind(this),
            this.buttonPaopao.bTween = !1,
            this.buttonPaopao.__node.scale(0, 0),
            CustomTween.scaleForever(this.spriteTipIcon, .9, 1.1, 1e3),
            this.progressBarPaoPao.style = ULPROGRESSBAR_STYLE.ver,
            this.progressBarPaoPao.barName = this.progressBarPaoPao.owner.name,
            this.progressBarPaoPao.progress = 0,
            this.stManager = new FSMObject,
            this.stManager.registerState(FLOWER_POT_STATE.locking, this.inLocking.bind(this), this.exeLocking.bind(this), this.outLocking.bind(this)),
            this.stManager.registerState(FLOWER_POT_STATE.nonePlant, this.inNonePlant.bind(this), this.exeNonePlant.bind(this), this.outNonePlant.bind(this)),
            this.stManager.registerState(FLOWER_POT_STATE.waittingWater, this.inWaittingWater.bind(this), this.exeWaittingWater.bind(this), this.outWaittingWater.bind(this)),
            this.stManager.registerState(FLOWER_POT_STATE.waittingFertilizer, this.inWaittingFertilizer.bind(this), this.exeWaittingFertilizer.bind(this), this.outWaittingFertilizer.bind(this)),
            this.stManager.registerState(FLOWER_POT_STATE.growing, this.inGrowing.bind(this), this.exeGrowing.bind(this), this.outGrowing.bind(this)),
            this.stManager.registerState(FLOWER_POT_STATE.waittingGetReward, this.inWaittingGetReward.bind(this), this.exeWaittingGetReward.bind(this), this.outWaittingGetReward.bind(this)),
            this.stManager.registerState(FLOWER_POT_STATE.waittingHarvest, this.inWaittingHarvest.bind(this), this.exeWaittingHarvest.bind(this), this.outWaittingHarvest.bind(this)),
            Timer.callLoop(.016, ()=>{
                this.stManager.update()
            }
            , this),
            this.potId = this.context.potId,
            this.tryNextState(),
            this.registerListeners({
                MSG_SOW: this.onMsgSow.bind(this),
                MSG_GET_PLANT_REWARD: this.onMsgGetPlantReward.bind(this),
                MSG_HARVEST: this.onMsgHarvest.bind(this),
                MSG_WATER: this.onMsgWater.bind(this),
                MSG_FERTILIZER: this.onMsgFertilizer.bind(this),
                MSG_UNLOCK_FLOWERPOT: this.onMsgUnlock.bind(this),
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            })
        }
        onClosed() {}
        tryNextState() {
            let e, t = mgrGarden.getFlowerpotStateById(this.potId);
            if (t.bUnlocked) {
                if (0 == t.seedId)
                    e = FLOWER_POT_STATE.nonePlant;
                else if (t.seedId > 0)
                    if (t.bCanHarvest)
                        e = FLOWER_POT_STATE.waittingHarvest;
                    else if (t.bCanGetReward)
                        e = FLOWER_POT_STATE.waittingGetReward;
                    else if (t.stageStartTime <= 0) {
                        e = mgrCfg.get_from_plant_db(t.seedId, t.stageIndex).operationType == PLANT_OPERATION_TYPE.watering ? FLOWER_POT_STATE.waittingWater : FLOWER_POT_STATE.waittingFertilizer
                    } else
                        e = FLOWER_POT_STATE.growing
            } else
                e = FLOWER_POT_STATE.locking;
            this.stManager.getCurState() == e && this.stManager.clear(),
            this.stManager.setNextState(e),
            this.stManager.update()
        }
        refreshPlant() {
            let e = mgrGarden.getFlowerpotStateById(this.potId);
            if (0 == e.seedId)
                this.plant && this.plant.destroy();
            else if (0 != e.seedId) {
                let t = mgrCfg.get_from_plant_db(e.seedId, e.stageIndex)
                  , a = 0;
                if (0 == e.stageIndex && (a = -20),
                this.plant) {
                    let e = this.plant.__plant_id
                      , i = this.plant.__animation_id;
                    e == t.spineId ? i != t.animation && (this.plant.playAnimation(t.animation),
                    this.plant.__animation_id = t.animation) : (this.plant.destroy(),
                    this.plant = ULSkeleton.create(t.spineId),
                    this.buttonPlant.__node.addChild(this.plant),
                    this.plant.pos(this.buttonPlant.__node.width / 2, this.buttonPlant.__node.height + a),
                    this.plant.playAnimation(t.animation),
                    this.plant.__animation_id = t.animation,
                    this.plant.__plant_id = t.spineId)
                } else
                    this.plant = ULSkeleton.create(t.spineId),
                    this.buttonPlant.__node.addChild(this.plant),
                    this.plant.pos(this.buttonPlant.__node.width / 2, this.buttonPlant.__node.height + a),
                    this.plant.playAnimation(t.animation),
                    this.plant.__animation_id = t.animation,
                    this.plant.__plant_id = t.spineId
            }
        }
        inLocking() {
            this.spriteLock.scale(0, 0),
            CustomTween.delayTime(this.spriteLock, 500).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.buttonPaopao.__node.scale(0, 0);
            let e = mgrCfg.get_from_flowerpot_db(this.potId);
            this.labelUnlockLevel.text = ul.format(mgrI18n.getText("vGardenFlowerpot.2"), e.unlockLevel);
            let t = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.free_unlock_flowerpot)
              , a = mgrGarden.getCanFreeUnlockPotId()
              , i = mgrGarden.getFreeUnlockPotRemainTime();
            t && a == this.potId && i > 0 ? (this.spriteAdUnlock.visible = !0,
            this.labelCd.visible = !0) : (this.spriteAdUnlock.visible = !1,
            this.labelCd.visible = !1)
        }
        exeLocking() {
            let e = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.free_unlock_flowerpot)
              , t = mgrGarden.getCanFreeUnlockPotId()
              , a = mgrGarden.getFreeUnlockPotRemainTime();
            e && t == this.potId && a > 0 ? (this.spriteAdUnlock.visible = !0,
            this.labelCd.visible = !0) : (this.spriteAdUnlock.visible = !1,
            this.labelCd.visible = !1),
            this.labelCd.text = Tools.formatTime(a, "%M:%S")
        }
        outLocking() {}
        inNonePlant() {
            mgrGuide.registerGuideNode(`vGardenScene.flowerPot ${this.potId}`, this.buttonPlant.__node),
            -1 == this.stManager.getLastState() ? (this.spriteLock.scale(0, 0),
            this.buttonPaopao.__node.scale(0, 0)) : this.stManager.getLastState() == FLOWER_POT_STATE.waittingHarvest ? (this.refreshPlant(),
            CustomTween.to(this.buttonPaopao.__node, {
                scaleX: 0,
                scaleY: 0
            }, 300).callback(()=>{}
            ).start(1)) : this.stManager.getLastState() == FLOWER_POT_STATE.locking && CustomTween.to(this.spriteLock, {
                scaleX: 0,
                scaleY: 0
            }, 300).start(1)
        }
        exeNonePlant() {}
        outNonePlant() {}
        inWaittingWater() {
            if (mgrGuide.registerGuideNode(`vGardenScene.flowerPot ${this.potId}Water`, this.buttonPaopao.__node),
            -1 == this.stManager.getLastState()) {
                this.spriteLock.scale(0, 0),
                this.buttonPlant.__node.scale(1, 1),
                CustomTween.delayTime(this.buttonPaopao.__node, 500).to({
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).start(1),
                this.progressBarPaoPao.progress = 0;
                let e = mgrGarden.getFlowerpotStateById(this.potId);
                mgrCfg.get_from_plant_db(e.seedId, e.stageIndex);
                this.refreshPlant(),
                CustomTween.to(this.spriteTipIcon, {
                    scaleX: 0,
                    scaleY: 0
                }, 300).callback(()=>{
                    let e = mgrGarden.getFlowerpotStateById(this.potId);
                    mgrCfg.get_from_plant_db(e.seedId, e.stageIndex);
                    Tools.loadImg(this.spriteTipIcon, OPERATION_TIP_ICON.WARTER, !0)
                }
                ).to({
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).callback(()=>{
                    this.spriteTipIcon.scale(1, 1)
                }
                ).start(1)
            } else
                this.stManager.getLastState() == FLOWER_POT_STATE.nonePlant ? (this.refreshPlant(),
                this.progressBarPaoPao.progress = 0,
                CustomTween.to(this.buttonPaopao.__node, {
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).start(1),
                CustomTween.to(this.spriteTipIcon, {
                    scaleX: 0,
                    scaleY: 0
                }, 300).callback(()=>{
                    let e = mgrGarden.getFlowerpotStateById(this.potId);
                    mgrCfg.get_from_plant_db(e.seedId, e.stageIndex);
                    Tools.loadImg(this.spriteTipIcon, OPERATION_TIP_ICON.WARTER, !0)
                }
                ).to({
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).callback(()=>{
                    this.spriteTipIcon.scale(1, 1)
                }
                ).start(1)) : this.stManager.getLastState() == FLOWER_POT_STATE.growing ? (this.refreshPlant(),
                this.progressBarPaoPao.progress = 0,
                CustomTween.to(this.spriteTipIcon, {
                    scaleX: 0,
                    scaleY: 0
                }, 300).callback(()=>{
                    let e = mgrGarden.getFlowerpotStateById(this.potId);
                    mgrCfg.get_from_plant_db(e.seedId, e.stageIndex);
                    Tools.loadImg(this.spriteTipIcon, OPERATION_TIP_ICON.WARTER, !0)
                }
                ).to({
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).callback(()=>{
                    this.spriteTipIcon.scale(1, 1)
                }
                ).start(1)) : this.stManager.getLastState() == FLOWER_POT_STATE.waittingGetReward ? (this.refreshPlant(),
                this.progressBarPaoPao.progress = 0,
                CustomTween.to(this.spriteTipIcon, {
                    scaleX: 0,
                    scaleY: 0
                }, 300).callback(()=>{
                    let e = mgrGarden.getFlowerpotStateById(this.potId);
                    mgrCfg.get_from_plant_db(e.seedId, e.stageIndex);
                    Tools.loadImg(this.spriteTipIcon, OPERATION_TIP_ICON.WARTER, !0)
                }
                ).to({
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).callback(()=>{
                    this.spriteTipIcon.scale(1, 1)
                }
                ).start(1)) : (this.refreshPlant(),
                this.progressBarPaoPao.progress = 0,
                CustomTween.to(this.spriteTipIcon, {
                    scaleX: 0,
                    scaleY: 0
                }, 300).callback(()=>{
                    let e = mgrGarden.getFlowerpotStateById(this.potId);
                    mgrCfg.get_from_plant_db(e.seedId, e.stageIndex);
                    Tools.loadImg(this.spriteTipIcon, OPERATION_TIP_ICON.FERTILIZER, !0)
                }
                ).to({
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).callback(()=>{
                    this.spriteTipIcon.scale(1, 1)
                }
                ).start(1))
        }
        exeWaittingWater() {}
        outWaittingWater() {}
        inWaittingFertilizer() {
            if (mgrGuide.registerGuideNode(`vGardenScene.flowerPot ${this.potId}Fertilizer`, this.buttonPaopao.__node),
            -1 == this.stManager.getLastState()) {
                this.spriteLock.scale(0, 0),
                this.buttonPlant.__node.scale(1, 1),
                CustomTween.delayTime(this.buttonPaopao.__node, 500).to({
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).start(1),
                this.progressBarPaoPao.progress = 0;
                let e = mgrGarden.getFlowerpotStateById(this.potId);
                mgrCfg.get_from_plant_db(e.seedId, e.stageIndex);
                this.refreshPlant(),
                CustomTween.to(this.spriteTipIcon, {
                    scaleX: 0,
                    scaleY: 0
                }, 300).callback(()=>{
                    let e = mgrGarden.getFlowerpotStateById(this.potId);
                    mgrCfg.get_from_plant_db(e.seedId, e.stageIndex);
                    Tools.loadImg(this.spriteTipIcon, OPERATION_TIP_ICON.FERTILIZER, !0)
                }
                ).to({
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).callback(()=>{
                    this.spriteTipIcon.scale(1, 1)
                }
                ).start(1)
            } else if (this.stManager.getLastState() == FLOWER_POT_STATE.nonePlant) {
                CustomTween.to(this.buttonPlant.__node, {
                    scaleX: 1,
                    scaleY: 1
                }, 300).start(1),
                CustomTween.to(this.buttonPaopao.__node, {
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).start(1);
                let e = mgrGarden.getFlowerpotStateById(this.potId);
                mgrCfg.get_from_plant_db(e.seedId, e.stageIndex);
                this.refreshPlant(),
                CustomTween.to(this.spriteTipIcon, {
                    scaleX: 0,
                    scaleY: 0
                }, 300).callback(()=>{
                    let e = mgrGarden.getFlowerpotStateById(this.potId);
                    mgrCfg.get_from_plant_db(e.seedId, e.stageIndex);
                    Tools.loadImg(this.spriteTipIcon, OPERATION_TIP_ICON.FERTILIZER, !0)
                }
                ).to({
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).callback(()=>{
                    this.spriteTipIcon.scale(1, 1)
                }
                ).start(1)
            } else
                this.stManager.getLastState() == FLOWER_POT_STATE.growing ? (this.refreshPlant(),
                this.progressBarPaoPao.progress = 0,
                CustomTween.to(this.spriteTipIcon, {
                    scaleX: 0,
                    scaleY: 0
                }, 300).callback(()=>{
                    let e = mgrGarden.getFlowerpotStateById(this.potId);
                    mgrCfg.get_from_plant_db(e.seedId, e.stageIndex);
                    Tools.loadImg(this.spriteTipIcon, OPERATION_TIP_ICON.FERTILIZER, !0)
                }
                ).to({
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).callback(()=>{
                    this.spriteTipIcon.scale(1, 1)
                }
                ).start(1)) : (this.stManager.getLastState(),
                FLOWER_POT_STATE.waittingGetReward,
                this.refreshPlant(),
                this.progressBarPaoPao.progress = 0,
                CustomTween.to(this.spriteTipIcon, {
                    scaleX: 0,
                    scaleY: 0
                }, 300).callback(()=>{
                    let e = mgrGarden.getFlowerpotStateById(this.potId);
                    mgrCfg.get_from_plant_db(e.seedId, e.stageIndex);
                    Tools.loadImg(this.spriteTipIcon, OPERATION_TIP_ICON.FERTILIZER, !0)
                }
                ).to({
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).callback(()=>{
                    this.spriteTipIcon.scale(1, 1)
                }
                ).start(1))
        }
        exeWaittingFertilizer() {}
        outWaittingFertilizer() {}
        inGrowing() {
            -1 == this.stManager.getLastState() ? (this.spriteLock.scale(0, 0),
            this.buttonPlant.__node.scale(1, 1),
            CustomTween.delayTime(this.buttonPaopao.__node, 500).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.progressBarPaoPao.progress = 0,
            Tools.loadImg(this.spriteTipIcon, OPERATION_TIP_ICON.GROWING, !0),
            this.refreshPlant()) : CustomTween.to(this.spriteTipIcon, {
                scaleX: 0,
                scaleY: 0
            }, 300).callback(()=>{
                Tools.loadImg(this.spriteTipIcon, OPERATION_TIP_ICON.GROWING, !0)
            }
            ).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1)
        }
        exeGrowing() {
            let e = mgrGarden.getCurStageProgress(this.potId);
            this.progressBarPaoPao.progress = e,
            mgrGarden.getFlowerpotStateById(this.potId).bCanGetReward && this.stManager && this.stManager.setNextState(FLOWER_POT_STATE.waittingGetReward)
        }
        outGrowing() {}
        inWaittingGetReward() {
            mgrGuide.registerGuideNode(`vGardenScene.flowerPot ${this.potId}Reward`, this.buttonPaopao.__node),
            -1 == this.stManager.getLastState() ? (this.spriteLock.scale(0, 0),
            this.buttonPlant.__node.scale(1, 1),
            CustomTween.delayTime(this.buttonPaopao.__node, 500).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.progressBarPaoPao.progress = 0,
            Tools.loadImg(this.spriteTipIcon, OPERATION_TIP_ICON.GOLD, !0),
            this.refreshPlant()) : (this.refreshPlant(),
            this.progressBarPaoPao.progress = 0,
            CustomTween.to(this.spriteTipIcon, {
                scaleX: 0,
                scaleY: 0
            }, 300).callback(()=>{
                Tools.loadImg(this.spriteTipIcon, OPERATION_TIP_ICON.GOLD, !0)
            }
            ).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1))
        }
        exeWaittingGetReward() {}
        outWaittingGetReward() {}
        inWaittingHarvest() {
            mgrGuide.registerGuideNode(`vGardenScene.flowerPot ${this.potId}Harvest`, this.buttonPaopao.__node),
            -1 == this.stManager.getLastState() ? (this.spriteLock.scale(0, 0),
            this.buttonPlant.__node.scale(1, 1),
            CustomTween.delayTime(this.buttonPaopao.__node, 500).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.progressBarPaoPao.progress = 0,
            Tools.loadImg(this.spriteTipIcon, OPERATION_TIP_ICON.HARVEST, !0),
            this.refreshPlant()) : (this.refreshPlant(),
            CustomTween.to(this.spriteTipIcon, {
                scaleX: 0,
                scaleY: 0
            }, 300).callback(()=>{
                Tools.loadImg(this.spriteTipIcon, OPERATION_TIP_ICON.HARVEST, !0)
            }
            ).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1))
        }
        exeWaittingHarvest() {}
        outWaittingHarvest() {}
        onClickButtonPlant() {
            if (this.stManager.getCurState() == FLOWER_POT_STATE.locking) {
                if (mgrGuide.isGuiding())
                    return;
                let e = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.free_unlock_flowerpot)
                  , t = mgrGarden.getCanFreeUnlockPotId()
                  , a = mgrGarden.getFreeUnlockPotRemainTime();
                if (e && t == this.potId && a > 0)
                    mgrAd.triggerAdEvent(AD_EVENT_ID.VIDEO.free_unlock_flowerpot, null, !0);
                else {
                    let e = mgrCfg.get_from_flowerpot_db(this.potId);
                    mgrTip.showMsgTip(ul.format(mgrI18n.getText("vGardenFlowerpot.3"), e.unlockLevel))
                }
            } else
                this.onClickButtonPaopao()
        }
        tryShowOneKeyFinished() {
            return !!mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.one_key_harvest) && (mgrDirector.openDialog("vGardenAdHarvestDialog", {
                cancleCallback: ()=>{
                    mgrAd.markFinished(AD_EVENT_ID.VIDEO.one_key_harvest),
                    this.onClickButtonPaopao()
                }
                ,
                onAdCallback: ()=>{
                    mgrGarden.mature(this.potId),
                    this.tryNextState()
                }
            }),
            !0)
        }
        onClickButtonPaopao() {
            if (this.bOperating)
                return;
            let e = this.stManager.getCurState()
              , t = mgrGarden.getFlowerpotStateById(this.potId);
            if (e == FLOWER_POT_STATE.waittingWater) {
                if (this.tryShowOneKeyFinished())
                    return;
                if (mgrGuide.unregisterGuideNode(`vGardenScene.flowerPot ${this.potId}Water`),
                this.sendMsg("MSG_GUIDE_EVENT", {
                    id: "vGardenScene.clickFlowerPot1Water"
                }),
                mgrPlayer.getItemAmount(Const.ITEM_ID_GARDEN_WATER) < mgrCfg.get_from_plant_db(t.seedId, t.stageIndex).operationConsume)
                    return void mgrShop.tipItemNotEnough(Const.ITEM_ID_GARDEN_WATER);
                mgrSound.play(112),
                this.bOperating = !0,
                CustomTween.to(this.buttonPaopao.__node, {
                    scaleX: 0,
                    scaleY: 0
                }, 300).start(1);
                let e = ULSkeleton.create("ui_jiaoshui")
                  , a = this.parent.parent.parent;
                a.addChild(e);
                let i = a.globalToLocal(this.localToGlobal(new Laya.Point(this.width / 2 + 80,0)));
                e.pos(i.x, i.y),
                e.playAnimation("idle2", !1, ()=>{
                    e.playAnimation("idle3", !1, ()=>{
                        CustomTween.to(e, {
                            alpha: 0
                        }, 300).start(1),
                        this.spriteTipIcon.scale(0, 0),
                        CustomTween.to(this.buttonPaopao.__node, {
                            scaleX: 1,
                            scaleY: 1
                        }, 300, Laya.Ease.backOut).start(1),
                        this.bOperating = !1,
                        mgrGarden.watering(this.potId),
                        this.tryNextState()
                    }
                    )
                }
                )
            } else if (e == FLOWER_POT_STATE.waittingFertilizer) {
                if (this.tryShowOneKeyFinished())
                    return;
                if (this.sendMsg("MSG_GUIDE_EVENT", {
                    id: `vGardenScene.clickFlowerPot ${this.potId}Fertilizer`
                }),
                mgrPlayer.getItemAmount(Const.ITEM_ID_GARDEN_FERTILIZER) < mgrCfg.get_from_plant_db(t.seedId, t.stageIndex).operationConsume)
                    return void mgrShop.tipItemNotEnough(Const.ITEM_ID_GARDEN_FERTILIZER);
                mgrSound.play(111),
                this.bOperating = !0,
                CustomTween.to(this.buttonPaopao.__node, {
                    scaleX: 0,
                    scaleY: 0
                }, 300).start(1);
                let e = ULSkeleton.create("ui_shifei")
                  , a = this.parent.parent.parent;
                a.addChild(e);
                let i = a.globalToLocal(this.localToGlobal(new Laya.Point(this.width / 2 + 80,0)));
                e.pos(i.x, i.y),
                e.playAnimation("idle2", !1, ()=>{
                    e.playAnimation("idle3", !1, ()=>{
                        CustomTween.to(e, {
                            alpha: 0
                        }, 300).start(1),
                        this.spriteTipIcon.scale(0, 0),
                        CustomTween.to(this.buttonPaopao.__node, {
                            scaleX: 1,
                            scaleY: 1
                        }, 300, Laya.Ease.backOut).start(1),
                        this.bOperating = !1,
                        mgrGarden.feed(this.potId),
                        this.tryNextState()
                    }
                    )
                }
                )
            } else if (e == FLOWER_POT_STATE.waittingGetReward) {
                mgrGuide.unregisterGuideNode(`vGardenScene.flowerPot ${this.potId}Reward`),
                this.sendMsg("MSG_GUIDE_EVENT", {
                    id: `vGardenScene.clickFlowerPot ${this.potId}Reward`
                });
                let e = mgrGarden.getStageReward(this.potId);
                mgrTip.showItemTip(Const.ITEM_ID_GOLD, e[0].amount),
                mgrSound.play(110);
                for (let e = 1; e <= Tools.random(7, 10); e++) {
                    let e = new Laya.Image(mgrCfg.get_from_item_template_db(Const.ITEM_ID_GOLD).icon);
                    e.size(30, 30),
                    e.anchorX = .5,
                    e.anchorY = .5;
                    let t = this.parent.parent.parent;
                    t.add3DEffectAtFront(MODEL_ID.effect.eff_ui_jinbi_loop, e),
                    t.addChild(e),
                    e.zOrder = 1e3;
                    let a = t.globalToLocal(this.spriteTipIcon.localToGlobal(new Laya.Point(this.spriteTipIcon.width / 2,this.spriteTipIcon.height / 2)));
                    e.pos(a.x, a.y);
                    let i = new Laya.Vector2(a.x + Tools.random(-150, 50),a.y + Tools.random(100, 130))
                      , s = new Laya.Vector2((a.x + i.x) / 2,(a.y + i.y) / 2 - 200);
                    CustomTween.bezierCurveMotion(a, s, i, e, 500).bezierCurveMotion(i, new Laya.Vector2(i.x,i.y - 30), i, 300).delayTime(300).callback(()=>{
                        let a = this.context.fGetGoldWorldPos();
                        a = t.globalToLocal(a);
                        let s = new Laya.Vector2((i.x + a.x) / 2 + Tools.random(-200, 200),(i.y + a.y) / 2);
                        CustomTween.bezierCurveMotion(i, s, a, e, 500).start(1),
                        CustomTween.to(e, {
                            scaleX: .5,
                            scaleY: .5,
                            alpha: 0
                        }, 500).callback(()=>{
                            this.sendMsg("MSG_GARDEN_GOLD_FLY_END"),
                            e.destroy()
                        }
                        ).start(1)
                    }
                    ).start(1)
                }
                this.tryNextState()
            } else if (e == FLOWER_POT_STATE.waittingHarvest)
                this.sendMsg("MSG_GUIDE_EVENT", {
                    id: `vGardenScene.clickFlowerPot ${this.potId}Harvest`
                }),
                this.sendMsg("MSG_HARVEST", {
                    potId: this.potId
                });
            else if (e == FLOWER_POT_STATE.nonePlant) {
                if (mgrGuide.isGuiding() && mgrGuide.curExecutingGuideId <= 612 && 1 != this.potId)
                    return;
                mgrDirector.openDialog("vSeedSelectDialog", {
                    potId: this.potId
                }),
                this.sendMsg("MSG_GUIDE_EVENT", {
                    id: `vGardenScene.clickFlowerPot ${this.potId}`
                })
            } else
                e == FLOWER_POT_STATE.growing && mgrTip.showMsgTip(`${mgrI18n.getText("vGardenFlowerpot.4")}`)
        }
        onMsgSow(e) {
            let t = e.potId
              , a = e.seedId;
            if (t == this.potId) {
                mgrSound.play(111),
                mgrGarden.plant(this.potId, a),
                this.bOperating = !0;
                let e = ULSkeleton.create("ui_zhongzi")
                  , t = this.parent.parent.parent;
                t.addChild(e);
                let i = t.globalToLocal(this.localToGlobal(new Laya.Point(this.width / 2 + 70,80)));
                e.pos(i.x, i.y),
                e.playAnimation("idle2", !1, ()=>{
                    e.playAnimation("idle3", !1, ()=>{
                        CustomTween.to(e, {
                            alpha: 0
                        }, 300).start(1),
                        this.bOperating = !1,
                        this.tryNextState()
                    }
                    )
                }
                )
            }
        }
        onMsgGetPlantReward(e) {
            e.potId == this.potId && this.onClickButtonPaopao()
        }
        onMsgHarvest(e) {
            if (e.potId == this.potId) {
                let e = mgrGarden.getFlowerpotStateById(this.potId).seedId
                  , t = mgrGarden.harvest(this.potId)
                  , a = t[0].itemId
                  , i = t[0].amount;
                this.tryNextState(),
                mgrDirector.openDialog("vGotCardPackDialog", {
                    itemId: a,
                    amount: i,
                    seedId: e
                }, !0)
            }
        }
        onMsgWater(e) {
            e.potId == this.potId && this.onClickButtonPaopao()
        }
        onMsgFertilizer(e) {
            e.potId == this.potId && this.onClickButtonPaopao()
        }
        onMsgUnlock(e) {
            e.potId == this.potId && this.tryNextState()
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID.VIDEO.free_unlock_flowerpot && (mgrGarden.unlockFlowerpot(mgrGarden.getCanFreeUnlockPotId()),
            this.tryNextState())
        }
    }
    class vSmallNearbyRankItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vSmallNearbyRankItem",
            this.exportNodeNames = ["CC_spriteCrown1", "CC_spriteCrown2", "CC_spriteCrown3", "CC_labelRank", "CC_labelName"],
            this.width = 120,
            this.height = 30,
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.data && this.fillByData(this.data)
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            this.spriteCrown1.visible = 1 == this.data.player.rank,
            this.spriteCrown2.visible = 2 == this.data.player.rank,
            this.spriteCrown3.visible = 3 == this.data.player.rank;
            let t = `${this.data.player.rank}`;
            1 == this.data.player.rank && (t = ""),
            2 == this.data.player.rank && (t = ""),
            3 == this.data.player.rank && (t = ""),
            this.labelRank.text = t,
            this.labelName.text = this.data.player.name,
            this.data.player.uid == mgrPlayer.getUid() ? this.labelName.color = "#fff73b" : this.labelName.color = "#ffffff"
        }
    }
    class vSmallNearbyRank extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vSmallNearbyRank",
            this.exportNodeNames = ["CC_spriteBg", "CC_spriteTag", "CC_spriteUnselectedRope", "CC_spriteUnselectedBall", "CC_spriteRope", "CC_spriteBall", "CC_spriteStage", "CC_spriteLearn", "CC_spriteGarden", "CC_buttonGo", "CC_boxList"],
            this.width = 131,
            this.height = 258,
            this.anchorX = .5,
            this.anchorY = .5
        }
        onOpened() {
            Tools.registerTouchHander(this.spriteTag, e=>{
                e.isEnd && this.onTouchButonTag()
            }
            ),
            this.buttonGo.fOnClick = (()=>{
                mgrDirector.openDialog("vNearbyRankDialog", {
                    rankId: this.selectedRankId
                }, !0)
            }
            ),
            this.buildUi(),
            this.fillData(),
            this.registerListeners({
                MSG_NEARBY_RANK_REFRESH: this.onMsgNearbyRanRefresh.bind(this)
            })
        }
        onClosed() {}
        buildUi() {
            this.reuseList = new ReuseList(1,0,5),
            this.reuseList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseList),
            this.reuseList.setItemClass(vSmallNearbyRankItem),
            this.reuseList.setVerticalMoveEnable(!0)
        }
        fillData() {
            this.selectRank(this.context.rankId)
        }
        selectRank(e) {
            this.selectedRankId = e;
            let t = []
              , a = mgrOfflineNearbyRank.getPlayersByRankId(e);
            for (let e = 0; e < a.length; e++) {
                const i = a[e];
                t.push({
                    player: i
                })
            }
            this.reuseList.setDatas(t),
            this.reuseList.setScroll(0),
            e == eNearbyRankId.playBall ? (this.spriteUnselectedBall.visible = !1,
            this.spriteUnselectedRope.visible = !0,
            this.spriteBall.visible = !0,
            this.spriteRope.visible = !0,
            this.spriteStage.visible = !1,
            this.spriteGarden.visible = !1,
            this.spriteLearn.visible = !1) : this.selectedRankId == eNearbyRankId.ropeSkiping ? (this.spriteUnselectedRope.visible = !1,
            this.spriteUnselectedBall.visible = !0,
            this.spriteBall.visible = !0,
            this.spriteRope.visible = !0,
            this.spriteStage.visible = !1,
            this.spriteGarden.visible = !1,
            this.spriteLearn.visible = !1) : this.selectedRankId == eNearbyRankId.garden ? (this.spriteUnselectedRope.visible = !1,
            this.spriteUnselectedBall.visible = !1,
            this.spriteBall.visible = !1,
            this.spriteRope.visible = !1,
            this.spriteStage.visible = !1,
            this.spriteGarden.visible = !0,
            this.spriteLearn.visible = !1) : this.selectedRankId == eNearbyRankId.learn ? (this.spriteUnselectedRope.visible = !1,
            this.spriteUnselectedBall.visible = !1,
            this.spriteBall.visible = !1,
            this.spriteRope.visible = !1,
            this.spriteStage.visible = !1,
            this.spriteGarden.visible = !1,
            this.spriteLearn.visible = !0) : (this.spriteUnselectedRope.visible = !1,
            this.spriteUnselectedBall.visible = !1,
            this.spriteBall.visible = !1,
            this.spriteRope.visible = !1,
            this.spriteStage.visible = !0,
            this.spriteGarden.visible = !1,
            this.spriteLearn.visible = !1)
        }
        onTouchButonTag() {
            this.selectedRankId == eNearbyRankId.playBall ? this.selectRank(eNearbyRankId.ropeSkiping) : this.selectedRankId == eNearbyRankId.ropeSkiping && this.selectRank(eNearbyRankId.playBall)
        }
        onMsgNearbyRanRefresh() {
            this.fillData()
        }
    }
    const AD_EVENT_ID_FERTILIZER$1 = "free_fertilizer"
      , AD_EVENT_ID_WATER$1 = "free_water"
      , AD_EVENT_ID_GOLD = "free_gold";
    class vGardenMainScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vGardenMainScene",
            this.exportNodeNames = ["CC_spriteCloud1", "CC_spriteCloud2", "CC_spriteCloud3", "CC_spriteCloud4", "CC_spriteCloud5", "CC_spriteBg", "CC_imageRoot1", "CC_imageRoot2", "CC_imageRoot3", "CC_imageRoot4", "CC_imageRoot5", "CC_imageRoot6", "CC_imageRoot7", "CC_imageRoot8", "CC_buttonCard", "CC_spriteCard", "CC_buttonCardIllustrateBook", "CC_spriteCardIllustrateBook", "CC_buttonAchievement", "CC_spriteAchievement", "CC_boxTop", "CC_buttonWater", "CC_spriteWarterAdd", "CC_labelWaterAmount", "CC_buttonFertilizer", "CC_spriteFertilizerAdd", "CC_labelFertilizerAmount", "CC_buttonGold", "CC_spriteGoldAdd", "CC_labelGoldAmount", "CC_buttonBack", "CC_spriteBuffterfly1", "CC_spriteBuffterfly2", "CC_spriteBuffterfly3", "CC_spriteBuffterfly4", "CC_spriteBuffterfly5", "CC_spriteBuffterfly6", "CC_buttonExtract", "CC_spriteLight1", "CC_spriteLight2", "CC_progressBarExtract"],
            vGardenMainScene.instance = this
        }
        onOpened() {
            super.onOpened(),
            this.buttonBack.fOnClick = (()=>{
                mgrDirector.warpSceneWidthEffect("vHubScene"),
                this.sendMsg("MSG_GUIDE_EVENT", {
                    id: "vGardenScene.clickButtonBack"
                })
            }
            ),
            this.buttonGold.fOnClick = this.onTouchButtonGoldAdd.bind(this),
            this.buttonWater.fOnClick = this.onTouchButtonWaterAdd.bind(this),
            this.buttonFertilizer.fOnClick = this.onTouchButtonFertilizerAdd.bind(this),
            this.buttonCard.fOnClick = this.onTouchButtonCard.bind(this),
            this.buttonCardIllustrateBook.fOnClick = this.onTouchButtonCardIllustrateBook.bind(this),
            this.buttonAchievement.fOnClick = this.onTouchButtonAchievement.bind(this),
            this.buttonExtract.fOnClick = this.onTouchButtonExtract.bind(this),
            this.progressBarExtract.style = ULPROGRESSBAR_STYLE.ver,
            this.buildUi(),
            this.fillData(),
            this.fadeIn(),
            this.addButterFlyEffect(),
            this.onTimerLoop(),
            Timer.callLoop(1, this.onTimerLoop.bind(this), this),
            mgrGuide.registerGuideNode("vGardenScene.buttonBack", this.buttonBack.__node),
            mgrGuide.registerGuideNode("vGardenScene.buttonAchievement", this.buttonAchievement.__node),
            this.registerListeners({
                MSG_GARDEN_BACK_BUTTON_HIDE: ()=>{
                    CustomTween.to(this.buttonBack.__node, {
                        x: this.buttonBack.__node.x - 100
                    }, 300).start(1),
                    CustomTween.to(this.nearByRank, {
                        x: this.nearByRank.x - 300
                    }, 300).start(1),
                    CustomTween.to(this.buttonCardIllustrateBook.__node, {
                        x: this.buttonCardIllustrateBook.__node.x + 100
                    }, 300).start(1),
                    CustomTween.to(this.buttonCard.__node, {
                        x: this.buttonCard.__node.x + 100
                    }, 300).start(1),
                    CustomTween.to(this.buttonAchievement.__node, {
                        x: this.buttonAchievement.__node.x + 100
                    }, 300).start(1),
                    this.spriteGoldAdd.visible = !1,
                    this.spriteWarterAdd.visible = !1,
                    this.spriteFertilizerAdd.visible = !1
                }
                ,
                MSG_GARDEN_BACK_BUTTON_SHOW: ()=>{
                    CustomTween.to(this.buttonBack.__node, {
                        x: this.buttonBack.__node.x + 100
                    }, 300).start(1),
                    CustomTween.to(this.nearByRank, {
                        x: this.nearByRank.x + 300
                    }, 300).start(1),
                    CustomTween.to(this.buttonCardIllustrateBook.__node, {
                        x: this.buttonCardIllustrateBook.__node.x - 100
                    }, 300).start(1),
                    CustomTween.to(this.buttonCard.__node, {
                        x: this.buttonCard.__node.x - 100
                    }, 300).start(1),
                    CustomTween.to(this.buttonAchievement.__node, {
                        x: this.buttonAchievement.__node.x - 100
                    }, 300).start(1)
                }
                ,
                MSG_GARDEN_GOLD_FLY_END: ()=>{
                    CustomTween.to(this.buttonGold.__node, {
                        scaleX: 1.2,
                        scaleY: 1.2
                    }, 150).to({
                        scaleX: 1,
                        scaleY: 1
                    }, 150).start(1)
                }
                ,
                MSG_CLOSE_GOT_CARD_DIALOG: this.onMsgCloseGotCardDialog.bind(this)
            }),
            mgrSound.play(2),
            mgrSdk.staticPointEvent(7002),
            mgrI18n.trySetI18nImage(this.spriteCard, "art66.png"),
            mgrI18n.trySetI18nImage(this.spriteCardIllustrateBook, "art75.png"),
            mgrI18n.trySetI18nImage(this.spriteAchievement, "art69.png")
        }
        onClosed() {
            super.onClosed(),
            vGardenMainScene.instance = null
        }
        addButterFlyEffect() {
            let e = ()=>{
                let e = [{
                    x: [-100, 0],
                    y: [0, mgrDirector.height],
                    widget: 1
                }, {
                    x: [mgrDirector.width, mgrDirector.width + 100],
                    y: [0, mgrDirector.height],
                    widget: 1
                }]
                  , t = Tools.RoundTableProbability(e, "widget")
                  , a = Tools.random(t.x[0], t.x[1])
                  , i = Tools.random(t.y[0], t.y[1])
                  , s = new Laya.Vector2(Tools.random(100, mgrDirector.width - 100),Tools.random(200, mgrDirector.height - 200));
                for (let e = 1; e <= 8; e++) {
                    let t = mgrGarden.getFlowerpotStateById(e);
                    if (t.bUnlocked && 0 == t.seedId) {
                        let t = this[`imageRoot ${e}`];
                        s = new Laya.Vector2(t.x + Tools.random(-30, 30),t.y + Tools.random(-15, 15));
                        break
                    }
                }
                let o = Tools.RoundTableProbability(e, "widget")
                  , n = Tools.random(o.x[0], o.x[1])
                  , r = Tools.random(o.y[0], o.y[1])
                  , l = ULSkeleton.create(`80hudie_ ${Tools.random(1, 3)}`);
                this.addChild(l),
                l.pos(a, i),
                l.playAnimation("fly");
                let h = .25 * Math.random() + .25;
                l.scale(h, h),
                s.x - a > 0 ? l.scaleX = h : l.scaleX = -h,
                CustomTween.to(l, {
                    x: s.x,
                    y: s.y
                }, 1e3 * Tools.random(5, 8)).callback(()=>{
                    l.playAnimation("idle")
                }
                ).delayTime(1e3 * Tools.random(3, 10)).callback(()=>{
                    l.playAnimation("fly"),
                    n - s.x > 0 ? l.scaleX = h : l.scaleX = -h
                }
                ).to({
                    x: n,
                    endPosY: r
                }, 1e3 * Tools.random(3, 4)).callback(()=>{
                    l.destroy()
                }
                ).start(1)
            }
            ;
            Timer.callLoop(5, ()=>{
                e()
            }
            , this),
            e(),
            e(),
            e(),
            e()
        }
        fadeIn() {
            Layout.widget(.5, 0, this.boxTop, {
                x: .5,
                y: 0
            }),
            Layout.widget(mgrDirector.width - 10, -1, this.buttonCard.__node, {
                x: 1,
                y: .5
            }),
            Layout.widget(mgrDirector.width - 10, -1, this.buttonCardIllustrateBook.__node, {
                x: 1,
                y: .5
            }),
            Layout.widget(mgrDirector.width - 10, -1, this.buttonAchievement.__node, {
                x: 1,
                y: .5
            }),
            Layout.widget(10, -1, this.buttonBack.__node),
            Layout.widget(.5, mgrDirector.height - 50, this.buttonExtract.__node, {
                x: .5,
                y: 1
            }),
            CustomTween.from(this.boxTop, {
                y: this.boxTop.y - 100
            }, 300, Laya.Ease.backOut).start(1),
            this.buttonCard.__node.x += 100,
            CustomTween.delayTime(this.buttonCard.__node, 800).to({
                x: this.buttonCard.__node.x - 100
            }, 300, Laya.Ease.backOut).start(1),
            this.buttonCardIllustrateBook.__node.x += 100,
            CustomTween.delayTime(this.buttonCardIllustrateBook.__node, 800).to({
                x: this.buttonCardIllustrateBook.__node.x - 100
            }, 300, Laya.Ease.backOut).start(1),
            this.buttonAchievement.__node.x += 100,
            CustomTween.delayTime(this.buttonAchievement.__node, 800).to({
                x: this.buttonAchievement.__node.x - 100
            }, 300, Laya.Ease.backOut).start(1),
            this.buttonExtract.__node.scale(0, 0),
            CustomTween.delayTime(this.buttonExtract.__node, 800).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).callback(()=>{
                CustomTween.rotateForever(this.spriteLight2, 8e3)
            }
            ).start(1);
            CustomTween.to(this.spriteCloud1, {
                x: 868
            }, (768 - this.spriteCloud1.x) / 50 * 1e3).to({
                x: -444
            }, 0).to({
                x: this.spriteCloud1.x
            }, (this.spriteCloud1.x + 444) / 50 * 1e3).start(0),
            CustomTween.to(this.spriteCloud2, {
                x: 868
            }, (768 - this.spriteCloud2.x) / 50 * 1e3).to({
                x: -444
            }, 0).to({
                x: this.spriteCloud2.x
            }, (this.spriteCloud2.x + 444) / 50 * 1e3).start(0),
            CustomTween.to(this.spriteCloud3, {
                x: 868
            }, (768 - this.spriteCloud3.x) / 35 * 1e3).to({
                x: -444
            }, 0).to({
                x: this.spriteCloud3.x
            }, (this.spriteCloud3.x + 444) / 35 * 1e3).start(0),
            CustomTween.to(this.spriteCloud4, {
                x: 868
            }, (768 - this.spriteCloud4.x) / 25 * 1e3).to({
                x: -444
            }, 0).to({
                x: this.spriteCloud4.x
            }, (this.spriteCloud4.x + 444) / 25 * 1e3).start(0),
            CustomTween.to(this.spriteCloud5, {
                x: 868
            }, (768 - this.spriteCloud5.x) / 15 * 1e3).to({
                x: -444
            }, 0).to({
                x: this.spriteCloud5.x
            }, (this.spriteCloud5.x + 444) / 15 * 1e3).start(0)
        }
        buildUi() {
            this.nearByRank = new vSmallNearbyRank({
                rankId: eNearbyRankId.garden
            }),
            this.addChild(this.nearByRank),
            Layout.widget(0, .2, this.nearByRank, {
                x: 0,
                y: .5
            }),
            this.nearByRank.x -= 300,
            CustomTween.delayTime(this.nearByRank, 800).to({
                x: this.nearByRank.x + 300
            }, 300, Laya.Ease.backOut).start(1);
            let e = ULSkeleton.create("cj_huayuan");
            e.playAnimation("idle"),
            this.nodeResource.addChild(e),
            e.pos(this.width / 2, this.height / 2)
        }
        fillData() {
            for (let e = 1; e <= 8; e++) {
                let t = new vGardenFlowerpot({
                    potId: e,
                    fGetGoldWorldPos: ()=>this.buttonGold.__node.localToGlobal(new Laya.Point(5,15))
                })
                  , a = this[`imageRoot ${e}`];
                a.zOrder = 99,
                a.addChild(t)
            }
        }
        onTimerLoop() {
            mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID_WATER$1);
            this.labelWaterAmount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_GARDEN_WATER)}`;
            mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID_FERTILIZER$1);
            this.labelFertilizerAmount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_GARDEN_FERTILIZER)}`;
            let e = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID_GOLD);
            this.spriteGoldAdd.visible = e,
            this.labelGoldAmount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_GOLD)}`;
            let t = 0;
            mgrCfg.forDb_from_card_pack_db((e,a)=>{
                t += mgrPlayer.getItemAmount(a.id)
            }
            ),
            this.progressBarExtract.progress = 1,
            this.buttonExtract.__node.visible = mgrGuide.isAllGuideFinished(),
            mgrTip.showBadgeWithNumber(this.buttonCard.__node, t),
            mgrTip.showBadgeWithNumber(this.buttonAchievement.__node, mgrGarden.getGardenAchievementBadgeCount()),
            mgrTip.showBadgeWithNumber(this.buttonCardIllustrateBook.__node, mgrGarden.getCardBadgeCount())
        }
        onTouchButtonGoldAdd() {
            this.spriteGoldAdd.visible && mgrDirector.openDialog("vLuckGoldDialog")
        }
        onTouchButtonWaterAdd() {
            mgrDirector.openDialog("vGetItemWatchAdDialog", {
                itemId: Const.ITEM_ID_GARDEN_WATER,
                adEventId: "free_water"
            })
        }
        onTouchButtonFertilizerAdd() {
            mgrDirector.openDialog("vGetItemWatchAdDialog", {
                itemId: Const.ITEM_ID_GARDEN_FERTILIZER,
                adEventId: "free_fertilizer"
            })
        }
        onTouchButtonCard() {
            mgrDirector.openDialog("vCardSelectedDialog")
        }
        onTouchButtonCardIllustrateBook() {
            mgrDirector.openDialog("vCardIllstrateBookDialog", {}, !0)
        }
        onTouchButtonAchievement() {
            mgrDirector.openDialog("vGardenAchievementDialog"),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vGardenScene.clickButtonAchievement"
            })
        }
        onTouchButtonExtract() {
            mgrExtract.addExtractCount(),
            this.onTimerLoop(),
            mgrSound.play(110);
            for (let e = 1; e <= Tools.random(2, 4); e++) {
                let e = new Laya.Image(mgrCfg.get_from_item_template_db(Const.ITEM_ID_GOLD).icon);
                e.size(30, 30),
                e.anchorX = .5,
                e.anchorY = .5;
                let t = this;
                t.add3DEffectAtFront(MODEL_ID.effect.eff_ui_jinbi_loop, e),
                t.addChild(e),
                e.zOrder = 1e3;
                let a = t.globalToLocal(this.buttonExtract.__node.localToGlobal(new Laya.Point(this.buttonExtract.__node.width / 2,this.buttonExtract.__node.height / 2)));
                e.pos(a.x, a.y);
                let i = new Laya.Vector2(a.x + Tools.random(-150, 50),a.y + Tools.random(100, 130))
                  , s = new Laya.Vector2((a.x + i.x) / 2,(a.y + i.y) / 2 - 200);
                CustomTween.bezierCurveMotion(a, s, i, e, 500).bezierCurveMotion(i, new Laya.Vector2(i.x,i.y - 30), i, 300).delayTime(300).callback(()=>{
                    let a = this.buttonGold.__node.localToGlobal(new Laya.Point(5,15));
                    a = t.globalToLocal(a);
                    let s = new Laya.Vector2((i.x + a.x) / 2 + Tools.random(-200, 200),(i.y + a.y) / 2);
                    CustomTween.bezierCurveMotion(i, s, a, e, 500).start(1),
                    CustomTween.to(e, {
                        scaleX: .5,
                        scaleY: .5,
                        alpha: 0
                    }, 500).callback(()=>{
                        this.sendMsg("MSG_GARDEN_GOLD_FLY_END"),
                        e.destroy()
                    }
                    ).start(1)
                }
                ).start(1)
            }
        }
        onMsgCloseGotCardDialog(e) {
            let t = e.cardId
              , a = new Laya.Image(mgrCfg.get_from_item_template_db(t).icon);
            a.size(60, 60),
            a.anchorX = .5,
            a.anchorY = .5,
            mgrSound.play(115);
            let i = this;
            i.add3DEffectAtFront(MODEL_ID.effect.eff_ui_jinbi_loop, a),
            i.addChild(a);
            let s = i.globalToLocal(new Laya.Point(Laya.stage.width / 2,Laya.stage.height / 2));
            a.pos(s.x, s.y);
            let o = new Laya.Vector2(s.x + Tools.random(-150, 50),s.y + Tools.random(100, 130))
              , n = new Laya.Vector2((s.x + o.x) / 2,(s.y + o.y) / 2 - 200);
            CustomTween.bezierCurveMotion(s, n, o, a, 500).bezierCurveMotion(o, new Laya.Vector2(o.x,o.y - 30), o, 300).delayTime(300).callback(()=>{
                let e = this.buttonCard.__node
                  , t = e.localToGlobal(new Laya.Point(e.width / 2,e.height / 2));
                t = i.globalToLocal(t);
                let s = new Laya.Vector2((o.x + t.x) / 2 + Tools.random(-200, 200),(o.y + t.y) / 2);
                CustomTween.bezierCurveMotion(o, s, t, a, 500).start(1),
                CustomTween.to(a, {
                    scaleX: .5,
                    scaleY: .5,
                    alpha: 0
                }, 600).callback(()=>{
                    a.destroy(),
                    CustomTween.to(this.buttonCard.__node, {
                        scaleX: 1.2,
                        scaleY: 1.2
                    }, 150).to({
                        scaleX: 1,
                        scaleY: 1
                    }, 150).start(1)
                }
                ).start(1)
            }
            ).start(1)
        }
    }
    class vItemGotEffectDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vItemGotEffectDialog",
            this.exportNodeNames = ["CC_buttonLevel", "CC_progressBarLevel", "CC_labelLevel", "CC_labelExp", "CC_boxBottom", "CC_buttonGarden", "CC_imageGarden", "CC_boxTop", "CC_buttonGold", "CC_imageGoldIcon", "CC_labelGoldCount", "CC_imageDiamond", "CC_imageDiamondIcon", "CC_labelDiamondCount", "CC_boxEffect"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonLevel.bTween = !1,
            this.buttonGarden.bTween = !1,
            this.buttonGold.bTween = !1,
            this.buttonGarden.__node.alpha = 0,
            this.buttonGold.__node.alpha = 0,
            this.imageDiamond.alpha = 0,
            this.buttonLevel.__node.alpha = 0,
            this.buildUI(),
            this.widget(),
            this.fillData()
        }
        onClosed() {
            super.onClosed()
        }
        widget() {
            this.nodeResource.alpha = 0,
            Layout.widget(.5, Laya.stage.height - 220, this.boxBottom, {
                x: .5,
                y: 1
            }),
            vHubScene.hubScene ? this.buttonLevel.__node.y = 180 : this.buttonLevel.__node.y = 255,
            Layout.widget(10, -1, this.buttonLevel.__node),
            Layout.widget(.5, 45, this.boxTop, {
                x: .5,
                y: 0
            })
        }
        buildUI() {
            Tools.loadImg(this.imageGoldIcon, mgrCfg.get_from_item_template_db(Const.ITEM_ID_GOLD).icon),
            Tools.loadImg(this.imageDiamondIcon, mgrCfg.get_from_item_template_db(Const.ITEM_ID_DIAMONDS).icon),
            this.progressBarLevel.barName = this.progressBarLevel.__node.name,
            this.progressBarLevel.style = ULPROGRESSBAR_STYLE.ver
        }
        fillData() {
            this.labelDiamondCount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_DIAMONDS)}`,
            this.labelGoldCount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_GOLD)}`,
            this.labelLevel.text = `${mgrInteraction.level}`,
            this.progressBarLevel.progress = mgrInteraction.levelProgress;
            let e = mgrCfg.get_from_role_level_db(mgrInteraction.level);
            this.labelExp.text = `${Math.floor(e.upgradeExp * mgrInteraction.levelProgress)}/${e.upgradeExp}`
        }
        fadeIn() {
            this.widget(),
            this.showTop(),
            this.fadeInTween && this.fadeInTween.clear(),
            this.visible = !0,
            this.fadeInTween = CustomTween.to(this.nodeResource, {
                alpha: 1
            }, 400).delayTime(1500).to({
                alpha: 0
            }, 400).callback(()=>{
                this.clearFrontScene(),
                this.boxEffect.destroyChildren(),
                this.visible = !1
            }
            ).start(1)
        }
        playAction(e, t, a) {
            if (vGardenMainScene.instance)
                return;
            if (-1 == [Const.ITEM_ID_GOLD, Const.ITEM_ID_DIAMONDS, Const.ITEM_ID_INTERACTION_EXP].indexOf(e) && (e <= 600 || e >= 700))
                return;
            this.fadeIn();
            let i = t;
            i > 7 && (i = 7);
            for (let t = 1; t <= i; t++) {
                let t = new Laya.Image(mgrCfg.get_from_item_template_db(e).icon);
                t.size(30, 30),
                t.anchorX = .5,
                t.anchorY = .5;
                let i, s = this.boxEffect;
                this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_jinbi_loop, t),
                s.addChild(t),
                e == Const.ITEM_ID_GOLD ? i = this.buttonGold.__node : e == Const.ITEM_ID_DIAMONDS ? i = this.imageDiamond : e == Const.ITEM_ID_INTERACTION_EXP ? i = this.buttonLevel.__node : e > 600 && e < 700 && (i = this.buttonGarden.__node);
                let o = s.globalToLocal(a, !0);
                t.pos(o.x, o.y),
                t.zOrder = 1e3;
                let n = new Laya.Vector2(o.x + Tools.random(-100, 100),o.y + Tools.random(100, 130))
                  , r = new Laya.Vector2((o.x + n.x) / 2,(o.y + n.y) / 2 - 200)
                  , l = i.localToGlobal(new Laya.Point(i.width / 2,i.height / 2));
                l = s.globalToLocal(l);
                let h = new Laya.Vector2((n.x + l.x) / 2 + Tools.random(-200, 200),(n.y + l.y) / 2);
                CustomTween.bezierCurveMotion(o, r, n, t, 500).bezierCurveMotion(n, new Laya.Vector2(n.x,n.y - 30), n, 300).delayTime(300).callback(()=>{
                    CustomTween.bezierCurveMotion(n, h, l, t, 500).start(1),
                    CustomTween.to(t, {
                        scaleX: .5,
                        scaleY: .5,
                        alpha: 0
                    }, 500).callback(()=>{
                        t.destroy()
                    }
                    ).start(1)
                }
                ).start(1)
            }
            if (e == Const.ITEM_ID_GOLD) {
                let e = this.buttonGold.__node
                  , t = parseInt(this.labelGoldCount.text)
                  , a = mgrPlayer.getItemAmount(Const.ITEM_ID_GOLD);
                CustomTween.to(e, {
                    alpha: 1
                }, 1400).actionFloat(t, a, 300, e=>{
                    this.labelGoldCount.text = `${Math.floor(e)}`
                }
                ).to({
                    alpha: 0
                }, 300).start(1)
            } else if (e == Const.ITEM_ID_DIAMONDS) {
                let e = this.imageDiamond
                  , t = parseInt(this.labelDiamondCount.text)
                  , a = mgrPlayer.getItemAmount(Const.ITEM_ID_DIAMONDS);
                CustomTween.to(e, {
                    alpha: 1
                }, 1400).actionFloat(t, a, 300, e=>{
                    this.labelDiamondCount.text = `${Math.floor(e)}`
                }
                ).to({
                    alpha: 0
                }, 300).start(1)
            } else if (e == Const.ITEM_ID_INTERACTION_EXP) {
                let e = this.buttonLevel.__node
                  , t = mgrInteraction.levelProgress
                  , a = this.progressBarLevel.progress
                  , i = parseInt(this.labelLevel.text)
                  , s = mgrInteraction.level;
                CustomTween.to(e, {
                    alpha: 1
                }, 1400).actionFloat(a, t, 300, e=>{
                    this.progressBarLevel.progress = e;
                    let o = (e - a) / (t - a + .001)
                      , n = Math.floor(i * (1 - o) + s * o);
                    this.labelLevel.text = `${n}`;
                    let r = mgrCfg.get_from_role_level_db(s);
                    this.labelExp.text = `${Math.floor(r.upgradeExp * e)}/${r.upgradeExp}`
                }
                ).to({
                    alpha: 0
                }, 300).start(1)
            } else if (e > 600 && e < 700) {
                let e = this.buttonGarden.__node;
                CustomTween.to(e, {
                    alpha: 1
                }, 1400).to({
                    scaleX: .8,
                    scaleY: .8
                }, 150).to({
                    scaleX: 1,
                    scaleY: 1
                }, 150).to({
                    alpha: 0
                }, 300).start(1)
            }
        }
    }
    const AD_EVENT_ID_POTION$1 = "free_learn_potion";
    class vLearnFullTipDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vLearnFullTipDialog",
            this.exportNodeNames = ["CC_labelContent", "CC_buttonClose", "CC_buttonUse", "CC_buttonBuy", "CC_labelPrice", "CC_imagePrice", "CC_buttonAd"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonUse.fOnClick = this.onTouchButtonUse.bind(this),
            this.buttonBuy.fOnClick = this.onTouchButtonBuy.bind(this),
            this.buttonAd.fOnClick = this.onTouchButtonAd.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.fillData(),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            }),
            mgrTip.showJumpOtherGameBanner(this)
        }
        onClosed() {
            super.onClosed()
        }
        fillData() {
            if (mgrPlayer.getItemAmount(Const.ITEM_ID_INTERACTION_LEARN) > 0)
                this.buttonUse.__node.visible = !0,
                this.buttonBuy.__node.visible = !1,
                this.buttonAd.__node.visible = !1;
            else {
                if (this.buttonUse.__node.visible = !1,
                mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID_POTION$1))
                    this.buttonBuy.__node.visible = !1,
                    this.buttonAd.__node.visible = !0;
                else {
                    this.buttonBuy.__node.visible = !0,
                    this.buttonAd.__node.visible = !1;
                    let e = mgrCfg.get_from_shop_template_db(Const.ITEM_ID_INTERACTION_LEARN);
                    this.labelPrice.text = `${e.price}`,
                    Tools.loadImg(this.imagePrice, mgrCfg.get_from_item_template_db(e.priceUnit).icon)
                }
            }
        }
        onTouchButtonUse() {
            mgrInteraction.eatFood(Const.ITEM_ID_INTERACTION_LEARN),
            this.closeDialog()
        }
        onTouchButtonBuy() {
            mgrShop.requestBuy(Const.ITEM_ID_INTERACTION_LEARN) && this.fillData()
        }
        onTouchButtonAd() {
            mgrAd.triggerAdEvent(AD_EVENT_ID_POTION$1, null, !0)
        }
        onTouchButtonClose() {
            this.closeDialog()
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID_POTION$1 && (mgrPlayer.addItemAmount(Const.ITEM_ID_INTERACTION_LEARN, 1, "看广告获得饥饿药水"),
            mgrInteraction.eatFood(Const.ITEM_ID_INTERACTION_LEARN),
            this.closeDialog())
        }
    }
    class vLuckGoldDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vLuckGoldDialog",
            this.exportNodeNames = ["CC_boxContent", "CC_spriteDiamondBuy", "CC_spriteLightDiamond", "CC_spriteTitleDiamond", "CC_labelRewardAmountDiamond", "CC_buttonBuyDiamond", "CC_labelAmount", "CC_imageIconDiamond", "CC_buttonClose", "CC_spriteEffect1", "CC_spriteAdBuy", "CC_spriteLightAd", "CC_spriteTitleAd", "CC_labelRewardAmountAd", "CC_buttonBuyAd", "CC_imageIconAd", "CC_labelLeftAdCount", "CC_spriteEffect2"],
            this.shopIdNormal = 111,
            this.shopIdAd = 112
        }
        onOpened() {
            super.onOpened(),
            this.buttonBuyAd.fOnClick = this.onTouchButtonBuyAd.bind(this),
            this.buttonBuyDiamond.fOnClick = this.onTouchButtonBuyDiamond.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.fillData(),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            }),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_card_star, this.spriteEffect2),
            CustomTween.rotateForever(this.spriteLightDiamond, 8e3),
            CustomTween.rotateForever(this.spriteLightAd, 8e3),
            mgrSdk.staticPointEvent(7011),
            mgrI18n.trySetI18nImage(this.spriteTitleDiamond, "art50.png"),
            mgrI18n.trySetI18nImage(this.spriteTitleAd, "art57.png")
        }
        onClosed() {
            super.onClosed()
        }
        fillData() {
            let e = mgrCfg.get_from_shop_template_db(this.shopIdNormal);
            this.labelRewardAmountDiamond.text = `${e.items[0][1]}`,
            this.labelAmount.text = `${e.price}`;
            let t = mgrCfg.get_from_shop_template_db(this.shopIdAd);
            this.labelRewardAmountAd.text = `${t.items[0][1]}`;
            let a = mgrAd.getAdEventRemainCount(AD_EVENT_ID.VIDEO.free_gold);
            this.labelLeftAdCount.text = `${mgrI18n.getText("vLuckGoldDialog.2")}${a}`;
            let i = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.free_gold);
            this.spriteAdBuy.visible = i,
            Tools.layoutV(this.boxContent, 50),
            this.spriteAdBuy.visible = a > 0
        }
        onTouchButtonClose() {
            this.closeDialog()
        }
        onTouchButtonBuyAd() {
            mgrAd.triggerAdEvent(AD_EVENT_ID.VIDEO.free_gold, null, !0)
        }
        onTouchButtonBuyDiamond() {
            mgrShop.requestBuy(this.shopIdNormal) && this.closeDialog()
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID.VIDEO.free_gold && (mgrShop.requestBuy(this.shopIdAd),
            this.closeDialog())
        }
    }
    class vMoreGameDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vMoreGameDialog",
            this.exportNodeNames = ["CC_buttonClose", "CC_boxList"],
            this.JUMP_TYPE = "list"
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = (()=>{
                this.closeDialog()
            }
            ),
            this.registerListeners({
                MSG_ON_OPEN_JUMP_RESULT: this.onMsgOpenJumpResult.bind(this)
            }),
            mgrSdk.openJump("80", this.JUMP_TYPE),
            mgrSdk.staticPointEvent(7012)
        }
        onClosed() {
            super.onClosed()
        }
        buildUi(e) {
            this.datas || (this.datas = e,
            this.reuseList = new ReuseList(3,0,10),
            this.reuseList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseList),
            this.reuseList.setItemClass(vMoreGameItem),
            this.reuseList.setVerticalMoveEnable(!0),
            this.reuseList.setSpaceX(30),
            this.reuseList.setSpaceY(20),
            this.reuseList.setDatas(e))
        }
        onMsgOpenJumpResult(e) {
            if (e.type == this.JUMP_TYPE) {
                let t = e.jumpInfo;
                this.buildUi(t)
            }
        }
    }
    class vMoreGameItem extends ReuseListItem {
        constructor() {
            super();
            this.size(124, 160),
            this.anchorX = 0,
            this.anchorY = 0,
            this.image = new Laya.Image,
            this.image.size(124, 160),
            this.image.anchorX = .5,
            this.image.anchorY = .5,
            this.image.x = 62,
            this.image.y = 80,
            this.addChild(this.image),
            this.button = this.image.addComponent(ScaleButton),
            this.button.fOnClick = this.onTouchButton.bind(this)
        }
        onTouchButton() {
            this.data && mgrSdk.jumpOtherGame(this.data.index, "list")
        }
        fillByData(e) {
            this.image.skin = e.url,
            this.data = e
        }
    }
    const AD_EVENT_ID_POTION$2 = "free_motion_potion";
    class vMotionFullTipDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vMotionFullTipDialog",
            this.exportNodeNames = ["CC_labelContent", "CC_buttonClose", "CC_buttonUse", "CC_buttonBuy", "CC_labelPrice", "CC_imagePrice", "CC_buttonAd"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonUse.fOnClick = this.onTouchButtonUse.bind(this),
            this.buttonBuy.fOnClick = this.onTouchButtonBuy.bind(this),
            this.buttonAd.fOnClick = this.onTouchButtonAd.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.fillData(),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            }),
            mgrTip.showJumpOtherGameBanner(this)
        }
        onClosed() {
            super.onClosed()
        }
        fillData() {
            if (mgrPlayer.getItemAmount(Const.ITEM_ID_INTERACTION_MOTION) > 0)
                this.buttonUse.__node.visible = !0,
                this.buttonBuy.__node.visible = !1,
                this.buttonAd.__node.visible = !1;
            else {
                if (this.buttonUse.__node.visible = !1,
                mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID_POTION$2))
                    this.buttonBuy.__node.visible = !1,
                    this.buttonAd.__node.visible = !0;
                else {
                    this.buttonBuy.__node.visible = !0,
                    this.buttonAd.__node.visible = !1;
                    let e = mgrCfg.get_from_shop_template_db(Const.ITEM_ID_INTERACTION_MOTION);
                    this.labelPrice.text = `${e.price}`,
                    Tools.loadImg(this.imagePrice, mgrCfg.get_from_item_template_db(e.priceUnit).icon)
                }
            }
        }
        onTouchButtonUse() {
            mgrInteraction.eatFood(Const.ITEM_ID_INTERACTION_MOTION),
            this.closeDialog()
        }
        onTouchButtonBuy() {
            mgrShop.requestBuy(Const.ITEM_ID_INTERACTION_MOTION) && this.fillData()
        }
        onTouchButtonAd() {
            mgrAd.triggerAdEvent(AD_EVENT_ID_POTION$2, null, !0)
        }
        onTouchButtonClose() {
            this.closeDialog()
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID_POTION$2 && (mgrPlayer.addItemAmount(Const.ITEM_ID_INTERACTION_MOTION, 1, "看广告获得饥饿药水"),
            mgrInteraction.eatFood(Const.ITEM_ID_INTERACTION_MOTION),
            this.closeDialog())
        }
    }
    class vNativeDialogSmall extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vNativeDialogSmall",
            this.exportNodeNames = ["CC_buttonClose", "CC_spriteCloseBg", "CC_imageIcon", "CC_labelName", "CC_labelDesc", "CC_buttonDownLoad", "CC_labelTarget", "CC_buttonContent", "CC_buttonFullScreen", "CC_labelAdTip"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.buttonContent.fOnClick = this.onTouchButtonContent.bind(this),
            this.buttonFullScreen.fOnClick = this.onTouchButtonFullScreen.bind(this),
            this.buttonDownLoad.fOnClick = this.onTouchButtonGo.bind(this),
            this.adEventId = this.context.adEventId,
            this.userData = this.context.userData,
            this.fillData(),
            this.registerListeners({
                MSG_NATIVE_AD_SDK_CLICK_SUCCESS: this.onMsgNativeAdSdkClickSuccess.bind(this)
            })
        }
        onClosed() {
            super.onClosed(),
            mgrAdNative.onNativeAdViewClenup(this.context.adEventId)
        }
        fillData() {
            let e = mgrAdNative.getNativeDataByAdEventId(this.adEventId);
            e ? (this.labelName.text = e.title,
            this.labelDesc.text = e.desc,
            this.labelTarget.text = e.targetTitle,
            Tools.loadAdImg(this.imageIcon, e.url)) : mgrTip.showMsgTip(`${mgrI18n.getText("vNativeDialogSmall.1")}`);
            let t = mgrSdk.getCopNumberValueByKey("native_insert_mode");
            this.buttonContent.__node.visible = 2 == t,
            this.buttonFullScreen.__node.visible = 3 == t,
            1 == mgrSdk.getCopNumberValueByKey("native_insert_scale_close_count") ? (this.buttonClose.__node.size(50, 50),
            this.spriteCloseBg.size(50, 50),
            Layout.widget(.5, .5, this.spriteCloseBg, {
                x: .5,
                y: .5
            }, this.buttonClose.__node)) : 2 == mgrSdk.getCopNumberValueByKey("native_insert_scale_close_count") ? (this.buttonClose.__node.size(80, 80),
            this.spriteCloseBg.size(80, 80),
            Layout.widget(.5, .5, this.spriteCloseBg, {
                x: .5,
                y: .5
            }, this.buttonClose.__node)) : 3 == mgrSdk.getCopNumberValueByKey("native_insert_scale_close_count") ? (this.buttonClose.__node.size(50, 50),
            this.spriteCloseBg.size(80, 80),
            Layout.widget(.5, .5, this.spriteCloseBg, {
                x: .5,
                y: .5
            }, this.buttonClose.__node)) : mgrAd.todayNativeInsertScaleCount < mgrSdk.getCopNumberValueByKey("native_insert_scale_close_count") && (mgrAd.todayNativeInsertScaleIntervalCount++,
            mgrAd.todayNativeInsertScaleIntervalCount >= mgrSdk.getCopNumberValueByKey("native_insert_scale_close_interval") ? (mgrAd.todayNativeInsertScaleIntervalCount = 0,
            mgrAd.todayNativeInsertScaleCount++,
            this.buttonClose.__node.size(50, 50),
            Layout.widget(.5, .5, this.spriteCloseBg, {
                x: .5,
                y: .5
            }, this.buttonClose.__node)) : (this.buttonClose.__node.size(30, 30),
            Layout.widget(.5, .5, this.spriteCloseBg, {
                x: .5,
                y: .5
            }, this.buttonClose.__node)),
            mgrAd.saveRecord())
        }
        onTouchButtonClose() {
            this.closeDialog()
        }
        onTouchButtonGo() {
            mgrAdNative.clickNative(this.adEventId)
        }
        onTouchButtonContent() {
            mgrAdNative.clickNative(this.adEventId)
        }
        onTouchButtonFullScreen() {
            mgrAdNative.clickNative(this.adEventId)
        }
        onMsgNativeAdSdkClickSuccess() {
            mgrTip.showMsgTip(`${mgrI18n.getText("vNativeDialogSmall.2")}`),
            this.closeDialog()
        }
    }
    class vNearbyRankItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vNearbyRankItem",
            this.exportNodeNames = ["CC_spritebg2", "CC_spritebg3", "CC_spritebg1", "CC_spriteBgNormal", "CC_spriteCrown2", "CC_spriteCrown1", "CC_spriteCrown3", "CC_labelRank", "CC_labelName", "CC_labelScore", "CC_labelDistance", "CC_spriteLearnTag", "CC_spriteStageTag", "CC_spriteMotionTag", "CC_spriteGardenTag"],
            this.width = 394,
            this.height = 90,
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            mgrLoader.loadFont("nearbyRank", this.labelRank),
            this.data && this.fillByData(this.data)
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            this.spritebg1.visible = 1 == this.data.player.rank,
            this.spritebg2.visible = 2 == this.data.player.rank,
            this.spritebg3.visible = 3 == this.data.player.rank,
            this.spriteBgNormal.visible = this.data.player.rank > 3,
            this.spriteCrown1.visible = 1 == this.data.player.rank,
            this.spriteCrown2.visible = 2 == this.data.player.rank,
            this.spriteCrown3.visible = 3 == this.data.player.rank;
            let t = `${this.data.player.rank}`;
            1 == this.data.player.rank && (t = "a"),
            2 == this.data.player.rank && (t = "b"),
            3 == this.data.player.rank && (t = "c"),
            this.labelRank.text = t,
            this.labelName.text = this.data.player.name,
            this.labelScore.text = `x ${this.data.player.score}`,
            this.labelDistance.text = Tools.getBigDistanceStr(this.data.player.distance),
            this.data.player.uid == mgrPlayer.getUid() ? this.labelName.color = "#f85fbb" : this.labelName.color = "#99777b",
            this.data.rankId == eNearbyRankId.playBall ? (this.spriteMotionTag.visible = !0,
            this.spriteLearnTag.visible = !1,
            this.spriteStageTag.visible = !1,
            this.spriteGardenTag.visible = !1) : this.data.rankId == eNearbyRankId.ropeSkiping ? (this.spriteMotionTag.visible = !0,
            this.spriteLearnTag.visible = !1,
            this.spriteStageTag.visible = !1,
            this.spriteGardenTag.visible = !1) : this.data.rankId == eNearbyRankId.garden ? (this.spriteMotionTag.visible = !1,
            this.spriteLearnTag.visible = !1,
            this.spriteStageTag.visible = !1,
            this.spriteGardenTag.visible = !0) : this.data.rankId == eNearbyRankId.learn ? (this.spriteMotionTag.visible = !1,
            this.spriteLearnTag.visible = !0,
            this.spriteStageTag.visible = !1,
            this.spriteGardenTag.visible = !1) : (this.spriteMotionTag.visible = !1,
            this.spriteLearnTag.visible = !1,
            this.spriteStageTag.visible = !0,
            this.spriteGardenTag.visible = !1)
        }
    }
    class vNearbyRankDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vNearbyRankDialog",
            this.exportNodeNames = ["CC_spriteBg", "CC_spriteTag", "CC_spriteBall", "CC_spriteRope", "CC_spriteSelectedTagRope", "CC_spriteLabel2", "CC_spriteSelectedTagBall", "CC_spriteLabel1", "CC_spriteStageLearn", "CC_spriteStage", "CC_spriteGarden", "CC_boxList", "CC_buttonClose", "CC_labelName", "CC_labelScore", "CC_labelRank", "CC_buttonShare", "CC_labelGo", "CC_spriteShareIcon", "CC_labelShareAmount", "CC_spriteTittleGarden", "CC_spriteTitleLearn", "CC_spriteTitleStage", "CC_spriteTitlteMotion"],
            this.bFadingOut = !1
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = (()=>{
                this.fadeOut()
            }
            ),
            Tools.registerTouchHander(this.spriteTag, e=>{
                e.isEnd && this.onTouchButonTag()
            }
            ),
            this.buttonShare.fOnClick = this.onTouchButtonshare.bind(this),
            this.buildUi(),
            this.fillData(),
            this.fadeIn(),
            mgrPlayer.bRenamePlayerName || mgrDirector.openDialog("vIntitleDialog"),
            this.registerListeners({
                MSG_NEARBY_RANK_REFRESH: this.onMsgNearbyRanRefresh.bind(this),
                MSG_SHARE_SUCCESSFUL: this.refreshShare.bind(this)
            }),
            this.refreshShare(),
            mgrSdk.staticPointEvent(7013),
            mgrI18n.trySetI18nImage(this.spriteTittleGarden, "art34.png"),
            mgrI18n.trySetI18nImage(this.spriteTitleLearn, "art35.png"),
            mgrI18n.trySetI18nImage(this.spriteTitleStage, "art36.png"),
            mgrI18n.trySetI18nImage(this.spriteTitlteMotion, "art37.png"),
            mgrI18n.trySetI18nImage(this.spriteGarden, "art24.png"),
            mgrI18n.trySetI18nImage(this.spriteStage, "art23.png"),
            mgrI18n.trySetI18nImage(this.spriteStageLearn, "art28.png")
        }
        onClosed() {
            super.onClosed()
        }
        fadeIn() {
            CustomTween.from(this.spriteBg, {
                x: this.spriteBg.x - 500
            }, 500, Laya.Ease.backOut).start(1)
        }
        fadeOut() {
            this.bFadingOut || (this.bFadingOut = !0,
            CustomTween.to(this.__dialogMask, {
                alpha: 0
            }, 300).start(1),
            CustomTween.to(this.spriteBg, {
                x: this.spriteBg.x - 768
            }, 300).callback(()=>{
                this.closeDialog(!0)
            }
            ).start(1))
        }
        buildUi() {
            this.reuseList = new ReuseList(1,0,10),
            this.reuseList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseList),
            this.reuseList.setItemClass(vNearbyRankItem),
            this.reuseList.setVerticalMoveEnable(!0)
        }
        fillData() {
            this.selectRank(this.context.rankId)
        }
        selectRank(e) {
            this.selectedRankId = e;
            let t = []
              , a = mgrOfflineNearbyRank.getPlayersByRankId(e);
            for (let i = 0; i < a.length; i++) {
                const s = a[i];
                t.push({
                    rankId: e,
                    player: s
                })
            }
            this.reuseList.setDatas(t),
            this.reuseList.setScroll(0);
            let i = mgrOfflineNearbyRank.getOwnInfoByRankId(e);
            this.labelName.text = i.name,
            this.labelScore.text = `${mgrI18n.getText("vNearbyRankDialog.1")} ${i.score}`,
            this.labelRank.text = `${mgrI18n.getText("vNearbyRankDialog.2")} ${i.rank}`,
            e == eNearbyRankId.playBall ? (this.spriteSelectedTagBall.visible = !0,
            this.spriteSelectedTagRope.visible = !1,
            this.spriteBall.visible = !0,
            this.spriteRope.visible = !0,
            this.spriteStage.visible = !1,
            this.spriteGarden.visible = !1,
            this.spriteStageLearn.visible = !1,
            this.spriteTitlteMotion.visible = !0,
            this.spriteTitleStage.visible = !1,
            this.spriteTitleLearn.visible = !1,
            this.spriteTittleGarden.visible = !1) : this.selectedRankId == eNearbyRankId.ropeSkiping ? (this.spriteSelectedTagBall.visible = !1,
            this.spriteSelectedTagRope.visible = !0,
            this.spriteBall.visible = !0,
            this.spriteRope.visible = !0,
            this.spriteStage.visible = !1,
            this.spriteGarden.visible = !1,
            this.spriteStageLearn.visible = !1,
            this.spriteTitlteMotion.visible = !0,
            this.spriteTitleStage.visible = !1,
            this.spriteTitleLearn.visible = !1,
            this.spriteTittleGarden.visible = !1) : this.selectedRankId == eNearbyRankId.garden ? (this.spriteSelectedTagBall.visible = !1,
            this.spriteSelectedTagRope.visible = !1,
            this.spriteBall.visible = !1,
            this.spriteRope.visible = !1,
            this.spriteStage.visible = !1,
            this.spriteGarden.visible = !0,
            this.spriteStageLearn.visible = !1,
            this.spriteTitlteMotion.visible = !1,
            this.spriteTitleStage.visible = !1,
            this.spriteTitleLearn.visible = !1,
            this.spriteTittleGarden.visible = !0) : this.selectedRankId == eNearbyRankId.learn ? (this.spriteSelectedTagBall.visible = !1,
            this.spriteSelectedTagRope.visible = !1,
            this.spriteBall.visible = !1,
            this.spriteRope.visible = !1,
            this.spriteStage.visible = !1,
            this.spriteGarden.visible = !1,
            this.spriteStageLearn.visible = !0,
            this.spriteTitlteMotion.visible = !1,
            this.spriteTitleStage.visible = !1,
            this.spriteTitleLearn.visible = !0,
            this.spriteTittleGarden.visible = !1) : (this.spriteSelectedTagBall.visible = !1,
            this.spriteSelectedTagRope.visible = !1,
            this.spriteBall.visible = !1,
            this.spriteRope.visible = !1,
            this.spriteStage.visible = !0,
            this.spriteGarden.visible = !1,
            this.spriteStageLearn.visible = !1,
            this.spriteTitlteMotion.visible = !1,
            this.spriteTitleStage.visible = !0,
            this.spriteTitleLearn.visible = !1,
            this.spriteTittleGarden.visible = !1)
        }
        refreshShare() {
            this.buttonShare.__node.visible = mgrChannel.canShare();
            let e = mgrChannel.getShareRewardAmount();
            e > 0 ? (this.labelShareAmount.text = `+${e}`,
            this.labelShareAmount.visible = !0,
            this.spriteShareIcon.visible = !0) : (this.labelShareAmount.visible = !1,
            this.spriteShareIcon.visible = !1)
        }
        onTouchButonTag() {
            this.selectedRankId == eNearbyRankId.playBall ? this.selectRank(eNearbyRankId.ropeSkiping) : this.selectedRankId == eNearbyRankId.ropeSkiping && this.selectRank(eNearbyRankId.playBall)
        }
        onTouchButtonshare() {
            mgrSdk.openShare()
        }
        onMsgNearbyRanRefresh() {
            this.fillData()
        }
    }
    const AD_EVENT_ID_OFFLINE = "double_offline";
    class vOfflineDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vOfflineDialog",
            this.exportNodeNames = ["CC_spriteTitle", "CC_labelTime", "CC_boxGet", "CC_buttonget", "CC_spriteLightNormal", "CC_labelRewardCountNoraml", "CC_labelGet", "CC_boxAdGet", "CC_buttonAd", "CC_spriteLightAd", "CC_boxAd", "CC_labelRewardCountAd", "CC_spriteAdIcon", "CC_labelAdWish"],
            vOfflineDialog.offlineDialog = this
        }
        onOpened() {
            super.onOpened(),
            this.fillData(),
            this.buttonAd.fOnClick = (()=>{
                mgrAd.triggerAdEvent(AD_EVENT_ID_OFFLINE, null, !0)
            }
            ),
            this.boxAdGet.visible = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID_OFFLINE),
            this.buttonget.fOnClick = (()=>{
                if (this.__bClosing)
                    return;
                let[e,t] = mgrOfflineReward.getOfflineReward();
                mgrPlayer.addItemAmount(Const.ITEM_ID_GOLD, t, "离线奖励"),
                mgrTip.addGotItemTip(Const.ITEM_ID_GOLD, t),
                this.closeDialog(),
                mgrOfflineReward.markOfflineRewardGeted()
            }
            ),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessd.bind(this)
            }),
            CustomTween.roke(this.spriteTitle),
            CustomTween.rotateForever(this.spriteLightAd, 8e3),
            CustomTween.rotateForever(this.spriteLightNormal, 8e3),
            mgrAd.triggerAdEvent(AD_EVENT_ID.BANNER.offline_reward),
            mgrI18n.trySetI18nImage(this.spriteTitle, "art20.png")
        }
        onClosed() {
            super.onClosed(),
            vOfflineDialog.offlineDialog = null
        }
        fillData() {
            let[e,t] = mgrOfflineReward.getOfflineReward()
              , a = Math.ceil(t);
            this.labelRewardCountNoraml.text = `${Tools.getBigNumberStr(a)}`,
            this.labelRewardCountAd.text = `${Tools.getBigNumberStr(a)}  x3`,
            this.labelTime.text = `${Tools.formatTime(e, "%H:%M:%S")}`
        }
        onMsgAdEventSuccessd(e) {
            if (e.adEventId == AD_EVENT_ID_OFFLINE) {
                let[e,t] = mgrOfflineReward.getOfflineReward();
                t *= 3,
                mgrPlayer.addItemAmount(Const.ITEM_ID_GOLD, t, "离线奖励"),
                mgrTip.addGotItemTip(Const.ITEM_ID_GOLD, t),
                this.closeDialog(),
                mgrOfflineReward.markOfflineRewardGeted()
            }
        }
    }
    class vOpenCardDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vOpenCardDialog",
            this.exportNodeNames = ["CC_spriteBg", "CC_spriteOperate", "CC_spriteDescBg", "CC_labelFlower", "CC_labelSymbolize", "CC_labelColor", "CC_labelElement", "CC_labelSkill", "CC_labelOutward", "CC_labelNature", "CC_labelIdentity", "CC_labelSaying", "CC_labeltitle", "CC_spriteBottom", "CC_boxList"],
            this.bFadeOuting = !1
        }
        onOpened() {
            super.onOpened(),
            this.init()
        }
        onClosed() {
            super.onClosed()
        }
        fadeOut() {
            this.bFadeOuting || (this.bFadeOuting = !0,
            CustomTween.to(this.spriteDescBg, {
                x: this.spriteDescBg.__originX + this.spriteDescBg.width
            }, 500, Laya.Ease.backOut).start(1),
            CustomTween.to(this.spriteBottom, {
                y: this.spriteBottom.y + 500
            }, 500).start(1),
            CustomTween.to(this.spriteBg, {
                alpha: 0
            }, 500).start(1),
            CustomTween.actionFloat(this.card, this.card.transform.position.x, this.card.transform.position.x - 3, 500, e=>{
                this.card.transform.position = new Laya.Vector3(e,this.card.transform.position.y,this.card.transform.position.z)
            }
            ).callback(()=>{
                this.sendMsg("MSG_GUIDE_EVENT", {
                    id: "openCardActionFinished"
                }),
                this.closeDialog(!0)
            }
            ).start(1))
        }
        getPreLoadModelIds() {
            return 1 == mgrCfg.get_from_card_pack_db(this.context.cardPackId).type ? (this.cardPackModelId = MODEL_ID.kabao_normal,
            [MODEL_ID.ka_normal, MODEL_ID.kabao_normal, MODEL_ID.effect.ka_glow, MODEL_ID.effect.kabao_open, MODEL_ID.effect.kabao_idle]) : (this.cardPackModelId = MODEL_ID.kabao_gold,
            [MODEL_ID.ka_normal, MODEL_ID.kabao_gold, MODEL_ID.effect.ka_glow, MODEL_ID.effect.kabao_open, MODEL_ID.effect.kabao_idle])
        }
        init() {
            this.buildScene(),
            this.cardPackId = this.context.cardPackId,
            Tools.registerTouchHander(this.spriteOperate, this.onTouchOperate.bind(this)),
            this.spriteDescBg.__originX = this.spriteDescBg.x,
            this.spriteDescBg.x += this.spriteDescBg.width,
            this.spriteBottom.__originY = this.spriteBottom.y,
            this.spriteBottom.y += 500,
            this.reuseList = new ReuseList(4,0,2),
            this.reuseList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseList),
            this.reuseList.setItemClass(vCardDetailPart),
            this.reuseList.setSpaceX(10),
            this.reuseList.setSpaceY(10);
            let e = mgrCfg.get_from_card_pack_db(this.cardPackId)
              , t = []
              , a = mgrCfg.get_from_random_box_db(e.randomBoxIds[0]);
            for (let e = 0; e < a.length; e++) {
                const i = a[e];
                t.push({
                    partId: i.itemId,
                    index: e
                })
            }
            this.reuseList.setDatas(t)
        }
        buildScene() {
            this.spriteBg.zOrder = -2,
            this.cardPack = mgrLoader.Pool.getModel(this.cardPackModelId),
            mgrMaterial.setCartonShader(this.cardPack, this.cardPackModelId),
            this.cardPack.transform.position = new Laya.Vector3,
            this.cardPackAnimator = this.cardPack.getComponent(Laya.Animator),
            this.add3DEffectAtBack(this.cardPack, 0),
            this.card = mgrLoader.Pool.getModel(MODEL_ID.ka_normal),
            this.cardMaterials = mgrMaterial.setCartonShader(this.card, MODEL_ID.ka_normal),
            this.card.transform.position = new Laya.Vector3,
            this.card.transform.localRotationEulerY = -180,
            this.card.transform.localRotationEulerZ = 0,
            this.card.transform.scale = new Laya.Vector3,
            this.card.active = !0,
            this.add3DEffectAtBack(this.card, 0),
            this.openTipEffect = mgrLoader.Pool.getModel(MODEL_ID.effect.kabao_idle),
            this.link2Node(this.cardPack, this.openTipEffect, this.cardPack.name),
            mgrGuide.registerGuideNode("vOpenCardDialog.buttonOpen", this.spriteOperate),
            this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,-.1,4.5),
            this.cameraBack.fieldOfView = 20
        }
        onTouchOperate(e) {
            e.isClick && (this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vOpenCardDialog.clickButtonOpen"
            }),
            this.touchBeginPos = null,
            this.unlink(this.openTipEffect),
            Tools.unRegisterTouchHander(this.spriteOperate),
            mgrSound.play(113),
            mgrMaterial.playAnimation(this.cardPackAnimator, ANIMATION_ID.cardpack_open, .05, ()=>{
                Timer.callLater(.15, ()=>{
                    let e = mgrLoader.Pool.getModel(MODEL_ID.effect.kabao_open);
                    this.add3DEffectAtBack(e, 3),
                    e.transform.position = this.cardPack.transform.position
                }
                , this)
            }
            , ()=>{
                this.cardPackDown()
            }
            ))
        }
        cardPackDown() {
            this.card.transform.scale = new Laya.Vector3(1,1,1),
            CustomTween.delayTime(this, 100).actionFloat(0, .1, 1e3, e=>{
                this.card.transform.localPositionY = e
            }
            ).delayTime(100).actionFloat(0, -2, 1e3, e=>{
                this.cardPack.transform.localPositionY = e,
                this.card.transform.localPositionY = .1 - -e / 2 * .1
            }
            ).callback(()=>{
                console.log("BBBBBBBBBB"),
                this.cardEffect = mgrLoader.Pool.getModel(MODEL_ID.effect.ka_glow),
                this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_yindao_ring, this.spriteOperate),
                this.link2Node(this.card, this.cardEffect, this.card.name),
                Tools.registerTouchHander(this.spriteOperate, this.onTouchBg.bind(this))
            }
            ).start(1)
        }
        onTouchBg(e) {
            if (e.isEnd) {
                Tools.unRegisterTouchHander(this.spriteOperate),
                this.spriteOperate.visible = !1;
                let e = mgrCfg.get_from_card_pack_db(this.cardPackId)
                  , t = mgrCfg.get_from_card_db(e.cardId);
                mgrLoader.Load2dRes(t.icon, Laya.Loader.IMAGE, this, e=>{
                    this.card.getChildAt(0).meshRenderer.sharedMaterials[0].albedoTexture = e
                }
                ),
                this.unlink(this.cardEffect),
                Tools.unRegisterTouchHander(this.spriteBg),
                mgrSound.play(114),
                CustomTween.actionFloat(this.card, -180, -720, 1e3, e=>{
                    this.card.transform.localRotationEulerY = e,
                    this.card.transform.position = new Laya.Vector3(0,-e / 540 * .05,0);
                    let t = -e / 540 * .4 + 1;
                    this.card.transform.scale = new Laya.Vector3(t,t,t)
                }
                ).callback(()=>{
                    this.labeltitle.text = t.descTitle,
                    this.labelFlower.text = t.descFlower,
                    this.labelColor.text = t.descColor,
                    this.labelElement.text = t.descElement,
                    this.labelIdentity.text = t.descIdentity,
                    this.labelNature.text = t.descNature,
                    this.labelOutward.text = t.descOutward,
                    this.labelSkill.text = t.descSkill,
                    this.labelSymbolize.text = t.descSymbolize,
                    this.labelSaying.text = t.descSaying,
                    CustomTween.to(this.spriteBottom, {
                        y: this.spriteBottom.__originY
                    }, 500, Laya.Ease.backOut).start(1),
                    CustomTween.to(this.spriteDescBg, {
                        x: this.spriteDescBg.__originX
                    }, 500, Laya.Ease.backOut).callback(()=>{
                        this.onToucButtonReward()
                    }
                    ).start(1)
                }
                ).start(1)
            }
        }
        onToucButtonReward() {
            let e, t = [], a = mgrCfg.get_from_card_pack_db(this.cardPackId);
            for (let i = 0; i < a.randomBoxIds.length; i++) {
                const s = a.randomBoxIds[i];
                if (0 == i || Math.random() > .5) {
                    let a = mgrPlayer.openItemBox(s);
                    mgrPlayer.addItemAmount(a.itemId, a.amount, "打开卡包"),
                    0 == i && (e = a.itemId),
                    t.push(a),
                    mgrCfg.get_from_part_db(a.itemId) ? mgrPlayer.getRepeatSellCount(a.itemId) || mgrSdk.staticPointEvent(4010) : mgrCfg.get_from_seed_db(a.itemId) ? mgrSdk.staticPointEvent(4011) : a.itemId == Const.ITEM_ID_DIAMONDS ? mgrSdk.staticPointEvent(4013) : a.itemId == Const.ITEM_ID_GOLD && mgrSdk.staticPointEvent(4012)
                }
            }
            mgrPlayer.addItemAmount(a.cardId, 1, "打开卡包"),
            mgrPlayer.addItemAmount(this.cardPackId, -1, "打开卡包"),
            mgrSdk.staticPointEvent(4009),
            this.playExtractPartAction(e, ()=>{
                if (mgrPlayer.getRepeatSellCount(e) > 0) {
                    null == mgrGarden.repeatPartCount[this.cardPackId] && (mgrGarden.repeatPartCount[this.cardPackId] = 0),
                    mgrGarden.repeatPartCount[this.cardPackId]++;
                    let e = []
                      , i = mgrCfg.get_from_random_box_db(a.randomBoxIds[0]);
                    for (let t = 0; t < i.length; t++) {
                        const a = i[t];
                        mgrPlayer.getItemAmount(a.itemId) <= 0 && e.push(a.itemId)
                    }
                    if (mgrGarden.repeatPartCount[this.cardPackId] >= 3 && e.length > 0) {
                        mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.open_card_with_new_part) && (mgrGarden.repeatPartCount[this.cardPackId] = 0,
                        mgrDirector.openDialog("vOpenCardWithNewPartDialog", {
                            cardPackId: this.cardPackId,
                            fOnGeted: e=>{
                                for (let a = 0; a < e.length; a++) {
                                    const i = e[a];
                                    mgrPlayer.addItemAmount(i, 1, "重复抽奖广告"),
                                    t.unshift({
                                        itemId: i,
                                        amount: 1
                                    })
                                }
                            }
                        }))
                    }
                } else
                    mgrGarden.repeatPartCount[this.cardPackId] = 0;
                mgrGarden.saveRecord(),
                Timer.callLoop(.016, e=>{
                    if (1 == DialogBase.ShowingDialog.length) {
                        e.stop();
                        for (let e = 0; e < t.length; e++) {
                            const a = t[e];
                            mgrTip.addGotItemTip(a.itemId, a.amount)
                        }
                        Timer.callLoop(.016, e=>{
                            1 == DialogBase.ShowingDialog.length && (e.stop(),
                            this.fadeOut())
                        }
                        , this)
                    }
                }
                , this)
            }
            )
        }
        playExtractPartAction(e, t) {
            let a = mgrCfg.get_from_card_pack_db(this.cardPackId)
              , i = []
              , s = mgrCfg.get_from_random_box_db(a.randomBoxIds[0]);
            for (let e = 0; e < s.length; e++) {
                const t = s[e];
                i.push(t.itemId)
            }
            let o = .5
              , n = 0
              , r = 24;
            r += i.indexOf(e) + 1;
            for (let e = 0; e < r; e++)
                e != r - 1 ? Timer.callLater(n, ()=>{
                    this.sendMsg("MSG_PLAY_SELECT_ACTION", e % 8)
                }
                , this) : Timer.callLater(n, ()=>{
                    this.sendMsg("MSG_PLAY_SELECT_ACTION_FOVER", e % 8)
                }
                , this),
                n += o,
                e >= 0 && e <= 7 ? o -= .1 : e >= 24 && (o += .1),
                o = ul.clamp(o, .1, .5);
            Timer.callLater(n + 1, ()=>{
                t && t()
            }
            , this)
        }
    }
    class vOpenCardWithNewPartDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vOpenCardWithNewPartDialog",
            this.exportNodeNames = ["CC_spriteTitle", "CC_labelTip", "CC_spriteIcon", "CC_buttonClose", "CC_buttonWatchAd", "CC_labelWatchAd"]
        }
        onOpened() {
            super.onOpened(),
            this.cardPackId = this.context.cardPackId,
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.buttonWatchAd.fOnClick = this.onTouchButtonAd.bind(this),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            }),
            this.fillData(),
            mgrI18n.trySetI18nImage(this.spriteTitle, "art87.png")
        }
        onClosed() {
            super.onClosed()
        }
        fillData() {
            let e = mgrCfg.get_from_card_pack_db(this.cardPackId)
              , t = []
              , a = mgrCfg.get_from_random_box_db(e.randomBoxIds[0]);
            for (let e = 0; e < a.length; e++) {
                const i = a[e];
                mgrPlayer.getItemAmount(i.itemId) <= 0 && t.push(i.itemId)
            }
            let i = t[Tools.random(0, t.length - 1)]
              , s = mgrCfg.get_from_part_db(i);
            this.partId = i,
            Tools.loadImg(this.spriteIcon, s.icon)
        }
        onTouchButtonAd() {
            mgrAd.triggerAdEvent(AD_EVENT_ID.VIDEO.open_card_with_new_part, null, !0)
        }
        onTouchButtonClose() {
            this.closeDialog(),
            this.context.fOnGeted([])
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID.VIDEO.open_card_with_new_part && (this.closeDialog(),
            this.context.fOnGeted([this.partId]))
        }
    }
    class vPartDetailDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vPartDetailDialog",
            this.exportNodeNames = ["CC_spriteBg", "CC_buttonClose", "CC_imageSpriteIcon", "CC_labelName", "CC_boxTags", "CC_labelDesc", "CC_buttonRouter", "CC_labelRouter"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = (()=>{
                this.closeDialog()
            }
            ),
            this.buttonRouter.fOnClick = (()=>{
                if (mgrPlayer.getItemAmount(this.context.itemId) > 0 || this.context.ignoreRouter)
                    this.closeDialog();
                else {
                    this.context.fOnRouter && this.context.fOnRouter();
                    let e = mgrCfg.get_from_part_db(this.context.itemId);
                    mgrShop.goWidthRouterId(e.router),
                    this.closeDialog()
                }
            }
            ),
            this.fillData()
        }
        onClosed() {
            super.onClosed()
        }
        onAnimationFinished() {
            mgrTip.showJumpOtherGameBanner(this)
        }
        fillData() {
            let e = this.context.itemId
              , t = mgrCfg.get_from_part_db(e);
            Tools.loadImg(this.imageSpriteIcon, t.icon),
            this.labelName.text = t.name,
            this.labelDesc.text = t.desc;
            let a = mgrPart.getRecommendTagsByPartId(e);
            for (let e = 0; e < a.length; e++) {
                const t = a[e];
                let i = new Laya.Image;
                i.size(30, 30),
                i.pivot(i.width / 2, i.height / 2),
                Tools.loadImg(i, t.icon),
                this.boxTags.addChild(i)
            }
            mgrPlayer.getItemAmount(this.context.itemId) > 0 || this.context.ignoreRouter ? (this.labelRouter.text = `${mgrI18n.getText("vPartDetailDialog.2")}`,
            this.buttonClose.__node.visible = !1) : (1 == t.router ? this.labelRouter.text = `${mgrI18n.getText("vPartDetailDialog.3")}` : 2 == t.router ? this.labelRouter.text = ul.format(mgrI18n.getText("vPartDetailDialog.4"), t.routerStageId) : 3 == t.router ? this.labelRouter.text = `${mgrI18n.getText("vPartDetailDialog.5")}` : 4 == t.router ? this.labelRouter.text = `${mgrI18n.getText("vPartDetailDialog.6")}` : 5 == t.router && (this.labelRouter.text = `${mgrI18n.getText("vPartDetailDialog.7")}`),
            this.buttonClose.__node.visible = !0),
            this.starLevelNode || (this.starLevelNode = new vStarLevelItem({}),
            this.spriteBg.addChild(this.starLevelNode),
            this.starLevelNode.pos(this.spriteBg.width / 2, 217, !0),
            this.starLevelNode.scale(1, 1, !0)),
            this.starLevelNode.fillByData(t.level)
        }
    }
    const OPERATION_ICON = {
        HARVEST: "res/ui/garden/plantStage/art05.png",
        GET_REWARD: "res/icon/icon_gold.png",
        WATER: "res/ui/garden/plantStage/art01.png",
        FERTILIZER: "res/ui/garden/art02.png"
    }
      , AD_EVENT_ID_ACCELERATE_GROWING = "accelerate_growing";
    class vPlantProgressDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vPlantProgressDialog",
            this.exportNodeNames = ["CC_spriteTitle", "CC_labelTitle", "CC_labelStageName", "CC_spriteSpineBg", "CC_buttonOperation", "CC_spriteOperationIcon", "CC_labelOperationName", "CC_boxTimer", "CC_progressBar", "CC_labelTime", "CC_buttonConsume", "CC_labelConsumeCount", "CC_imageConsumeIcon", "CC_buttonWatchAd", "CC_labelWatchAd", "CC_buttonClose"]
        }
        onOpened() {
            super.onOpened(),
            this.potId = this.context.potId,
            this.buttonClose.fOnClick = (()=>{
                this.closeDialog()
            }
            ),
            this.buttonOperation.fOnClick = this.onTouchButtonOperation.bind(this),
            this.buttonConsume.fOnClick = this.onTouchButtonConsume.bind(this),
            this.buttonWatchAd.fOnClick = this.onTouchButtonWatchAd.bind(this),
            this.refresh(),
            Timer.callLoop(.016, ()=>{
                this.refresh()
            }
            , this),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            })
        }
        onClosed() {
            super.onClosed()
        }
        refreshPlant() {
            let e = mgrGarden.getFlowerpotStateById(this.potId);
            if (0 == e.seedId)
                this.plant && this.plant.destroy();
            else if (0 != e.seedId) {
                let t = mgrCfg.get_from_plant_db(e.seedId, e.stageIndex);
                if (this.plant) {
                    let e = this.plant.__plant_id
                      , a = this.plant.__animation_id;
                    e == t.spineId ? a != t.animation && (this.plant.playAnimation(t.animation),
                    this.plant.__animation_id = t.animation) : (this.plant.destroy(),
                    this.plant = ULSkeleton.create(t.spineId),
                    this.spriteSpineBg.addChild(this.plant),
                    this.plant.pos(this.spriteSpineBg.width / 2, this.spriteSpineBg.height + 30),
                    this.plant.playAnimation(t.animation),
                    this.plant.__animation_id = t.animation,
                    this.plant.__plant_id = t.spineId)
                } else
                    this.plant = ULSkeleton.create(t.spineId),
                    this.spriteSpineBg.addChild(this.plant),
                    this.plant.pos(this.spriteSpineBg.width / 2, this.spriteSpineBg.height + 30),
                    this.plant.playAnimation(t.animation),
                    this.plant.__animation_id = t.animation,
                    this.plant.__plant_id = t.spineId
            }
        }
        refresh() {
            this.refreshPlant();
            let e = mgrGarden.getFlowerpotStateById(this.potId);
            if (!e.seedId)
                return;
            let t = mgrCfg.get_from_plant_db(e.seedId, e.stageIndex)
              , a = mgrCfg.get_from_seed_db(e.seedId);
            if (this.labelTitle.text = `${mgrI18n.getText(`${a.name}`)}`,
            this.labelStageName.text = `${mgrI18n.getText(`${t.name}`)}`,
            e.bCanGetReward)
                this.boxTimer.visible = !1,
                this.buttonOperation.__node.visible = !0,
                Tools.loadImg(this.spriteOperationIcon, OPERATION_ICON.GET_REWARD),
                this.labelOperationName.text = `${mgrI18n.getText("vPlantProgressDialog.3")}`;
            else if (e.bCanHarvest)
                this.boxTimer.visible = !1,
                this.buttonOperation.__node.visible = !0,
                Tools.loadImg(this.spriteOperationIcon, OPERATION_ICON.HARVEST),
                this.labelOperationName.text = `${mgrI18n.getText("vPlantProgressDialog.4")}`;
            else if (0 == e.stageStartTime)
                this.boxTimer.visible = !1,
                this.buttonOperation.__node.visible = !0,
                t.operationType == PLANT_OPERATION_TYPE.watering ? (Tools.loadImg(this.spriteOperationIcon, OPERATION_ICON.WATER),
                this.labelOperationName.text = `${mgrI18n.getText("vPlantProgressDialog.5")}`) : (Tools.loadImg(this.spriteOperationIcon, OPERATION_ICON.FERTILIZER),
                this.labelOperationName.text = `${mgrI18n.getText("vPlantProgressDialog.6")}`);
            else if (e.stageStartTime > 0) {
                this.boxTimer.visible = !0,
                this.buttonOperation.__node.visible = !1;
                let e = mgrGarden.getCurStageProgress(this.potId);
                this.progressBar.progress = 1 - e;
                let a = Math.ceil((1 - e) * t.duration);
                this.labelTime.text = Tools.formatTime(a, "%M:%S");
                let[i,s] = t.accelerateConsume
                  , o = mgrCfg.get_from_item_template_db(i);
                this.labelConsumeCount.text = `${Math.ceil(s * (1 - e))}`,
                Tools.loadImg(this.imageConsumeIcon, o.icon);
                let n = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID_ACCELERATE_GROWING);
                this.buttonWatchAd.__node.visible = n
            }
        }
        onTouchButtonOperation() {
            let e = mgrGarden.getFlowerpotStateById(this.potId)
              , t = mgrCfg.get_from_plant_db(e.seedId, e.stageIndex)
              , a = mgrCfg.get_from_seed_db(e.seedId);
            this.labelTime.text = `${mgrI18n.getText(`${a.name}`)}`,
            this.labelStageName.text = `${mgrI18n.getText(`${t.name}`)}`,
            e.bCanGetReward ? (this.sendMsg("MSG_GET_PLANT_REWARD", {
                potId: this.potId
            }),
            this.closeDialog()) : e.bCanHarvest ? (this.sendMsg("MSG_HARVEST", {
                potId: this.potId
            }),
            this.closeDialog()) : 0 == e.stageStartTime && (t.operationType == PLANT_OPERATION_TYPE.watering ? (this.sendMsg("MSG_WATER", {
                potId: this.potId
            }),
            this.closeDialog()) : (this.sendMsg("MSG_FERTILIZER", {
                potId: this.potId
            }),
            this.closeDialog()))
        }
        onTouchButtonConsume() {
            mgrGarden.accelerateGrowing(this.potId),
            this.closeDialog()
        }
        onTouchButtonWatchAd() {
            mgrAd.triggerAdEvent(AD_EVENT_ID_ACCELERATE_GROWING, null, !0)
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID_ACCELERATE_GROWING && (mgrGarden.accelerateGrowing(this.potId),
            this.closeDialog())
        }
    }
    class vPlayerDetailDialy extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vPlayerDetailDialy",
            this.exportNodeNames = ["CC_spriteTitle", "CC_labelTitle", "CC_boxLayout", "CC_buttonPart1", "CC_imageIcon1", "CC_spriteHaved1", "CC_buttonPart2", "CC_imageIcon2", "CC_spriteHaved2", "CC_buttonPart3", "CC_imageIcon3", "CC_spriteHaved3", "CC_buttonPart4", "CC_imageIcon4", "CC_spriteHaved4", "CC_buttonPart5", "CC_imageIcon5", "CC_spriteHaved5", "CC_buttonPart6", "CC_imageIcon6", "CC_spriteHaved6", "CC_buttonPart7", "CC_imageIcon7", "CC_spriteHaved7", "CC_buttonPart8", "CC_imageIcon8", "CC_spriteHaved8", "CC_buttonClose"],
            this.avatar = null
        }
        onOpened() {
            super.onOpened(),
            this.buttonPart1.fOnClick = this.onToucuButtonPart1.bind(this),
            this.buttonPart2.fOnClick = this.onToucuButtonPart2.bind(this),
            this.buttonPart3.fOnClick = this.onToucuButtonPart3.bind(this),
            this.buttonPart4.fOnClick = this.onToucuButtonPart4.bind(this),
            this.buttonPart5.fOnClick = this.onToucuButtonPart5.bind(this),
            this.buttonPart6.fOnClick = this.onToucuButtonPart6.bind(this),
            this.buttonPart7.fOnClick = this.onToucuButtonPart7.bind(this),
            this.buttonPart8.fOnClick = this.onToucuButtonPart8.bind(this),
            this.buttonClose.fOnClick = this.onTouchbuttonClose.bind(this),
            Tools.registerTouchHander(this, this.onTouchSpriteBg.bind(this)),
            this.buildUi()
        }
        onClosed() {
            super.onClosed()
        }
        getPreLoadAnimationIds() {
            return [ANIMATION_ID.show01, ANIMATION_ID.show02, ANIMATION_ID.show03]
        }
        onAnimationFinished() {
            mgrTip.showJumpOtherGameBanner(this)
        }
        buildUi() {
            Layout.widget(10, 10, this.buttonClose.__node),
            this.avatar = new RoleAvatar,
            this.add3DEffectAtBack(this.avatar, 0),
            this.avatar.transform.scale = new Laya.Vector3(.75,.75,.75),
            this.cameraBack.fieldOfView = 25,
            this.cameraBack.transform.position = new Laya.Vector3(0,.6,5.78),
            this.cameraBack.transform.rotationEuler = new Laya.Vector3(-4,0,0),
            this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,.6,4.78),
            this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-4,0,0),
            this.avatar.fillByPartIds(this.context.player.partIds),
            this.avatar.transform.position = new Laya.Vector3(1e3,1,1),
            mgrTip.showLoadingTip("vPlayerDetailDailog_loadingAvatar"),
            this.avatar.registerLoadEndCallback(()=>{
                this.avatar.transform.position = new Laya.Vector3,
                this.avatar.playAnimation(ANIMATION_ID[`show0 ${Tools.random(1, 3)}`]),
                this.avatar.playFaceAnimation(ANIMATION_ID.face[`kaixin0 ${Tools.random(1, 2)}`]),
                mgrTip.hideLoadingTip("vPlayerDetailDailog_loadingAvatar")
            }
            );
            for (let e = 1; e <= 8; e++) {
                this[`buttonPart ${e}`].__node.visible = !1
            }
            for (let e = 0; e < this.context.player.partIds.length; e++) {
                const t = this.context.player.partIds[e];
                let a = this[`imageIcon ${e + 1}`]
                  , i = this[`spriteHaved ${e + 1}`]
                  , s = this[`buttonPart ${e + 1}`].__node;
                s.visible = !0;
                let o = mgrCfg.get_from_part_db(t);
                Tools.loadImg(a, o.icon),
                i.visible = mgrPlayer.getItemAmount(t) > 0;
                let n = new vStarLevelItem({});
                s.addChild(n),
                n.pos(s.width / 2, s.height - 10, !0),
                n.scale(.7, .7, !0),
                n.fillByData(o.level)
            }
            this.labelTitle.text = this.context.player.name
        }
        onTouchbuttonClose() {
            this.closeDialog(!0)
        }
        onToucuButtonPart1() {
            this.onClickPartByIndex(1)
        }
        onToucuButtonPart2() {
            this.onClickPartByIndex(2)
        }
        onToucuButtonPart3() {
            this.onClickPartByIndex(3)
        }
        onToucuButtonPart4() {
            this.onClickPartByIndex(4)
        }
        onToucuButtonPart5() {
            this.onClickPartByIndex(5)
        }
        onToucuButtonPart6() {
            this.onClickPartByIndex(6)
        }
        onToucuButtonPart7() {
            this.onClickPartByIndex(7)
        }
        onToucuButtonPart8() {
            this.onClickPartByIndex(8)
        }
        onClickPartByIndex(e) {
            let t = this.context.player.partIds[e - 1];
            mgrTip.showItemDetailDialog(t, !1, ()=>{
                this.closeDialog()
            }
            )
        }
        onTouchSpriteBg(e) {
            if (e.isBegin && (this.bTouchBg = !0,
            this.lastTouchBgPos = e.pos),
            (e.isCancel || e.isEnd) && (this.bTouchBg = !1),
            this.bTouchBg) {
                let t = e.pos.x - this.lastTouchBgPos.x;
                this.lastTouchBgPos = e.pos,
                this.avatar && this.avatar.transform.rotate(new Laya.Vector3(0,t,0), !0, !1)
            }
        }
    }
    class vPromptDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vPromptDialog",
            this.exportNodeNames = ["CC_labelContent", "CC_buttonClose", "CC_button1", "CC_label1", "CC_button2", "CC_label2"]
        }
        onOpened() {
            super.onOpened();
            this.context.title;
            let e = this.context.content
              , t = this.context.btnTexts
              , a = this.context.callbacks;
            this.context.bShowAd;
            this.label1.text = t[0] || `${mgrI18n.getText("vCardSelectedDialog.5")}`,
            this.label2.text = t[1] || `${mgrI18n.getText("vCardSelectedDialog.6")}`,
            this.labelContent.text = e,
            !t[0] && (this.button1.__node.visible = !1),
            this.button1.fOnClick = (()=>{
                a && a[0]instanceof Function && a[0]() || this.closeDialog()
            }
            ),
            !t[1] && (this.button2.__node.visible = !1),
            this.button2.fOnClick = (()=>{
                a && a[1]instanceof Function && a[1]() || this.closeDialog()
            }
            ),
            this.buttonClose.fOnClick = (()=>{
                this.closeDialog()
            }
            )
        }
        onClosed() {
            super.onClosed()
        }
    }
    const AD_EVENT_ID_COUNT = "pvp_like_count";
    class vPvpCountAdDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vPvpCountAdDialog",
            this.exportNodeNames = ["CC_labelContent", "CC_labelContent1", "CC_buttonClose", "CC_buttonAdGet", "CC_labelAdWish", "CC_spriteAdIcon"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonAdGet.fOnClick = this.onTouchButtonWatch.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.fillData(),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccess.bind(this)
            })
        }
        onClosed() {
            super.onClosed()
        }
        onTouchButtonClose() {
            this.closeDialog()
        }
        onTouchButtonWatch() {
            mgrAd.triggerAdEvent(AD_EVENT_ID_COUNT, null, !0)
        }
        fillData() {
            let e = mgrCfg.get_from_ad_event_db(AD_EVENT_ID_COUNT).param.rewards;
            e[0][0],
            e[0][1]
        }
        onMsgAdEventSuccess(e) {
            e.adEventId == AD_EVENT_ID_COUNT && this.closeDialog()
        }
    }
    class vPvpLikeRewardDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vPvpLikeRewardDialog",
            this.exportNodeNames = ["CC_spriteTitle", "CC_buttonConsume", "CC_labelConsumeCount", "CC_labelDesc", "CC_labelAmount", "CC_imageIcon"]
        }
        onOpened() {
            super.onOpened(),
            CustomTween.roke(this.spriteTitle),
            mgrAd.triggerAdEvent(AD_EVENT_ID.INTER.continue_like_dialog);
            let e = [{
                itemId: 2,
                amount: 100
            }, {
                itemId: 1,
                amount: 5
            }]
              , t = e[Tools.random(0, e.length - 1)];
            this.labelDesc.text = ul.format(mgrI18n.getText("vPvpLikeRewardDialog.2"), t.amount, mgrI18n.getText(`${mgrCfg.get_from_item_template_db(t.itemId).name}`)),
            this.labelAmount.text = `x ${t.amount}`,
            Tools.loadImg(this.imageIcon, mgrCfg.get_from_item_template_db(t.itemId).icon),
            this.buttonConsume.fOnClick = (()=>{
                this.__bClosing || (mgrPlayer.addItemAmount(t.itemId, t.amount, "点击弹出奖励"),
                mgrTip.addGotItemTip(t.itemId, t.amount),
                this.closeDialog())
            }
            ),
            mgrI18n.trySetI18nImage(this.spriteTitle, "art56.png")
        }
        onClosed() {
            super.onClosed()
        }
    }
    class vResttingTipDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vResttingTipDialog",
            this.exportNodeNames = ["CC_buttonClose", "CC_buttonGoGarden", "CC_imageGarden", "CC_buttonGoStage", "CC_imageStage", "CC_labelContent", "CC_spriteNativeEmbed", "CC_spriteNativeIcon", "CC_labelNativeTitle", "CC_labelNativeDesc", "CC_buttonNativeGo", "CC_labelNativeGo", "CC_spriteNativeAdTag"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonGoGarden.fOnClick = this.onTouchButtonGoGarden.bind(this),
            this.buttonGoStage.fOnClick = this.onTouchButtonGoStage.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonBack.bind(this),
            this.spriteNativeEmbed.scale(0, 0),
            mgrAdNative.registerNativeBannerRefreshFun(AD_EVENT_ID.embed.resting_tip, this.refreshEmbedNative.bind(this), this.spriteNativeEmbed),
            mgrTip.showJumpOtherGameBanner(this)
        }
        onClosed() {
            super.onClosed()
        }
        refreshEmbedNative(e) {
            e ? (Tools.loadAdImg(this.spriteNativeIcon, e.url),
            this.labelNativeTitle.text = e.title,
            this.labelNativeGo.text = e.targetTitle,
            this.labelNativeDesc.text = e.desc,
            CustomTween.to(this.spriteNativeEmbed, {
                scaleX: 1,
                scaleY: 1
            }, 300).start(1)) : CustomTween.to(this.spriteNativeEmbed, {
                scaleX: 0,
                scaleY: 0
            }, 300).start(1)
        }
        onTouchButtonGoGarden() {
            mgrDirector.warpSceneWidthEffect("vGardenMainScene"),
            this.closeDialog()
        }
        onTouchButtonGoStage() {
            mgrDirector.warpSceneWidthEffect("vStageScene"),
            this.closeDialog()
        }
        onTouchButtonBack() {
            this.closeDialog()
        }
    }
    class vRestWeakUpDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vRestWeakUpDialog",
            this.exportNodeNames = ["CC_labelContent", "CC_buttonClose", "CC_buttonGo"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonGo.fOnClick = this.onTouchButtonGo.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            mgrTip.showJumpOtherGameBanner(this)
        }
        onClosed() {
            super.onClosed()
        }
        onTouchButtonGo() {
            this.sendMsg("MSG_WEAK_UP"),
            this.closeDialog()
        }
        onTouchButtonClose() {
            this.closeDialog()
        }
    }
    class vRewardMoreGameItem extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vRewardMoreGameItem",
            this.exportNodeNames = ["CC_imageIcon", "CC_spriteReward", "CC_labelRewardAmount", "CC_spriteGeted"],
            this.size(125, 162),
            this.anchorY = 0,
            this.anchorX = 0
        }
        onOpened() {
            super.onOpened(),
            this.buttonGet = this.imageIcon.addComponent(ScaleButton),
            this.buttonGet.fOnClick = this.onButtonGetClick.bind(this),
            this.data && this.fillByData(this.data)
        }
        onClosed() {
            super.onClosed()
        }
        onButtonGetClick() {
            let e = {
                jumpGameIndex: this.data.index || this.data.gameId
            }
              , t = JSON.stringify(e);
            this.data.fOnClickItem(this.data.index, "reward", t)
        }
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            this.imageIcon.skin = e.url,
            this.spriteGeted.visible = !!e.bReceived;
            let t = e.rewards;
            t.length && t.length >= 1 ? this.labelRewardAmount.text = `${t[0][1]}` : (console.error("fillByData no rewards:", t),
            this.spriteReward.visible = !1)
        }
    }
    class vRewardMoreGame extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vRewardMoreGame",
            this.exportNodeNames = ["CC_buttonClose", "CC_boxList"],
            this.JUMP_TYPE = "reward"
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = (()=>{
                this.closeDialog()
            }
            ),
            this.registerListeners({
                MSG_ON_OPEN_JUMP_RESULT: this.onMsgOpenJumpResult.bind(this)
            }),
            mgrSdk.openJump("80", this.JUMP_TYPE),
            mgrSdk.staticPointEvent(7012)
        }
        onClosed() {
            super.onClosed()
        }
        onMsgOpenJumpResult(e) {
            if (e.type == this.JUMP_TYPE) {
                let t = e.jumpInfo;
                this.datas;
                for (let e = 0; e < t.length; e++) {
                    t[e].fOnClickItem = this.onClickItem.bind(this)
                }
                this.fillData(t)
            }
        }
        fillData(e) {
            this.datas || (this.reuseList = new ReuseList(3,0,10),
            this.reuseList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseList),
            this.reuseList.setItemClass(vRewardMoreGameItem),
            this.reuseList.setVerticalMoveEnable(!0),
            this.reuseList.setSpaceX(20),
            this.reuseList.setSpaceY(15),
            this.reuseList.setDatas(e),
            this.datas = e)
        }
        onClickItem(e, t, a) {
            mgrSdk.jumpOtherGame(e, t, a),
            this.closeDialog()
        }
    }
    class vRoomPartTryDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vRoomPartTryDialog",
            this.exportNodeNames = ["CC_spriteBg", "CC_buttonClose", "CC_imageSpriteIcon", "CC_labelName", "CC_boxTags", "CC_labelDesc", "CC_buttonAdTry", "CC_spriteAdIcon", "CC_labelAdWish", "CC_spriteIcon"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.buttonAdTry.fOnClick = this.onTouchButtonAd.bind(this),
            this.fillData(),
            this.fillAd(),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            }),
            mgrI18n.trySetI18nImage(this.spriteIcon, "art85.png")
        }
        onClosed() {
            super.onClosed()
        }
        fillData() {
            let e = this.context.itemId
              , t = mgrCfg.get_from_part_db(e);
            Tools.loadImg(this.imageSpriteIcon, t.icon),
            this.labelName.text = t.name,
            this.labelDesc.text = t.desc;
            let a = mgrPart.getRecommendTagsByPartId(e);
            for (let e = 0; e < a.length; e++) {
                const t = a[e];
                let i = new Laya.Image;
                i.size(30, 30),
                i.pivot(i.width / 2, i.height / 2),
                Tools.loadImg(i, t.icon),
                this.boxTags.addChild(i)
            }
            this.starLevelNode || (this.starLevelNode = new vStarLevelItem({}),
            this.spriteBg.addChild(this.starLevelNode),
            this.starLevelNode.pos(this.labelName.x, this.labelName.y - 40, !0),
            this.starLevelNode.scale(1, 1, !0)),
            this.starLevelNode.fillByData(t.level)
        }
        fillAd() {}
        onTouchButtonClose() {
            this.closeDialog()
        }
        onTouchButtonAd() {
            mgrAd.triggerAdEvent(this.context.adEventId, null, !0)
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == this.context.adEventId && (this.sendMsg("MSG_AD_ROOM_TRY_SUCCESSED", {
                partId: this.context.itemId
            }),
            this.closeDialog())
        }
    }
    class vSeedSelectItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vSeedSelectItem",
            this.exportNodeNames = ["CC_buttonBg", "CC_labelName", "CC_imageIcon", "CC_labelAmount", "CC_spriteSelected"],
            this.width = 115,
            this.height = 128,
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.buttonBg.fOnClick = this.onTouchButtonBg.bind(this),
            this.data && this.fillByData(this.data)
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            let t = mgrCfg.get_from_seed_db(this.data.seedId);
            this.labelName.text = `${mgrI18n.getText(`${t.name}`)}`,
            this.starLevelNode || (this.starLevelNode = new vStarLevelItem({}),
            this.addChild(this.starLevelNode),
            this.starLevelNode.pos(this.width / 2, 50, !0),
            this.starLevelNode.scale(.7, .7, !0)),
            this.starLevelNode.fillByData(t.level),
            Tools.loadImg(this.imageIcon, t.icon);
            let a = mgrPlayer.getItemAmount(t.id);
            this.labelAmount.text = `${a}`,
            this.spriteSelected.visible = this.data.fIsSelected(this.data.seedId)
        }
        onTouchButtonBg() {
            this.data.fOnTouchSeed(this.data.seedId)
        }
    }
    class vSeedSelectDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vSeedSelectDialog",
            this.exportNodeNames = ["CC_boxList", "CC_spriteTip", "CC_labelDesc", "CC_spriteSuitNormal", "CC_spriteSuitGold", "CC_progressBarSuitNormal", "CC_labelProgressSuitNormal", "CC_progressBarSuitGold", "CC_labelProgressSuitGold", "CC_spritenameNormal", "CC_labelNameNormal", "CC_spritenameGold", "CC_labelNameGold", "CC_buttonGo", "CC_labelGo", "CC_buttonPlant", "CC_labelPlant", "CC_labelLevelTip", "CC_buttonClose", "CC_buttonBuy", "CC_labelBuyConsume", "CC_spriteBuyConsumeIcon"]
        }
        onOpened() {
            this.buttonClose.fOnClick = (()=>{
                this.closeDialog()
            }
            ),
            this.buttonGo.fOnClick = this.onTouchButtonGo.bind(this),
            this.buttonPlant.fOnClick = this.onTouchButtonSow.bind(this),
            this.buttonBuy.fOnClick = this.onTouchButtonBuy.bind(this),
            super.onOpened(),
            this.buildUi(),
            this.fillData(),
            mgrAd.triggerAdEvent(AD_EVENT_ID.INTER.seed_select_dialog)
        }
        onClosed() {
            super.onClosed()
        }
        buildUi() {
            this.reuseList = new ReuseList(4,0,10),
            this.reuseList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseList),
            this.reuseList.setItemClass(vSeedSelectItem),
            mgrGuide.registerGuideNode("vSeedSelectDialog.buttonPlant", this.buttonPlant.__node)
        }
        fillData() {
            let e, t = [];
            mgrCfg.forDb_from_seed_db((a,i)=>{
                t.push({
                    seedId: i.id,
                    fOnTouchSeed: this.onTouchSeed.bind(this),
                    fIsSelected: this.isSelected.bind(this)
                }),
                !e && mgrPlayer.getItemAmount(i.id) > 0 && (e = i.id)
            }
            ),
            this.reuseList.setDatas(t),
            this.onTouchSeed(this.selectedSeedId || e || 601)
        }
        onTouchSeed(e) {
            this.selectedSeedId = e,
            this.reuseList.refresh();
            let t = mgrCfg.get_from_seed_db(e);
            this.labelDesc.text = ul.format(mgrI18n.getText("vSeedSelectDialog.1"), mgrI18n.getText(`${t.name}`));
            let[a,i] = t.forSuitIds
              , s = mgrCfg.get_from_suit_db(a);
            Tools.loadImg(this.spriteSuitNormal, s.icon);
            let o = mgrCfg.get_from_suit_db(i);
            Tools.loadImg(this.spriteSuitGold, o.icon),
            this.labelNameNormal.text = s.name,
            this.labelNameGold.text = o.name;
            let[n,r] = mgrPart.getSuitProgress(a)
              , [l,h] = mgrPart.getSuitProgress(i);
            if (CustomTween.actionFloat(this.labelProgressSuitGold, 0, 1, 500, e=>{
                this.progressBarSuitGold.progress = l / h * e,
                this.progressBarSuitNormal.progress = n / r * e,
                this.labelProgressSuitGold.text = `${Math.floor(l * e)}/${h}`,
                this.labelProgressSuitNormal.text = `${Math.floor(n * e)}/${r}`
            }
            ).start(1),
            mgrPlayer.getItemAmount(e) <= 0) {
                this.buttonGo.__node.visible = !1,
                this.buttonPlant.__node.visible = !1,
                this.labelLevelTip.text = "",
                this.buttonBuy.__node.visible = !0;
                let t = mgrCfg.get_from_shop_template_db(e);
                this.labelBuyConsume.text = `${t.price}`,
                Tools.loadImg(this.spriteBuyConsumeIcon, mgrCfg.get_from_item_template_db(t.priceUnit).icon)
            } else
                this.buttonBuy.__node.visible = !1,
                this.buttonGo.__node.visible = !1,
                this.buttonPlant.__node.visible = !0,
                this.labelLevelTip.text = ""
        }
        isSelected(e) {
            return this.selectedSeedId == e
        }
        onTouchButtonSow() {
            this.sendMsg("MSG_SOW", {
                potId: this.context.potId,
                seedId: this.selectedSeedId
            }),
            this.closeDialog(),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vSeedSelectDialog.clickButtonPlant"
            })
        }
        onTouchButtonGo() {
            Math.random() > .5 ? mgrDirector.open2DScene("vMotionMainScene") : mgrDirector.open2DScene("vAnswerQuestionScene"),
            this.closeDialog()
        }
        onTouchButtonBuy() {
            mgrShop.requestBuy(this.selectedSeedId),
            this.fillData(),
            this.onTouchSeed(this.selectedSeedId)
        }
    }
    class vLanguageItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vLanguageItem",
            this.exportNodeNames = ["CC_imageBgPink", "CC_imageBgBlue", "CC_buttonChangeLan", "CC_imageIcon", "CC_spriteChoice", "CC_imageLanNameSel", "CC_imageLanName"],
            this.width = 390,
            this.height = 80,
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.buttonChangeLan.fOnClick = this.onTouchButtonChangeLan.bind(this),
            this.data && this.fillByData(this.data),
            this.registerListeners({
                MSG_I18N_REFRESH: this.refresh.bind(this)
            })
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            let t = "res/ui/language/" + this.data.languageNameUrl + ".png"
              , a = "res/ui/language/" + this.data.languageNameSelectedUrl + ".png"
              , i = "res/ui/language/" + this.data.iconUrl + ".png";
            this.imageIcon.skin = i,
            this.imageLanName.skin = t,
            this.imageLanNameSel.skin = a,
            this.refresh()
        }
        refresh() {
            this.context.language = mgrI18n.getLanguage(),
            this.context.language == this.data.value ? (this.spriteChoice.visible = !0,
            this.imageBgPink.visible = !1,
            this.imageBgBlue.visible = !0,
            this.imageLanName.visible = !1,
            this.imageLanNameSel.visible = !0) : (this.spriteChoice.visible = !1,
            this.imageBgPink.visible = !0,
            this.imageBgBlue.visible = !1,
            this.imageLanName.visible = !0,
            this.imageLanNameSel.visible = !1)
        }
        onTouchButtonChangeLan() {
            mgrI18n.setLanguage(this.data.value),
            this.sendMsg("MSG_CLOSE_LABGUAGE_VIEW")
        }
    }
    class vSetLanguageDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vSetLanguageDialog",
            this.exportNodeNames = ["CC_buttonClose", "CC_boxList"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.buildUi(),
            this.fillData(),
            this.registerListeners({
                MSG_CLOSE_LABGUAGE_VIEW: this.onCloseDialog.bind(this)
            })
        }
        onClosed() {
            super.onClosed()
        }
        buildUi() {
            this.reuseList = new ReuseList(1,0,5),
            this.reuseList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseList),
            this.reuseList.setItemClass(vLanguageItem),
            this.reuseList.setVerticalMoveEnable(!0),
            this.reuseList.setSpaceY(5)
        }
        fillData() {
            let e = [{
                value: E_LANGUAGE.en,
                languageNameUrl: "art_en1",
                languageNameSelectedUrl: "art_en2",
                iconUrl: "en"
            }, {
                value: E_LANGUAGE.id,
                languageNameUrl: "art_id1",
                languageNameSelectedUrl: "art_id2",
                iconUrl: "id"
            }, {
                value: E_LANGUAGE.vi,
                languageNameUrl: "art_vi1",
                languageNameSelectedUrl: "art_vi2",
                iconUrl: "vi"
            }, {
                value: E_LANGUAGE.hi,
                languageNameUrl: "art_hi1",
                languageNameSelectedUrl: "art_hi2",
                iconUrl: "hi"
            }, {
                value: E_LANGUAGE.pt,
                languageNameUrl: "art_pt1",
                languageNameSelectedUrl: "art_pt2",
                iconUrl: "pt"
            }, {
                value: E_LANGUAGE.zhcn,
                languageNameUrl: "art_zhcn1",
                languageNameSelectedUrl: "art_zhcn2",
                iconUrl: "zhcn"
            }];
            this.reuseList.setDatas(e)
        }
        onCloseDialog() {
            this.closeDialog()
        }
        onTouchButtonClose() {
            null == mgrI18n.getRecordLanguage() && mgrI18n.setLanguage(mgrI18n.getSdkLanguage()),
            this.onCloseDialog()
        }
    }
    class vSettingDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vSettingDialog",
            this.exportNodeNames = ["CC_boxMusic", "CC_buttonSwitchMusic", "CC_spriteCloseMusic", "CC_spriteOpenMusic", "CC_buttonClose", "CC_boxSoundEffect", "CC_buttonSwitchSoundEffect", "CC_spriteCloseSoundEffect", "CC_spriteOpenSoundEffect", "CC_boxVideoRecord", "CC_buttonSwitchVideoRecord", "CC_spriteCloseVideoRecord", "CC_spriteOpenVideoRecord", "CC_labelLebel", "CC_buttonChangeLan"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.buttonSwitchMusic.fOnClick = this.onTouchButtonMusic.bind(this),
            this.buttonSwitchSoundEffect.fOnClick = this.onTouchButtonSoundEffect.bind(this),
            this.buttonSwitchVideoRecord.fOnClick = this.onTouchButtonVideoRecord.bind(this),
            this.buttonChangeLan.fOnClick = this.onTouchButtonChangeLan.bind(this),
            mgrLoader.loadFont("smallGameSettlement", this.labelLebel),
            this.fillData(),
            Tools.registerTouchHander(this, this.onTouchNodeBg.bind(this)),
            mgrTip.showJumpOtherGameBanner(this)
        }
        onClosed() {
            super.onClosed()
        }
        onAnimationFinished() {
            mgrTip.showJumpOtherGameBanner(this)
        }
        onTouchButtonClose() {
            this.closeDialog()
        }
        onTouchButtonMusic() {
            mgrSound.getMusicVolmue() > 0 ? mgrSound.pauseMusic("settingDialog") : mgrSound.resumeMusic("settingDialog"),
            this.fillData()
        }
        onTouchButtonSoundEffect() {
            mgrSound.getEffectVolume() > 0 ? mgrSound.pauseEffect("settingDialog") : mgrSound.resumeEffect("settingDialog"),
            this.fillData()
        }
        onTouchButtonVideoRecord() {
            mgrChannel.setUserOpenVideoRecord(!mgrChannel.getUserOpenVideoRecord()),
            this.fillData()
        }
        onTouchButtonChangeLan() {
            mgrDirector.openDialog("vSetLanguageDialog")
        }
        fillData() {
            this.boxVideoRecord.visible = mgrChannel.haveVideoRecord();
            let e = mgrChannel.getUserOpenVideoRecord();
            this.spriteOpenVideoRecord.visible = e,
            this.spriteCloseVideoRecord.visible = !e;
            let t = 1 == mgrSound.getMusicVolmue();
            this.spriteOpenMusic.visible = t,
            this.spriteCloseMusic.visible = !t;
            let a = 1 == mgrSound.getEffectVolume();
            this.spriteOpenSoundEffect.visible = a,
            this.spriteCloseSoundEffect.visible = !a,
            this.labelLebel.text = `${mgrInteraction.level}`
        }
        onTouchNodeBg(e) {
            if (e.isBegin)
                this._b_drag_to_right = !0,
                this._turn_count = 0,
                this._b_poped = !1,
                this._v_start_pos = e.pos;
            else if (e.isMove) {
                let t = this._v_start_pos
                  , a = e.pos;
                this._b_drag_to_right ? a.x < t.x - 20 && (this._b_drag_to_right = !1,
                this._turn_count++,
                console.log("turn left", this._turn_count)) : a.x > t.x + 20 && (this._b_drag_to_right = !0,
                this._turn_count++,
                console.log("turn right", this._turn_count)),
                this._b_poped || this._turn_count >= 10 && (mgrDirector.openDialog("vDebugDialog"),
                this._b_poped = !0)
            }
        }
    }
    class vShopPropItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vShopPropItem",
            this.exportNodeNames = ["CC_buttonBg", "CC_imageIcon", "CC_labelConsumeCount", "CC_spriteConsumeIcon", "CC_labelCount"],
            this.size(236, 206),
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            mgrLoader.loadFont("shop_prop", this.labelCount),
            this.buttonBg.fOnClick = (()=>{
                this.data && this.data.fOnClickBuy && this.data.fOnClickBuy(this.data.shopId)
            }
            ),
            this.data && this.fillByData(this.data)
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            let t = mgrCfg.get_from_shop_template_db(this.data.shopId);
            Tools.loadImg(this.imageIcon, t.sprIcon, !0),
            Tools.loadImg(this.spriteConsumeIcon, mgrCfg.get_from_item_template_db(t.priceUnit).icon),
            this.labelConsumeCount.text = `x ${t.price}`,
            t.items[0][0],
            Const.ITEM_ID_ENERGY,
            this.labelCount.text = `${t.items[0][1]}`
        }
    }
    class vShopPartItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vShopPartItem",
            this.exportNodeNames = ["CC_buttonBg", "CC_imageIcon", "CC_spriteHaved", "CC_boxTagLayout", "CC_labelConsumeCount", "CC_spriteConsumeIcon", "CC_spriteTagDiscount"],
            this.size(156, 184),
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.buttonBg.fOnClick = (()=>{
                let e = mgrCfg.get_from_shop_template_db(this.data.shopId).items[0][0];
                mgrPlayer.getItemAmount(e) > 0 ? mgrTip.showMsgTip(`${mgrI18n.getText("vShopPartItem.1")}`) : this.data && this.data.fOnClickBuy && this.data.fOnClickBuy(this.data.shopId)
            }
            ),
            this.data && this.fillByData(this.data),
            mgrI18n.trySetI18nImage(this.spriteTagDiscount, "discount.png")
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            let t = mgrCfg.get_from_shop_template_db(this.data.shopId)
              , a = mgrShop.isDiscount(t.id)
              , i = t.items[0][0]
              , s = (t.items[0][1],
            mgrCfg.get_from_item_template_db(i));
            Tools.loadImg(this.imageIcon, s.icon),
            Tools.loadImg(this.spriteConsumeIcon, mgrCfg.get_from_item_template_db(t.priceUnit).icon),
            this.labelConsumeCount.text = `x ${t.price}`,
            a && (this.labelConsumeCount.text = `x ${Math.floor(t.price / 2)}`),
            this.spriteHaved.visible = mgrPlayer.getItemAmount(i) > 0,
            this.boxTagLayout.removeChildren(0, this.boxTagLayout.numChildren);
            let o = this.data.shopId
              , n = mgrPart.getRecommendTagsByPartId(o)
              , r = mgrCfg.get_from_part_db(o);
            for (let e = 0; e < n.length; e++) {
                const t = n[e];
                let a = new Laya.Image;
                a.size(22.75, 22.75),
                a.pivot(a.width / 2, a.height / 2),
                Tools.loadImg(a, t.icon),
                this.boxTagLayout.addChild(a)
            }
            this.starLevelNode || (this.starLevelNode = new vStarLevelItem({}),
            this.addChild(this.starLevelNode),
            this.starLevelNode.pos(this.width / 2, 130, !0),
            this.starLevelNode.scale(.7, .7, !0)),
            this.starLevelNode.fillByData(r.level),
            this.spriteTagDiscount.visible = a,
            CustomTween.scaleForever(this.spriteTagDiscount, 1, 1.2, 500)
        }
    }
    class vShopSeedItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vShopSeedItem",
            this.exportNodeNames = ["CC_buttonBg", "CC_labelName", "CC_spriteConsumeIcon", "CC_labelConsumeCount", "CC_imageIcon"],
            this.width = 116,
            this.height = 170,
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.data && this.fillByData(this.data),
            this.buttonBg.fOnClick = this.onTouchButtonBg.bind(this)
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            let t = mgrCfg.get_from_shop_template_db(this.data.shopId);
            this.labelName.text = `${mgrI18n.getText(`${t.name}`)}`,
            Tools.loadImg(this.spriteConsumeIcon, mgrCfg.get_from_item_template_db(t.priceUnit).icon),
            this.labelConsumeCount.text = `${t.price}`;
            let a = t.items[0][0];
            Tools.loadImg(this.imageIcon, mgrCfg.get_from_item_template_db(a).icon)
        }
        onTouchButtonBg() {
            this.data && this.data.fOnClickBuy(this.data.shopId)
        }
    }
    var shopCategory;
    !function(e) {
        e[e.coin = 1] = "coin",
        e[e.part = 2] = "part",
        e[e.food = 3] = "food",
        e[e.seed = 4] = "seed"
    }(shopCategory || (shopCategory = {}));
    class vShopDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vShopDialog",
            this.exportNodeNames = ["CC_spriteBg", "CC_spriptBg2", "CC_buttonClose", "CC_buttonTagProp", "CC_spriteTagPropSelected", "CC_spriteCurrency", "CC_buttonTagSeed", "CC_spriteTagSeedSelected", "CC_spriteFlowers", "CC_buttonTagPart", "CC_spriteTagPartSelected", "CC_spriteClothes", "CC_boxListProp", "CC_boxListPart", "CC_boxListSeed", "CC_boxTop", "CC_buttonGold", "CC_imageGoldIcon", "CC_labelGoldCount", "CC_imageDiamond", "CC_imageDiamondIcon", "CC_labelDiamondCount", "CC_imageEnergy", "CC_imageEnergyIcon", "CC_labelEnergyCount"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = this.onTouchButtonBack.bind(this),
            this.buttonTagProp.fOnClick = this.onTouchButtonTagProp.bind(this),
            this.buttonTagPart.fOnClick = this.onTouchButtonTagPart.bind(this),
            this.buttonTagSeed.fOnClick = this.onTouchButtonTagSeed.bind(this),
            this.buildUi(),
            this.fillData(),
            this.selectTag(1),
            this.registerListeners({
                MSG_ITEM_AMOUNT_CHANGED: this.fillData.bind(this)
            }),
            this.fadeIn(),
            mgrSdk.staticPointEvent(7009),
            mgrI18n.trySetI18nImage(this.spriptBg2, "art11.png"),
            mgrI18n.trySetI18nImage(this.spriteCurrency, "art09.png"),
            mgrI18n.trySetI18nImage(this.spriteFlowers, "art06.png"),
            mgrI18n.trySetI18nImage(this.spriteClothes, "art51.png")
        }
        onClosed() {
            super.onClosed()
        }
        fadeIn() {
            this.boxTop.alpha = 0,
            CustomTween.from(this.spriteBg, {
                y: this.spriteBg.y - 500
            }, 500, Laya.Ease.backOut).callback(()=>{
                this.boxTop.alpha = 1,
                Layout.widget(.5, 0, this.boxTop, {
                    x: .5,
                    y: 0
                }),
                CustomTween.from(this.boxTop, {
                    y: this.boxTop.y - 100
                }, 300).start(1)
            }
            ).start(1)
        }
        buildUi() {
            this.reuseListProp = new ReuseList(2,0,3),
            this.reuseListProp.size(this.boxListProp.width, this.boxListProp.height),
            this.boxListProp.addChild(this.reuseListProp),
            this.reuseListProp.setItemClass(vShopPropItem),
            this.reuseListProp.setSpaceX(5),
            this.reuseListPart = new ReuseList(3,0,10),
            this.reuseListPart.size(this.boxListPart.width, this.boxListPart.height),
            this.boxListPart.addChild(this.reuseListPart),
            this.reuseListPart.setItemClass(vShopPartItem),
            this.reuseListPart.setVerticalMoveEnable(!0),
            this.reuseListPart.setSpaceX(5),
            this.reuseListPart.setSpaceY(10),
            this.reuseListSeed = new ReuseList(4,0,10),
            this.reuseListSeed.size(this.boxListSeed.width, this.boxListSeed.height),
            this.boxListSeed.addChild(this.reuseListSeed),
            this.reuseListSeed.setItemClass(vShopSeedItem),
            this.reuseListSeed.setSpaceX(4),
            this.reuseListSeed.setSpaceY(30)
        }
        fillData() {
            this.labelDiamondCount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_DIAMONDS)}`,
            this.labelGoldCount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_GOLD)}`,
            this.labelEnergyCount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_ENERGY)}`
        }
        selectTag(e) {
            this.spriteTagPropSelected.visible = e == shopCategory.coin,
            this.spriteTagPartSelected.visible = e == shopCategory.part,
            this.spriteTagSeedSelected.visible = e == shopCategory.seed,
            this.boxListProp.visible = e == shopCategory.coin,
            this.boxListPart.visible = e == shopCategory.part,
            this.boxListSeed.visible = e == shopCategory.seed;
            let t = []
              , a = mgrShop.getAllShopItemListByCategory([e]);
            for (let e = 0; e < a.length; e++) {
                const i = a[e];
                t.push({
                    shopId: i.id,
                    fOnClickBuy: this.onClickBuy.bind(this)
                })
            }
            e == shopCategory.coin ? (this.reuseListProp.setDatas(t),
            this.reuseListProp.scrollTo(0)) : e == shopCategory.part ? (this.reuseListPart.setDatas(t),
            this.reuseListPart.scrollTo(0)) : e == shopCategory.seed && (this.reuseListSeed.setDatas(t),
            this.reuseListSeed.scrollTo(0))
        }
        onClickBuy(e) {
            mgrShop.requestBuy(e) && (this.reuseListPart.refresh(),
            mgrSound.play(108))
        }
        onTouchButtonTagProp() {
            this.selectTag(shopCategory.coin)
        }
        onTouchButtonTagPart() {
            this.selectTag(shopCategory.part)
        }
        onTouchButtonTagSeed() {
            this.selectTag(shopCategory.seed)
        }
        onTouchButtonBack() {
            this.closeDialog()
        }
    }
    class vSignDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vSignDialog",
            this.exportNodeNames = ["CC_spriteBg", "CC_spriteTitle", "CC_spriteRole", "CC_sprite7day", "CC_spriteCoin", "CC_spriteItem1", "CC_spriteGeted1", "CC_spriteItem2", "CC_spriteGeted2", "CC_spriteItem3", "CC_spriteGeted3", "CC_spriteItem4", "CC_spriteGeted4", "CC_buttonClose", "CC_buttonGet", "CC_spriteAd", "CC_labelGet", "CC_labelRemainTime", "CC_spriteEffect1"],
            vSignDialog.signDialg = this
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.buttonGet.fOnClick = this.onTouchButtonAdGet.bind(this),
            this.fillData(),
            Timer.callLoop(.016, this.fillData.bind(this), this),
            this.fadeIn(),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            }),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_card_star, this.spriteEffect1),
            mgrSdk.staticPointEvent(7004),
            mgrI18n.trySetI18nImage(this.spriteTitle, "art01.png"),
            mgrI18n.trySetI18nImage(this.spriteGeted1, "art03.png"),
            mgrI18n.trySetI18nImage(this.spriteGeted2, "art03.png"),
            mgrI18n.trySetI18nImage(this.spriteGeted3, "art03.png"),
            mgrI18n.trySetI18nImage(this.spriteGeted4, "art03.png"),
            mgrI18n.trySetI18nImage(this.sprite7day, "art41.png")
        }
        onClosed() {
            super.onClosed(),
            vSignDialog.signDialg = null
        }
        trySign(e) {
            e -= 1;
            mgrSign.getSignDay();
            let t = mgrSign.getState()
              , a = mgrSign.getSignIndex();
            a > e ? mgrTip.showMsgTip(`${mgrI18n.getText("vSignDialog.5")}`) : a == e ? t == SignState.signed ? mgrTip.showMsgTip(`${mgrI18n.getText("vSignDialog.5")}`) : t == SignState.waitGap ? mgrTip.showMsgTip(`${mgrI18n.getText("vSignDialog.6")}`) : mgrSign.sign() : mgrTip.showMsgTip(`${mgrI18n.getText("vSignDialog.7")}`)
        }
        fadeIn() {
            let e;
            this.buttonClose.__node.alpha = 0,
            this.buttonGet.__node.alpha = 0,
            this.labelRemainTime.alpha = 0,
            this.spriteRole.alpha = 0,
            this.spriteCoin.alpha = 0;
            for (let t = 1; t <= 4; t++)
                e = 200 * t,
                CustomTween.to(this[`spriteItem ${t}`], {
                    scaleX: 0,
                    scaleY: 0
                }, 0).delayTime(e).to({
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).start(1);
            CustomTween.to(this.buttonGet.__node, {
                alpha: 0
            }, e).to({
                alpha: 1
            }, 300).start(1),
            CustomTween.to(this.labelRemainTime, {
                alpha: 0
            }, e).to({
                alpha: 1
            }, 300).start(1),
            CustomTween.to(this.buttonClose.__node, {
                alpha: 0
            }, e).to({
                alpha: 1
            }, 300).start(1),
            CustomTween.to(this.spriteRole, {
                alpha: 1
            }, 1e3).start(1),
            CustomTween.to(this.spriteCoin, {
                alpha: 1
            }, 1e3).start(1)
        }
        fillData() {
            let e = mgrSign.getSignDay()
              , t = mgrSign.getSignIndex()
              , a = mgrSign.getState()
              , i = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.double_sign);
            this.spriteRole.visible = e <= 7,
            this.spriteCoin.visible = e > 7;
            let s = mgrCfg.get_from_sign_db(e, t);
            if (a == SignState.canSign)
                i && s.bNeedAd ? (this.labelGet.text = `${mgrI18n.getText("vSignDialog.1")}`,
                this.spriteAd.visible = !0) : (this.labelGet.text = `${mgrI18n.getText("vSignDialog.2")}`,
                this.spriteAd.visible = !1),
                Tools.layoutH(this.buttonGet.__node),
                this.labelRemainTime.text = "";
            else if (a == SignState.waitGap) {
                i && s.bNeedAd ? (this.labelGet.text = `${mgrI18n.getText("vSignDialog.1")}`,
                this.spriteAd.visible = !0) : (this.labelGet.text = `${mgrI18n.getText("vSignDialog.2")}`,
                this.spriteAd.visible = !1),
                Tools.layoutH(this.buttonGet.__node);
                let e = mgrSign.getRemainTime();
                this.labelRemainTime.text = `${mgrI18n.getText("vSignDialog.3")}${Tools.formatTime(e, "%M:%S")}`
            } else
                a == SignState.signed && (this.labelGet.text = `${mgrI18n.getText("vSignDialog.4")}`,
                this.spriteAd.visible = !1,
                Tools.layoutH(this.buttonGet.__node));
            for (let i = 1; i <= 4; i++) {
                let s = this[`spriteItem ${i}`]
                  , o = s.getChildByName("iconPart")
                  , n = s.getChildByName("iconCoin")
                  , r = s.getChildByName("labelAmount")
                  , l = i - 1
                  , h = mgrCfg.get_from_sign_db(e, l);
                l < t ? this[`spriteGeted ${i}`].visible = !0 : l == t ? a == SignState.signed ? this[`spriteGeted ${i}`].visible = !0 : a == SignState.waitGap ? this[`spriteGeted ${i}`].visible = !1 : a == SignState.canSign ? this[`spriteGeted ${i}`].visible = !1 : a == SignState.signOver && (this[`spriteGeted ${i}`].visible = !0) : l > t && (this[`spriteGeted ${i}`].visible = !1);
                let d = h.rewardItemId.length;
                o.visible = !1,
                n.visible = !1;
                for (let e = 1; e <= d; e++) {
                    let t = h.rewardItemId[e - 1]
                      , a = h.rewardAmount[e - 1]
                      , i = mgrCfg.get_from_part_db(t);
                    if (i)
                        Tools.loadImg(o, i.icon),
                        o.visible = !0,
                        r.text = "x1";
                    else {
                        let e = mgrCfg.get_from_item_template_db(t);
                        Tools.loadImg(n, e.icon),
                        r.text = `x ${a}`,
                        n.visible = !0
                    }
                }
            }
            mgrTip.showBadgeWithNumber(this.buttonGet.__node, a != SignState.canSign || s.bNeedAd ? 0 : 1)
        }
        onTouchButtonClose() {
            this.closeDialog()
        }
        onTouchButtonItem1() {
            this.trySign(1)
        }
        onTouchButtonItem2() {
            this.trySign(2)
        }
        onTouchButtonItem3() {
            this.trySign(3)
        }
        onTouchButtonItem4() {
            this.trySign(4)
        }
        onTouchButtonAdGet() {
            if (this.spriteAd.visible) {
                let e = mgrSign.getSignIndex()
                  , t = mgrSign.getState()
                  , a = mgrSign.getSignIndex();
                a > e ? mgrTip.showMsgTip(`${mgrI18n.getText("vSignDialog.5")}`) : a == e && (t == SignState.signed ? mgrTip.showMsgTip(`${mgrI18n.getText("vSignDialog.5")}`) : t == SignState.waitGap ? mgrTip.showMsgTip(`${mgrI18n.getText("vSignDialog.6")}`) : mgrAd.triggerAdEvent(AD_EVENT_ID.VIDEO.double_sign, null, !0))
            } else
                this.trySign(mgrSign.getSignIndex() + 1)
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID.VIDEO.double_sign && this.trySign(mgrSign.getSignIndex() + 1)
        }
    }
    class vSmallGameSettlementRankItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vSmallGameSettlementRankItem",
            this.exportNodeNames = ["CC_spritebg2", "CC_spritebg3", "CC_spritebg1", "CC_spriteBgNormal", "CC_spriteCrown1", "CC_spriteCrown2", "CC_spriteCrown3", "CC_labelRank", "CC_labelName", "CC_labelScore"],
            this.width = 402,
            this.height = 45,
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            mgrLoader.loadFont("nearbyRank", this.labelRank),
            this.data && this.fillByData(this.data)
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            this.spritebg1.visible = 1 == this.data.player.rank,
            this.spritebg2.visible = 2 == this.data.player.rank,
            this.spritebg3.visible = 3 == this.data.player.rank,
            this.spriteBgNormal.visible = this.data.player.rank > 3,
            this.spriteCrown1.visible = 1 == this.data.player.rank,
            this.spriteCrown2.visible = 2 == this.data.player.rank,
            this.spriteCrown3.visible = 3 == this.data.player.rank;
            let t = `${this.data.player.rank}`;
            1 == this.data.player.rank && (t = ""),
            2 == this.data.player.rank && (t = ""),
            3 == this.data.player.rank && (t = ""),
            this.labelRank.text = t,
            this.labelName.text = this.data.player.name,
            this.labelScore.text = `${mgrI18n.getText("vSmallGameSettlementRankItem.1")} ${this.data.player.score}`,
            this.data.player.uid == mgrPlayer.getUid() ? this.labelName.color = "#f85fbb" : this.labelName.color = "#99777b"
        }
    }
    class vSmallGameSettlementDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vSmallGameSettlementDialog",
            this.exportNodeNames = ["CC_spriteTitleLearn", "CC_spriteTitleMotion", "CC_labelScore", "CC_spriteNativeReplace", "CC_spriteText", "CC_spriteNativeEmbed", "CC_spriteNativeIcon", "CC_labelNativeTitle", "CC_labelNativeDesc", "CC_buttonNativeGo", "CC_labelNativeGo", "CC_spriteNativeAdTag", "CC_buttonGet", "CC_labelGet", "CC_boxRankList", "CC_labelRank", "CC_labelRankScore", "CC_buttonVideoShare", "CC_boxLayoutShareConsume", "CC_labelShareTip"]
        }
        onOpened() {
            super.onOpened(),
            mgrOfflineNearbyRank.updateSelfInfo(),
            this.buildUi(),
            this.fillData(),
            this.fadeIn(),
            this.buttonVideoShare.fOnClick = this.onTouchButtonVideoShare.bind(this),
            this.buttonGet.fOnClick = (()=>{
                if (!this.__bClosing) {
                    for (let e = 0; e < this.context.items.length; e++) {
                        const t = this.context.items[e];
                        mgrTip.addGotItemTip(t.itemId, t.amount),
                        mgrPlayer.addItemAmount(t.itemId, t.amount, "运动")
                    }
                    this.closeDialog(),
                    this.sendMsg("MSG_GUIDE_EVENT", {
                        id: "vSmallGameSettlementDialog.clickButtonGet"
                    })
                }
            }
            ),
            mgrGuide.registerGuideNode("vSmallGameSettlementDialog.buttonGet", this.buttonGet.__node),
            this.spriteNativeEmbed.scale(0, 0),
            mgrAdNative.registerNativeBannerRefreshFun(AD_EVENT_ID.embed.motion_settlement, this.refreshEmbedNative.bind(this), this.spriteNativeEmbed),
            mgrTip.showJumpOtherGameBanner(this),
            mgrI18n.trySetI18nImage(this.spriteText, "ad04.png")
        }
        onClosed() {
            super.onClosed()
        }
        fadeIn() {
            if (this.context.acticonWPos) {
                let e = this.nodeResource.parent
                  , t = e.localToGlobal(new Laya.Point(this.nodeResource.x,this.nodeResource.y));
                this.nodeResource.scale(.1, .1);
                let a = e.globalToLocal(this.context.acticonWPos);
                this.nodeResource.pos(a.x, a.y),
                CustomTween.jumpTo(this.nodeResource, t, 1, 500)
            }
        }
        buildUi() {
            mgrLoader.loadFont("smallGameSettlement", this.labelScore),
            this.reuseRankList = new ReuseList(1,0,10),
            this.reuseRankList.size(this.boxRankList.width, this.boxRankList.height),
            this.boxRankList.addChild(this.reuseRankList),
            this.reuseRankList.setItemClass(vSmallGameSettlementRankItem),
            this.reuseRankList.setVerticalMoveEnable(!0)
        }
        fillData() {
            let e = this.context.score
              , t = (this.context.historyMaxScore,
            this.context.items);
            this.context.tipScore,
            this.context.tipChest;
            this.labelScore.text = `${e}`;
            for (let e = 0; e < t.length; e++) {
                t[e]
            }
            let a = this.context.rankId
              , i = []
              , s = mgrOfflineNearbyRank.getPlayersByRankId(a);
            for (let e = 0; e < s.length; e++) {
                const t = s[e];
                i.push({
                    player: t
                })
            }
            this.reuseRankList.setDatas(i),
            this.reuseRankList.setScroll(0);
            let o = mgrOfflineNearbyRank.getOwnInfoByRankId(a);
            this.labelRankScore.text = `${mgrI18n.getText("vSmallGameSettlementDialog.3")} ${o.score}`,
            this.labelRank.text = `${mgrI18n.getText("vSmallGameSettlementDialog.4")} ${o.rank}`,
            this.buttonVideoShare.__node.visible = this.context.bCanShareVideo;
            let n = mgrChannel.getRecordRewardAmount();
            this.labelShareTip.text = `${mgrI18n.getText("vSmallGameSettlementDialog.5")} ${Tools.getBigNumberStr(n)}`,
            this.boxLayoutShareConsume.visible = n > 0 && this.context.bCanShareVideo
        }
        refreshEmbedNative(e) {
            e ? (Tools.loadAdImg(this.spriteNativeIcon, e.url),
            this.labelNativeTitle.text = e.title,
            this.labelNativeGo.text = e.targetTitle,
            this.labelNativeDesc.text = e.desc,
            CustomTween.delayTime(this.spriteNativeReplace, 1e3).to({
                scaleX: 0,
                scaleY: 0
            }, 300).callback(()=>{
                CustomTween.to(this.spriteNativeEmbed, {
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).start(1)
            }
            ).start(1)) : CustomTween.to(this.spriteNativeEmbed, {
                scaleX: 0,
                scaleY: 0
            }, 300).callback(()=>{
                CustomTween.to(this.spriteNativeReplace, {
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).start(1)
            }
            ).start(1)
        }
        onTouchButtonVideoShare() {
            mgrSdk.shareGameVideo(),
            this.boxLayoutShareConsume.visible = !1,
            this.buttonVideoShare.__node.visible = !1
        }
    }
    class vStageBianshenAdDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vStageBianshenAdDialog",
            this.exportNodeNames = ["CC_spriteBg", "CC_spritePaopao", "CC_buttonSettlementNormal", "CC_buttonSettlementAd"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonSettlementNormal.fOnClick = this.onTouchButtonSettlementNormal.bind(this),
            this.buttonSettlementAd.fOnClick = this.onTouchButtonSettlementAd.bind(this),
            this.fadeIn(),
            mgrSound.play(248),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            })
        }
        onClosed() {
            super.onClosed()
        }
        fadeIn() {
            CustomTween.from(this.spriteBg, {
                x: this.spriteBg.x - 576
            }, 500, Laya.Ease.backOut).start(1)
        }
        onTouchButtonSettlementNormal() {
            this.context.settlementNormal(),
            this.closeDialog()
        }
        onTouchButtonSettlementAd() {
            mgrAd.triggerAdEvent(AD_EVENT_ID.VIDEO.stage_ad_settlement, null, !0)
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID.VIDEO.stage_ad_settlement && (this.context.settlementAd(),
            this.closeDialog())
        }
    }
    const AD_EVENT_ID_COUNT$1 = "stage_count_add";
    class vStageCountAdDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vStageCountAdDialog",
            this.exportNodeNames = ["CC_buttonClose", "CC_labelTip", "CC_buttonAdGet", "CC_labelAdWish", "CC_spriteAdIcon"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonAdGet.fOnClick = this.onTouchButtonWatch.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.fillData(),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccess.bind(this)
            })
        }
        onClosed() {
            super.onClosed()
        }
        onTouchButtonClose() {
            this.closeDialog()
        }
        onTouchButtonWatch() {
            mgrAd.triggerAdEvent(AD_EVENT_ID_COUNT$1, null, !0)
        }
        fillData() {
            let e = mgrCfg.get_from_ad_event_db(AD_EVENT_ID_COUNT$1).param.rewards
              , t = (e[0][0],
            e[0][1]);
            this.labelTip.text = ul.format(mgrI18n.getText("vStageCountAdDialog.2"), t)
        }
        onMsgAdEventSuccess(e) {
            e.adEventId == AD_EVENT_ID_COUNT$1 && this.closeDialog()
        }
    }
    class vStageFailedTryDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vStageFailedTryDialog",
            this.exportNodeNames = ["CC_buttonClose", "CC_imageSpriteIcon", "CC_labelName", "CC_boxTags", "CC_labelDesc", "CC_buttonGet", "CC_labelGet", "CC_buttonAdGet", "CC_spriteAdIcon", "CC_labelAdWish", "CC_spriteIcon"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            this.buttonGet.fOnClick = this.onTouchButtonGo.bind(this),
            this.buttonAdGet.fOnClick = this.onTouchButtonAd.bind(this),
            this.fillData(),
            this.fillAd(),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            }),
            mgrTip.showNativeBanner("ba_stage_result_failed", this),
            mgrI18n.trySetI18nImage(this.spriteIcon, "art85.png")
        }
        onClosed() {
            super.onClosed()
        }
        onAnimationFinished() {
            mgrTip.showJumpOtherGameBanner(this)
        }
        fillData() {
            let e = this.context.itemId
              , t = mgrCfg.get_from_part_db(e);
            Tools.loadImg(this.imageSpriteIcon, t.icon),
            this.labelName.text = t.name,
            this.labelDesc.text = t.desc;
            let a = mgrPart.getRecommendTagsByPartId(e);
            for (let e = 0; e < a.length; e++) {
                const t = a[e];
                let i = new Laya.Image;
                i.size(30, 30),
                i.pivot(i.width / 2, i.height / 2),
                Tools.loadImg(i, t.icon),
                this.boxTags.addChild(i)
            }
            this.starLevelNode || (this.starLevelNode = new vStarLevelItem({}),
            this.addChild(this.starLevelNode)),
            this.starLevelNode.pos(215, 205, !0),
            this.starLevelNode.scale(1, 1, !0),
            this.starLevelNode.fillByData(t.level)
        }
        fillAd() {
            let e = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.stage_try);
            this.buttonAdGet.__node.visible = e
        }
        onTouchButtonClose() {
            this.closeDialog(),
            this.sendMsg("MSG_CLOASE_FAILED_TRY_DIALOG")
        }
        onTouchButtonGo() {
            let e = mgrCfg.get_from_part_db(this.context.itemId);
            mgrShop.goWidthRouterId(e.router),
            this.closeDialog()
        }
        onTouchButtonAd() {
            mgrAd.triggerAdEvent(this.context.adEventId, null, !0)
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == this.context.adEventId && (this.sendMsg("MSG_AD_FAILED_TRY_SUCCESSED", {
                partId: this.context.itemId
            }),
            this.closeDialog())
        }
    }
    class vStagePreviewDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vStagePreviewDialog",
            this.exportNodeNames = ["CC_spriteTitle", "CC_labelTitle", "CC_spriteText", "CC_imageRewardIcon", "CC_labelRewardAmount", "CC_labelRewardName", "CC_spriteNativeEmbed", "CC_spriteNativeIcon", "CC_labelNativeTitle", "CC_labelNativeDesc", "CC_buttonNativeGo", "CC_labelNativeGo", "CC_spriteNativeAdTag", "CC_buttonStart", "CC_labelConsumeAmount", "CC_imageConsumeIcon", "CC_labelStart", "CC_buttonStartAd", "CC_spriteAdIcon", "CC_labelAdWish", "CC_buttonClose", "CC_imageTopBar", "CC_imageConsumeIcon2", "CC_labelConsumeAmount2"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = (()=>{
                this.closeDialog()
            }
            ),
            this.buttonStart.fOnClick = this.onTouchButtonStart.bind(this),
            this.buttonStartAd.fOnClick = this.onTouchButtonStartAd.bind(this),
            this.fillData(),
            this.fillAd(),
            this.registerListeners({
                MSG_ITEM_AMOUNT_CHANGED: this.fillData.bind(this),
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            }),
            mgrGuide.registerGuideNode("vStagePreviewDialog.buttonStart", this.buttonStart.__node),
            mgrAd.triggerAdEvent(AD_EVENT_ID.INTER.stage_preview),
            this.spriteNativeEmbed.scale(0, 0),
            mgrAdNative.registerNativeBannerRefreshFun(AD_EVENT_ID.embed.stage_preview, this.refreshEmbedNative.bind(this), this.spriteNativeEmbed),
            mgrI18n.trySetI18nImage(this.spriteText, "art08.png")
        }
        onClosed() {
            super.onClosed()
        }
        onAnimationFinished() {
            mgrTip.showJumpOtherGameBanner(this)
        }
        fillData() {
            let e = this.context.stageId
              , t = mgrCfg.get_from_stage_db(e)
              , a = t.passReward[t.passReward.length - 1][0]
              , i = t.passReward[t.passReward.length - 1][1]
              , s = mgrCfg.get_from_item_template_db(a);
            this.labelTitle.text = t.name,
            Tools.loadImg(this.imageRewardIcon, s.icon),
            this.labelRewardAmount.text = `x ${i}`,
            this.labelRewardName.text = s.name,
            this.labelConsumeAmount.text = `-${t.costs}`;
            let o = mgrCfg.get_from_part_db(a);
            o && (this.starLevelNode || (this.starLevelNode = new vStarLevelItem({}),
            this.imageRewardIcon.addChild(this.starLevelNode),
            this.starLevelNode.pos(this.imageRewardIcon.width / 2, this.imageRewardIcon.height + 10, !0),
            this.starLevelNode.scale(.7, .7, !0),
            this.starLevelNode.fillByData(o.level))),
            this.labelConsumeAmount2.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_ENERGY)}/${mgrPlayer.getRecoverMaxAmount(Const.ITEM_ID_ENERGY)}`
        }
        fillAd() {
            let e = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.free_start_stage);
            mgrPlayer.getItemAmount(Const.ITEM_ID_ENERGY) <= 0 && 1 == e ? (this.buttonStartAd.__node.visible = !0,
            this.buttonStart.__node.visible = !1) : (this.buttonStartAd.__node.visible = !1,
            this.buttonStart.__node.visible = !0)
        }
        refreshEmbedNative(e) {
            e ? (Tools.loadAdImg(this.spriteNativeIcon, e.url),
            this.labelNativeTitle.text = e.title,
            this.labelNativeGo.text = e.targetTitle,
            this.labelNativeDesc.text = e.desc,
            CustomTween.to(this.spriteNativeEmbed, {
                scaleX: 1,
                scaleY: 1
            }, 300).start(1),
            this.buttonStart.__node.y = 30,
            this.buttonStartAd.__node.y = 30) : (CustomTween.to(this.spriteNativeEmbed, {
                scaleX: 0,
                scaleY: 0
            }, 300).start(1),
            this.buttonStart.__node.y = 0,
            this.buttonStartAd.__node.y = 0)
        }
        startGame() {
            this.closeDialog(),
            mgrStage.beginStage(this.context.stageId),
            mgrDirector.open2DScene("vRoomScene", {
                stageId: this.context.stageId
            })
        }
        onTouchButtonAdd() {
            mgrDirector.openDialog("vStageCountAdDialog")
        }
        onTouchButtonStart() {
            let e = this.context.stageId;
            if (!mgrStage.checkStageCost(e))
                return mgrTip.showMsgTip(`${mgrI18n.getText("vStagePreviewDialog.3")}`),
                mgrDirector.openDialog("vShopDialog"),
                !1;
            this.startGame(),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vStagePreviewDialog.clickButtonStart"
            })
        }
        onTouchButtonStartAd() {
            mgrAd.triggerAdEvent(AD_EVENT_ID.VIDEO.free_start_stage, this.numChildren, !0)
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID.VIDEO.free_start_stage && this.startGame()
        }
    }
    var E_STORY_DIALOG_STATE;
    !function(e) {
        e[e.ready = 1] = "ready",
        e[e.left = 2] = "left",
        e[e.right = 3] = "right",
        e[e.option = 4] = "option",
        e[e.settlement = 5] = "settlement"
    }(E_STORY_DIALOG_STATE || (E_STORY_DIALOG_STATE = {}));
    class vStoryDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vStoryDialog",
            this.exportNodeNames = ["CC_imageBg", "CC_imageRoleLeft", "CC_imageRoleRight", "CC_imageBgLeft", "CC_labelContentLeft", "CC_spriteXingxingLeft", "CC_spriteShadowLeft", "CC_imageTitleLeft", "CC_labelNameLeft", "CC_imageBgRight", "CC_labelContentRight", "CC_spriteXingxingRight", "CC_imageTitleRight", "CC_labelNameRight", "CC_spriteShadowRight", "CC_buttonSelectItem1", "CC_labelContent1", "CC_buttonSelectItem2", "CC_labelContent2", "CC_buttonSkip"],
            this.score = 0
        }
        onOpened() {
            super.onOpened(),
            this.buttonSelectItem1.fOnClick = this.onTouchButtonItem1.bind(this),
            this.buttonSelectItem2.fOnClick = this.onTouchButtonItem2.bind(this),
            this.buttonSkip.fOnClick = this.onTouchButtonSkip.bind(this),
            Tools.registerTouchHander(this.imageBg, e=>{
                e.isClick && this.onTouchSelf()
            }
            );
            let e = this.context.bShowSkip;
            this.skipCallback = this.context.skipCallback,
            this.finishCallback = this.context.finishCallback,
            this.storyId = this.context.storyId,
            this.buttonSkip.__node.visible = e,
            this.imageRoleLeft.visible = !1,
            this.imageRoleRight.visible = !1,
            this.imageBgLeft.visible = !1,
            this.imageBgRight.visible = !1,
            this.buttonSelectItem1.__node.visible = !1,
            this.buttonSelectItem2.__node.visible = !1,
            CustomTween.to(this.spriteXingxingLeft, {
                y: this.spriteXingxingLeft.y - 15
            }, 500, Laya.Ease.sineIn).to({
                y: this.spriteXingxingLeft.y
            }, 500, Laya.Ease.sineOut).start(0),
            CustomTween.to(this.spriteXingxingRight, {
                y: this.spriteXingxingRight.y - 15
            }, 500, Laya.Ease.sineIn).to({
                y: this.spriteXingxingRight.y
            }, 500, Laya.Ease.sineOut).start(0),
            CustomTween.scaleForever(this.spriteShadowLeft, 1, .6, 500),
            CustomTween.scaleForever(this.spriteShadowRight, 1, .6, 500),
            this.stManager = new FSMObject,
            this.stManager.registerState(E_STORY_DIALOG_STATE.ready, this.inReady.bind(this), this.exeReady.bind(this), this.outReady.bind(this)),
            this.stManager.registerState(E_STORY_DIALOG_STATE.left, this.inLeft.bind(this), this.exeLeft.bind(this), this.outLeft.bind(this)),
            this.stManager.registerState(E_STORY_DIALOG_STATE.right, this.inRight.bind(this), this.exeRight.bind(this), this.outRight.bind(this)),
            this.stManager.registerState(E_STORY_DIALOG_STATE.option, this.inOption.bind(this), this.exeOption.bind(this), this.outOption.bind(this)),
            this.stManager.registerState(E_STORY_DIALOG_STATE.settlement, this.inSettlement.bind(this), this.exeSettlement.bind(this), this.outSettlement.bind(this)),
            this.stManager.setNextState(E_STORY_DIALOG_STATE.ready),
            Timer.callLoop(.016, ()=>{
                this.stManager.update()
            }
            , this)
        }
        onClosed() {
            super.onClosed()
        }
        inReady() {
            if (this.curMovieId)
                if (this.nextMovieId)
                    this.curMovieId = this.nextMovieId,
                    this.nextMovieId = null;
                else {
                    let e = mgrCfg.get_from_story_play_db(this.curMovieId);
                    this.curMovieId = e.nextMovieId
                }
            else {
                let e = mgrCfg.get_from_story_db(this.storyId);
                this.curMovieId = e.startMovieId
            }
            if (this.stManager)
                if (this.curMovieId) {
                    if (mgrCfg.get_from_story_play_db(this.curMovieId).canSelectMovieIds.length > 0)
                        this.stManager.setNextState(E_STORY_DIALOG_STATE.option);
                    else {
                        let e = mgrCfg.get_from_movie_db(this.curMovieId);
                        "LEFT" == e.dir ? this.stManager.setNextState(E_STORY_DIALOG_STATE.left) : "RIGHT" == e.dir && this.stManager.setNextState(E_STORY_DIALOG_STATE.right)
                    }
                } else
                    this.stManager.setNextState(E_STORY_DIALOG_STATE.settlement)
        }
        exeReady() {}
        outReady() {}
        inLeft() {
            let e = mgrCfg.get_from_movie_db(this.curMovieId);
            if (e.bgTexture ? this.imageBg.__my_skin != e.bgTexture && (this.imageBg.alpha = 0,
            this.imageBg.__my_skin = e.bgTexture,
            Tools.loadImg(this.imageBg, e.bgTexture, !1, ()=>{
                CustomTween.to(this.imageBg, {
                    alpha: 1
                }, 300).start(1)
            }
            )) : (this.imageBg.__my_skin = null,
            CustomTween.to(this.imageBg, {
                alpha: 0
            }, 300).start(1)),
            e.rolePic && (this.imageRoleLeft.x = -300,
            this.imageRoleLeft.visible = !0,
            Tools.loadImg(this.imageRoleLeft, e.rolePic, !0, ()=>{
                this.imageRoleLeft.scale(e.scale, e.scale),
                CustomTween.to(this.imageRoleLeft, {
                    x: this.imageRoleLeft.width / 2 + 30
                }, 300, Laya.Ease.backOut).start(1)
            }
            )),
            this.imageRoleLeft.removeChildren(),
            e.spineId) {
                this.imageRoleLeft.x = -300,
                this.imageRoleLeft.visible = !0;
                let t = ULSkeleton.create(e.spineId);
                this.imageRoleLeft.addChild(t),
                t.scaleX = e.bFlip ? -1 : 1,
                t.pos(this.imageRoleLeft.width / 2, this.imageRoleLeft.height),
                t.playAnimation(e.animation),
                this.imageRoleLeft.scale(e.scale, e.scale),
                CustomTween.to(this.imageRoleLeft, {
                    x: this.imageRoleLeft.width / 2 + 30
                }, 300, Laya.Ease.backOut).start(1)
            }
            this.labelNameLeft.text = e.name,
            this.labelContentLeft.text = e.content,
            this.imageBgLeft.visible = !0,
            this.imageBgLeft.scale(0, 0),
            CustomTween.delayTime(this.imageBgLeft, 100).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            e.bgmSoundId && mgrSound.play(e.bgmSoundId),
            e.sfxSoundId && mgrSound.play(e.sfxSoundId)
        }
        exeLeft() {}
        outLeft() {
            CustomTween.to(this.imageBgLeft, {
                scaleX: 0,
                scaleY: 0
            }, 300).start(1),
            CustomTween.to(this.imageRoleLeft, {
                x: -300
            }, 300).start(1)
        }
        inRight() {
            let e = mgrCfg.get_from_movie_db(this.curMovieId);
            if (e.bgTexture ? this.imageBg.__my_skin != e.bgTexture && (this.imageBg.alpha = 0,
            this.imageBg.__my_skin = e.bgTexture,
            Tools.loadImg(this.imageBg, e.bgTexture, !1, ()=>{
                CustomTween.to(this.imageBg, {
                    alpha: 1
                }, 300).start(1)
            }
            )) : (this.imageBg.__my_skin = null,
            CustomTween.to(this.imageBg, {
                alpha: 0
            }, 300).start(1)),
            e.rolePic && (this.imageRoleRight.visible = !0,
            this.imageRoleRight.x = mgrDirector.width + 300,
            Tools.loadImg(this.imageRoleRight, e.rolePic, !0, ()=>{
                this.imageRoleRight.scale(e.scale, e.scale),
                CustomTween.to(this.imageRoleRight, {
                    x: mgrDirector.width - this.imageRoleRight.width / 2 - 30
                }, 300, Laya.Ease.backOut).start(1)
            }
            )),
            this.imageRoleRight.removeChildren(),
            e.spineId) {
                this.imageRoleRight.visible = !0,
                this.imageRoleRight.x = mgrDirector.width + 300;
                let t = ULSkeleton.create(e.spineId);
                this.imageRoleRight.addChild(t),
                t.pos(this.imageRoleRight.width / 2 + 80, this.imageRoleRight.height),
                t.playAnimation(e.animation),
                this.imageRoleRight.scale(e.scale, e.scale),
                CustomTween.to(this.imageRoleRight, {
                    x: mgrDirector.width - this.imageRoleRight.width / 2 - 20
                }, 300, Laya.Ease.backOut).start(1)
            }
            this.labelNameRight.text = e.name,
            this.labelContentRight.text = e.content,
            this.imageBgRight.visible = !0,
            this.imageBgRight.scale(0, 0),
            CustomTween.delayTime(this.imageBgRight, 100).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            e.bgmSoundId && mgrSound.play(e.bgmSoundId),
            e.sfxSoundId && mgrSound.play(e.sfxSoundId)
        }
        exeRight() {}
        outRight() {
            CustomTween.to(this.imageBgRight, {
                scaleX: 0,
                scaleY: 0
            }, 300).start(1),
            CustomTween.to(this.imageRoleRight, {
                x: mgrDirector.width + 300
            }, 300).start(1)
        }
        inOption() {
            let e = mgrCfg.get_from_story_play_db(this.curMovieId)
              , t = e.canSelectMovieIds[0]
              , a = e.canSelectMovieIds[1]
              , i = mgrCfg.get_from_movie_db(t)
              , s = mgrCfg.get_from_movie_db(a);
            this.labelContent1.text = i.desc,
            this.labelContent2.text = s.desc,
            this.buttonSelectItem1.__node.visible = !0,
            this.buttonSelectItem1.__node.scale(0, 0),
            CustomTween.to(this.buttonSelectItem1.__node, {
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.buttonSelectItem2.__node.visible = !0,
            this.buttonSelectItem2.__node.scale(0, 0),
            CustomTween.to(this.buttonSelectItem2.__node, {
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1)
        }
        exeOption() {}
        outOption() {
            CustomTween.to(this.buttonSelectItem1.__node, {
                scaleX: 0,
                scaleY: 0
            }, 300, Laya.Ease.backOut).start(1),
            CustomTween.to(this.buttonSelectItem2.__node, {
                scaleX: 0,
                scaleY: 0
            }, 300, Laya.Ease.backOut).start(1)
        }
        inSettlement() {
            this.finishCallback && this.finishCallback(this.score),
            CustomTween.to(this, {
                alpha: 0
            }, 300).callback(()=>{
                this.closeDialog(!0)
            }
            ).start(1)
        }
        exeSettlement() {}
        outSettlement() {}
        onTouchButtonItem1() {
            let e = mgrCfg.get_from_story_play_db(this.curMovieId);
            this.score += e.scores[0] || 0,
            this.nextMovieId = e.canSelectMovieIds[0],
            this.stManager && this.stManager.setNextState(E_STORY_DIALOG_STATE.ready)
        }
        onTouchButtonItem2() {
            let e = mgrCfg.get_from_story_play_db(this.curMovieId);
            this.score += e.scores[1] || 0,
            this.nextMovieId = e.canSelectMovieIds[1],
            this.stManager && this.stManager.setNextState(E_STORY_DIALOG_STATE.ready)
        }
        onTouchButtonSkip() {
            this.skipCallback && this.skipCallback(),
            CustomTween.to(this, {
                alpha: 0
            }, 300).callback(()=>{
                this.closeDialog(!0)
            }
            ).start(1)
        }
        onTouchSelf() {
            this.stManager.getCurState() != E_STORY_DIALOG_STATE.left && this.stManager.getCurState() != E_STORY_DIALOG_STATE.right || this.stManager.setNextState(E_STORY_DIALOG_STATE.ready)
        }
    }
    class vTestDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vTestDialog",
            this.exportNodeNames = ["CC_buttonClose"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonClose.fOnClick = (()=>{
                this.closeDialog()
            }
            )
        }
        onClosed() {
            super.onClosed()
        }
    }
    const AD_EVENT_ID_ENERGY_POTION = "free_energy_potion";
    class vTiredTipDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vTiredTipDialog",
            this.exportNodeNames = ["CC_labelContent", "CC_buttonClose", "CC_buttonUse", "CC_buttonBuy", "CC_labelPrice", "CC_imagePrice", "CC_buttonAd"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonUse.fOnClick = this.onTouchButtonUse.bind(this),
            this.buttonBuy.fOnClick = this.onTouchButtonBuy.bind(this),
            this.buttonAd.fOnClick = this.onTouchButtonAd.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            mgrSound.play(209),
            this.fillData(),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            }),
            mgrTip.showJumpOtherGameBanner(this)
        }
        onClosed() {
            super.onClosed()
        }
        fillData() {
            if (mgrPlayer.getItemAmount(Const.ITEM_ID_INTERACTION_ENERGY) > 0)
                this.buttonUse.__node.visible = !0,
                this.buttonBuy.__node.visible = !1,
                this.buttonAd.__node.visible = !1;
            else {
                if (this.buttonUse.__node.visible = !1,
                mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID_ENERGY_POTION))
                    this.buttonBuy.__node.visible = !1,
                    this.buttonAd.__node.visible = !0;
                else {
                    this.buttonBuy.__node.visible = !0,
                    this.buttonAd.__node.visible = !1;
                    let e = mgrCfg.get_from_shop_template_db(Const.ITEM_ID_INTERACTION_ENERGY);
                    this.labelPrice.text = `${e.price}`,
                    Tools.loadImg(this.imagePrice, mgrCfg.get_from_item_template_db(e.priceUnit).icon)
                }
            }
        }
        onTouchButtonUse() {
            mgrInteraction.eatFood(Const.ITEM_ID_INTERACTION_ENERGY),
            this.closeDialog()
        }
        onTouchButtonBuy() {
            mgrShop.requestBuy(Const.ITEM_ID_INTERACTION_ENERGY) && this.fillData()
        }
        onTouchButtonAd() {
            mgrAd.triggerAdEvent(AD_EVENT_ID_ENERGY_POTION, null, !0)
        }
        onTouchButtonClose() {
            this.closeDialog()
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID_ENERGY_POTION && (mgrPlayer.addItemAmount(Const.ITEM_ID_INTERACTION_ENERGY, 1, "看广告获得饥饿药水"),
            mgrInteraction.eatFood(Const.ITEM_ID_INTERACTION_ENERGY),
            this.closeDialog())
        }
    }
    class vTryAgainDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vTryAgainDialog",
            this.exportNodeNames = ["CC_labelContent", "CC_buttonClose", "CC_buttonConsume", "CC_labelConsumeCount", "CC_imageConsumeIcon", "CC_buttonWatchAd", "CC_labelWatchAd", "CC_progressBar", "CC_spriteTipPoint"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonWatchAd.fOnClick = this.onTouchButtonAd.bind(this),
            this.buttonConsume.fOnClick = this.onTouchButtonBuy.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonBack.bind(this),
            this.progressBar.barName = "bar",
            this.progressBar.style = ULPROGRESSBAR_STYLE.fan,
            this.fillData(),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            })
        }
        onClosed() {
            super.onClosed()
        }
        fillData() {
            let e = this.context.adEventId
              , t = mgrAd.preCheckCanTriggerAdEvent(e);
            this.buttonWatchAd.__node.visible = t;
            let a = this.context.consume;
            this.labelConsumeCount.text = `${a.amount}`,
            Tools.loadImg(this.imageConsumeIcon, mgrCfg.get_from_item_template_db(a.itemId).icon),
            this.progressTween = CustomTween.actionFloat(this.progressBar.__node, 0, 1, 5e3, e=>{
                this.progressBar.progress = e,
                this.spriteTipPoint.rotation = 360 * e
            }
            ).callback(()=>{
                this.onTouchButtonBack()
            }
            ).start(1)
        }
        onTouchButtonAd() {
            this.progressTween.clear(),
            mgrAd.triggerAdEvent(this.context.adEventId, null, !0)
        }
        onTouchButtonBuy() {
            this.progressTween.clear(),
            mgrPlayer.getItemAmount(this.context.consume.itemId) < this.context.consume.amount ? mgrShop.tipItemNotEnough(this.context.consume.itemId) : (mgrPlayer.addItemAmount(this.context.consume.itemId, -this.context.consume.amount, "复活消耗"),
            this.context.buyCallback && this.context.buyCallback(),
            this.closeDialog())
        }
        onTouchButtonBack() {
            this.context.cancleCallback && this.context.cancleCallback(),
            this.closeDialog()
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == this.context.adEventId && (this.context.onAdCallback && this.context.onAdCallback(),
            this.closeDialog(),
            this.context.adEventId == AD_EVENT_ID.VIDEO.playBallTryAgain && mgrSdk.staticPointEvent(5010),
            this.context.adEventId == AD_EVENT_ID.VIDEO.ropeSkippingTryAgain && mgrSdk.staticPointEvent(5009))
        }
    }
    class vWeakupTipDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vWeakupTipDialog",
            this.exportNodeNames = ["CC_labelContent", "CC_buttonClose", "CC_buttonGo"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonGo.fOnClick = this.onTouchButtonGo.bind(this),
            this.buttonClose.fOnClick = this.onTouchButtonClose.bind(this),
            mgrTip.showJumpOtherGameBanner(this)
        }
        onClosed() {
            super.onClosed()
        }
        onTouchButtonGo() {
            mgrDirector.warpSceneWidthEffect("vRestScene"),
            this.closeDialog()
        }
        onTouchButtonClose() {
            this.closeDialog()
        }
    }
    class vWishDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "dialog/vWishDialog",
            this.exportNodeNames = ["CC_spriteBg", "CC_spriteCenterPos"],
            this.bFadingOut = !1,
            this.parentObjects = [],
            this.castTrials = [],
            this.bEnded = !1,
            this.dirCount = Tools.random(3, 5)
        }
        onOpened() {
            super.onOpened(),
            Tools.registerTouchHander(this.spriteBg, this.onTouchSpriteBg.bind(this)),
            this.buildScene(),
            this.fadeIn(),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_xuyuanchi_fz, this.spriteCenterPos, 0)
        }
        onClosed() {
            super.onClosed()
        }
        getPreLoadModelIds() {
            return [MODEL_ID.wish_cast_trail, MODEL_ID.effect.eff_ui_xuyuanchi_fz, MODEL_ID.effect.eff_ui_xuyuanchi_bz]
        }
        fadeIn() {
            this.spriteBg.alpha = 0,
            CustomTween.to(this.spriteBg, {
                alpha: 1
            }, 500).start(1)
        }
        isShowShadow() {
            return !1
        }
        fadeOut() {
            this.bFadingOut || (this.bFadingOut = !0,
            CustomTween.to(this.spriteBg, {
                alpha: 0
            }, 300).callback(()=>{
                this.closeDialog(!0)
            }
            ).start(1))
        }
        buildScene() {
            this.spriteBg.zOrder = -2,
            this.colliderBox = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(10, 20, .01)),
            this.colliderBox.meshRenderer.enable = !1;
            let e = this.colliderBox.addComponent(Laya.PhysicsCollider)
              , t = new Laya.BoxColliderShape(10,20,.01);
            e.colliderShape = t,
            this.add3DEffectAtFront(this.colliderBox, this.spriteCenterPos, 0),
            this.cameraFront.transform.position = new Laya.Vector3(0,0,10)
        }
        onTouchSpriteBg(e) {
            if (!this.bEnded)
                if (e.isBegin) {
                    for (let e = 1; e <= this.dirCount; e++) {
                        let t = new Laya.Sprite3D;
                        t.name = "po",
                        this.add3DEffectAtFront(t, this.spriteCenterPos, 0);
                        let a = mgrLoader.Pool.getModel(MODEL_ID.wish_cast_trail);
                        this.link2Node(t, a, t.name),
                        this.parentObjects.push(t),
                        this.castTrials.push(a),
                        t.transform.rotationEuler = new Laya.Vector3(0,0,360 / this.dirCount * e)
                    }
                    this.syncTrail(new Laya.Vector2(e.pos.x,e.pos.y));
                    for (let e = 0; e < this.castTrials.length; e++) {
                        const t = this.castTrials[e];
                        t.getChildAt(0).trailFilter.time = 5,
                        t.getChildAt(0).getChildAt(0).trailFilter.time = 5
                    }
                } else if (e.isMove)
                    this.syncTrail(new Laya.Vector2(e.pos.x,e.pos.y));
                else if (e.isEnd) {
                    this.bEnded = !0;
                    for (let e = 0; e < this.castTrials.length; e++) {
                        const t = this.castTrials[e];
                        t.getChildAt(0).trailFilter.time = 2,
                        t.getChildAt(0).getChildAt(0).trailFilter.time = 2,
                        CustomTween.actionFloat(t.transform, 0, 1, 500, e=>{
                            t.transform.localPosition = new Laya.Vector3(t.transform.localPosition.x * (1 - e),t.transform.localPosition.y * (1 - e),t.transform.localPosition.z * (1 - e))
                        }
                        ).start(1)
                    }
                    Timer.callLater(2, ()=>{
                        this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_xuyuanchi_bz, this.spriteCenterPos, 0),
                        Timer.callLater(.1, ()=>{
                            this.context.fOnFinish(),
                            Timer.callLoop(.016, e=>{
                                1 == DialogBase.ShowingDialog.length && (e.stop(),
                                this.fadeOut())
                            }
                            , this)
                        }
                        , this)
                    }
                    , this)
                }
        }
        syncTrail(e) {
            let t = Tools.castRayFromScreenPos(this.scene3DFront, this.cameraFront, e);
            if (t.succeeded) {
                this.castTrials[0].transform.position = t.point.clone();
                for (let e = 1; e <= this.dirCount - 1; e++) {
                    this.castTrials[e].transform.localPosition = this.castTrials[0].transform.localPosition.clone()
                }
            }
        }
    }
    class vChapterNode extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vChapterNode",
            this.exportNodeNames = ["CC_buttonStage1", "CC_buttonStage2", "CC_buttonStage3", "CC_buttonStage4", "CC_buttonStage5", "CC_buttonStage6", "CC_buttonStage7", "CC_buttonStage8", "CC_spriteEffect1", "CC_spriteEffect2", "CC_spriteEffect3", "CC_spriteEffect4", "CC_spriteEffect5"],
            this.width = 768,
            this.height = 1280,
            this.anchorX = 0,
            this.anchorY = 0,
            this.registerListeners({
                MSG_PLAY_FINISH_ANIMATION: this.onMsgPlayFinishAnimation.bind(this)
            })
        }
        onOpened() {
            this.data && this.fillByData(this.data),
            this.calledPlayFinishAnimation && this.onMsgPlayFinishAnimation(this.calledPlayFinishAnimation),
            this.addEffect()
        }
        onClosed() {}
        addEffect() {
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_tree_star, this.spriteEffect1, 0),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_tree_star, this.spriteEffect2, 0),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_tree_star, this.spriteEffect3, 0),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_tree_star, this.spriteEffect5, 0)
        }
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            let t = mgrCfg.get_from_stage_chapter_db(this.data.chapterId);
            for (let e = 0; e < t.stageIds.length; e++) {
                const a = t.stageIds[e];
                let i = mgrCfg.get_from_stage_db(a)
                  , s = !!i.storyId
                  , o = mgrStage.getStageRating(a) == EStageRating.pass
                  , [n,r] = i.passReward[i.passReward.length - 1]
                  , l = n >= 1e4
                  , h = this[`buttonStage ${e + 1}`].__node
                  , d = h.getChildByName("paopao")
                  , c = h.getChildByName("light")
                  , g = h.getChildByName("labelName")
                  , _ = d.getChildByName("icon")
                  , m = d.getChildByName("gou")
                  , u = d.getChildByName("buttonReview")
                  , p = u.addComponent(ScaleButton)
                  , C = h.getChildByName("bg2");
                mgrGuide.registerGuideNode(`vStageScene.stage ${a}`, h),
                p.fOnClick = (()=>{
                    this.onReviewStage(a)
                }
                ),
                this[`buttonStage ${e + 1}`].fOnClick = (()=>{
                    this.onClickStage(a)
                }
                ),
                c.visible = !o && l,
                CustomTween.rotateForever(c),
                g.text = ul.format(mgrI18n.getText("vChapterNode.1"), a),
                _.visible = !o,
                Tools.loadImg(_, mgrCfg.get_from_item_template_db(n).icon),
                u.visible = o && s,
                m.visible = o,
                mgrStage.getCurrentStageId() == a && (CustomTween.scaleForever(C, 1, 1.2, 700),
                CustomTween.scaleForever(g, 1, 1.2, 700))
            }
        }
        onReviewStage(e) {
            this.data.onReviewStage && this.data.onReviewStage(e)
        }
        onClickStage(e) {
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: `vStageScene.clickStage ${e}`
            }),
            this.data.onClickStage && this.data.onClickStage(e)
        }
        onMsgPlayFinishAnimation(e) {
            if (this.calledPlayFinishAnimation = e,
            !this.bResLoaded)
                return;
            let t = mgrCfg.get_from_stage_chapter_db(this.data.chapterId).stageIds.indexOf(e.stageId);
            if (-1 == t)
                return;
            const a = e.stageId;
            let i = mgrCfg.get_from_stage_db(a)
              , s = !!i.storyId
              , o = !1
              , [n,r] = i.passReward[i.passReward.length - 1]
              , l = n >= 1e4
              , h = this[`buttonStage ${t + 1}`].__node
              , d = h.getChildByName("paopao")
              , c = h.getChildByName("light")
              , g = h.getChildByName("labelName")
              , _ = d.getChildByName("icon")
              , m = d.getChildByName("gou")
              , u = h.getChildByName("bg2")
              , p = d.getChildByName("buttonReview");
            c.visible = !o && l,
            CustomTween.rotateForever(c),
            g.text = ul.format(mgrI18n.getText("vChapterNode.1"), a),
            _.visible = !o,
            Tools.loadImg(_, mgrCfg.get_from_item_template_db(n).icon),
            p.visible = o && s,
            m.visible = o,
            CustomTween.to(c, {
                scaleX: 0,
                scaleY: 0
            }, 300).start(1),
            CustomTween.to(d, {
                scaleX: 0,
                scaleY: 0
            }, 300).delayTime(1e3).callback(()=>{
                o = !0,
                c.visible = !o && l,
                CustomTween.rotateForever(c),
                g.text = ul.format(mgrI18n.getText("vChapterNode.1"), a),
                _.visible = !o,
                Tools.loadImg(_, mgrCfg.get_from_item_template_db(n).icon),
                p.visible = o && s,
                m.visible = o
            }
            ).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            mgrStage.getCurrentStageId() == a && (CustomTween.scaleForever(u, 1, 1.2, 700),
            CustomTween.scaleForever(g, 1, 1.2, 700))
        }
    }
    class vDailyTaskItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vDailyTaskItem",
            this.exportNodeNames = ["CC_spriteBgIconBg", "CC_spriteRewardIcon", "CC_labelRewardAmount", "CC_labelDesc", "CC_labelProgress", "CC_buttonGet", "CC_labelGet", "CC_spriteFinished", "CC_buttonGo", "CC_labelGo"],
            this.size(511, 123),
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.buttonGo.fOnClick = this.onTouchButtonGo.bind(this),
            this.buttonGet.fOnClick = this.onTouchButtonGet.bind(this),
            this.data && this.fillByData(this.data)
        }
        onClosed() {}
        onTouchButtonGo() {
            this.data && this.data.fOnGo && this.data.fOnGo(this.data.taskId)
        }
        onTouchButtonGet() {
            this.data && this.data.fOnGet && this.data.fOnGet(this.data.taskId)
        }
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            let t = mgrAchievement.getAchievement(this.data.taskId);
            this.labelDesc.text = t.template.name,
            this.labelRewardAmount.text = `+${t.template.rewardAmount}`,
            this.labelProgress.text = `${t.count}/${t.maxCount}`,
            t.state == AchievementState.received ? (this.spriteFinished.visible = !0,
            this.buttonGo.__node.visible = !1,
            this.buttonGet.__node.visible = !1) : t.state == AchievementState.finished ? (this.spriteFinished.visible = !1,
            this.buttonGet.__node.visible = !0,
            this.buttonGo.__node.visible = !1) : (this.spriteFinished.visible = !1,
            this.buttonGet.__node.visible = !1,
            this.buttonGo.__node.visible = !0),
            mgrTip.showBadgeWithNumber(this.buttonGet.__node, 1)
        }
    }
    class vEatingFoood extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vEatingFoood",
            this.exportNodeNames = ["CC_imageIcon", "CC_buttonAdd", "CC_spriteAmount", "CC_labelAmount", "CC_buttonWatchAd", "CC_spriteRecomend"],
            this.width = 120,
            this.height = 120,
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.buttonAdd.fOnClick = this.onTouchButtonAdd.bind(this),
            this.buttonWatchAd.fOnClick = this.onTouchButtonWatchAd.bind(this),
            Tools.registerTouchHander(this.imageIcon, e=>{
                e.isClick && (this.data && this.data.fOnClick(this.data.foodId) && (this.imageIcon.scale(0, 0),
                CustomTween.delayTime(this.imageIcon, 200).to({
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).start(1)),
                this.sendMsg("MSG_GUIDE_EVENT", {
                    id: "vEatingScene.clickFoodItem1"
                }))
            }
            ),
            this.data && this.fillByData(this.data),
            mgrI18n.trySetI18nImage(this.spriteRecomend, "art85.png")
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            this.bResLoaded) {
                if (this.data.foodId) {
                    let e = mgrPlayer.getItemAmount(this.data.foodId)
                      , t = mgrCfg.get_from_food_db(this.data.foodId);
                    if (Tools.loadImg(this.imageIcon, t.icon),
                    this.labelAmount.text = `${e}`,
                    e > 0)
                        this.spriteAmount.visible = !0,
                        this.imageIcon.visible = !0,
                        this.buttonWatchAd.__node.visible = !1,
                        this.buttonAdd.__node.visible = !1;
                    else {
                        let e = this.data.fGetFoodGetWay(this.data.foodId);
                        "ad" == e ? (this.spriteAmount.visible = !0,
                        this.buttonWatchAd.__node.visible = !0,
                        this.imageIcon.visible = !0,
                        this.buttonAdd.__node.visible = !1) : "shop" == e && (this.spriteAmount.visible = !1,
                        this.imageIcon.visible = !1,
                        this.buttonAdd.__node.visible = !0,
                        this.buttonWatchAd.__node.visible = !1)
                    }
                } else
                    this.spriteAmount.visible = !1,
                    this.imageIcon.visible = !1,
                    this.buttonWatchAd.__node.visible = !1,
                    this.buttonAdd.__node.visible = !0;
                501 == this.data.foodId && mgrGuide.registerGuideNode("vEatingScene.foodItem1", this),
                this.spriteRecomend.visible = this.data.foodId == mgrInteraction.getTodayRecommendFoodId(),
                CustomTween.scaleForever(this.spriteRecomend, .8, 1, 1e3)
            }
        }
        onTouchButtonAdd() {
            this.data.fOnClickAdd()
        }
        onTouchButtonWatchAd() {
            this.data.fOnClickWatchAdd(this.data.foodId)
        }
    }
    class vEditorCartonMaterialPart extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vEditorCartonMaterialPart",
            this.exportNodeNames = ["CC_buttonBg", "CC_labelContent"],
            this.width = 200,
            this.height = 65,
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.data && this.fillByData(this.data),
            this.buttonBg.fOnClick = (()=>{
                this.data.fOnClickModel ? this.data.fOnClickModel(this.data.modelId) : this.data.fOnClickSkinName(this.data.skinName)
            }
            )
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            this.bResLoaded)
                if (this.data.fOnClickModel ? this.labelContent.text = this.data.modelId : this.labelContent.text = this.data.skinName,
                this.data.skinName) {
                    let e = mgrMaterial.materialInfos[this.data.modelId] && mgrMaterial.materialInfos[this.data.modelId][this.data.skinName];
                    this.labelContent.color = e ? "#00ff00" : "#ff0000"
                } else {
                    let e = mgrMaterial.materialInfos[this.data.modelId];
                    this.labelContent.color = e ? "#00ff00" : "#ff0000"
                }
        }
    }
    class vEditorDynamicBoneAnimationItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vEditorDynamicBoneAnimationItem",
            this.exportNodeNames = ["CC_labelContent"],
            this.width = 200,
            this.height = 65,
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            Tools.registerTouchHander(this.nodeResource, e=>{
                e.isClick && this.data.fOnClickAnimation && this.data.fOnClickAnimation(this.data.animationId)
            }
            ),
            this.data && this.fillByData(this.data)
        }
        onClosed() {}
        fillByData(e) {
            this.data = e,
            this.bResLoaded && (this.labelContent.text = `${this.data.animationId}`)
        }
        onSelect(e) {}
    }
    class vEditorDynamicBoneChild extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vEditorDynamicBoneChild",
            this.exportNodeNames = ["CC_buttonBg", "CC_labelContent"],
            this.width = 200,
            this.height = 65,
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.buttonBg.fOnClick = (()=>{
                this.data.onClickNode && this.data.onClickNode(this.data.node)
            }
            ),
            this.data && this.fillByData(this.data)
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            this.labelContent.text = this.data.node.name;
            let t = this.generateRoute(this.data.node, this.data.model)
              , a = mgrMaterial.hasDynamicBone(this.data.model.__modelId, t);
            this.labelContent.color = a ? "#00ff00" : "#ff0000"
        }
        generateRoute(e, t) {
            if (e == t)
                return "/";
            let a = [];
            for (; a.push(e.name),
            (e = e.parent) != t; )
                ;
            let i = "/";
            for (let e = a.length - 1; e >= 0; e--)
                i += `${a[e]}`,
                0 != e && (i += "/");
            return i
        }
    }
    class vEditorDynamicBonePart extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vEditorDynamicBonePart",
            this.exportNodeNames = ["CC_buttonBg", "CC_labelContent"],
            this.width = 200,
            this.height = 65,
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.data && this.fillByData(this.data),
            this.buttonBg.fOnClick = (()=>{
                this.data.fOnClickPart && this.data.fOnClickPart(this.data.partId)
            }
            )
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            let t = mgrCfg.get_from_part_db(this.data.partId);
            this.labelContent.text = `${t.id}:${t.name}`;
            let a = mgrMaterial.dynamicBoneInfos[t.modelId] && mgrMaterial.dynamicBoneInfos[t.modelId].length > 0;
            this.labelContent.color = a ? "#00ff00" : "#ff0000"
        }
    }
    class vGameCenterShopPart extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vGameCenterShopPart",
            this.exportNodeNames = ["CC_buttonBg", "CC_imageIcon", "CC_spriteConsumeIcon", "CC_labelPrice", "CC_spriteSelected", "CC_spriteHaved"],
            this.size(130, 193),
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.data && this.fillByData(this.data),
            this.buttonBg.fOnClick = this.onTouchButtonBg.bind(this)
        }
        onClosed() {}
        onTouchButtonBg() {
            this.data && this.data.fOnClick(this.data.partId)
        }
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            let t = mgrCfg.get_from_part_db(this.data.partId);
            Tools.loadImg(this.imageIcon, t.icon);
            let a = mgrCfg.get_from_shop_template_db(this.data.partId);
            this.labelPrice.text = `${a.price}`,
            this.spriteSelected.visible = this.data.fOnSelected(this.data.partId),
            this.spriteHaved.visible = mgrPlayer.getItemAmount(this.data.partId) > 0
        }
    }
    class vGardenAchievementRewardDetailNode extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vGardenAchievementRewardDetailNode",
            this.exportNodeNames = ["CC_boxList"]
        }
        onOpened() {}
        onClosed() {}
    }
    class vGuideTipNode extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vGuideTipNode",
            this.exportNodeNames = ["CC_boxStyle1", "CC_spriteDialogBg1", "CC_spriteXingxingRight1", "CC_spriteShadowRight1", "CC_spriteRole1", "CC_labelContent1", "CC_boxStyle2", "CC_spriteDialogBg2", "CC_labelContent2"]
        }
        onOpened() {
            this.fillData(),
            this.fadeIn(),
            Timer.callLoop(.016, ()=>{
                Layout.widget(this.context.widget.x, this.context.widget.y, this, {
                    x: .5,
                    y: .5
                })
            }
            , this)
        }
        onClosed() {}
        fadeIn() {
            this.context.tipDelayTime && this.context.tipDelayTime > 0 ? (this.spriteDialogBg1.scale(0, 0),
            this.spriteDialogBg2.scale(0, 0),
            Timer.callLater(this.context.tipDelayTime, ()=>{
                CustomTween.to(this.spriteDialogBg1, {
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).start(1),
                CustomTween.to(this.spriteDialogBg2, {
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).start(1)
            }
            , this)) : (this.spriteDialogBg1.scale(0, 0),
            this.spriteDialogBg2.scale(0, 0),
            CustomTween.to(this.spriteDialogBg1, {
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            CustomTween.to(this.spriteDialogBg2, {
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1))
        }
        fillData() {
            this.labelContent1.text = `${mgrI18n.getText(`${this.context.content}`)}`,
            this.labelContent2.text = `${mgrI18n.getText(`${this.context.content}`)}`;
            let e = this.context.type;
            1 == e ? (this.spriteDialogBg1.visible = !0,
            this.spriteDialogBg2.visible = !1) : 2 == e && (this.spriteDialogBg1.visible = !1,
            this.spriteDialogBg2.visible = !0)
        }
    }
    class vIllustrateBookCard extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vIllustrateBookCard",
            this.exportNodeNames = ["CC_imageBg", "CC_spriteCard", "CC_spriteClick", "CC_spritePerson", "CC_spriteProgressBg", "CC_progressBar", "CC_labelProgress", "CC_buttonRewardBg", "CC_spriteRewardIcon", "CC_labelRewardCount", "CC_spriteGeted"],
            this.size(320, 624),
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            Tools.registerTouchHander(this.spriteClick, e=>{
                e.isClick && this.data && this.data.fOnClick && this.data.fOnClick(this.data.suitId)
            }
            ),
            this.buttonRewardBg.fOnClick = this.onTouchButtonReward.bind(this),
            this.data && this.fillByData(this.data),
            this.timer.frameLoop(1, this, this.refresh.bind(this))
        }
        onClosed() {}
        onTouchButtonReward() {
            this.data && this.data.fOnObtainReward(this.data.suitId)
        }
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            let t = mgrCfg.get_from_suit_db(this.data.suitId);
            if (!t)
                return this.spriteCard.visible = !1,
                this.spritePerson.visible = !1,
                this.buttonRewardBg.__node.visible = !1,
                this.spriteProgressBg.visible = !1,
                void (this.spriteGeted.visible = !1);
            this.spriteCard.visible = !0,
            this.spritePerson.visible = !0,
            this.buttonRewardBg.__node.visible = !0,
            this.spriteProgressBg.visible = !0,
            Tools.loadImg(this.spritePerson, t.icon),
            Tools.loadImg(this.spriteCard, t.card);
            let a = 0
              , i = 0;
            for (let e = 0; e < t.partIds.length; e++) {
                const s = t.partIds[e];
                mgrPlayer.getItemAmount(s) > 0 && a++,
                i++
            }
            this.progressBar.progress = a / i,
            this.labelProgress.text = `${a}/${i}`,
            this.labelRewardCount.text = `x ${t.collectionRewards[0][1]}`;
            let s = a >= i && !mgrPart.isSuitRewardGeted(t.id);
            mgrTip.showBadgeWithNumber(this.buttonRewardBg.__node, s ? 1 : 0),
            this.spriteGeted.visible = mgrPart.isSuitRewardGeted(t.id)
        }
        refresh() {
            let e = this.nodeResource.localToGlobal(new Laya.Point(this.nodeResource.width / 2,this.nodeResource.height / 2))
              , t = Laya.stage.width / 2
              , a = Math.abs(e.x - t)
              , i = (t - (a = Math.min(t, a))) / t
              , s = .8 * (1 - i) + 1 * i;
            this.nodeResource.scale(s, s)
        }
    }
    class vInteractionMainNode extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vInteractionMainNode",
            this.exportNodeNames = ["CC_imageBg", "CC_boxPlay", "CC_buttonPlay", "CC_imagePlaybgWarn", "CC_progressBarPlay", "CC_imagePlayFg", "CC_imageSelectedPlay", "CC_labelProgressPlay", "CC_boxEating", "CC_buttonEating", "CC_imageEatingbgWarn", "CC_progressBarEating", "CC_imageEatingFg", "CC_imageSelectedEating", "CC_labelProgressEating", "CC_boxStudy", "CC_buttonStudy", "CC_imageStudybgWarn", "CC_progressBarStudy", "CC_imageStudyFg", "CC_imageSelectedStudy", "CC_labelProgressStudy", "CC_boxSleep", "CC_buttonSleep", "CC_imageSleepbgWarn", "CC_progressBarSleep", "CC_imageSleepFg", "CC_imageSelectedSleep", "CC_labelProgressSleep"],
            this.bFloatTween = !1,
            this.width = 768,
            this.height = 150
        }
        onOpened() {
            this.buttonStudy.fOnClick = this.onTouchButtonStudy.bind(this),
            this.buttonPlay.fOnClick = this.onTouchButtonPlay.bind(this),
            this.buttonEating.fOnClick = this.onTouchButtonEating.bind(this),
            this.buttonSleep.fOnClick = this.onTouchButtonSleep.bind(this),
            this.progressBarEating.style = ULPROGRESSBAR_STYLE.ver,
            this.progressBarEating.barName = this.progressBarEating.__node.name,
            this.progressBarPlay.style = ULPROGRESSBAR_STYLE.ver,
            this.progressBarPlay.barName = this.progressBarPlay.__node.name,
            this.progressBarSleep.style = ULPROGRESSBAR_STYLE.ver,
            this.progressBarSleep.barName = this.progressBarSleep.__node.name,
            this.progressBarStudy.style = ULPROGRESSBAR_STYLE.ver,
            this.progressBarStudy.barName = this.progressBarStudy.__node.name,
            this.fillData(),
            this.fadeIn(),
            this.registerListeners({
                MSG_INTERACTION_PROGRESS_REFRESH: this.onMsgInteractionProgressReresh.bind(this),
                MSG_INTERACTION_MOTION_JUMP: this.onMsgInteractionMotionJump.bind(this),
                MSG_INTERACTION_EATING_JUMP: this.onMsgInteractionEATINGJump.bind(this),
                MSG_INTERACTION_STUDY_JUMP: this.onMsgInteractionSTUDYJump.bind(this),
                MSG_INTERACTION_REST_JUMP: this.onMsgInteractionRESTJump.bind(this)
            }),
            mgrGuide.registerGuideNode("vInteractionMainNode.eatingButton", this.buttonEating.__node),
            mgrGuide.registerGuideNode("vInteractionMainNode.studyButton", this.buttonStudy.__node),
            mgrGuide.registerGuideNode("vInteractionMainNode.sleepButton", this.buttonSleep.__node),
            mgrSdk.staticPointEvent(7003)
        }
        onClosed() {}
        fadeIn() {
            this.buttonEating.__node.visible = !1,
            this.buttonSleep.__node.visible = !1,
            this.buttonStudy.__node.visible = !1,
            this.buttonPlay.__node.visible = !1,
            this.labelProgressPlay.alpha = 0,
            this.labelProgressEating.alpha = 0,
            this.labelProgressStudy.alpha = 0,
            this.labelProgressSleep.alpha = 0
        }
        fillData(e, t, a, i) {
            let s = mgrInteraction.level
              , o = mgrCfg.get_from_role_level_db(s);
            null == e && (e = Math.floor(mgrInteraction.motionProgress / o.motionProgressValue * 100)),
            this.progressBarPlay.progress = e / 100,
            this.labelProgressPlay.text = `${e}%`,
            this.imagePlaybgWarn.visible = e <= 10,
            this.imagePlayFg.visible = !this.imagePlaybgWarn.visible,
            this.motionOldProgress = e,
            null == t && (t = Math.floor(mgrInteraction.eatFillValue / o.eatProgressValue * 100)),
            this.progressBarEating.progress = t / 100,
            this.labelProgressEating.text = `${t}%`,
            this.imageEatingbgWarn.visible = t <= 10,
            this.imageEatingFg.visible = !this.imageEatingbgWarn.visible,
            this.eatingOldProgress = t,
            null == a && (a = Math.floor(mgrInteraction.learnProgress / o.learnProgressValue * 100)),
            this.progressBarStudy.progress = a / 100,
            this.labelProgressStudy.text = `${a}%`,
            this.imageStudybgWarn.visible = a <= 10,
            this.imageStudyFg.visible = !this.imageStudybgWarn.visible,
            this.studyOldProgress = a,
            null == i && (i = Math.floor(mgrInteraction.energy / o.restProgressValue * 100)),
            this.progressBarSleep.progress = i / 100,
            this.labelProgressSleep.text = `${i}%`,
            this.imageSleepbgWarn.visible = i <= 10,
            this.imageSleepFg.visible = !this.imageSleepbgWarn.visible,
            this.sleepOldProgress = i
        }
        onMsgInteractionProgressReresh() {
            if (this.bFloatTween)
                return;
            let e = mgrInteraction.level
              , t = mgrCfg.get_from_role_level_db(e)
              , a = mgrInteraction.motionProgress / t.motionProgressValue * 100;
            Math.abs(a - this.motionOldProgress) > 2 && (this.motionLabelFadeInOut(),
            this.bFloatTween = !0);
            let i = mgrInteraction.eatFillValue / t.eatProgressValue * 100;
            Math.abs(i - this.eatingOldProgress) > 2 && (this.eatLabelFadeInOut(),
            this.bFloatTween = !0);
            let s = mgrInteraction.learnProgress / t.learnProgressValue * 100;
            Math.abs(s - this.studyOldProgress) > 2 && (this.studyLabelFadeInOut(),
            this.bFloatTween = !0);
            let o = mgrInteraction.energy / t.restProgressValue * 100;
            Math.abs(o - this.sleepOldProgress) > 2 && (this.sleepLabelFadeInOut(),
            this.bFloatTween = !0),
            (this.bFloatTween = !0) ? CustomTween.actionFloat(this.imageBg, 0, 1, 1600, e=>{
                let t = Math.floor(a * e + (1 - e) * this.motionOldProgress)
                  , n = Math.floor(i * e + (1 - e) * this.eatingOldProgress)
                  , r = Math.floor(s * e + (1 - e) * this.studyOldProgress)
                  , l = Math.floor(o * e + (1 - e) * this.sleepOldProgress);
                this.fillData(t, n, r, l)
            }
            ).callback(()=>{
                this.bFloatTween = !1
            }
            ).start(1) : this.fillData()
        }
        onTouchButtonPlay() {
            "vMotionMainScene" != this.context.sceneName ? mgrDirector.warpSceneWidthEffect("vMotionMainScene") : this.motionLabelFadeInOut()
        }
        onTouchButtonEating() {
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vInteractionMainNode.clickEatingButton"
            }),
            "vEatingScene" != this.context.sceneName ? mgrDirector.warpSceneWidthEffect("vEatingScene") : this.eatLabelFadeInOut()
        }
        onTouchButtonStudy() {
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vInteractionMainNode.clickStudyButton"
            }),
            "vAnswerQuestionScene" != this.context.sceneName ? mgrDirector.warpSceneWidthEffect("vAnswerQuestionScene") : this.studyLabelFadeInOut()
        }
        onTouchButtonSleep() {
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vInteractionMainNode.clickSleepButton"
            }),
            "vRestScene" != this.context.sceneName ? mgrDirector.warpSceneWidthEffect("vRestScene") : this.sleepLabelFadeInOut()
        }
        fadeInPlayButton() {
            this.buttonPlay.__node.visible = !0,
            this.buttonPlay.__node.y += 500,
            CustomTween.to(this.buttonPlay.__node, {
                y: this.buttonPlay.__node.y - 500
            }, 500, Laya.Ease.backOut).start(1)
        }
        fadeInEatingButton() {
            this.buttonEating.__node.visible = !0,
            this.buttonEating.__node.y += 500,
            CustomTween.to(this.buttonEating.__node, {
                y: this.buttonEating.__node.y - 500
            }, 500, Laya.Ease.backOut).start(1)
        }
        fadeInStudyButton() {
            this.buttonStudy.__node.visible = !0,
            this.buttonStudy.__node.y += 500,
            CustomTween.to(this.buttonStudy.__node, {
                y: this.buttonStudy.__node.y - 500
            }, 500, Laya.Ease.backOut).start(1)
        }
        fadeInSleepButton() {
            this.buttonSleep.__node.visible = !0,
            this.buttonSleep.__node.y += 500,
            CustomTween.to(this.buttonSleep.__node, {
                y: this.buttonSleep.__node.y - 500
            }, 500, Laya.Ease.backOut).start(1)
        }
        fadeOutPlayButton() {
            this.buttonPlay.__node.visible = !0,
            CustomTween.to(this.buttonPlay.__node, {
                y: this.buttonPlay.__node.y + 500
            }, 500, Laya.Ease.backOut).start(1)
        }
        fadeOutEatingButton() {
            this.buttonEating.__node.visible = !0,
            CustomTween.to(this.buttonEating.__node, {
                y: this.buttonEating.__node.y + 500
            }, 500, Laya.Ease.backOut).start(1)
        }
        fadeOutStudyButton() {
            this.buttonStudy.__node.visible = !0,
            CustomTween.to(this.buttonStudy.__node, {
                y: this.buttonStudy.__node.y + 500
            }, 500, Laya.Ease.backOut).start(1)
        }
        fadeOutSleepButton() {
            this.buttonSleep.__node.visible = !0,
            CustomTween.to(this.buttonSleep.__node, {
                y: this.buttonSleep.__node.y + 500
            }, 500, Laya.Ease.backOut).start(1)
        }
        unactivePlayButton() {
            this.buttonPlay.__node.active = !1
        }
        unactiveEatingButton() {
            this.buttonEating.__node.active = !1
        }
        unactiveStudyButton() {
            this.buttonStudy.__node.active = !1
        }
        unactiveSleepButton() {
            this.buttonSleep.__node.active = !1
        }
        showPlayButton() {
            this.buttonPlay.__node.visible = !0,
            "vMotionMainScene" == this.context.sceneName && (this.imageSelectedPlay.visible = !0,
            this.imageSelectedEating.visible = !1,
            this.imageSelectedStudy.visible = !1,
            this.imageSelectedSleep.visible = !1,
            this.motionLabelFadeInOut())
        }
        showEatingButton() {
            this.buttonEating.__node.visible = !0,
            "vEatingScene" == this.context.sceneName && (this.imageSelectedPlay.visible = !1,
            this.imageSelectedEating.visible = !0,
            this.imageSelectedStudy.visible = !1,
            this.imageSelectedSleep.visible = !1,
            this.eatLabelFadeInOut())
        }
        showStudyButton() {
            this.buttonStudy.__node.visible = !0,
            "vAnswerQuestionScene" == this.context.sceneName && (this.imageSelectedPlay.visible = !1,
            this.imageSelectedEating.visible = !1,
            this.imageSelectedStudy.visible = !0,
            this.imageSelectedSleep.visible = !1,
            this.studyLabelFadeInOut())
        }
        showSleepButton() {
            this.buttonSleep.__node.visible = !0,
            "vRestScene" == this.context.sceneName && (this.imageSelectedPlay.visible = !1,
            this.imageSelectedEating.visible = !1,
            this.imageSelectedStudy.visible = !1,
            this.imageSelectedSleep.visible = !0,
            this.sleepLabelFadeInOut())
        }
        studyLabelFadeInOut() {
            CustomTween.to(this.labelProgressStudy, {
                alpha: 1
            }, 300).delayTime(1e3).to({
                alpha: 0
            }, 300).start(1)
        }
        eatLabelFadeInOut() {
            CustomTween.to(this.labelProgressEating, {
                alpha: 1
            }, 300).delayTime(1e3).to({
                alpha: 0
            }, 300).start(1)
        }
        motionLabelFadeInOut() {
            CustomTween.to(this.labelProgressPlay, {
                alpha: 1
            }, 300).delayTime(1e3).to({
                alpha: 0
            }, 300).start(1)
        }
        sleepLabelFadeInOut() {
            CustomTween.to(this.labelProgressSleep, {
                alpha: 1
            }, 300).delayTime(1e3).to({
                alpha: 0
            }, 300).start(1)
        }
        onMsgInteractionMotionJump() {
            let e = this.boxPlay.y;
            CustomTween.to(this.boxPlay, {
                y: e - 50
            }, 150).to({
                rotation: -5
            }, 51).to({
                rotation: 5
            }, 102).to({
                rotation: -5
            }, 102).to({
                rotation: 0
            }, 51).to({
                y: e
            }, 150).start(1)
        }
        onMsgInteractionEATINGJump() {
            let e = this.boxEating.y;
            CustomTween.to(this.boxEating, {
                y: e - 50
            }, 150).to({
                rotation: -5
            }, 51).to({
                rotation: 5
            }, 102).to({
                rotation: -5
            }, 102).to({
                rotation: 0
            }, 51).to({
                y: e
            }, 150).start(1)
        }
        onMsgInteractionSTUDYJump() {
            let e = this.boxStudy.y;
            CustomTween.to(this.boxStudy, {
                y: e - 50
            }, 150).to({
                rotation: -5
            }, 51).to({
                rotation: 5
            }, 102).to({
                rotation: -5
            }, 102).to({
                rotation: 0
            }, 51).to({
                y: e
            }, 150).start(1)
        }
        onMsgInteractionRESTJump() {
            let e = this.boxSleep.y;
            CustomTween.to(this.boxSleep, {
                y: e - 50
            }, 150).to({
                rotation: -5
            }, 51).to({
                rotation: 5
            }, 102).to({
                rotation: -5
            }, 102).to({
                rotation: 0
            }, 51).to({
                y: e
            }, 150).start(1)
        }
    }
    class vMsgTip extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vMsgTip",
            this.exportNodeNames = ["CC_spriteBg", "CC_labelTip"]
        }
        onOpened() {
            this.labelTip.text = this.context.content || `${mgrI18n.getText("vMsgTip.1")}`,
            this.y -= 150,
            CustomTween.to(this, {
                y: this.y - 100
            }, 1e3).to({
                alpha: 0,
                y: this.y - 150
            }, 500).callback(()=>{
                this.destroy()
            }
            ).start(1),
            Timer.callLater(2, ()=>{
                this.destroy()
            }
            , this)
        }
        onClosed() {}
    }
    class vQuestionTime extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vQuestionTime",
            this.exportNodeNames = ["CC_spriteTimeMin", "CC_spriteTimeSecond", "CC_spriteTimeHour"]
        }
        onOpened() {
            let e = this.context.time
              , t = new Date(1e3 * e)
              , a = t.getHours()
              , i = t.getMinutes()
              , s = t.getSeconds();
            a >= 12 && (a -= 12),
            a = a / 12 + i / 720,
            this.spriteTimeHour.rotation = 360 * a,
            this.spriteTimeMin.rotation = i / 60 * 360,
            this.spriteTimeSecond.rotation = s / 60 * 360
        }
        onClosed() {}
    }
    class vRoomPart extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vRoomPart",
            this.exportNodeNames = ["CC_buttonBg", "CC_ImageIcon", "CC_boxTagLayout", "CC_spriteSelected", "CC_spriteRecommend", "CC_spriteAdTag", "CC_spriteNew", "CC_spriteTry"],
            this.size(120, 140),
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.data && this.fillByData(this.data),
            this.buttonBg.fOnClick = (()=>{
                this.data && this.data.fOnClickPart(this.data.partId),
                mgrPart.deleteNewPart(this.data.partId),
                this.sendMsg("MSG_GUIDE_EVENT", {
                    id: `vRoomScene.clickPart ${this.data.partId}`
                })
            }
            ),
            mgrI18n.trySetI18nImage(this.spriteRecommend, "art85.png"),
            mgrI18n.trySetI18nImage(this.spriteNew, "art89.png"),
            mgrI18n.trySetI18nImage(this.spriteTry, "art14.png")
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            let t = mgrCfg.get_from_part_db(this.data.partId);
            Tools.loadImg(this.ImageIcon, t.icon),
            this.boxTagLayout.removeChildren(0, this.boxTagLayout.numChildren);
            let a = mgrPart.getRecommendTagsByPartId(this.data.partId)
              , i = !0;
            if (this.tagDatas)
                for (let e = 0; e < a.length; e++) {
                    if (a[e].icon != this.tagDatas[e].icon) {
                        i = !1;
                        break
                    }
                }
            else
                i = !1;
            if (!i) {
                for (let e = 0; e < a.length; e++) {
                    const t = a[e];
                    let i = new Laya.Image;
                    i.size(20, 20),
                    i.pivot(i.width / 2, i.height / 2),
                    Tools.loadImg(i, t.icon),
                    this.boxTagLayout.addChild(i),
                    i.y = this.boxTagLayout.height / 2
                }
                Tools.layoutH(this.boxTagLayout, 5, .5)
            }
            this.spriteSelected.visible = this.data.fIsSelected(this.data.partId),
            mgrGuide.registerGuideNode(`vRoomScene.part ${this.data.partId}`, this),
            this.starLevelNode || (this.starLevelNode = new vStarLevelItem({}),
            this.addChild(this.starLevelNode)),
            this.starLevelNode.pos(70, 100, !0),
            this.starLevelNode.scale(.7, .7, !0),
            this.starLevelNode.fillByData(t.level);
            let s = this.data.fIsRecommend(this.data.partId);
            this.spriteRecommend.visible = s;
            let o = this.data.fIsTry(this.data.partId);
            this.spriteAdTag.visible = !o && mgrPlayer.getItemAmount(this.data.partId) <= 0 && mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.stage_try);
            let n = mgrPart.isNewPart(this.data.partId);
            this.spriteNew.visible = n,
            this.spriteTry.visible = mgrPlayer.getItemAmount(this.data.partId) <= 0
        }
        onSelect(e) {}
    }
    class vSmallGameSettlementItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vSmallGameSettlementItem",
            this.exportNodeNames = ["CC_imageIcon", "CC_labelName"],
            this.width = 92,
            this.height = 92,
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            let e = this.context.itemId
              , t = mgrCfg.get_from_item_template_db(e);
            Tools.loadImg(this.imageIcon, t.icon),
            this.labelName.text = `${mgrI18n.getText(`${t.name}`)}x ${this.context.amount}`
        }
        onClosed() {}
    }
    class vStageSceneBigItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vStageSceneBigItem",
            this.exportNodeNames = ["CC_spriteRewardPart", "CC_spriteRewardCoin", "CC_labelDesc", "CC_labelStageId", "CC_spriteTagLocked", "CC_spriteTagFinished"]
        }
        onOpened() {
            this.data && this.fillByData(this.data),
            Tools.registerTouchHander(this.nodeResource, e=>{
                e.isClick && this.data && this.data.fOnClickStage && this.data.fOnClickStage(this.data.stageId)
            }
            )
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            this.alpha = 0,
            CustomTween.to(this, {
                alpha: 1
            }, 500).start(1);
            let t, a, i = mgrCfg.get_from_stage_db(this.data.stageId), s = i.passReward;
            for (let e = 0; e < s.length; e++) {
                const i = s[e];
                mgrCfg.get_from_part_db(i[0]) ? t = mgrCfg.get_from_part_db(i[0]) : a = mgrCfg.get_from_item_template_db(i[0])
            }
            Tools.loadImg(this.spriteRewardCoin, a.icon),
            Tools.loadImg(this.spriteRewardPart, t.icon),
            this.labelDesc.text = i.rewardDesc,
            this.labelStageId.text = i.id.toString(),
            this.spriteTagLocked.visible = !mgrStage.isStageUnlocked(this.data.stageId),
            this.spriteTagFinished.visible = mgrStage.getStageRating(this.data.stageId) == EStageRating.pass
        }
    }
    class vStageSceneSmallItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vStageSceneSmallItem",
            this.exportNodeNames = ["CC_spriteRewardIcon", "CC_labelDesc", "CC_labelStageId", "CC_spriteTagLocked", "CC_spriteTagFinished"]
        }
        onOpened() {
            this.data && this.fillByData(this.data),
            Tools.registerTouchHander(this.nodeResource, e=>{
                e.isClick && this.data && this.data.fOnClickStage && this.data.fOnClickStage(this.data.stageId)
            }
            )
        }
        onClosed() {}
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            this.alpha = 0,
            CustomTween.to(this, {
                alpha: 1
            }, 500).start(1);
            let t, a, i = mgrCfg.get_from_stage_db(this.data.stageId), s = i.passReward;
            for (let e = 0; e < s.length; e++) {
                const i = s[e];
                mgrCfg.get_from_part_db(i[0]) ? t = mgrCfg.get_from_part_db(i[0]) : a = mgrCfg.get_from_item_template_db(i[0])
            }
            Tools.loadImg(this.spriteRewardIcon, a.icon),
            this.labelDesc.text = i.rewardDesc,
            this.labelStageId.text = i.id.toString(),
            this.spriteTagLocked.visible = !mgrStage.isStageUnlocked(this.data.stageId),
            this.spriteTagFinished.visible = mgrStage.getStageRating(this.data.stageId) == EStageRating.pass
        }
    }
    class vSuitPreviewPart extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vSuitPreviewPart",
            this.exportNodeNames = ["CC_buttonBg", "CC_ImageIcon", "CC_spriteHavedTag", "CC_boxLayout"],
            this.size(90, 113),
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.buttonBg.fOnClick = this.onTouchButtonBg.bind(this),
            this.data && this.fillByData(this.data)
        }
        onClosed() {}
        onTouchButtonBg() {
            this.data && this.data.fOnClickPart && this.data.fOnClickPart(this.data.partId)
        }
        fillByData(e) {
            if (this.data = e,
            !this.bResLoaded)
                return;
            let t = mgrCfg.get_from_part_db(this.data.partId);
            Tools.loadImg(this.ImageIcon, t.icon),
            this.boxLayout.removeChildren(0, this.boxLayout.numChildren);
            let a = mgrPart.getRecommendTagsByPartId(this.data.partId);
            for (let e = 0; e < a.length; e++) {
                const t = a[e];
                let i = new Laya.Image;
                i.size(30, 30),
                i.pivot(i.width / 2, i.height / 2),
                Tools.loadImg(i, t.icon),
                this.boxLayout.addChild(i),
                i.y = this.boxLayout.height / 2
            }
            this.spriteHavedTag.visible = mgrPlayer.getItemAmount(this.data.partId) > 0,
            this.starLevelNode || (this.starLevelNode = new vStarLevelItem({}),
            this.buttonBg.__node.addChild(this.starLevelNode),
            this.starLevelNode.scale(.7, .7, !0)),
            this.starLevelNode.pos(this.buttonBg.__node.width / 2, 75, !0),
            this.starLevelNode.fillByData(t.level)
        }
    }
    class vTestReuseListItem extends ViewBase {
        constructor(e) {
            super(e),
            this.sourceName = "node/vTestReuseListItem",
            this.exportNodeNames = ["CC_labelContent"],
            this.width = 200,
            this.height = 65,
            this.anchorX = 0,
            this.anchorY = 0
        }
        onOpened() {
            this.text && this.fillByData(this.text)
        }
        onClosed() {}
        fillByData(e) {
            this.text = e,
            this.bResLoaded && (this.labelContent.text = this.text)
        }
    }
    const TIP_CION$1 = {
        learn: ["res/ui/common/tipIcon5.png"],
        motion: ["res/ui/common/tipIcon3.png", "res/ui/common/tipIcon4.png"],
        rest: ["res/ui/common/tipIcon2.png"],
        eat: ["res/ui/common/tipIcon1.png"]
    }
      , AD_EVENT_ID_POTION$3 = "free_learn_potion";
    class vAnswerQuestionScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vAnswerQuestionScene",
            this.exportNodeNames = ["CC_spriteBg", "CC_spriteBlackBoard", "CC_labelTitle", "CC_boxContent", "CC_buttonOption1", "CC_spriteOption1Selected", "CC_spriteOption1Right", "CC_spriteOption1Error", "CC_imageOption1", "CC_labelOption1", "CC_buttonOption2", "CC_spriteOption2Selected", "CC_spriteOption2Right", "CC_spriteOption2Error", "CC_imageOption2", "CC_labelOption2", "CC_buttonBack", "CC_progressBar", "CC_buttonBox", "CC_spriteBox", "CC_spriteMask", "CC_imagePaopao1", "CC_imagePaopao2", "CC_imagePaopao3", "CC_buttonTipIcon", "CC_buttonLevel", "CC_progressBarLevel", "CC_labelLevel", "CC_boxButtons", "CC_buttonPotion", "CC_spritePotionWatchAd", "CC_spritePotionAmount", "CC_labelCount", "CC_buttonFreeWear", "CC_spriteFreeWear", "CC_buttonGameCenter", "CC_boxGameCenterReadPoint"]
        }
        onOpened() {
            if (super.onOpened(),
            this.multilingualText1 = `${mgrI18n.getText("vAnswerQuestionScene.1")}`,
            this.multilingualText2 = `${mgrI18n.getText("vAnswerQuestionScene.2")}`,
            this.multilingualText3 = `${mgrI18n.getText("vAnswerQuestionScene.3")}`,
            this.multilingualText4 = `${mgrI18n.getText("vAnswerQuestionScene.4")}`,
            this.multilingualText5 = `${mgrI18n.getText("vAnswerQuestionScene.5")}`,
            this.multilingualText6 = `${mgrI18n.getText("vAnswerQuestionScene.6")}`,
            this.multilingualText7 = `${mgrI18n.getText("vAnswerQuestionScene.7")}`,
            this.multilingualText8 = `${mgrI18n.getText("vAnswerQuestionScene.8")}`,
            this.multilingualText9 = `${mgrI18n.getText("vAnswerQuestionScene.9")}`,
            this.multilingualText10 = `${mgrI18n.getText("vAnswerQuestionScene.10")}`,
            this.multilingualText11 = `${mgrI18n.getText("vAnswerQuestionScene.11")}`,
            this.multilingualText12 = `${mgrI18n.getText("vAnswerQuestionScene.12")}`,
            this.buttonBack.fOnClick = (()=>{
                mgrDirector.warpSceneWidthEffect("vHubScene")
            }
            ),
            this.buttonOption1.fOnClick = this.selectOption1.bind(this),
            this.buttonOption2.fOnClick = this.selectOption2.bind(this),
            this.buttonBox.fOnClick = this.onTouchButtonReward.bind(this),
            this.buttonLevel.fOnClick = this.onTouchbuttonLevel.bind(this),
            this.buttonTipIcon.fOnClick = this.onTouchButtonTipIcon.bind(this),
            this.buttonFreeWear.fOnClick = this.onTouchButtonFreeWear.bind(this),
            this.buttonBox.bTween = !1,
            this.buttonPotion.fOnClick = this.onTouchButtonPotion.bind(this),
            this.buttonGameCenter.fOnClick = this.onTouchButtonGameCenter.bind(this),
            this.progressBarLevel.barName = this.progressBarLevel.owner.name,
            this.progressBarLevel.style = ULPROGRESSBAR_STYLE.ver,
            this.progressBar.style = ULPROGRESSBAR_STYLE.ver,
            this.progressBar.progress = 0,
            mgrSound.play(226),
            this.init(),
            mgrGuide.isAllGuideFinished() && 1 == mgrSdk.getCopNumberValueByKey("ui_layout_down_learn")) {
                if (Tools.random(1, 100) <= mgrSdk.getCopNumberValueByKey("ui_pop_dialog_ratio_learn") && mgrPlayer.isPopBannerTipDialogCding())
                    if (mgrInteraction.restState == E_REST_STATE.rest)
                        mgrDirector.openDialog("vWeakupTipDialog");
                    else if (mgrInteraction.restState == E_REST_STATE.none) {
                        let e = mgrCfg.get_from_role_level_db(mgrInteraction.level)
                          , t = mgrInteraction.energy / e.restProgressValue
                          , a = mgrInteraction.eatFillValue / e.eatProgressValue
                          , i = mgrInteraction.motionProgress / e.motionProgressValue
                          , s = mgrInteraction.learnProgress / e.learnProgressValue;
                        s > .95 ? mgrDirector.openDialog("vLearnFullTipDialog") : t < .2 ? mgrDirector.openDialog("vTiredTipDialog") : a < .2 ? mgrDirector.openDialog("vHungryTipDialog") : s < .5 ? mgrDirector.openDialog("vFoodDiscountDialog") : i < .2 ? mgrDirector.openDialog("vBoringTipDialog") : mgrDirector.openDialog("vResttingTipDialog")
                    }
            }
            this.registerListeners({
                MSG_ROLE_EXP_CHANGED: this.onMsgRoleExpChanged.bind(this),
                MSG_STUDY_GUIDE_ENDED: this.onMsgStudyGuideEnded.bind(this),
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this),
                MSG_I18N_REFRESH: ()=>{
                    this.multilingualText1 = `${mgrI18n.getText("vAnswerQuestionScene.1")}`,
                    this.multilingualText2 = `${mgrI18n.getText("vAnswerQuestionScene.2")}`,
                    this.multilingualText3 = `${mgrI18n.getText("vAnswerQuestionScene.3")}`,
                    this.multilingualText4 = `${mgrI18n.getText("vAnswerQuestionScene.4")}`,
                    this.multilingualText5 = `${mgrI18n.getText("vAnswerQuestionScene.5")}`,
                    this.multilingualText6 = `${mgrI18n.getText("vAnswerQuestionScene.6")}`,
                    this.multilingualText7 = `${mgrI18n.getText("vAnswerQuestionScene.7")}`,
                    this.multilingualText8 = `${mgrI18n.getText("vAnswerQuestionScene.8")}`,
                    this.multilingualText9 = `${mgrI18n.getText("vAnswerQuestionScene.9")}`,
                    this.multilingualText10 = `${mgrI18n.getText("vAnswerQuestionScene.10")}`,
                    this.multilingualText11 = `${mgrI18n.getText("vAnswerQuestionScene.11")}`,
                    this.multilingualText12 = `${mgrI18n.getText("vAnswerQuestionScene.12")}`
                }
            }),
            mgrSdk.staticPointEvent(5022),
            mgrI18n.trySetI18nImage(this.spriteFreeWear, "btn_freeWear.png")
        }
        onClosed() {
            super.onClosed()
        }
        getPreLoadModelIds() {
            return [MODEL_ID.map_hudong]
        }
        init() {
            Layout.widget(10, 10, this.buttonBack.__node),
            Layout.widget(10, -1, this.buttonLevel.__node),
            Layout.widget(mgrDirector.width - 10, -1, this.boxButtons, {
                x: 1,
                y: 1
            }),
            Layout.widget(mgrDirector.width - 10, -1, this.buttonFreeWear.__node, {
                x: 1,
                y: 1
            }),
            Layout.widget(mgrDirector.width - 5, -1, this.buttonGameCenter.__node, {
                x: 1,
                y: 1
            }),
            mgrTip.showBadgeWithNumber(this.boxGameCenterReadPoint, 1, new Laya.Point(15,15)),
            this.buttonBox.bTween = !1,
            this.spriteMask.alpha = 0,
            this.imagePaopao1.scale(0, 0),
            this.imagePaopao2.scale(0, 0),
            this.imagePaopao3.scale(0, 0),
            this.buildUI(()=>{
                this.tryGuide(),
                this.roleAvatar.transform.position = new Laya.Vector3(.36,.1,0),
                this.roleAvatar.transform.scale = new Laya.Vector3(1,1,1),
                this.roleAvatar.transform.rotationEuler = new Laya.Vector3(0,-20,0),
                this.cameraBack.fieldOfView = 25,
                this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(-.05,.95,5.82),
                this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-5,0,0),
                this.cameraBack.transform.position = new Laya.Vector3(-.05,.95,5.82),
                this.cameraBack.transform.rotationEuler = new Laya.Vector3(-5,0,0),
                Timer.callLoop(.016, ()=>{
                    this.update3DScene()
                }
                , this),
                mgrInteraction.restState == E_REST_STATE.rest && (this.roleAvatar.active = !1,
                this.add3DEffectAtFront("e_sj", {
                    x: Laya.stage.width,
                    y: Laya.stage.height / 2
                }, 0, 5, e=>{
                    e.active = !0,
                    e.transform.rotationEuler = new Laya.Vector3(0,90,0)
                }
                ))
            }
            ),
            this.fillData(),
            this.refreshLevel()
        }
        update3DScene() {
            this.fengche || (this.fengche = this._3dScene.getChildByName("fengche"),
            this.sky = this._3dScene.getChildByName("skybox")),
            this.fengche.transform.rotate(new Laya.Vector3(0,1,0), !0, !1),
            this.sky.transform.rotate(new Laya.Vector3(0,0,-.05), !0, !1)
        }
        buildUI(e) {
            this.nearByRank = new vSmallNearbyRank({
                rankId: eNearbyRankId.learn
            }),
            this.addChild(this.nearByRank),
            Layout.widget(0, .35, this.nearByRank, {
                x: 0,
                y: .5
            }),
            this.spriteBg.zOrder = -2,
            this.topBar = new vTopBar({}),
            this.addChild(this.topBar),
            Layout.widget(.5, 45, this.topBar, {
                x: .5,
                y: 0
            });
            let t = new vInteractionMainNode({
                sceneName: "vAnswerQuestionScene"
            });
            this.addChild(t),
            this.bottomBar = t,
            1 == mgrSdk.getCopNumberValueByKey("ui_layout_down_learn") ? Layout.widget(.5, mgrDirector.height, t, {
                x: .5,
                y: 1
            }) : Layout.widget(.5, mgrDirector.height - 200, t, {
                x: .5,
                y: 1
            }),
            this.add3DEffectAtBack(MODEL_ID.effect.e_rainbow, 0);
            let a = new TaskManager
              , i = []
              , s = MODEL_ID.map_hudong;
            i.push(e=>{
                mgrLoader.loadModeWithModeId(s, ()=>{
                    this._3dScene = mgrLoader.Pool.getModel(s),
                    this.add3DEffectAtBack(this._3dScene, 0),
                    e()
                }
                , this, 1)
            }
            ),
            i.push(e=>{
                this.roleAvatar = new RoleAvatar,
                this.roleAvatar.transform.scale = new Laya.Vector3,
                this.add3DEffectAtBack(this.roleAvatar, 0),
                this.roleAvatar.fillByPartIds(mgrPart.getLastClothes()),
                this.roleAvatar.registerLoadEndCallback(()=>{
                    this.roleAvatar.playAnimation(ANIMATION_ID.idle, 0, ()=>{
                        e()
                    }
                    )
                }
                )
            }
            ),
            i.push(e=>{
                t.context.fOnLoadingFinished = (()=>{
                    e()
                }
                )
            }
            ),
            a.push(i),
            a.start(()=>{
                e()
            }
            , this)
        }
        fillData() {
            this.spriteOption1Error.visible = !1,
            this.spriteOption1Right.visible = !1,
            this.spriteOption2Error.visible = !1,
            this.spriteOption2Right.visible = !1,
            this.spriteOption1Selected.visible = !1,
            this.spriteOption2Selected.visible = !1;
            let e = mgrInteraction.getQuestion();
            e.answer1 == e.realAnswer ? mgrGuide.registerGuideNode("vAnswerQuestionScene.buttonOption1", this.buttonOption1.__node) : mgrGuide.registerGuideNode("vAnswerQuestionScene.buttonOption1", this.buttonOption2.__node);
            let t = mgrCfg.get_from_question_db(e.questionId);
            switch (mgrI18n.trySetI18nText(this.labelTitle, `${t.title}`),
            t.type) {
            case E_QUESTION_TYPE.shushu:
                this.createShushu(e);
                break;
            case E_QUESTION_TYPE.shitu:
                this.createShitu(e);
                break;
            case E_QUESTION_TYPE.addAndSubLess10:
            case E_QUESTION_TYPE.mulAndDivLess10:
            case E_QUESTION_TYPE.addAndSubGreater10:
            case E_QUESTION_TYPE.mulAndDivGreater10:
                this.createAddSubMulDiv(e);
                break;
            case E_QUESTION_TYPE.trianglePerimeter:
            case E_QUESTION_TYPE.triangleArena:
                this.createTrigle(e);
                break;
            case E_QUESTION_TYPE.rectanglePerimeter:
            case E_QUESTION_TYPE.rectangleArena:
                this.createRect(e);
                break;
            case E_QUESTION_TYPE.parallelogramPerimeter:
            case E_QUESTION_TYPE.parallelogramArena:
                this.createParallelogram(e);
                break;
            case E_QUESTION_TYPE.time:
                this.createTime(e);
                break;
            case E_QUESTION_TYPE.series:
                this.createSeriesQuestion(e);
                break;
            case E_QUESTION_TYPE.number_compare:
                this.createCompareQuestion(e);
                break;
            case E_QUESTION_TYPE.pic_law:
                this.createPicLawQuestion(e)
            }
            this.boxContent.scaleX = 0,
            CustomTween.to(this.boxContent, {
                scaleX: 1,
                scaleY: 1
            }, 500, Laya.Ease.backOut).start(1),
            this.fillRewardProgress();
            let a = mgrPlayer.getItemAmount(Const.ITEM_ID_INTERACTION_LEARN);
            if (a > 0)
                this.spritePotionWatchAd.visible = !1,
                this.spritePotionAmount.visible = !0,
                this.labelCount.text = `${a}`,
                this.buttonPotion.__node.visible = !0;
            else {
                this.spritePotionAmount.visible = !1;
                let e = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID_POTION$3);
                this.spritePotionWatchAd.visible = e,
                this.buttonPotion.__node.visible = e
            }
        }
        createAddSubMulDiv(e) {
            this.boxContent.destroyChildren();
            let t = new Laya.Label;
            mgrLoader.loadFont("answer", t),
            t.anchorX = .5,
            t.anchorY = .5;
            let a = "";
            "ADD" == e.sign ? a = "加" : "SUB" == e.sign ? a = "减" : "MUL" == e.sign ? a = "乘" : "DIV" == e.sign && (a = "除"),
            t.text = `${e.param1} ${a} ${e.param2} 等 问`,
            this.boxContent.addChild(t),
            t.y = 50,
            Tools.layoutH(this.boxContent),
            this.imageOption1.skin = "",
            this.imageOption2.skin = "",
            mgrLoader.loadFont("answer", this.labelOption1),
            mgrLoader.loadFont("answer", this.labelOption2),
            this.labelOption1.text = `${e.answer1}`,
            this.labelOption2.text = `${e.answer2}`
        }
        createShitu(e) {
            this.boxContent.destroyChildren();
            let t = mgrCfg.get_from_question_db(e.questionId)
              , a = new Laya.Label;
            mgrLoader.loadFont("answer", a),
            a.anchorX = .5,
            a.anchorY = .5,
            a.text = "加";
            let i = new Laya.Label;
            mgrLoader.loadFont("answer", i),
            i.anchorX = .5,
            i.anchorY = .5,
            i.text = " 等 问";
            let s = new Laya.Image;
            s.size(68, 68),
            s.skin = t.parm1,
            s.pivotX = 34,
            s.pivotY = 34;
            let o = new Laya.Image;
            o.size(68, 68),
            o.skin = t.parm2,
            o.pivotX = 34,
            o.pivotY = 34,
            this.boxContent.addChild(s),
            s.y = 50,
            this.boxContent.addChild(a),
            a.y = 50,
            this.boxContent.addChild(o),
            o.y = 50,
            this.boxContent.addChild(i),
            i.y = 50,
            Tools.layoutH(this.boxContent),
            this.imageOption1.skin = t.answer1,
            this.imageOption2.skin = t.answer2,
            mgrLoader.loadFont("answer", this.labelOption1),
            mgrLoader.loadFont("answer", this.labelOption2),
            this.labelOption1.text = "",
            this.labelOption2.text = ""
        }
        createShushu(e) {
            this.boxContent.destroyChildren();
            let t = mgrCfg.get_from_question_db(e.questionId);
            for (let a = 1; a <= e.param1; a++) {
                let i = new Laya.Image(t.parm1);
                i.size(40, 40),
                this.boxContent.addChild(i),
                i.pos(this.boxContent.width / 2 - 43 * e.param1 / 2 + 43 * (a - 1), 15)
            }
            for (let a = 1; a <= e.param2; a++) {
                let i = new Laya.Image(t.parm2);
                i.size(40, 40),
                this.boxContent.addChild(i),
                i.pos(this.boxContent.width / 2 - 43 * e.param2 / 2 + 43 * (a - 1), 65)
            }
            this.imageOption1.skin = "",
            this.imageOption2.skin = "",
            mgrLoader.loadFont("answer", this.labelOption1),
            mgrLoader.loadFont("answer", this.labelOption2),
            this.labelOption1.text = `${e.answer1}`,
            this.labelOption2.text = `${e.answer2}`
        }
        createTrigle(e) {
            this.boxContent.destroyChildren();
            let t = new Laya.Image;
            t.size(this.boxContent.width, this.boxContent.height),
            this.boxContent.addChild(t);
            let a = Math.min(this.boxContent.width / e.param1, this.boxContent.height / e.param2);
            a *= .75;
            let i = this.boxContent.width / 2 - e.param1 * a / 2
              , s = this.boxContent.height / 2 + e.param2 * a / 2
              , o = i + e.param1 * a
              , n = s
              , r = i
              , l = s - e.param2 * a;
            t.graphics.drawLine(i, s, o, n, "#ffffff", 3);
            let h = new Laya.Label(`${e.param1}`);
            this.boxContent.addChild(h),
            h.pos((i + o) / 2, (s + n) / 2),
            h.fontSize = 20,
            h.color = "#ff0000",
            t.graphics.drawLine(o, n, r, l, "#ffffff", 3),
            h = new Laya.Label(`${e.param3}`),
            this.boxContent.addChild(h),
            h.pos((r + o) / 2, (l + n) / 2 - 20),
            h.fontSize = 20,
            h.color = "#ff0000",
            t.graphics.drawLine(r, l, i, s, "#ffffff", 3),
            h = new Laya.Label(`${e.param2}`),
            this.boxContent.addChild(h),
            h.pos((i + r) / 2, (s + l) / 2),
            h.fontSize = 20,
            h.color = "#ff0000",
            this.imageOption1.skin = "",
            this.imageOption2.skin = "",
            mgrLoader.loadFont("answer", this.labelOption1),
            mgrLoader.loadFont("answer", this.labelOption2),
            this.labelOption1.text = `${e.answer1}`,
            this.labelOption2.text = `${e.answer2}`
        }
        createRect(e) {
            this.boxContent.destroyChildren();
            let t = new Laya.Image;
            t.size(this.boxContent.width, this.boxContent.height),
            this.boxContent.addChild(t);
            let a = Math.min(this.boxContent.width / e.param1, this.boxContent.height / e.param2);
            a *= .75;
            let i = this.boxContent.width / 2 - e.param1 * a / 2
              , s = this.boxContent.height / 2 + e.param2 * a / 2
              , o = i + e.param1 * a
              , n = s
              , r = o
              , l = s - e.param2 * a
              , h = i
              , d = l;
            t.graphics.drawLine(i, s, o, n, "#ffffff", 3);
            let c = new Laya.Label(`${e.param1}`);
            this.boxContent.addChild(c),
            c.pos((i + o) / 2, (s + n) / 2),
            c.fontSize = 20,
            c.color = "#ff0000",
            t.graphics.drawLine(o, n, r, l, "#ffffff", 3),
            c = new Laya.Label(`${e.param2}`),
            this.boxContent.addChild(c),
            c.pos((r + o) / 2, (l + n) / 2),
            c.fontSize = 20,
            c.color = "#ff0000",
            t.graphics.drawLine(r, l, h, d, "#ffffff", 3),
            c = new Laya.Label(`${e.param1}`),
            this.boxContent.addChild(c),
            c.pos((r + h) / 2, (l + d) / 2),
            c.fontSize = 20,
            c.color = "#ff0000",
            t.graphics.drawLine(h, d, i, s, "#ffffff", 3),
            c = new Laya.Label(`${e.param2}`),
            this.boxContent.addChild(c),
            c.pos((i + h) / 2, (s + d) / 2),
            c.fontSize = 20,
            c.color = "#ff0000",
            this.imageOption1.skin = "",
            this.imageOption2.skin = "",
            mgrLoader.loadFont("answer", this.labelOption1),
            mgrLoader.loadFont("answer", this.labelOption2),
            this.labelOption1.text = `${e.answer1}`,
            this.labelOption2.text = `${e.answer2}`
        }
        createParallelogram(e) {
            this.boxContent.destroyChildren();
            let t = new Laya.Image;
            t.size(this.boxContent.width, this.boxContent.height),
            this.boxContent.addChild(t);
            let a = Math.min(this.boxContent.width / e.param1, this.boxContent.height / e.param3);
            a *= .75;
            let i = Math.sqrt(e.param2 * e.param2 - e.param3 * e.param3) * a
              , s = this.boxContent.width / 2 - e.param1 * a / 2 - i / 2
              , o = this.boxContent.height / 2 + e.param3 * a / 2
              , n = s + e.param1 * a
              , r = o
              , l = n + i
              , h = o - e.param3 * a
              , d = s + i
              , c = h
              , g = d
              , _ = o;
            t.graphics.drawLine(s, o, n, r, "#ffffff", 3);
            let m = new Laya.Label(`${e.param1}`);
            this.boxContent.addChild(m),
            m.pos((s + n) / 2, (o + r) / 2 + 5),
            m.fontSize = 20,
            m.color = "#ff0000",
            t.graphics.drawLine(n, r, l, h, "#ffffff", 3),
            m = new Laya.Label(`${e.param2}`),
            this.boxContent.addChild(m),
            m.pos((l + n) / 2 + 5, (h + r) / 2),
            m.fontSize = 20,
            m.color = "#ff0000",
            t.graphics.drawLine(l, h, d, c, "#ffffff", 3),
            m = new Laya.Label(`${e.param1}`),
            this.boxContent.addChild(m),
            m.pos((l + d) / 2, (h + c) / 2 - 25),
            m.fontSize = 20,
            m.color = "#ff0000",
            t.graphics.drawLine(d, c, s, o, "#ffffff", 3),
            m = new Laya.Label(`${e.param2}`),
            this.boxContent.addChild(m),
            m.pos((s + d) / 2 - 35, (o + c) / 2),
            m.fontSize = 20,
            m.color = "#ff0000",
            t.graphics.drawLine(d, c, g, _, "#ffffff", 3),
            m = new Laya.Label(`${e.param3}`),
            this.boxContent.addChild(m),
            m.pos((d + g) / 2 + 5, (c + _) / 2),
            m.fontSize = 20,
            m.color = "#ff0000",
            this.imageOption1.skin = "",
            this.imageOption2.skin = "",
            mgrLoader.loadFont("answer", this.labelOption1),
            mgrLoader.loadFont("answer", this.labelOption2),
            this.labelOption1.text = `${e.answer1}`,
            this.labelOption2.text = `${e.answer2}`
        }
        createTime(e) {
            this.boxContent.destroyChildren();
            let t = new vQuestionTime({
                time: e.realAnswer
            });
            this.boxContent.addChild(t),
            t.x = this.boxContent.width / 2,
            t.y = this.boxContent.height / 2,
            this.imageOption1.skin = "",
            this.imageOption2.skin = "",
            mgrLoader.loadFont("answer", this.labelOption1),
            mgrLoader.loadFont("answer", this.labelOption2);
            let a = new Date(1e3 * e.answer1)
              , i = new Date(1e3 * e.answer2)
              , s = a.getHours()
              , o = ul.format("%02d", s)
              , n = a.getMinutes()
              , r = ul.format("%02d", n);
            this.labelOption1.text = `${o}冒 ${r}`;
            let l = i.getHours()
              , h = ul.format("%02d", l)
              , d = i.getMinutes()
              , c = ul.format("%02d", d);
            this.labelOption2.text = `${h}冒 ${c}`
        }
        createSeriesQuestion(e) {
            this.boxContent.destroyChildren();
            let t = new Laya.Label;
            mgrLoader.loadFont("answer", t),
            t.anchorX = .5,
            t.anchorY = .5,
            e.param1 = e.param1.replace(/,/g, "逗"),
            e.param1 = e.param1.replace(/\?/g, "问"),
            t.text = e.param1,
            this.boxContent.addChild(t),
            t.y = 50,
            Tools.layoutH(this.boxContent),
            this.imageOption1.skin = "",
            this.imageOption2.skin = "",
            mgrLoader.loadFont("answer", this.labelOption1),
            mgrLoader.loadFont("answer", this.labelOption2),
            this.labelOption1.text = `${e.answer1}`,
            this.labelOption2.text = `${e.answer2}`
        }
        createCompareQuestion(e) {
            this.boxContent.destroyChildren();
            let t = new Laya.Label;
            mgrLoader.loadFont("answer", t),
            t.anchorX = .5,
            t.anchorY = .5,
            t.text = `${e.param1}大 ${e.param2}问`,
            this.boxContent.addChild(t),
            t.y = 50,
            Tools.layoutH(this.boxContent),
            this.imageOption1.skin = "",
            this.imageOption2.skin = "",
            mgrLoader.loadFont("answer", this.labelOption1),
            mgrLoader.loadFont("answer", this.labelOption2),
            this.labelOption1.text = `${1 == e.answer1 ? "对" : "错"}`,
            this.labelOption2.text = `${1 == e.answer2 ? "对" : "错"}`
        }
        createPicLawQuestion(e) {
            this.boxContent.destroyChildren();
            let t = mgrCfg.get_from_question_db(e.questionId)
              , a = t.rule.split(",");
            for (let e = 0; e < a.length; e++) {
                const t = a[e];
                if ("?" == t) {
                    let e = new Laya.Label;
                    mgrLoader.loadFont("answer", e),
                    e.anchorX = .5,
                    e.anchorY = .5,
                    e.text = "问",
                    this.boxContent.addChild(e),
                    e.y = 70
                } else {
                    let e = mgrCfg.get_from_item_template_db(t)
                      , a = new Laya.Image(e.icon);
                    a.size(45, 45),
                    a.y = 50,
                    this.boxContent.addChild(a)
                }
            }
            Tools.layoutH(this.boxContent);
            let i = mgrCfg.get_from_item_template_db(t.answer1)
              , s = mgrCfg.get_from_item_template_db(t.answer2);
            this.imageOption1.skin = i.icon,
            this.imageOption2.skin = s.icon,
            mgrLoader.loadFont("answer", this.labelOption1),
            mgrLoader.loadFont("answer", this.labelOption2),
            this.labelOption1.text = "",
            this.labelOption2.text = ""
        }
        fillRewardProgress() {
            let e = this.progressBar.progress
              , t = mgrCfg.get_from_interaction_config_db(1)
              , a = mgrInteraction.curLearnQuestionCount / t.questionRewardProgress;
            CustomTween.actionFloat(this.progressBar.__node, e, a, 1e3, e=>{
                this.progressBar.progress = e
            }
            ).callback(()=>{
                if (1 == a) {
                    let e = mgrInteraction.settlementLearn();
                    e.fOnClose = (()=>{
                        this.fillRewardProgress(),
                        Timer.callLoop(.016, e=>{
                            0 == DialogBase.ShowingDialog.length && (this.sendMsg("MSG_GUIDE_EVENT", {
                                id: "got_item_dialog_finished"
                            }),
                            e.stop())
                        }
                        , this)
                    }
                    ),
                    e.rankId = eNearbyRankId.learn;
                    let t = this.buttonBox.__node;
                    e.acticonWPos = t.localToGlobal(new Laya.Point(t.width / 2,t.height / 2)),
                    CustomTween.to(t, {
                        scaleX: 2,
                        scaleY: 2
                    }, 300).to({
                        scaleX: 2.2,
                        scaleY: 2.2
                    }, 100).to({
                        scaleX: 2,
                        scaleY: 2
                    }, 100).to({
                        scaleX: 3.15,
                        scaleY: 3.15,
                        alpha: 0
                    }, 100).callback(()=>{
                        mgrDirector.openDialog("vSmallGameSettlementDialog", e, !0)
                    }
                    ).delayTime(300).to({
                        scaleX: 1,
                        scaleY: 1,
                        alpha: 1
                    }, 100).start(1)
                } else
                    mgrTip.showBadgeWithNumber(this.buttonBox.__node, 0)
            }
            ).start(1)
        }
        onMsgRoleExpChanged() {
            this.refreshLevel()
        }
        refreshLevel() {
            this.labelLevel.text = `${mgrInteraction.level}`,
            this.progressBarLevel.progress = mgrInteraction.levelProgress
        }
        selectOption1() {
            this.answerQuestion(1)
        }
        selectOption2() {
            this.answerQuestion(2)
        }
        answerQuestion(e) {
            if (mgrInteraction.canObtainAnswerQuestionReward())
                return void mgrTip.showMsgTip(`${this.multilingualText1}`);
            if (mgrInteraction.restState == E_REST_STATE.rest)
                return void mgrDirector.openDialog("vWeakupTipDialog");
            let t = mgrInteraction.checkAnswerQuestionCondition();
            if (2 == t.code && mgrInteraction.bStudyed)
                return this.roleAvatar.playAnimation(ANIMATION_ID.hungry01),
                this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.ele01),
                this.playPaopaoTip(TIP_CION$1.eat[0]),
                void mgrDirector.openDialog("vHungryTipDialog");
            if (1 == t.code && mgrInteraction.bStudyed)
                return this.roleAvatar.playAnimation(ANIMATION_ID.tired01),
                this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.haqian),
                this.playPaopaoTip(TIP_CION$1.rest[0]),
                void mgrDirector.openDialog("vTiredTipDialog");
            if (3 == t.code)
                return this.roleAvatar.playAnimation(ANIMATION_ID.refuse),
                this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.weiqu01),
                void mgrDirector.openDialog("vLearnFullTipDialog");
            if (this[`spriteOption ${e}Selected`].visible = !0,
            mgrInteraction.answerQuestion(e)) {
                this[`spriteOption ${e}Right`].visible = !0;
                let t = Math.random() > .5
                  , a = t ? ANIMATION_ID.STAGE.WIN1 : ANIMATION_ID.STAGE.WIN2;
                this.roleAvatar.playAnimation(a, .1, null, ()=>{}
                );
                let i = t ? ANIMATION_ID.face.kaixin01 : ANIMATION_ID.face.kaixin02;
                this.roleAvatar.playFaceAnimation(i, .1),
                Math.random() > .5 ? mgrSound.play(230) : mgrSound.play(231)
            } else {
                this[`spriteOption ${e}Error`].visible = !0,
                this[`spriteOption ${1 == e ? 2 : 1}Right`].visible = !0;
                let t = Math.random() > .5 ? ANIMATION_ID.STAGE.FAILED1 : ANIMATION_ID.dacuo;
                this.roleAvatar.playAnimation(t, .1, null, ()=>{}
                ),
                this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.weiqu01, .1),
                mgrSound.play(229)
            }
            Timer.callLater(.5, ()=>{
                CustomTween.to(this.boxContent, {
                    scaleX: 0,
                    scaleY: 0
                }, 500, Laya.Ease.sineOut).callback(()=>{
                    this.fillData()
                }
                ).start(1),
                this.sendMsg("MSG_GUIDE_EVENT", {
                    id: "vAnswerQuestionScene.clickButtonOption1"
                })
            }
            , this)
        }
        tryGuide() {
            console.log("检查是否可以引导!!"),
            mgrInteraction.bStudyed ? (this.bottomBar.showEatingButton(),
            this.bottomBar.showPlayButton(),
            this.bottomBar.showSleepButton(),
            this.bottomBar.showStudyButton()) : (this.bottomBar.showEatingButton(),
            this.bottomBar.showPlayButton(),
            this.bottomBar.showStudyButton(),
            this.bottomBar.unactiveEatingButton(),
            this.bottomBar.unactivePlayButton())
        }
        onMsgStudyGuideEnded() {
            mgrInteraction.bStudyed = !0,
            this.bottomBar.fadeInSleepButton(),
            this.bottomBar.unactiveStudyButton(),
            mgrGuide.startGuide(501)
        }
        onTouchButtonReward() {}
        onTouchbuttonLevel() {
            mgrGuide.isGuiding() || mgrDirector.openDialog("vSettingDialog")
        }
        playPaopaoTip(e) {
            Tools.loadImg(this.buttonTipIcon.__node, e),
            this.imagePaopao1.scale(0, 0),
            this.imagePaopao2.scale(0, 0),
            this.imagePaopao3.scale(0, 0),
            CustomTween.to(this.imagePaopao1, {
                scaleX: 1,
                scaleY: 1
            }, 500).callback(()=>{
                CustomTween.to(this.imagePaopao2, {
                    scaleX: 1,
                    scaleY: 1
                }, 500).callback(()=>{
                    CustomTween.to(this.imagePaopao3, {
                        scaleX: 1,
                        scaleY: 1
                    }, 500, Laya.Ease.backOut).delayTime(3e3).callback(()=>{
                        CustomTween.to(this.imagePaopao3, {
                            scaleX: 0,
                            scaleY: 0
                        }, 250).start(1),
                        CustomTween.delayTime(this.imagePaopao2, 250).to({
                            scaleX: 0,
                            scaleY: 0
                        }, 250).start(1),
                        CustomTween.delayTime(this.imagePaopao1, 500).to({
                            scaleX: 0,
                            scaleY: 0
                        }, 250).start(1)
                    }
                    ).start(1)
                }
                ).start(1)
            }
            ).start(1)
        }
        onTouchButtonTipIcon() {
            let e = mgrInteraction.checkAnswerQuestionCondition();
            1 == e.code ? mgrDirector.warpSceneWidthEffect("vRestScene") : 2 == e.code && mgrDirector.warpSceneWidthEffect("vEatingScene")
        }
        onTouchButtonPotion() {
            let e = mgrCfg.get_from_role_level_db(mgrInteraction.level);
            if (mgrInteraction.learnProgress / e.learnProgressValue < .1)
                return this.roleAvatar.playAnimation(ANIMATION_ID.refuse),
                void this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.kaixin01);
            if (mgrPlayer.getItemAmount(Const.ITEM_ID_INTERACTION_LEARN) > 0) {
                mgrPlayer.addItemAmount(Const.ITEM_ID_INTERACTION_LEARN, -1, "使用学习药水"),
                mgrTip.addGotItemTip(Const.ITEM_ID_INTERACTION_LEARN, -1);
                let e = mgrCfg.get_from_food_db(Const.ITEM_ID_INTERACTION_LEARN)
                  , t = mgrCfg.get_from_role_level_db(mgrInteraction.level);
                mgrInteraction.learnProgress -= Math.floor(t.learnProgressValue * e.subLearnProgress),
                this.roleAvatar.playAnimation(ANIMATION_ID.STAGE.WIN1),
                this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.kaixin02),
                this.fillData()
            } else
                mgrAd.triggerAdEvent(AD_EVENT_ID_POTION$3, null, !0)
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID_POTION$3 && (mgrPlayer.addItemAmount(Const.ITEM_ID_INTERACTION_LEARN, 1, "看广告获得"),
            mgrInteraction.eatFood(Const.ITEM_ID_INTERACTION_LEARN),
            this.roleAvatar.playAnimation(ANIMATION_ID.STAGE.WIN1),
            this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.kaixin02),
            this.fillData(),
            this.sendMsg("MSG_INTERACTION_STUDY_JUMP"))
        }
        onTouchButtonFreeWear() {
            !mgrGuide.isGuiding() && mgrDirector.warpSceneWidthEffect("vRoomScene", {
                backSceneName: "vEatingScene"
            })
        }
        onTouchButtonGameCenter() {
            mgrGuide.isAllGuideFinished() && mgrDirector.warpSceneWidthEffect("vGameCenterScene")
        }
    }
    class vBornScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vBornScene",
            this.exportNodeNames = ["CC_spriteBg", "CC_boxBottom", "CC_buttonPvp", "CC_imagePvp", "CC_buttonStage", "CC_imageStage", "CC_buttonGarden", "CC_imageGarden", "CC_buttonInteraction", "CC_spriteInteractionBgNormal", "CC_spriteInteractionBgWarn", "CC_progressBarInteractionFg", "CC_boxGuide", "CC_boxGuideBottom"],
            this.bAvatarLoaded = !1
        }
        onOpened() {
            super.onOpened(),
            this.init(),
            this.registerListeners({
                MSG_BORN_REGISTER_FLY: this.onMsgBornRegisterFly.bind(this)
            }),
            mgrSound.play(1)
        }
        onClosed() {
            super.onClosed()
        }
        init() {
            this.buttonInteraction.fOnClick = this.onTouchButtonInteraction.bind(this),
            this.buttonGarden.__node.scale(0, 0),
            this.buttonPvp.__node.scale(0, 0),
            this.buttonStage.__node.scale(0, 0),
            this.buttonInteraction.__node.scale(0, 0),
            Layout.widget(.5, Laya.stage.height - 10, this.boxBottom, {
                x: .5,
                y: 1
            }),
            this.buildScene(()=>{
                this.scaleFlower()
            }
            )
        }
        buildScene(e) {
            this.spriteBg.zOrder = -2;
            let t = new TaskManager
              , a = [];
            a.push(e=>{
                mgrLoader.loadModeWithModeId("item_huabao", ()=>{
                    this.flower = mgrLoader.Pool.getModel("item_huabao"),
                    this.flower.transform.scale = new Laya.Vector3,
                    mgrMaterial.setCartonShader(this.flower, "item_huabao"),
                    this.add3DEffectAtBack(this.flower, 0),
                    this.flowerAnimator = this.flower.getComponent(Laya.Animator),
                    this.cameraBack.fieldOfView = 30,
                    this.cameraBack.transform.position = new Laya.Vector3(0,.95,7),
                    this.cameraBack.transform.rotationEuler = new Laya.Vector3(-6),
                    this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,.95,5.2),
                    this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-6),
                    e()
                }
                , this, 1)
            }
            ),
            t.push(a),
            t.start(()=>{
                e()
            }
            , this)
        }
        scaleFlower() {
            CustomTween.to(this.flower.transform, {
                localScaleX: 1,
                localScaleY: 1,
                localScaleZ: 1
            }, 1e3, Laya.Ease.backOut).delayTime(500).callback(()=>{
                this.destroyed || this.flower.destroyed || this.showGuideHander()
            }
            ).start(1)
        }
        showGuideHander() {
            let e = this.flower.transform.position.clone();
            e.y += .5;
            let t = Tools.tranlateWorld3D2Screen(this.cameraBack, e)
              , a = this.globalToLocal(new Laya.Point(t.outPos.x,t.outPos.y));
            this.boxGuide.pos(a.x, a.y),
            mgrGuide.registerGuideNode("vBornScene.buttonOperate", this.boxGuide),
            mgrGuide.startGuide(101),
            Tools.registerTouchHander(this.boxGuide, e=>{
                e.isClick && (this.sendMsg("MSG_GUIDE_EVENT", {
                    id: "vBornScene.clickButtonOperate"
                }),
                mgrGuide.unregisterGuideNode("vBornScene.buttonOperate"),
                this.checkAvatarLoaded(),
                Tools.unRegisterTouchHander(this.boxGuide))
            }
            ),
            this.loadAvatar()
        }
        checkAvatarLoaded() {
            mgrTip.showLoadingTip("vBornScene_loadAvatar"),
            Timer.callLoop(.016, e=>{
                this.bAvatarLoaded && (e.stop(),
                this.openFlower(),
                mgrTip.hideLoadingTip("vBornScene_loadAvatar"))
            }
            , this)
        }
        loadAvatar() {
            this.roleAvatar = new RoleAvatar,
            this.add3DEffectAtBack(this.roleAvatar, 0),
            this.roleAvatar.transform.scale = new Laya.Vector3,
            this.roleAvatar.registerLoadEndCallback(()=>{
                this.bAvatarLoaded = !0,
                this.roleAvatar.hideWings(),
                this.roleAvatar.transform.scale = new Laya.Vector3(.65,.65,.65),
                this.roleAvatar.transform.position = new Laya.Vector3(0,.25,0)
            }
            )
        }
        openFlower() {
            mgrMaterial.playAnimation(this.flowerAnimator, ANIMATION_ID.hua.open, .1, ()=>{
                Timer.callLater(.5, ()=>{
                    this.roleAvatar.playAnimation("shuijiao02-come01")
                }
                , this)
            }
            , ()=>{
                this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,.95,3.25),
                this.roleAvatar.showWings(),
                mgrMaterial.playAnimation(this.flowerAnimator, ANIMATION_ID.hua.openIdle, .1),
                this.sendMsg("MSG_GUIDE_EVENT", {
                    id: "vBornScene.openFlowerFinished"
                }),
                mgrGuide.registerGuideNode("vBornScene.buttonOperateBottom", this.boxGuideBottom)
            }
            )
        }
        onMsgBornRegisterFly() {
            Tools.registerTouchHander(this.boxGuideBottom, e=>{
                e.isClick && (this.sendMsg("MSG_GUIDE_EVENT", {
                    id: "vBornScene.clickButtonOperateBottom"
                }),
                this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.kaixin02, .05),
                this.roleAvatar.playWingAnimation(ANIMATION_ID.wing_fly),
                this.roleAvatar.playAnimation(ANIMATION_ID.float, .05, null, ()=>{
                    this.sendMsg("MSG_GUIDE_EVENT", {
                        id: "vBornScene.playAnimationFinished"
                    }),
                    this.popButton()
                }
                ),
                Tools.unRegisterTouchHander(this.boxGuideBottom))
            }
            )
        }
        popButton() {
            this.bottomSkeleton = ULSkeleton.create("ui_zjm", ()=>{
                let e = 0;
                e = this.context.bFromLoading ? 0 : -50,
                CustomTween.delayTime(this.buttonInteraction.__node, (90 + e) / 30 * 1e3).callback(()=>{
                    this.startGuide()
                }
                ).to({
                    scaleX: .67,
                    scaleY: 1.09
                }, 5 / 30 * 1e3).to({
                    scaleX: 1.19,
                    scaleY: .68
                }, 100).to({
                    scaleX: .73,
                    scaleY: 1.18
                }, 4 / 30 * 1e3).to({
                    scaleX: 1,
                    scaleY: 1
                }, 5 / 30 * 1e3).start(1)
            }
            ),
            this.bottomSkeleton.playAnimation("idle1", !1),
            this.boxBottom.addChild(this.bottomSkeleton),
            this.bottomSkeleton.pos(this.boxBottom.width / 2, this.boxBottom.height),
            this.bottomSkeleton.zOrder = -2
        }
        startGuide() {
            mgrGuide.registerGuideNode("vBornScene.buttonInteraction", this.buttonInteraction.__node)
        }
        onTouchButtonInteraction() {
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vBornScene.clickButtonInteraction"
            }),
            mgrDirector.warpSceneWidthEffect("vMotionMainScene"),
            mgrInteraction.bBorn = !0
        }
    }
    class vCartonShaderDemo extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vCartonShaderDemo",
            this.exportNodeNames = ["CC_spriteBg", "CC_buttonAlbedoColor", "CC_imageSliderAlbedoIdentity", "CC_imageSliderShadowRange", "CC_imageSliderShadowIdentity", "CC_buttonShaowColor", "CC_imageSliderShaowBoundaryIdentity", "CC_imageSliderSpecularRange", "CC_imageSliderSpecularIdentity", "CC_buttonSpecularColor", "CC_buttonOutlineColor", "CC_imageSliderOutlineWidth", "CC_imageSliderOutlineIdentity", "CC_imageSliderSecondShadowRange", "CC_imageSliderSecondShadowIdentity", "CC_buttonSecondShaowColor", "CC_imageSliderSecondShaowBoundaryIdentity", "CC_imageSliderEdgeHightLightRange", "CC_imageSliderEdgeHightLightIdentity", "CC_buttonEdgeHightLightColor", "CC_imageSliderEdgeHightLightBoundaryIdentity", "CC_boxList", "CC_boxCurrentList", "CC_labelCameraRotation", "CC_buttonOpque", "CC_labelOpaque", "CC_buttonCutOffSingle", "CC_labelCutOffSingle", "CC_buttonCutOffDouble", "CC_labelCutOffDouble", "CC_buttonCutOffTransparent", "CC_labelTransparent", "CC_buttonCutOffTransparentDouble", "CC_labelTransparentDouble"],
            this.reuseList = null,
            this.reuseListCurrent = null,
            this.avatar = null,
            this.cameraFollow = null
        }
        onOpened() {
            super.onOpened(),
            this.registerListeners({
                MSG_DEBUG_KEY_DOWN: e=>{
                    let t = mgrDirector.Layer3DDirectionLight;
                    if ("left" == e ? t.transform.rotate(new Laya.Vector3(0,3,0), !1, !1) : "right" == e ? t.transform.rotate(new Laya.Vector3(0,-3,0), !1, !1) : "up" == e ? t.transform.rotate(new Laya.Vector3(3,0,0), !1, !1) : "down" == e && t.transform.rotate(new Laya.Vector3(-3,0,0), !1, !1),
                    "number_8" == e) {
                        this.cameraBack.getComponent(CameraFollow).distance.z -= .1
                    }
                    if ("number_2" == e) {
                        this.cameraBack.getComponent(CameraFollow).distance.z += .1
                    }
                    if ("number_1" == e) {
                        this.cameraBack.getComponent(CameraFollow).distance.y -= .1
                    }
                    if ("number_3" == e) {
                        this.cameraBack.getComponent(CameraFollow).distance.y += .1
                    }
                    if ("ctrl_c" == e) {
                        if (!this.modelId)
                            return;
                        if (!this.skinName)
                            return;
                        this.context.clipboard = ul.clone(mgrMaterial.getMaterial(this.modelId, this.skinName)),
                        mgrTip.showMsgTip("复制成功!")
                    }
                    if ("ctrl_v" == e) {
                        if (!this.modelId)
                            return;
                        if (!this.skinName)
                            return;
                        if (!this.context.clipboard)
                            return;
                        mgrTip.showMsgTip("粘贴成功!"),
                        mgrMaterial.setMaterial(this.modelId, this.skinName, ul.clone(this.context.clipboard)),
                        this.onClickSkinName(this.skinName)
                    }
                    "ctrl_number_1" == e && (Const.GlobalRouter ? Const.GlobalRouter.sendMsgToServer({
                        route: "keepInFile",
                        data: {
                            filePath: "res/cfg/materialInfo.json",
                            data: mgrMaterial.materialInfos
                        }
                    }) : mgrTip.showMsgTip("未链接存档服务器！")),
                    this.labelCameraRotation.text = `光照旋转值: ${t.transform.rotationEuler.x.toFixed(2)}, ${t.transform.rotationEuler.y.toFixed(2)}, ${t.transform.rotationEuler.z.toFixed(2)}`
                }
            }),
            Tools.registerTouchHander(this.spriteBg, this.onTouchSpriteBg.bind(this)),
            this.spriteBg.zOrder = -2,
            this.buildUi(),
            this.fillData()
        }
        onClosed() {
            super.onClosed()
        }
        canOperateCamera() {
            return !1
        }
        onTouchSpriteBg(e) {
            if (e.isBegin && (this.bTouchBg = !0,
            this.lastTouchBgPos = e.pos,
            this.lastBeginPos = e.pos),
            (e.isCancel || e.isEnd) && (this.bTouchBg = !1),
            this.bTouchBg) {
                let t = e.pos.x - this.lastTouchBgPos.x;
                this.lastTouchBgPos = e.pos,
                this.avatar && this.avatar.transform.rotate(new Laya.Vector3(0,t,0), !0, !1)
            }
        }
        buildUi() {
            this.reuseList = new ReuseList(1,0,10),
            this.reuseList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseList),
            this.reuseList.setItemClass(vEditorCartonMaterialPart),
            this.reuseList.setVerticalMoveEnable(!0),
            this.reuseListCurrent = new ReuseList(1,0,3),
            this.reuseListCurrent.size(this.boxCurrentList.width, this.boxCurrentList.height),
            this.boxCurrentList.addChild(this.reuseListCurrent),
            this.reuseListCurrent.setItemClass(vEditorCartonMaterialPart),
            this.reuseListCurrent.setVerticalMoveEnable(!0),
            this.avatar = new Laya.Sprite3D,
            this.add3DEffectAtBack(this.avatar, 0),
            this.cameraBack.fieldOfView = 25,
            this.cameraBack.transform.rotate(new Laya.Vector3(-4), !0, !1),
            this.cameraBack.transform.translate(new Laya.Vector3(0,0,0));
            let e = this.cameraBack.addComponent(CameraFollow);
            e.__target = this.avatar,
            e.distance = new Laya.Vector3(0,1,4),
            e.endRotation = new Laya.Vector3(-4),
            e.lerpValue = 1,
            this.cameraFollow = e
        }
        fillData() {
            let e = [];
            mgrCfg.forDb_from_model_db((t,a)=>{
                e.push({
                    modelId: a.id,
                    fOnClickModel: this.onSelectModel.bind(this),
                    skinName: null,
                    fOnClickSkinName: null
                })
            }
            ),
            this.reuseList.setDatas(e)
        }
        onSelectModel(e) {
            this.modelId = null,
            this.skinName = null,
            this.operatingMaterialData = null,
            this.operatingMaterial = null,
            mgrLoader.loadModeWithModeId(e, ()=>{
                this.avatar.destroy(),
                this.avatar = mgrLoader.getModeWithModeId(e),
                mgrMaterial.setCartonShader(this.avatar, e),
                this.add3DEffectAtBack(this.avatar, 0),
                this.cameraFollow.__target = this.avatar,
                this.modelId = e,
                this.fillCurrentList(this.avatar, e)
            }
            , this, 1)
        }
        fillCurrentList(e, t) {
            let a = [];
            for (let i = 0; i < e.numChildren; i++) {
                let s = e.getChildAt(i);
                (s.skinnedMeshRenderer || s.meshRenderer) && a.push({
                    modelId: t,
                    fOnClickModel: null,
                    skinName: s.name,
                    fOnClickSkinName: this.onClickSkinName.bind(this)
                })
            }
            this.reuseListCurrent.setDatas(a)
        }
        onClickSkinName(e) {
            this.skinName = e,
            this.operationMode = this.avatar.getChildByName(e);
            let t = this.__setCartonMaterial(this.operationMode.skinnedMeshRenderer || this.operationMode.meshRenderer);
            this.registerAllOperation(t[0])
        }
        __setCartonMaterial(e) {
            return mgrMaterial.__setCartonMaterial(e, this.modelId, this.skinName)
        }
        registerAllOperation(e) {
            this.operatingMaterialData = mgrMaterial.getMaterial(this.modelId, this.skinName),
            this.operatingMaterial = e;
            let t = this.buttonAlbedoColor.owner.getChildByName("label");
            t.text = `漫反射颜色: r:${(255 * this.operatingMaterial.albedoColor.x).toFixed(0)},g:${(255 * this.operatingMaterial.albedoColor.y).toFixed(0)},b:${(255 * this.operatingMaterial.albedoColor.z).toFixed(0)}`,
            this.buttonAlbedoColor.fOnClick = (()=>{
                mgrDirector.openDialog("vEditorColorDialog", {
                    colorChange: e=>{
                        this.operatingMaterial.albedoColor = new Laya.Vector4(e.r / 255,e.g / 255,e.b / 255,1),
                        this.operatingMaterialData.aldobeColor = [this.operatingMaterial.albedoColor.x, this.operatingMaterial.albedoColor.y, this.operatingMaterial.albedoColor.z, this.operatingMaterial.albedoColor.w],
                        this.buttonAlbedoColor.owner.getChildByName("label").text = `漫反射颜色: r:${e.r},g:${e.g},b:${e.b}`;
                        let t = Tools.__colorToHex(e);
                        this.buttonAlbedoColor.owner.getChildByName("sprite").graphics.drawPie(0, 0, 10, 0, 360, t)
                    }
                })
            }
            ),
            this.__registerAsSlider(this.imageSliderAlbedoIdentity, this.operatingMaterial.albedoIdentity, e=>{
                this.operatingMaterial.albedoIdentity = e,
                this.operatingMaterialData.aldobeIdensity = e,
                this.imageSliderAlbedoIdentity.getChildByName("label").text = `漫反射亮度: ${e.toFixed(4)}`
            }
            ),
            this.__registerAsSlider(this.imageSliderShadowRange, this.operatingMaterial.shadowRange, e=>{
                this.operatingMaterial.shadowRange = e,
                this.operatingMaterialData.shadowRange = e,
                this.imageSliderShadowRange.getChildByName("label").text = `阴影范围: ${e.toFixed(4)}`
            }
            ),
            this.__registerAsSlider(this.imageSliderShadowIdentity, this.operatingMaterial.shadowIntensity, e=>{
                this.operatingMaterial.shadowIntensity = e,
                this.operatingMaterialData.shadowIdensity = e,
                this.imageSliderShadowIdentity.getChildByName("label").text = `阴影强度: ${e.toFixed(4)}`
            }
            ),
            (t = this.buttonShaowColor.owner.getChildByName("label")).text = `阴影颜色: r:${(255 * this.operatingMaterial.shadowColor.x).toFixed(0)},g:${(255 * this.operatingMaterial.shadowColor.y).toFixed(0)},b:${(255 * this.operatingMaterial.shadowColor.z).toFixed(0)}`,
            this.buttonShaowColor.fOnClick = (()=>{
                mgrDirector.openDialog("vEditorColorDialog", {
                    colorChange: e=>{
                        this.operatingMaterial.shadowColor = new Laya.Vector4(e.r / 255,e.g / 255,e.b / 255,1),
                        this.operatingMaterialData.shadowColor = [this.operatingMaterial.shadowColor.x, this.operatingMaterial.shadowColor.y, this.operatingMaterial.shadowColor.z, this.operatingMaterial.shadowColor.w],
                        this.buttonShaowColor.owner.getChildByName("label").text = `阴影颜色: r:${e.r},g:${e.g},b:${e.b}`;
                        let t = Tools.__colorToHex(e);
                        this.buttonShaowColor.owner.getChildByName("sprite").graphics.drawPie(0, 0, 10, 0, 360, t)
                    }
                })
            }
            ),
            this.__registerAsSlider(this.imageSliderShaowBoundaryIdentity, this.operatingMaterial.shadowBoundary, e=>{
                this.operatingMaterial.shadowBoundary = e,
                this.operatingMaterialData.shadowBoundaryValue = e,
                this.imageSliderShaowBoundaryIdentity.getChildByName("label").text = `阴影边界柔和度: ${e.toFixed(4)}`
            }
            ),
            this.__registerAsSlider(this.imageSliderSpecularRange, this.operatingMaterial.specularRange, e=>{
                this.operatingMaterial.specularRange = e,
                this.operatingMaterialData.specularRange = e,
                this.imageSliderSpecularRange.getChildByName("label").text = `高亮范围: ${e.toFixed(4)}`
            }
            ),
            this.__registerAsSlider(this.imageSliderSpecularIdentity, this.operatingMaterial.specularIntensity, e=>{
                this.operatingMaterial.specularIntensity = e,
                this.operatingMaterialData.specularIdensity = e,
                this.imageSliderSpecularIdentity.getChildByName("label").text = `高亮强度: ${e.toFixed(4)}`
            }
            ),
            (t = this.buttonSpecularColor.owner.getChildByName("label")).text = `高亮颜色: r:${(255 * this.operatingMaterial.specularColor.x).toFixed(0)},g:${(255 * this.operatingMaterial.specularColor.y).toFixed(0)},b:${(255 * this.operatingMaterial.specularColor.z).toFixed(0)}`,
            this.buttonSpecularColor.fOnClick = (()=>{
                mgrDirector.openDialog("vEditorColorDialog", {
                    colorChange: e=>{
                        this.operatingMaterial.specularColor = new Laya.Vector4(e.r / 255,e.g / 255,e.b / 255,1),
                        this.operatingMaterialData.specularColor = [this.operatingMaterial.specularColor.x, this.operatingMaterial.specularColor.y, this.operatingMaterial.specularColor.z, this.operatingMaterial.specularColor.w],
                        this.buttonSpecularColor.owner.getChildByName("label").text = `高亮颜色: r:${e.r},g:${e.g},b:${e.b}`;
                        let t = Tools.__colorToHex(e);
                        this.buttonSpecularColor.owner.getChildByName("sprite").graphics.drawPie(0, 0, 10, 0, 360, t)
                    }
                })
            }
            );
            let a = !0;
            this.__registerAsSlider(this.imageSliderOutlineWidth, .5, e=>{
                e = a ? this.operatingMaterial.outlineWidth : (e - .5) / 10,
                a = !1,
                this.operatingMaterial.outlineWidth = e,
                this.operatingMaterialData.outlineWidth = e,
                this.imageSliderOutlineWidth.getChildByName("label").text = `轮廓宽度: ${e.toFixed(4)}`
            }
            ),
            this.__registerAsSlider(this.imageSliderOutlineIdentity, this.operatingMaterial.outlineLightness, e=>{
                this.operatingMaterial.outlineLightness = e,
                this.operatingMaterialData.outlineIdensity = e,
                this.imageSliderOutlineIdentity.getChildByName("label").text = `轮廓强度: ${e.toFixed(4)}`
            }
            ),
            (t = this.buttonOutlineColor.owner.getChildByName("label")).text = `轮廓颜色: r:${(255 * this.operatingMaterial.outlineColor.x).toFixed(0)},g:${(255 * this.operatingMaterial.outlineColor.y).toFixed(0)},b:${(255 * this.operatingMaterial.outlineColor.z).toFixed(0)}`,
            this.buttonOutlineColor.fOnClick = (()=>{
                mgrDirector.openDialog("vEditorColorDialog", {
                    colorChange: e=>{
                        this.operatingMaterial.outlineColor = new Laya.Vector4(e.r / 255,e.g / 255,e.b / 255,1),
                        this.operatingMaterialData.outlineColor = [this.operatingMaterial.outlineColor.x, this.operatingMaterial.outlineColor.y, this.operatingMaterial.outlineColor.z, this.operatingMaterial.outlineColor.w],
                        this.buttonOutlineColor.owner.getChildByName("label").text = `轮廓颜色: r:${e.r},g:${e.g},b:${e.b}`;
                        let t = Tools.__colorToHex(e);
                        this.buttonOutlineColor.owner.getChildByName("sprite").graphics.drawPie(0, 0, 10, 0, 360, t)
                    }
                })
            }
            ),
            this.__registerAsSlider(this.imageSliderSecondShadowRange, this.operatingMaterial.secondShadowRange + .5, e=>{
                e -= .5,
                this.operatingMaterial.secondShadowRange = e,
                this.operatingMaterialData.secondShadowRange = e,
                this.imageSliderSecondShadowRange.getChildByName("label").text = `重影范围: ${e.toFixed(4)}`
            }
            ),
            this.__registerAsSlider(this.imageSliderSecondShadowIdentity, this.operatingMaterial.secondShadowIntensity, e=>{
                this.operatingMaterial.secondShadowIntensity = e,
                this.operatingMaterialData.secondShadowIntensity = e,
                this.imageSliderSecondShadowIdentity.getChildByName("label").text = `重影强度: ${e.toFixed(4)}`
            }
            ),
            (t = this.buttonSecondShaowColor.owner.getChildByName("label")).text = `重影颜色: r:${(255 * this.operatingMaterial.secondShadowColor.x).toFixed(0)},g:${(255 * this.operatingMaterial.secondShadowColor.y).toFixed(0)},b:${(255 * this.operatingMaterial.secondShadowColor.z).toFixed(0)}`,
            this.buttonSecondShaowColor.fOnClick = (()=>{
                mgrDirector.openDialog("vEditorColorDialog", {
                    colorChange: e=>{
                        this.operatingMaterial.secondShadowColor = new Laya.Vector4(e.r / 255,e.g / 255,e.b / 255,1),
                        this.operatingMaterialData.secondShadowColor = [this.operatingMaterial.secondShadowColor.x, this.operatingMaterial.secondShadowColor.y, this.operatingMaterial.secondShadowColor.z, this.operatingMaterial.secondShadowColor.w],
                        this.buttonSecondShaowColor.owner.getChildByName("label").text = `重影颜色: r:${e.r},g:${e.g},b:${e.b}`;
                        let t = Tools.__colorToHex(e);
                        this.buttonSecondShaowColor.owner.getChildByName("sprite").graphics.drawPie(0, 0, 10, 0, 360, t)
                    }
                })
            }
            ),
            this.__registerAsSlider(this.imageSliderSecondShaowBoundaryIdentity, this.operatingMaterial.secondShadowBoundary, e=>{
                this.operatingMaterial.secondShadowBoundary = e,
                this.operatingMaterialData.secondShadowBoundary = e,
                this.imageSliderSecondShaowBoundaryIdentity.getChildByName("label").text = `重影边界柔和度: ${e.toFixed(4)}`
            }
            ),
            this.__registerAsSlider(this.imageSliderEdgeHightLightRange, this.operatingMaterial.EdgeHightRange, e=>{
                this.operatingMaterial.EdgeHightRange = e,
                this.operatingMaterialData.EdgeHightRange = e,
                this.imageSliderEdgeHightLightRange.getChildByName("label").text = `边缘高光范围: ${e.toFixed(4)}`
            }
            ),
            this.__registerAsSlider(this.imageSliderEdgeHightLightIdentity, this.operatingMaterial.EdgeHightIntensity, e=>{
                this.operatingMaterial.EdgeHightIntensity = e,
                this.operatingMaterialData.EdgeHightIntensity = e,
                this.imageSliderEdgeHightLightIdentity.getChildByName("label").text = `边缘高光强度: ${e.toFixed(4)}`
            }
            ),
            (t = this.buttonEdgeHightLightColor.owner.getChildByName("label")).text = `边缘高光颜色: r:${(255 * this.operatingMaterial.EdgeHightColor.x).toFixed(0)},g:${(255 * this.operatingMaterial.EdgeHightColor.y).toFixed(0)},b:${(255 * this.operatingMaterial.EdgeHightColor.z).toFixed(0)}`,
            this.buttonEdgeHightLightColor.fOnClick = (()=>{
                mgrDirector.openDialog("vEditorColorDialog", {
                    colorChange: e=>{
                        this.operatingMaterial.EdgeHightColor = new Laya.Vector4(e.r / 255,e.g / 255,e.b / 255,1),
                        this.operatingMaterialData.EdgeHightColor = [this.operatingMaterial.EdgeHightColor.x, this.operatingMaterial.EdgeHightColor.y, this.operatingMaterial.EdgeHightColor.z, this.operatingMaterial.EdgeHightColor.w],
                        this.buttonEdgeHightLightColor.owner.getChildByName("label").text = `边缘高光颜色: r:${e.r},g:${e.g},b:${e.b}`;
                        let t = Tools.__colorToHex(e);
                        this.buttonEdgeHightLightColor.owner.getChildByName("sprite").graphics.drawPie(0, 0, 10, 0, 360, t)
                    }
                })
            }
            ),
            this.__registerAsSlider(this.imageSliderEdgeHightLightBoundaryIdentity, this.operatingMaterial.EdgeHightBoundary, e=>{
                this.operatingMaterial.EdgeHightBoundary = e,
                this.operatingMaterialData.EdgeHightBoundary = e,
                this.imageSliderEdgeHightLightBoundaryIdentity.getChildByName("label").text = `边缘高光边界柔和度: ${e.toFixed(4)}`
            }
            ),
            this.buttonOpque.fOnClick = (()=>{
                this.operatingMaterial.renderMode = CartoonMaterial.RENDERMODE_OPAQUE,
                this.operatingMaterialData.renderMode = CartoonMaterial.RENDERMODE_OPAQUE,
                this.labelOpaque.color = "#00ff00",
                this.labelCutOffSingle.color = "#000000",
                this.labelCutOffDouble.color = "#000000",
                this.labelTransparent.color = "#000000",
                this.labelTransparentDouble.color = "#000000"
            }
            ),
            this.buttonCutOffSingle.fOnClick = (()=>{
                this.operatingMaterial.renderMode = CartoonMaterial.RENDERMODE_CUTOUT,
                this.operatingMaterialData.renderMode = CartoonMaterial.RENDERMODE_CUTOUT,
                this.labelOpaque.color = "#000000",
                this.labelCutOffSingle.color = "#00ff00",
                this.labelCutOffDouble.color = "#000000",
                this.labelTransparent.color = "#000000",
                this.labelTransparentDouble.color = "#000000"
            }
            ),
            this.buttonCutOffDouble.fOnClick = (()=>{
                this.operatingMaterial.renderMode = CartoonMaterial.RENDERMODE_CUTOUT_CULL_NONE,
                this.operatingMaterialData.renderMode = CartoonMaterial.RENDERMODE_CUTOUT_CULL_NONE,
                this.labelOpaque.color = "#000000",
                this.labelCutOffSingle.color = "#000000",
                this.labelCutOffDouble.color = "#00ff00",
                this.labelTransparent.color = "#000000",
                this.labelTransparentDouble.color = "#000000"
            }
            ),
            this.buttonCutOffTransparent.fOnClick = (()=>{
                this.operatingMaterial.renderMode = CartoonMaterial.RENDERMODE_TRANSPARENT,
                this.operatingMaterialData.renderMode = CartoonMaterial.RENDERMODE_TRANSPARENT,
                this.labelOpaque.color = "#000000",
                this.labelCutOffSingle.color = "#000000",
                this.labelCutOffDouble.color = "#000000",
                this.labelTransparent.color = "#00ff00",
                this.labelTransparentDouble.color = "#000000"
            }
            ),
            this.buttonCutOffTransparentDouble.fOnClick = (()=>{
                this.operatingMaterial.renderMode = CartoonMaterial.RENDERMODE_TRANSPARENT_CULL_NONE,
                this.operatingMaterialData.renderMode = CartoonMaterial.RENDERMODE_TRANSPARENT_CULL_NONE,
                this.labelOpaque.color = "#000000",
                this.labelCutOffSingle.color = "#000000",
                this.labelCutOffDouble.color = "#000000",
                this.labelTransparent.color = "#000000",
                this.labelTransparentDouble.color = "#00ff00"
            }
            )
        }
        __registerAsSlider(e, t, a) {
            let i = e.getChildAt(0);
            i.x = e.width * t;
            let s = !1;
            Tools.registerTouchHander(e, t=>{
                if (t.isBegin && (s = !0),
                (t.isEnd || t.isCancel) && (s = !1),
                s) {
                    let s = e.globalToLocal(new Laya.Point(t.pos.x,t.pos.y));
                    s.y = e.height / 2,
                    s.x = ul.clamp(s.x, 0, e.width),
                    i.x = s.x,
                    i.y = s.y,
                    a(s.x / e.width)
                }
            }
            ),
            a(t)
        }
    }
    const AD_EVENT_ID_FREE_POTION = "free_hungry_potion";
    var EATING_SCENE_ROLE_STATE;
    !function(e) {
        e[e.idle = 1] = "idle",
        e[e.hungry = 2] = "hungry",
        e[e.full = 3] = "full",
        e[e.eating = 4] = "eating",
        e[e.rest = 5] = "rest"
    }(EATING_SCENE_ROLE_STATE || (EATING_SCENE_ROLE_STATE = {}));
    class vEatingScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vEatingScene",
            this.exportNodeNames = ["CC_spriteBg", "CC_buttonBack", "CC_buttonRight", "CC_buttonLeft", "CC_boxList", "CC_imagePaopao1", "CC_imagePaopao2", "CC_imagePaopao3", "CC_spriteTipIcon", "CC_buttonLevel", "CC_progressBarLevel", "CC_labelLevel", "CC_buttonShop", "CC_buttonFreeWear", "CC_spriteFreeWear", "CC_buttonGameCenter", "CC_boxGameCenterReadPoint"],
            this.__tempFoodGetWay = {}
        }
        onOpened() {
            super.onOpened(),
            this.multilingualText1 = `${mgrI18n.getText("vEatingScene.1")}`,
            this.buttonBack.fOnClick = (()=>{
                mgrDirector.warpSceneWidthEffect("vHubScene")
            }
            ),
            this.buttonRight.fOnClick = (()=>{
                this.foodList.tweenToNext()
            }
            ),
            this.buttonLeft.fOnClick = (()=>{
                this.foodList.tweenToLast()
            }
            ),
            this.buttonGameCenter.fOnClick = this.onTouchButtonGameCenter.bind(this),
            this.progressBarLevel.barName = this.progressBarLevel.owner.name,
            this.progressBarLevel.style = ULPROGRESSBAR_STYLE.ver,
            this.buttonLevel.fOnClick = this.onTouchbuttonLevel.bind(this),
            this.buttonShop.fOnClick = (()=>{
                mgrDirector.openDialog("vFoodShopDialog", {
                    fOnClose: this.fillData.bind(this)
                })
            }
            ),
            this.buttonFreeWear.fOnClick = this.onTouchButtonFreeWear.bind(this),
            !mgrGuide.isAllGuideFinished() && (this.buttonBack.__node.visible = !1),
            this.init(),
            this.registerListeners({
                MSG_EATING_GUIDE_ENDED: this.onMsgEatingGuideEnded.bind(this),
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this),
                MSG_ROLE_EXP_CHANGED: this.onMsgRoleExpChanged.bind(this),
                MSG_I18N_REFRESH: ()=>{
                    this.multilingualText1 = `${mgrI18n.getText("vEatingScene.1")}`
                }
            }),
            mgrSdk.staticPointEvent(5011),
            mgrI18n.trySetI18nImage(this.spriteFreeWear, "btn_freeWear.png")
        }
        onClosed() {
            super.onClosed()
        }
        getPreLoadModelIds() {
            return [MODEL_ID.map_hudong]
        }
        init() {
            if (this.imagePaopao1.scale(0, 0),
            Layout.widget(10, 10, this.buttonBack.__node),
            Layout.widget(10, -1, this.buttonLevel.__node),
            Layout.widget(mgrDirector.width - 10, -1, this.buttonShop.__node, {
                x: 1,
                y: 1
            }),
            Layout.widget(mgrDirector.width - 5, -1, this.buttonFreeWear.__node, {
                x: 1,
                y: 1
            }),
            Layout.widget(mgrDirector.width - 5, -1, this.buttonGameCenter.__node, {
                x: 1,
                y: 1
            }),
            mgrTip.showBadgeWithNumber(this.boxGameCenterReadPoint, 1, new Laya.Point(15,15)),
            this.buildUI(()=>{
                this.tryGuide()
            }
            ),
            this.buildScene(()=>{
                this.roleAvatar.transform.position = new Laya.Vector3(0,0,0),
                this.roleAvatar.transform.scale = new Laya.Vector3(1,1,1),
                this.table.transform.scale = new Laya.Vector3(1,1,1),
                this.table.transform.position = new Laya.Vector3(0,0,.67),
                this.roleStManager = new FSMObject,
                this.roleStManager.registerState(EATING_SCENE_ROLE_STATE.idle, this.inIdle.bind(this), this.exeIdle.bind(this), this.outIdle.bind(this)),
                this.roleStManager.registerState(EATING_SCENE_ROLE_STATE.hungry, this.inHungry.bind(this), this.exeHungry.bind(this), this.outHungry.bind(this)),
                this.roleStManager.registerState(EATING_SCENE_ROLE_STATE.full, this.inFull.bind(this), this.exeFull.bind(this), this.outFull.bind(this)),
                this.roleStManager.registerState(EATING_SCENE_ROLE_STATE.eating, this.inEating.bind(this), this.exeEating.bind(this), this.outEating.bind(this)),
                this.roleStManager.registerState(EATING_SCENE_ROLE_STATE.rest, this.inRest.bind(this), this.exeRest.bind(this), this.outRest.bind(this)),
                mgrInteraction.restState == E_REST_STATE.rest ? this.roleStManager.setNextState(EATING_SCENE_ROLE_STATE.rest) : this.roleStManager.setNextState(EATING_SCENE_ROLE_STATE.idle),
                Timer.callLoop(.016, ()=>{
                    this.update3DScene(),
                    this.roleStManager.update()
                }
                , this),
                this.roleStManager.update()
            }
            ),
            this.fillData(),
            mgrGuide.isAllGuideFinished() && 1 == mgrSdk.getCopNumberValueByKey("ui_layout_down_eating")) {
                if (Tools.random(1, 100) <= mgrSdk.getCopNumberValueByKey("ui_pop_dialog_ratio_eating") && mgrPlayer.isPopBannerTipDialogCding())
                    if (mgrInteraction.restState == E_REST_STATE.rest)
                        mgrDirector.openDialog("vWeakupTipDialog");
                    else if (mgrInteraction.restState == E_REST_STATE.none) {
                        let e = mgrCfg.get_from_role_level_db(mgrInteraction.level)
                          , t = mgrInteraction.energy / e.restProgressValue
                          , a = mgrInteraction.eatFillValue / e.eatProgressValue
                          , i = mgrInteraction.motionProgress / e.motionProgressValue
                          , s = mgrInteraction.learnProgress / e.learnProgressValue;
                        a > .6 ? t < .2 ? mgrDirector.openDialog("vTiredTipDialog") : i < .2 || s < .2 ? mgrDirector.openDialog("vBoringTipDialog") : mgrDirector.openDialog("vResttingTipDialog") : mgrDirector.openDialog("vFoodDiscountDialog")
                    }
            }
        }
        buildUI(e) {
            this.foodList = new ReuseList(0,1,3),
            this.foodList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.foodList),
            this.foodList.setItemClass(vEatingFoood),
            this.foodList.setHorizontalMoveEnable(!0),
            this.foodList.setSpaceX(30),
            this.topBar = new vTopBar({}),
            this.addChild(this.topBar),
            Layout.widget(.5, 45, this.topBar, {
                x: .5,
                y: 0
            });
            let t = new vInteractionMainNode({
                sceneName: "vEatingScene"
            });
            this.addChild(t),
            1 == mgrSdk.getCopNumberValueByKey("ui_layout_down_eating") ? Layout.widget(.5, mgrDirector.height, t, {
                x: .5,
                y: 1
            }) : Layout.widget(.5, mgrDirector.height - 200, t, {
                x: .5,
                y: 1
            }),
            t.context.fOnLoadingFinished = (()=>{
                e()
            }
            ),
            this.bottomBar = t,
            this.spriteBg.zOrder = -2
        }
        update3DScene() {
            this.fengche || (this.fengche = this._3dScene.getChildByName("fengche"),
            this.sky = this._3dScene.getChildByName("skybox")),
            this.fengche.transform.rotate(new Laya.Vector3(0,1,0), !0, !1),
            this.sky.transform.rotate(new Laya.Vector3(0,0,-.05), !0, !1)
        }
        buildScene(e) {
            this.add3DEffectAtBack(MODEL_ID.effect.e_rainbow, 0);
            let t = new TaskManager
              , a = [];
            a.push(e=>{
                this.roleAvatar = new RoleAvatar,
                this.roleAvatar.transform.scale = new Laya.Vector3,
                this.add3DEffectAtBack(this.roleAvatar, 0),
                this.roleAvatar.fillByPartIds(mgrPart.getLastClothes()),
                this.roleAvatar.registerLoadEndCallback(()=>{
                    this.roleAvatar.playAnimation(ANIMATION_ID.idle, 0, ()=>{
                        e()
                    }
                    )
                }
                ),
                this.cameraBack.fieldOfView = 35,
                this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,1.15,2.72),
                this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-9,0,0),
                this.cameraBack.transform.position = new Laya.Vector3(0,1.15,2.72),
                this.cameraBack.transform.rotationEuler = new Laya.Vector3(-9,0,0)
            }
            );
            let i = MODEL_ID.map_hudong;
            a.push(e=>{
                mgrLoader.loadModeWithModeId(i, ()=>{
                    this._3dScene = mgrLoader.Pool.getModel(i),
                    this.add3DEffectAtBack(this._3dScene, 0),
                    e()
                }
                , this, 1)
            }
            ),
            a.push(e=>{
                mgrLoader.loadModeWithModeId("item_zhuozi", ()=>{
                    this.table = mgrLoader.Pool.getModel("item_zhuozi"),
                    mgrMaterial.setCartonShader(this.table, "item_zhuozi"),
                    this.add3DEffectAtBack(this.table, 0),
                    this.table.transform.scale = new Laya.Vector3,
                    e()
                }
                , this, 1)
            }
            ),
            t.push(a),
            t.start(()=>{
                e()
            }
            , this)
        }
        fillData() {
            let e = []
              , t = mgrPlayer.getItemAmount(Const.ITEM_ID_INTERACTION_HUNGER)
              , a = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID_FREE_POTION);
            (t > 0 || a) && e.push({
                foodId: Const.ITEM_ID_INTERACTION_HUNGER,
                fOnClick: this.onClickFood.bind(this),
                fOnClickAdd: this.onClickAdd.bind(this),
                fOnClickWatchAdd: this.onClickWatchAdd.bind(this),
                fGetFoodGetWay: this.getFoodGetWay.bind(this)
            }),
            e.push({
                foodId: mgrInteraction.getTodayRecommendFoodId(),
                fOnClick: this.onClickFood.bind(this),
                fOnClickAdd: this.onClickAdd.bind(this),
                fOnClickWatchAdd: this.onClickWatchAdd.bind(this),
                fGetFoodGetWay: this.getFoodGetWay.bind(this)
            }),
            mgrCfg.forDb_from_food_db((t,a)=>{
                mgrPlayer.getItemAmount(a.id) > 0 && a.id != Const.ITEM_ID_INTERACTION_ENERGY && a.id != Const.ITEM_ID_INTERACTION_HUNGER && a.id != Const.ITEM_ID_INTERACTION_LEARN && a.id != Const.ITEM_ID_INTERACTION_MOTION && e.push({
                    foodId: a.id,
                    fOnClick: this.onClickFood.bind(this),
                    fOnClickAdd: this.onClickAdd.bind(this),
                    fOnClickWatchAdd: this.onClickWatchAdd.bind(this),
                    fGetFoodGetWay: this.getFoodGetWay.bind(this)
                })
            }
            ),
            2 == e.length && e.push({
                foodId: 0,
                fOnClick: this.onClickFood.bind(this),
                fOnClickAdd: this.onClickAdd.bind(this),
                fOnClickWatchAdd: this.onClickWatchAdd.bind(this),
                fGetFoodGetWay: this.getFoodGetWay.bind(this)
            }),
            e.length <= 3 ? (this.buttonLeft.__node.visible = !1,
            this.buttonRight.__node.visible = !1) : (this.buttonLeft.__node.visible = !0,
            this.buttonRight.__node.visible = !0),
            this.foodList.setDatas(e),
            Timer.callLater(.016, ()=>{
                this.foodList.tweenTo(0)
            }
            , this),
            this.refreshLevel()
        }
        onClickFood(e) {
            if (!this.roleStManager)
                return;
            if (this.roleStManager.getCurState() == EATING_SCENE_ROLE_STATE.eating)
                return void mgrTip.showMsgTip(`${this.multilingualText1}`);
            if (this.roleStManager.getCurState() == EATING_SCENE_ROLE_STATE.rest)
                return void mgrDirector.openDialog("vWeakupTipDialog");
            if (mgrPlayer.getItemAmount(e) <= 0)
                return;
            let t = mgrCfg.get_from_role_level_db(mgrInteraction.level);
            if (mgrInteraction.eatFillValue / t.eatProgressValue > .95 && e != Const.ITEM_ID_INTERACTION_HUNGER)
                return this.roleAvatar.playAnimation(ANIMATION_ID.full01),
                this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.baole01),
                void mgrDirector.openDialog("vEatFullTipDialog");
            if (e == Const.ITEM_ID_INTERACTION_HUNGER && mgrInteraction.eatFillValue / t.eatProgressValue < .1)
                return this.roleAvatar.playAnimation(ANIMATION_ID.refuse),
                void this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.weiqu01);
            this.roleStManager.setNextState(EATING_SCENE_ROLE_STATE.eating);
            let a = mgrCfg.get_from_food_db(e);
            mgrLoader.loadModeWithModeId(a.modelId, ()=>{
                this.roleAvatar.playAnimation(a.animationId, .1, ()=>{
                    Timer.callLater(.4666, ()=>{
                        let e = mgrLoader.Pool.getModel(a.modelId);
                        mgrMaterial.setCartonShader(e, a.modelId),
                        1 == a.linkPointType ? this.roleAvatar.linkMode2LHand(e) : 2 == a.linkPointType && this.roleAvatar.linkMode2RHand(e),
                        e.getChildAt(0).transform.scale = new Laya.Vector3,
                        CustomTween.actionFloat(e.transform, 0, 1, 200, t=>{
                            e.getChildAt(0).transform.scale = new Laya.Vector3(t,t,t)
                        }
                        ).start(1),
                        0 == a.bCanConsume && Timer.callLater(2.5, ()=>{
                            CustomTween.actionFloat(e.transform, 1, 0, 200, t=>{
                                e.getChildAt(0).transform.scale = new Laya.Vector3(t,t,t)
                            }
                            ).callback(()=>{
                                this.roleAvatar.unlinkModel(e),
                                this.roleStManager && this.roleStManager.setNextState(EATING_SCENE_ROLE_STATE.idle)
                            }
                            ).start(1)
                        }
                        , this),
                        Timer.callLater(.75, ()=>{
                            mgrSound.play(232),
                            this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.chi),
                            a.bCanConsume && CustomTween.actionFloat(e.transform, 1, 0, 300, t=>{
                                e.getChildAt(0).transform.scale = new Laya.Vector3(t,t,t)
                            }
                            ).callback(()=>{
                                this.roleAvatar.unlinkModel(e),
                                this.roleStManager && this.roleStManager.setNextState(EATING_SCENE_ROLE_STATE.idle)
                            }
                            ).start(1)
                        }
                        , this)
                    }
                    , this)
                }
                ),
                Timer.callLater(2, ()=>{
                    this.sendMsg("MSG_GUIDE_EVENT", {
                        id: "vEatingScene.eatingFinished"
                    })
                }
                , this)
            }
            , this, 1),
            mgrInteraction.eatFood(e),
            e == Const.ITEM_ID_INTERACTION_HUNGER && this.sendMsg("MSG_INTERACTION_EATING_JUMP");
            for (let e = 0; e < a.rewards.length; e++) {
                const [t,i] = a.rewards[e];
                mgrPlayer.addItemAmount(t, i, ""),
                mgrTip.addGotItemTip(t, i)
            }
            return this.foodList.refresh(),
            !0
        }
        onClickAdd() {
            mgrDirector.openDialog("vFoodShopDialog", {
                fOnClose: ()=>{
                    this.fillData()
                }
            })
        }
        onClickWatchAdd(e) {
            e == Const.ITEM_ID_INTERACTION_HUNGER ? mgrAd.triggerAdEvent(AD_EVENT_ID_FREE_POTION, {
                rewards: [[e, 1, 1]]
            }, !0) : mgrAd.triggerAdEvent(AD_EVENT_ID.VIDEO.free_food, {
                rewards: [[e, 1, 1]]
            }, !0)
        }
        getFoodGetWay(e) {
            let t = AD_EVENT_ID_FREE_POTION;
            e != Const.ITEM_ID_INTERACTION_HUNGER && (t = AD_EVENT_ID.VIDEO.free_food);
            let a = mgrAd.preCheckCanTriggerAdEvent(t);
            if (a && this.__tempFoodGetWay[e])
                return this.__tempFoodGetWay[e];
            let i = .5;
            return e == Const.ITEM_ID_INTERACTION_HUNGER && (i = 0),
            e == mgrInteraction.getTodayRecommendFoodId() && (i = 0),
            a && Math.random() > i ? this.__tempFoodGetWay[e] = "ad" : this.__tempFoodGetWay[e] = "shop",
            this.__tempFoodGetWay[e]
        }
        tryGuide() {
            console.log("检查是否可以引导!!"),
            mgrInteraction.bEated ? (this.bottomBar.showEatingButton(),
            this.bottomBar.showPlayButton(),
            this.bottomBar.showSleepButton(),
            this.bottomBar.showStudyButton()) : (this.bottomBar.showPlayButton(),
            this.bottomBar.unactivePlayButton(),
            this.bottomBar.showEatingButton())
        }
        onMsgEatingGuideEnded() {
            mgrInteraction.bEated = !0,
            this.bottomBar.fadeInStudyButton(),
            this.bottomBar.unactiveEatingButton(),
            mgrGuide.startGuide(401)
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId != AD_EVENT_ID_FREE_POTION && e.adEventId != AD_EVENT_ID.VIDEO.free_food || this.foodList.refresh()
        }
        inIdle() {
            let e = mgrCfg.get_from_role_level_db(mgrInteraction.level);
            mgrInteraction.eatFillValue / e.eatProgressValue < .1 ? (this.roleAvatar.playAnimation(ANIMATION_ID.hungry01),
            this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.ele01)) : mgrInteraction.eatFillValue / e.eatProgressValue > .95 ? (this.roleAvatar.playAnimation(ANIMATION_ID.idle),
            this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.idle)) : this.roleAvatar.playAnimation(ANIMATION_ID.idle),
            Timer.callLater(8, ()=>{
                let e = mgrCfg.get_from_role_level_db(mgrInteraction.level);
                mgrInteraction.eatFillValue / e.eatProgressValue < .1 ? this.roleStManager && this.roleStManager.setNextState(EATING_SCENE_ROLE_STATE.hungry) : mgrInteraction.eatFillValue / e.eatProgressValue > .95 && this.roleStManager && this.roleStManager.setNextState(EATING_SCENE_ROLE_STATE.full)
            }
            , this)
        }
        exeIdle() {}
        outIdle() {}
        inRest() {
            this.roleAvatar.active = !1,
            this.add3DEffectAtFront("e_sj", {
                x: Laya.stage.width,
                y: Laya.stage.height / 2
            }, 0, 5, e=>{
                e.active = !0,
                e.transform.rotationEuler = new Laya.Vector3(0,90,0)
            }
            )
        }
        exeRest() {}
        outRest() {}
        inHungry() {
            mgrSound.play(233),
            Timer.callLater(1.5, ()=>{
                mgrSound.play(206)
            }
            , this),
            this.roleAvatar.playAnimation(ANIMATION_ID.hungry02, 0, null, ()=>{
                this.roleStManager && this.roleStManager.setNextState(EATING_SCENE_ROLE_STATE.idle)
            }
            ),
            this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.ele02),
            this.imagePaopao1.scale(0, 0),
            this.imagePaopao2.scale(0, 0),
            this.imagePaopao3.scale(0, 0),
            CustomTween.to(this.imagePaopao1, {
                scaleX: 1,
                scaleY: 1
            }, 500).callback(()=>{
                CustomTween.to(this.imagePaopao2, {
                    scaleX: 1,
                    scaleY: 1
                }, 500).callback(()=>{
                    CustomTween.to(this.imagePaopao3, {
                        scaleX: 1,
                        scaleY: 1
                    }, 500, Laya.Ease.backOut).delayTime(3e3).callback(()=>{
                        CustomTween.to(this.imagePaopao3, {
                            scaleX: 0,
                            scaleY: 0
                        }, 250).start(1),
                        CustomTween.delayTime(this.imagePaopao2, 250).to({
                            scaleX: 0,
                            scaleY: 0
                        }, 250).start(1),
                        CustomTween.delayTime(this.imagePaopao1, 500).to({
                            scaleX: 0,
                            scaleY: 0
                        }, 250).start(1)
                    }
                    ).start(1)
                }
                ).start(1)
            }
            ).start(1)
        }
        exeHungry() {}
        outHungry() {
            CustomTween.to(this.imagePaopao1, {
                scaleX: 0,
                scaleY: 0
            }, 300).start(1)
        }
        inFull() {
            mgrSound.play(227),
            this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.baole01),
            this.roleAvatar.playAnimation(ANIMATION_ID.full01, .1, null, ()=>{
                this.roleStManager.setNextState(EATING_SCENE_ROLE_STATE.idle)
            }
            )
        }
        exeFull() {}
        outFull() {}
        inEating() {}
        exeEating() {}
        outEating() {}
        onTouchbuttonLevel() {
            mgrGuide.isGuiding() || mgrDirector.openDialog("vSettingDialog")
        }
        onTouchButtonFreeWear() {
            !mgrGuide.isGuiding() && mgrDirector.warpSceneWidthEffect("vRoomScene", {
                backSceneName: "vEatingScene"
            })
        }
        onTouchButtonGameCenter() {
            mgrGuide.isAllGuideFinished() && mgrDirector.warpSceneWidthEffect("vGameCenterScene")
        }
        onMsgRoleExpChanged() {
            this.refreshLevel()
        }
        refreshLevel() {
            this.labelLevel.text = `${mgrInteraction.level}`,
            this.progressBarLevel.progress = mgrInteraction.levelProgress
        }
    }
    class vEditorDynamicBone extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vEditorDynamicBone",
            this.exportNodeNames = ["CC_spriteBg", "CC_imageSliderParentParam", "CC_imageSliderChildParam", "CC_imageSliderColliderSize", "CC_imageSliderBoneSize", "CC_boxPartList", "CC_boxChildList", "CC_boxAnimationList", "CC_buttonHair", "CC_buttonHeadWear", "CC_buttonCloth", "CC_buttonWing", "CC_buttonSure", "CC_buttonRemove", "CC_buttonShowWing", "CC_buttonHideWing", "CC_buttonUp", "CC_buttonHandWear"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonCloth.fOnClick = this.onTouchButtonCloth.bind(this),
            this.buttonSure.fOnClick = this.onTouchButtonSure.bind(this),
            this.buttonHair.fOnClick = this.onTouchButtonHair.bind(this),
            this.buttonWing.fOnClick = this.onTouchButtonWing.bind(this),
            this.buttonHeadWear.fOnClick = this.onTouchButtonHeadWear.bind(this),
            this.buttonRemove.fOnClick = this.onTouchButtonRemove.bind(this),
            this.buttonHandWear.fOnClick = this.onTouchButtonHandWear.bind(this),
            Tools.registerTouchHander(this.spriteBg, this.onTouchSpriteBg.bind(this)),
            this.buttonHideWing.fOnClick = (()=>{
                this.avatar.wingScale = 1
            }
            ),
            this.buttonShowWing.fOnClick = (()=>{
                this.avatar.wingScale = .01
            }
            ),
            this.buttonUp.fOnClick = (()=>{
                this.onClickNode(this.curNode.parent)
            }
            ),
            this.buildUi(),
            this.fillData(),
            this.registerListeners({
                MSG_DEBUG_KEY_DOWN: e=>{
                    "ctrl_number_1" == e && (Const.GlobalRouter ? Const.GlobalRouter.sendMsgToServer({
                        route: "keepInFile",
                        data: {
                            filePath: "res/cfg/dynamicBoneInfo.json",
                            data: mgrMaterial.dynamicBoneInfos
                        }
                    }) : mgrTip.showMsgTip("未链接存档服务器！"))
                }
            })
        }
        onClosed() {
            super.onClosed()
        }
        buildUi() {
            this.spriteBg.zOrder = -2,
            this.reuseListPart = new ReuseList(1,0,10),
            this.reuseListPart.size(this.boxPartList.width, this.boxPartList.height),
            this.boxPartList.addChild(this.reuseListPart),
            this.reuseListPart.setItemClass(vEditorDynamicBonePart),
            this.reuseListPart.setVerticalMoveEnable(!0),
            this.reuseListChild = new ReuseList(1,0,5),
            this.reuseListChild.size(this.boxChildList.width, this.boxChildList.height),
            this.boxChildList.addChild(this.reuseListChild),
            this.reuseListChild.setItemClass(vEditorDynamicBoneChild),
            this.reuseListChild.setVerticalMoveEnable(!0),
            this.reuseListAnimation = new ReuseList(1,0,6),
            this.reuseListAnimation.size(this.boxAnimationList.width, this.boxAnimationList.height),
            this.boxAnimationList.addChild(this.reuseListAnimation),
            this.reuseListAnimation.setItemClass(vEditorDynamicBoneAnimationItem),
            this.reuseListAnimation.setVerticalMoveEnable(!0),
            this.avatar = new RoleAvatar,
            this.add3DEffectAtBack(this.avatar, 0),
            this.avatar.registerLoadEndCallback(()=>{
                this.avatar.playAnimation(ANIMATION_ID.idle)
            }
            ),
            this.avatar.transform.scale = new Laya.Vector3(.75,.75,.75),
            this.cameraBack.fieldOfView = 25,
            this.cameraBack.transform.rotate(new Laya.Vector3(-8), !0, !1),
            this.cameraBack.transform.translate(new Laya.Vector3(0,0,2.5))
        }
        fillData() {
            let e = []
              , t = ANIMATION_ID.STAGE.SETTLEMENTTINGS;
            for (let a = 0; a < t.length; a++) {
                const i = t[a];
                e.push({
                    animationId: i,
                    fOnClickAnimation: this.OnClickAnimation.bind(this)
                })
            }
            this.reuseListAnimation.setDatas(e),
            this.avatar.fillByPartIds(mgrPart.getLastClothes())
        }
        selectType(e) {
            let t = [];
            mgrCfg.forDb_from_part_db((a,i)=>{
                i.type == e && t.push({
                    partId: i.id,
                    fOnClickPart: this.onClickPart.bind(this)
                })
            }
            ),
            this.reuseListPart.setDatas(t)
        }
        onClickPart(e) {
            this.avatar.fillByPartIds([e]),
            this.avatar.registerLoadEndCallback(()=>{
                let t = this.avatar.getNodeByType(mgrCfg.get_from_part_db(e).type);
                this.curModel = t,
                this.onClickNode(t)
            }
            )
        }
        onClickNode(e) {
            this.curNode = e;
            let t = [];
            for (let a = 0; a < e.numChildren; a++) {
                let i = e.getChildAt(a);
                t.push({
                    node: i,
                    model: this.curModel,
                    onClickNode: this.onClickNode.bind(this)
                })
            }
            this.reuseListChild.setDatas(t);
            let a = this.generateRoute(this.curNode, this.curModel);
            mgrMaterial.hasDynamicBone(this.curModel.__modelId, a) && this.onTouchButtonSure()
        }
        OnClickAnimation(e) {
            this.avatar.playAnimation(e)
        }
        __registerAllOperation() {
            Tools.registerAsHSlider(this.imageSliderBoneSize, this.curBoneInfo.br, e=>{
                let t = e;
                this.imageSliderBoneSize.getChildByName("label").text = `骨骼半径: ${t.toFixed(4)}`,
                this.curBoneInfo.br = t,
                this.curBoneManager.setBoneRidus(this.curBoneInfo.br)
            }
            , .3),
            Tools.registerAsHSlider(this.imageSliderColliderSize, this.curBoneInfo.cr, e=>{
                let t = e;
                this.imageSliderColliderSize.getChildByName("label").text = `碰撞半径: ${t.toFixed(4)}`,
                this.curBoneInfo.cr = t,
                this.curBoneManager.setColliderRidus(this.curBoneInfo.cr)
            }
            , .3),
            Tools.registerAsHSlider(this.imageSliderParentParam, this.curBoneInfo.p1, e=>{
                this.imageSliderParentParam.getChildByName("label").text = `主节点软硬程度: ${e.toFixed(4)}`,
                this.curBoneInfo.p1 = e,
                this.curBoneManager.setBoneParm1(this.curBoneInfo.p1)
            }
            ),
            Tools.registerAsHSlider(this.imageSliderChildParam, this.curBoneInfo.p2, e=>{
                this.imageSliderChildParam.getChildByName("label").text = `子节点软硬程度: ${e.toFixed(4)}`,
                this.curBoneInfo.p2 = e,
                this.curBoneManager.setBoneParm2(this.curBoneInfo.p2)
            }
            , 2)
        }
        onTouchButtonCloth() {
            this.selectType(PartType.cloth)
        }
        onTouchButtonHair() {
            this.selectType(PartType.hair)
        }
        onTouchButtonWing() {
            this.selectType(PartType.wing)
        }
        onTouchButtonHeadWear() {
            this.selectType(PartType.headDec)
        }
        onTouchButtonSure() {
            this.curBoneManager = this.curNode.getComponent(BoneManager),
            this.curBoneManager || (this.curBoneManager = this.curNode.addComponent(BoneManager));
            let e = this.generateRoute(this.curNode, this.curModel);
            this.curBoneInfo = mgrMaterial.getDynamicBone(this.curModel.__modelId, e),
            this.__registerAllOperation()
        }
        onTouchButtonRemove() {
            let e = this.generateRoute(this.curNode, this.curModel);
            mgrMaterial.removeDynamicBone(this.curModel.__modelId, e);
            let t = this.curNode.getComponent(BoneManager);
            t && t.destroy()
        }
        onTouchButtonHandWear() {
            this.selectType(PartType.handDec)
        }
        generateRoute(e, t) {
            if (e == t)
                return "/";
            let a = [];
            for (; a.push(e.name),
            (e = e.parent) != t; )
                ;
            let i = "/";
            for (let e = a.length - 1; e >= 0; e--)
                i += `${a[e]}`,
                0 != e && (i += "/");
            return i
        }
        onTouchSpriteBg(e) {
            if (e.isBegin && (this.bTouchBg = !0,
            this.lastTouchBgPos = e.pos),
            (e.isCancel || e.isEnd) && (this.bTouchBg = !1),
            this.bTouchBg) {
                let t = e.pos.x - this.lastTouchBgPos.x;
                this.lastTouchBgPos = e.pos,
                this.avatar && this.avatar.transform.rotate(new Laya.Vector3(0,t,0), !0, !1)
            }
        }
    }
    class vEditorPartCheck extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vEditorPartCheck",
            this.exportNodeNames = ["CC_boxBg", "CC_boxList"],
            this.reuseList = null
        }
        onOpened() {
            super.onOpened(),
            this.buildUi(),
            this.fillData(),
            Tools.registerTouchHander(this.boxBg, this.onTouchSpriteBg.bind(this))
        }
        onClosed() {
            super.onClosed()
        }
        buildUi() {
            this.reuseList = new ReuseList(1,0,10),
            this.reuseList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseList),
            this.reuseList.setItemClass(vEditorDynamicBonePart),
            this.reuseList.setVerticalMoveEnable(!0)
        }
        fillData() {
            let e = [];
            mgrCfg.forDb_from_part_db((t,a)=>{
                a.type == PartType.hair && e.push({
                    partId: a.id,
                    fOnClickPart: this.onClickPart.bind(this)
                })
            }
            ),
            this.reuseList.setDatas(e)
        }
        onClickPart(e) {
            this.partMode && (this.partMode.destroy(),
            this.partMode = null);
            let t = mgrCfg.get_from_part_db(e);
            this.add3DEffectAtBack(t.modelId, 0, t=>{
                this.partMode = t,
                this.useCartonMaterial(this.partMode, e)
            }
            )
        }
        onTouchSpriteBg(e) {
            if (e.isBegin && (this.bTouchBg = !0,
            this.lastTouchBgPos = e.pos),
            (e.isCancel || e.isEnd) && (this.bTouchBg = !1),
            this.bTouchBg) {
                let t = e.pos.x - this.lastTouchBgPos.x;
                this.lastTouchBgPos = e.pos,
                this.partMode && this.partMode.transform.rotate(new Laya.Vector3(0,t,0), !0, !1)
            }
        }
        useCartonMaterial(e, t) {
            e.getChildAt(e.numChildren - 1)
        }
    }
    class vEditorSpineCheckScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vEditorSpineCheckScene",
            this.exportNodeNames = ["CC_boxBg", "CC_boxSpineList", "CC_boxAnimationList"]
        }
        onOpened() {
            super.onOpened(),
            this.buildUi()
        }
        onClosed() {
            super.onClosed()
        }
        buildUi() {
            this.reuseListSpine = new ReuseList(1,0,20),
            this.reuseListSpine.size(this.boxSpineList.width, this.boxSpineList.height),
            this.boxSpineList.addChild(this.reuseListSpine),
            this.reuseListSpine.setItemClass(vEditorSpineItem),
            this.reuseListSpine.setVerticalMoveEnable(!0),
            this.reuseListAnimation = new ReuseList(1,0,20),
            this.reuseListSpine.size(this.boxAnimationList.width, this.boxAnimationList.height),
            this.boxAnimationList.addChild(this.reuseListAnimation),
            this.reuseListAnimation.setItemClass(vEditorAnimationItem),
            this.reuseListAnimation.setVerticalMoveEnable(!0);
            let e = [];
            mgrCfg.forDb_from_spine_db((t,a)=>{
                e.push({
                    spineId: a.id,
                    onClickSpine: this.onClickSpine.bind(this)
                })
            }
            ),
            this.reuseListSpine.setDatas(e)
        }
        onClickSpine(e) {
            this.spine && this.spine.destroy(),
            this.spine = ULSkeleton.create(e, null, 60),
            this.addChild(this.spine),
            this.spine.pos(mgrDirector.width / 2, mgrDirector.height);
            let t = mgrCfg.get_from_spine_db(e)
              , a = [];
            for (let e = 1; e <= 12; e++) {
                let i = t[`l ${e}`];
                if (!i)
                    break;
                a.push({
                    animationId: i,
                    onClickAnimation: this.onClickAnimation.bind(this)
                })
            }
            this.reuseListAnimation.setDatas(a)
        }
        onClickAnimation(e) {
            this.spine.playAnimation(e)
        }
    }
    class vEditorSpineItem extends ReuseListItem {
        constructor() {
            super();
            this.size(124, 30),
            this.anchorX = 0,
            this.anchorY = 0,
            this.label = new Laya.Label,
            this.label.fontSize = 24,
            this.label.color = "#ffffff",
            this.addChild(this.label),
            this.button = this.label.addComponent(ScaleButton),
            this.button.fOnClick = this.onTouchButton.bind(this)
        }
        onTouchButton() {
            this.data && this.data.onClickSpine(this.data.spineId)
        }
        fillByData(e) {
            this.data = e,
            this.label.text = `${e.spineId}`
        }
    }
    class vEditorAnimationItem extends ReuseListItem {
        constructor() {
            super();
            this.size(124, 30),
            this.anchorX = 0,
            this.anchorY = 0,
            this.label = new Laya.Label,
            this.label.fontSize = 24,
            this.label.color = "#ffffff",
            this.addChild(this.label),
            this.button = this.label.addComponent(ScaleButton),
            this.button.fOnClick = this.onTouchButton.bind(this)
        }
        onTouchButton() {
            this.data && this.data.onClickAnimation(this.data.animationId)
        }
        fillByData(e) {
            this.data = e,
            this.label.text = `${e.animationId}`
        }
    }
    class vEditorStagePassCheck extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vEditorStagePassCheck",
            this.exportNodeNames = ["CC_spriteBg", "CC_imageSliderTargeScore", "CC_labelTargetScore", "CC_labelStagePassScore", "CC_boxStageList", "CC_boxCurrentPartList", "CC_boxPartList", "CC_boxTypeList", "CC_labelCurScore", "CC_boxSolutionList", "CC_inputTagWeight", "CC_inputTypeWeight", "CC_buttonUseParam"],
            this.targePersenValue = 1,
            this.curPartIds = [],
            this.curHashPartIds = {}
        }
        onOpened() {
            super.onOpened(),
            this.buttonUseParam.fOnClick = this.onTouchButtonParam.bind(this),
            this.buidUi(),
            this.fillData()
        }
        onClosed() {
            super.onClosed()
        }
        buidUi() {
            this.reuseListStage = new ReuseList(1,0,20),
            this.reuseListStage.size(this.boxStageList.width, this.boxStageList.height),
            this.boxStageList.addChild(this.reuseListStage),
            this.reuseListStage.setItemClass(vStageCheckStage),
            this.reuseListStage.setVerticalMoveEnable(!0),
            this.reuseListType = new ReuseList(1,0,20),
            this.reuseListType.size(this.boxTypeList.width, this.boxTypeList.height),
            this.boxTypeList.addChild(this.reuseListType),
            this.reuseListType.setItemClass(vStageCheckType),
            this.reuseListType.setVerticalMoveEnable(!0),
            this.reuseListPart = new ReuseList(1,0,20),
            this.reuseListPart.size(this.boxPartList.width, this.boxPartList.height),
            this.boxPartList.addChild(this.reuseListPart),
            this.reuseListPart.setItemClass(vStageCheckPart),
            this.reuseListPart.setVerticalMoveEnable(!0),
            this.reuseListCurrentPart = new ReuseList(1,0,20),
            this.reuseListCurrentPart.size(this.boxCurrentPartList.width, this.boxCurrentPartList.height),
            this.boxCurrentPartList.addChild(this.reuseListCurrentPart),
            this.reuseListCurrentPart.setItemClass(vStageCheckCurrentPart),
            this.reuseListCurrentPart.setVerticalMoveEnable(!0),
            this.reuseListSolution = new ReuseList(1,0,20),
            this.reuseListSolution.size(this.boxSolutionList.width, this.boxSolutionList.height),
            this.boxSolutionList.addChild(this.reuseListSolution),
            this.reuseListSolution.setItemClass(vStageSolution),
            this.reuseListSolution.setVerticalMoveEnable(!0)
        }
        fillData() {
            let e = [];
            mgrCfg.forDb_from_stage_db((t,a)=>{
                e.push({
                    stageId: a.id,
                    fClickStage: this.selectStage.bind(this)
                })
            }
            ),
            this.reuseListStage.setDatas(e)
        }
        selectStage(e) {
            this.selectStageId = e;
            let t = mgrCfg.get_from_stage_db(e);
            this.labelStagePassScore.text = `通关分数: ${t.passScore}`,
            Tools.registerAsHSlider(this.imageSliderTargeScore, this.targePersenValue, e=>{
                this.labelTargetScore.text = `${Math.floor(100 * e)}% = ${Math.floor(t.passScore * e)}`,
                this.targePersenValue = e
            }
            , 2);
            let a = "";
            for (let e = 0; e < t.tagWeights.length; e++) {
                const i = t.tagWeights[e];
                i > 0 && (a += `${e + 1}=${i};`)
            }
            this.inputTagWeight.text = a,
            a = "";
            for (let e = 0; e < t.typeWeights.length; e++) {
                const i = t.typeWeights[e];
                i > 0 && (a += `${e + 1}=${i};`)
            }
            this.inputTypeWeight.text = a;
            let i = [];
            mgrCfg.forDb_from_part_type_db((e,a)=>{
                i.push({
                    typeId: a.id,
                    weight: t.typeWeights[a.id - 1],
                    fClickType: this.selectType.bind(this)
                })
            }
            ),
            this.reuseListType.setDatas(i);
            let s = [];
            mgrCfg.forDb_from_part_db((e,t)=>{
                s[t.type] || (s[t.type] = []),
                s[t.type].push({
                    partId: t.id,
                    score: mgrStage.calcScore(this.selectStageId, [t.id])
                })
            }
            );
            for (const e in s) {
                let t = s[e];
                s[e] = Tools.sortArrayByField(t, "-score")
            }
            let o = []
              , n = 0;
            for (; ; )
                try {
                    let e = ""
                      , a = 0
                      , i = "";
                    for (const t in s) {
                        let o = s[t];
                        if (o[n]) {
                            e += `${o[n].partId}+`,
                            a += o[n].score,
                            i += `${mgrCfg.get_from_part_db(o[n].partId).level}⭐+`
                        }
                    }
                    if (e += `=${Math.floor(a)} ${Math.floor(a / t.passScore * 100)}%`,
                    i += `=${Math.floor(a)} ${Math.floor(a / t.passScore * 100)}%`,
                    a < t.passScore * this.targePersenValue)
                        break;
                    o.push({
                        text: e,
                        score: a
                    }),
                    o.push({
                        text: i,
                        score: a + .01
                    }),
                    n++
                } catch (e) {
                    break
                }
            o = Tools.sortArrayByField(o, "score"),
            this.reuseListSolution.setDatas(o),
            this.reuseListSolution.setScroll(0)
        }
        selectType(e) {
            let t = mgrStage.calcScore(this.selectStageId, this.curPartIds)
              , a = mgrCfg.get_from_stage_db(this.selectStageId)
              , i = (this.targePersenValue,
            a.passScore,
            []);
            mgrCfg.forDb_from_part_db((t,a)=>{
                let s = mgrStage.calcScore(this.selectStageId, [a.id]);
                a.type == e && i.push({
                    partId: a.id,
                    score: s,
                    fClickPart: this.selectPartId.bind(this)
                })
            }
            ),
            i = Tools.sortArrayByField(i, "-score"),
            this.reuseListPart.setDatas(i),
            this.reuseListPart.setScroll(0)
        }
        selectPartId(e) {
            let t = mgrCfg.get_from_part_db(e)
              , a = this.curHashPartIds[t.type];
            if (a) {
                let i = this.curPartIds.indexOf(a);
                this.curPartIds.splice(i, 1),
                this.curPartIds.push(e),
                this.curHashPartIds[t.type] = e
            } else
                this.curPartIds.push(e),
                this.curHashPartIds[t.type] = e;
            let i = mgrStage.calcScore(this.selectStageId, this.curPartIds);
            this.labelCurScore.text = `当前分数:${i}`;
            let s = [];
            for (let e = 0; e < this.curPartIds.length; e++) {
                const t = this.curPartIds[e];
                s.push({
                    partId: t,
                    score: mgrStage.calcScore(this.selectStageId, [t]),
                    fClickCurrentPart: this.selectCurrentPart.bind(this)
                })
            }
            this.reuseListCurrentPart.setDatas(s)
        }
        selectCurrentPart(e) {
            let t = mgrCfg.get_from_part_db(e)
              , a = this.curHashPartIds[t.type]
              , i = this.curPartIds.indexOf(a);
            this.curPartIds.splice(i, 1),
            this.curHashPartIds[t.type] = null;
            let s = mgrStage.calcScore(this.selectStageId, this.curPartIds);
            this.labelCurScore.text = `当前分数: ${s}`
        }
        onTouchButtonParam() {
            let e = this.inputTagWeight.text
              , t = e.split(";")
              , a = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            for (let e = 0; e < t.length; e++) {
                const i = t[e];
                if (i && i.length > 0) {
                    let[e,t] = i.split("=");
                    a[parseInt(e) - 1] = parseFloat(t)
                }
            }
            t = (e = this.inputTypeWeight.text).split(";");
            let i = [0, 0, 0, 0, 0, 0, 0, 0];
            for (let e = 0; e < t.length; e++) {
                const a = t[e];
                if (a && a.length > 0) {
                    let[e,t] = a.split("=");
                    i[parseInt(e) - 1] = parseFloat(t)
                }
            }
            let s = mgrCfg.get_from_stage_db(this.selectStageId);
            s.tagWeights = a,
            s.typeWeights = i,
            this.selectStage(this.selectStageId)
        }
    }
    class vStageCheckStage extends ReuseListItem {
        constructor() {
            super(),
            this.width = 100,
            this.height = 30,
            this.anchorX = 0,
            this.anchorY = 0,
            this.label = new Laya.Label,
            this.label.fontSize = 20,
            this.label.anchorX = .5,
            this.addChild(this.label),
            this.label.x = this.width / 2,
            this.label.y = this.height / 2,
            Tools.registerTouchHander(this, e=>{
                e.isClick && this.data.fClickStage(this.data.stageId)
            }
            )
        }
        fillByData(e) {
            this.data = e,
            this.label.text = `第 ${this.data.stageId}关`
        }
    }
    class vStageCheckPart extends ReuseListItem {
        constructor() {
            super(),
            this.width = 100,
            this.height = 30,
            this.anchorX = 0,
            this.anchorY = 0,
            this.label = new Laya.Label,
            this.label.fontSize = 20,
            this.label.anchorX = .5,
            this.addChild(this.label),
            this.label.x = this.width / 2,
            this.label.y = this.height / 2,
            Tools.registerTouchHander(this, e=>{
                e.isClick && this.data.fClickPart(this.data.partId)
            }
            )
        }
        fillByData(e) {
            this.data = e,
            this.label.text = `${this.data.partId}:${Math.floor(this.data.score)}`
        }
    }
    class vStageCheckType extends ReuseListItem {
        constructor() {
            super(),
            this.width = 100,
            this.height = 30,
            this.anchorX = 0,
            this.anchorY = 0,
            this.label = new Laya.Label,
            this.label.fontSize = 20,
            this.label.anchorX = .5,
            this.addChild(this.label),
            this.label.x = this.width / 2,
            this.label.y = this.height / 2,
            Tools.registerTouchHander(this, e=>{
                e.isClick && this.data.fClickType(this.data.typeId)
            }
            )
        }
        fillByData(e) {
            this.data = e;
            let t = mgrCfg.get_from_part_type_db(this.data.typeId);
            this.label.text = t.name + " " + `${this.data.weight}`
        }
    }
    class vStageCheckCurrentPart extends ReuseListItem {
        constructor() {
            super(),
            this.width = 100,
            this.height = 30,
            this.anchorX = 0,
            this.anchorY = 0,
            this.label = new Laya.Label,
            this.label.fontSize = 20,
            this.label.anchorX = .5,
            this.addChild(this.label),
            this.label.x = this.width / 2,
            this.label.y = this.height / 2,
            Tools.registerTouchHander(this, e=>{
                e.isClick && this.data.fClickCurrentPart(this.data.partId)
            }
            )
        }
        fillByData(e) {
            this.data = e,
            this.label.text = `${this.data.partId}:${Math.floor(this.data.score)}`
        }
    }
    class vStageSolution extends ReuseListItem {
        constructor() {
            super(),
            this.width = 510,
            this.height = 30,
            this.anchorX = 0,
            this.anchorY = 0,
            this.label = new Laya.Label,
            this.label.fontSize = 20,
            this.label.anchorX = 1,
            this.addChild(this.label),
            this.label.x = this.width,
            this.label.y = this.height / 2
        }
        fillByData(e) {
            this.data = e,
            this.label.text = this.data.text
        }
    }
    class vGameCenterScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vGameCenterScene",
            this.exportNodeNames = ["CC_spriteBg", "CC_spriteText1", "CC_spriteText2", "CC_spriteText3", "CC_buttonBack", "CC_buttonGame01", "CC_spriteGame01", "CC_spriteEffect1", "CC_spriteText4", "CC_buttonGame02", "CC_spriteGame02", "CC_spriteEffect2", "CC_buttonShop", "CC_spriteShop", "CC_buttonGold", "CC_imageGoldIcon", "CC_labelGoldCount", "CC_spriteAdd", "CC_imageGameCoin", "CC_imageGameCoinIcon", "CC_labelGameCoinCount"]
        }
        onOpened() {
            super.onOpened(),
            this.fadeIn(),
            this.fillData(),
            this.buttonGame01.fOnClick = this.onTouchButtonGame01.bind(this),
            this.buttonGame02.fOnClick = this.onTouchButtonGame02.bind(this),
            this.buttonShop.fOnClick = this.onTouchButtonShop.bind(this),
            this.buttonGold.fOnClick = this.onTouchButtonGold.bind(this),
            this.buttonBack.fOnClick = this.onTouchButtonBack.bind(this),
            this.buttonGold.bTween = !1,
            this.registerListeners({
                MSG_ITEM_AMOUNT_CHANGED: this.onMsgItemAmountChanged.bind(this),
                MSG_GOLD_FLY_END: this.onMsgGoldFlyEnd.bind(this),
                MSG_Diamond_FLY_END: this.onMsgDiamondFlyEnd.bind(this)
            }),
            mgrSdk.staticPointEvent(9001),
            mgrI18n.trySetI18nImage(this.spriteText1, "art67.png"),
            mgrI18n.trySetI18nImage(this.spriteText2, "art64.png"),
            mgrI18n.trySetI18nImage(this.spriteText4, "art85.png"),
            mgrI18n.trySetI18nImage(this.spriteShop, "art39.png")
        }
        onClosed() {
            super.onClosed()
        }
        fadeIn() {
            Layout.widget(mgrDirector.width - 10, -1, this.buttonShop.__node, {
                x: 1,
                y: .5
            }),
            Layout.widget(10, 10, this.buttonBack.__node),
            Layout.widget(-1, 10, this.buttonGold.__node, {
                x: .5,
                y: 0
            }),
            Layout.widget(-1, 10, this.imageGameCoin, {
                x: .5,
                y: 0
            }),
            this.buttonGame01.__node.scale(0, 0),
            this.buttonGame02.__node.scale(0, 0),
            CustomTween.delayTime(this.buttonGame01.__node, 500).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            CustomTween.delayTime(this.buttonGame02.__node, 700).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.buttonGold.__node.__orgY__ = this.buttonGold.__node.y,
            this.buttonGold.__node.y -= 200,
            CustomTween.delayTime(this.buttonGold.__node, 1e3).to({
                y: this.buttonGold.__node.__orgY__
            }, 300, Laya.Ease.backOut).start(1),
            this.imageGameCoin.__orgY__ = this.imageGameCoin.y,
            this.imageGameCoin.y -= 200,
            CustomTween.delayTime(this.imageGameCoin, 1e3).to({
                y: this.imageGameCoin.__orgY__
            }, 300, Laya.Ease.backOut).start(1),
            this.buttonBack.__node.scale(0, 0),
            CustomTween.delayTime(this.buttonBack.__node, 1300).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_card_star, this.spriteEffect1),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_card_star, this.spriteEffect2),
            mgrTip.showBadgeWithNumber(this.buttonShop.__node, 1, new Laya.Point(15,15)),
            mgrTip.showBadgeWithNumber(this.buttonGame01.__node, 1, new Laya.Point(15,15)),
            mgrTip.showBadgeWithNumber(this.buttonGame02.__node, 1, new Laya.Point(15,15))
        }
        fillData() {
            Tools.loadImg(this.imageGoldIcon, mgrCfg.get_from_item_template_db(Const.ITEM_ID_GOLD).icon),
            Tools.loadImg(this.imageGameCoinIcon, mgrCfg.get_from_item_template_db(Const.ITEM_ID_GAME_COIN).icon),
            this.labelGameCoinCount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_GAME_COIN)}`,
            this.labelGoldCount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_GOLD)}`;
            let e = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.free_food);
            this.spriteAdd.visible = e
        }
        onTouchButtonGame01() {
            mgrDirector.warpSceneWidthEffect("vNewGame01Scene")
        }
        onTouchButtonGame02() {
            mgrDirector.warpSceneWidthEffect("vNewGame02Scene")
        }
        onTouchButtonShop() {
            mgrDirector.warpSceneWidthEffect("vGameCenterShopDialog")
        }
        onTouchButtonGold() {
            this.spriteAdd.visible && mgrDirector.openDialog("vLuckGoldDialog")
        }
        onTouchButtonBack() {
            mgrDirector.warpSceneWidthEffect("vHubScene")
        }
        onMsgGoldFlyEnd() {
            CustomTween.to(this.imageGoldIcon, {
                scaleX: 1.1,
                scaleY: 1.1
            }, 100).to({
                scaleX: 1,
                scaleY: 1
            }, 100).start(1)
        }
        onMsgDiamondFlyEnd() {
            CustomTween.to(this.imageGameCoinIcon, {
                scaleX: 1.1,
                scaleY: 1.1
            }, 100).to({
                scaleX: 1,
                scaleY: 1
            }, 100).start(1)
        }
        onMsgItemAmountChanged(e) {
            this.fillData()
        }
    }
    class vGameCenterShopDialog extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vGameCenterShopDialog",
            this.exportNodeNames = ["CC_spriteBg", "CC_spriteBottomContainer", "CC_boxPartList", "CC_spriteMenuContainer", "CC_spriteTagHair", "CC_spriteTagHeadDec", "CC_spriteTagFace", "CC_spriteTagCloth", "CC_spriteTagSock", "CC_spriteTagShoe", "CC_spriteTagHandDec", "CC_spriteTagWing", "CC_buttonGold", "CC_imageGoldIcon", "CC_labelGoldCount", "CC_spriteAdd", "CC_imageGameCoin", "CC_imageGameCoinIcon", "CC_labelGameCoinCount", "CC_buttonBack", "CC_spritePartDescContainer", "CC_labelPartName", "CC_boxTags", "CC_labelPartDesc", "CC_buttonConsume", "CC_imageConsumeIcon", "CC_labelConsumeCount"],
            this.cameraParam = {
                [PartType.hair]: {
                    pos: new Laya.Vector3(.15,.638,3.393),
                    rot: new Laya.Vector3(1,0,0)
                },
                [PartType.headDec]: {
                    pos: new Laya.Vector3(.15,.638,3.393),
                    rot: new Laya.Vector3(1,0,0)
                },
                [PartType.face]: {
                    pos: new Laya.Vector3(.15,.739,2.343),
                    rot: new Laya.Vector3(3,0,0)
                },
                [PartType.cloth]: {
                    pos: new Laya.Vector3(.12,.539,5.387),
                    rot: new Laya.Vector3(-3,0,0)
                },
                [PartType.sock]: {
                    pos: new Laya.Vector3(.15,.332,3.429),
                    rot: new Laya.Vector3(-6,0,0)
                },
                [PartType.shoe]: {
                    pos: new Laya.Vector3(.15,.332,3.429),
                    rot: new Laya.Vector3(-9,0,0)
                },
                [PartType.handDec]: {
                    pos: new Laya.Vector3(.15,.839,4.13),
                    rot: new Laya.Vector3(-6,0,0)
                },
                [PartType.wing]: {
                    pos: new Laya.Vector3(.25,.635,4.819),
                    rot: new Laya.Vector3(-3,0,0)
                }
            }
        }
        onOpened() {
            super.onOpened(),
            this.multilingualText1 = `${mgrI18n.getText("vGameCenterShopDialog.1")}`,
            this.buttonGold.fOnClick = this.onTouchButtonGold.bind(this),
            this.buttonBack.fOnClick = this.onTouchButtonBack.bind(this),
            this.buttonConsume.fOnClick = this.onTouchButtonBuy.bind(this),
            this.buttonGold.bTween = !1,
            Layout.widget(10, 10, this.buttonBack.__node),
            Layout.widget(-1, 10, this.buttonGold.__node, {
                x: .5,
                y: 0
            }),
            Layout.widget(-1, 10, this.imageGameCoin, {
                x: .5,
                y: 0
            }),
            Layout.widget(.5, mgrDirector.height, this.spriteBottomContainer, {
                x: .5,
                y: 1
            }),
            Tools.registerTouchHander(this.spriteTagHair, this.onTouchButtonTagHair.bind(this)),
            Tools.registerTouchHander(this.spriteTagHeadDec, this.onTouchButtonTagHeadDec.bind(this)),
            Tools.registerTouchHander(this.spriteTagFace, this.onTouchButtonTagFace.bind(this)),
            Tools.registerTouchHander(this.spriteTagCloth, this.onTouchButtonTagCloth.bind(this)),
            Tools.registerTouchHander(this.spriteTagSock, this.onTouchButtonTagSock.bind(this)),
            Tools.registerTouchHander(this.spriteTagShoe, this.onTouchButtonTagShoe.bind(this)),
            Tools.registerTouchHander(this.spriteTagWing, this.onTouchButtonTagWing.bind(this)),
            Tools.registerTouchHander(this.spriteTagHandDec, this.onTouchButtonTagHandDec.bind(this)),
            this.spriteTagHair.__partType__ = PartType.hair,
            this.spriteTagHeadDec.__partType__ = PartType.headDec,
            this.spriteTagFace.__partType__ = PartType.face,
            this.spriteTagCloth.__partType__ = PartType.cloth,
            this.spriteTagSock.__partType__ = PartType.sock,
            this.spriteTagShoe.__partType__ = PartType.shoe,
            this.spriteTagWing.__partType__ = PartType.wing,
            this.spriteTagHandDec.__partType__ = PartType.handDec,
            this.registerListeners({
                MSG_ITEM_AMOUNT_CHANGED: this.onMsgItemAmountChanged.bind(this),
                MSG_GOLD_FLY_END: this.onMsgGoldFlyEnd.bind(this),
                MSG_Diamond_FLY_END: this.onMsgDiamondFlyEnd.bind(this),
                MSG_I18N_REFRESH: ()=>{
                    this.multilingualText1 = `${mgrI18n.getText("vGameCenterShopDialog.1")}`
                }
            }),
            this.buildUi(),
            this.fillData(),
            this.selectType(PartType.hair),
            mgrSdk.staticPointEvent(9002)
        }
        onClosed() {
            super.onClosed()
        }
        fillData() {
            Tools.loadImg(this.imageGoldIcon, mgrCfg.get_from_item_template_db(Const.ITEM_ID_GOLD).icon),
            Tools.loadImg(this.imageGameCoinIcon, mgrCfg.get_from_item_template_db(Const.ITEM_ID_GAME_COIN).icon),
            this.labelGameCoinCount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_GAME_COIN)}`,
            this.labelGoldCount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_GOLD)}`;
            let e = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.free_food);
            this.spriteAdd.visible = e
        }
        buildUi() {
            this.spriteBg.zOrder = -2,
            this.roleAvatar = new RoleAvatar,
            this.add3DEffectAtBack(this.roleAvatar, 0),
            this.roleAvatar.transform.scale = new Laya.Vector3,
            this.roleAvatar.registerLoadEndCallback(()=>{
                this.roleAvatar.transform.scale = new Laya.Vector3(1,1,1),
                this.roleAvatar.playAnimation(ANIMATION_ID.idle),
                this.roleAvatar.transform.localRotationEulerY = 10
            }
            ),
            this.cameraFollow = this.cameraBack.getComponent(CameraFollow),
            this.cameraBack.fieldOfView = 30,
            this.cameraFollow.distance = new Laya.Vector3(0,1.2,5.2),
            this.cameraFollow.endRotation = new Laya.Vector3(-6),
            this.reuseListPart = new ReuseList(4,0,4),
            this.reuseListPart.size(this.boxPartList.width, this.boxPartList.height),
            this.boxPartList.addChild(this.reuseListPart),
            this.reuseListPart.setItemClass(vGameCenterShopPart),
            this.reuseListPart.setSpaceX(10),
            this.reuseListPart.setSpaceY(20)
        }
        onTouchButtonTagHair(e) {
            e.isClick && this.selectType(PartType.hair)
        }
        onTouchButtonTagHeadDec(e) {
            e.isClick && this.selectType(PartType.headDec)
        }
        onTouchButtonTagFace(e) {
            e.isClick && this.selectType(PartType.face)
        }
        onTouchButtonTagCloth(e) {
            e.isClick && this.selectType(PartType.cloth)
        }
        onTouchButtonTagSock(e) {
            e.isClick && this.selectType(PartType.sock)
        }
        onTouchButtonTagShoe(e) {
            e.isClick && this.selectType(PartType.shoe)
        }
        onTouchButtonTagWing(e) {
            e.isClick && this.selectType(PartType.wing)
        }
        onTouchButtonTagHandDec(e) {
            e.isClick && this.selectType(PartType.handDec)
        }
        refreshTag() {
            let e = [this.spriteTagHair, this.spriteTagHeadDec, this.spriteTagFace, this.spriteTagCloth, this.spriteTagSock, this.spriteTagShoe, this.spriteTagWing, this.spriteTagHandDec];
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                let i = a.__partType__
                  , s = a.getChildByName("selected");
                s && (i == this.curSelectType ? s.visible = !0 : s.visible = !1)
            }
        }
        selectType(e) {
            this.curSelectType = e;
            let t = this.cameraParam[e];
            this.cameraFollow.distance = t.pos,
            this.cameraFollow.endRotation = t.rot;
            let a = [];
            mgrCfg.forDb_from_part_db((t,i)=>{
                if (i.type == e) {
                    let e = mgrCfg.get_from_shop_template_db(i.id);
                    e && 5 == e.category && a.push({
                        partId: i.id,
                        fOnClick: this.selecPart.bind(this),
                        fOnSelected: e=>this.curSelectedPartId == e,
                        amount: mgrPlayer.getItemAmount(i.id)
                    })
                }
            }
            ),
            a = Tools.sortArrayByField(a, "amount"),
            this.reuseListPart.setDatas(a),
            this.reuseListPart.setScroll(0),
            this.selecPart(a[0].partId),
            this.refreshTag()
        }
        selecPart(e) {
            this.curSelectedPartId = e,
            this.roleAvatar.fillByPartIds([e]),
            mgrTip.showLoadingTip("vGameCenterShopDialog_loadingPart"),
            this.roleAvatar.registerAllLoadEndCallback(()=>{
                mgrTip.hideLoadingTip("vGameCenterShopDialog_loadingPart"),
                this.reuseListPart.refresh(),
                this.refreshTag();
                let e = this.curSelectType;
                e == PartType.hair ? this.roleAvatar.playAnimation(ANIMATION_ID.room.head, .1, null, null, !1) : e == PartType.headDec ? this.roleAvatar.playAnimation(ANIMATION_ID.room.head, .1, null, null, !1) : e == PartType.cloth ? this.roleAvatar.playAnimation(ANIMATION_ID.room.cloth, .1, null, null, !1) : e == PartType.handDec ? this.roleAvatar.playAnimation(ANIMATION_ID.room.cloth, .1, null, null, !1) : e == PartType.shoe ? this.roleAvatar.playAnimation(ANIMATION_ID.room.shoes, .1, null, null, !1) : e == PartType.sock ? this.roleAvatar.playAnimation(ANIMATION_ID.room.shoes, .1, null, null, !1) : e == PartType.wing ? this.roleAvatar.playAnimation(ANIMATION_ID.room.wing, .1, null, null, !1) : e == PartType.face && this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.zhayan)
            }
            );
            let t = mgrCfg.get_from_part_db(e)
              , a = mgrCfg.get_from_shop_template_db(e);
            this.labelPartName.text = t.name,
            this.labelPartDesc.text = t.desc,
            this.boxTags.removeChildren(0, this.boxTags.numChildren);
            let i = mgrPart.getRecommendTagsByPartId(e)
              , s = !0;
            if (this.tagDatas)
                for (let e = 0; e < i.length; e++) {
                    if (i[e].icon != this.tagDatas[e].icon) {
                        s = !1;
                        break
                    }
                }
            else
                s = !1;
            if (!s) {
                for (let e = 0; e < i.length; e++) {
                    const t = i[e];
                    let a = new Laya.Image;
                    a.size(30, 30),
                    a.pivot(a.width / 2, a.height / 2),
                    Tools.loadImg(a, t.icon),
                    this.boxTags.addChild(a),
                    a.y = this.boxTags.height / 2
                }
                Tools.layoutH(this.boxTags, 5, .5)
            }
            mgrPlayer.getItemAmount(e) > 0 ? (mgrI18n.trySetI18nText(this.labelConsumeCount, "vGameCenterShopDialog.1"),
            this.imageConsumeIcon.visible = !1) : (this.imageConsumeIcon.visible = !0,
            this.labelConsumeCount.text = `${a.price}`,
            Tools.loadImg(this.imageConsumeIcon, mgrCfg.get_from_item_template_db(Const.ITEM_ID_GAME_COIN).icon))
        }
        onTouchButtonBuy() {
            mgrPlayer.getItemAmount(this.curSelectedPartId) > 0 ? mgrTip.showMsgTip(`${this.multilingualText1}`) : mgrShop.requestBuy(this.curSelectedPartId) && mgrSdk.staticPointEvent(9003)
        }
        onTouchButtonGold() {
            this.spriteAdd.visible && mgrDirector.openDialog("vLuckGoldDialog")
        }
        onTouchButtonBack() {
            mgrDirector.warpSceneWidthEffect("vGameCenterScene")
        }
        onMsgGoldFlyEnd() {
            CustomTween.to(this.imageGoldIcon, {
                scaleX: 1.1,
                scaleY: 1.1
            }, 100).to({
                scaleX: 1,
                scaleY: 1
            }, 100).start(1)
        }
        onMsgDiamondFlyEnd() {
            CustomTween.to(this.imageGameCoinIcon, {
                scaleX: 1.1,
                scaleY: 1.1
            }, 100).to({
                scaleX: 1,
                scaleY: 1
            }, 100).start(1)
        }
        onMsgItemAmountChanged(e) {
            this.fillData(),
            this.selecPart(this.curSelectedPartId)
        }
    }
    class vI18nTestScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vI18nTestScene",
            this.exportNodeNames = ["CC_spriteBg", "CC_buttonZhcn", "CC_buttonZhtw", "CC_buttonEn", "CC_buttonId", "CC_buttonHi", "CC_buttonVi", "CC_labelCodeLabel", "CC_imageCodeImage", "CC_labelCodeFont", "CC_labelCodeCustom"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonZhcn.fOnClick = (()=>{
                mgrI18n.setLanguage(E_LANGUAGE.zhcn)
            }
            ),
            this.buttonZhtw.fOnClick = (()=>{
                mgrI18n.setLanguage(E_LANGUAGE.zhtw)
            }
            ),
            this.buttonEn.fOnClick = (()=>{
                mgrI18n.setLanguage(E_LANGUAGE.en)
            }
            ),
            this.buttonId.fOnClick = (()=>{
                mgrI18n.setLanguage(E_LANGUAGE.id)
            }
            ),
            this.buttonHi.fOnClick = (()=>{
                mgrI18n.setLanguage(E_LANGUAGE.hi)
            }
            ),
            this.buttonVi.fOnClick = (()=>{
                mgrI18n.setLanguage(E_LANGUAGE.vi)
            }
            ),
            mgrI18n.trySetI18nText(this.labelCodeLabel, "TestI18n.text2"),
            mgrI18n.trySetI18nImage(this.imageCodeImage, "item.diamond.png"),
            mgrI18n.trySetI18nArtistFont(this.labelCodeFont, "font"),
            this.labelCodeCustom.text = `${mgrI18n.getText("item_template_db_name.1")}x ${mgrI18n.getLanguage()}`,
            this.registerListeners({
                MSG_I18N_REFRESH: ()=>{
                    this.labelCodeCustom.text = `${mgrI18n.getText("item_template_db_name.1")}x ${mgrI18n.getLanguage()}`
                }
            })
        }
        onClosed() {
            super.onClosed()
        }
    }
    class vIllustrateScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vIllustrateScene",
            this.exportNodeNames = ["CC_spriteBg", "CC_spriteTitle", "CC_buttonClose", "CC_spriteSuitName", "CC_labelSuitName", "CC_buttonDetail", "CC_buttonLeft", "CC_spriteArrowLeft", "CC_buttonRight", "CC_spriteArrowRight", "CC_labelPage", "CC_progressBar", "CC_spriteLight", "CC_labelProgress", "CC_buttonReward", "CC_spriteRewardIcon", "CC_labelRewardAmount", "CC_spriteGeted", "CC_buttonShare", "CC_labelGo", "CC_spriteShareIcon", "CC_labelShareAmount", "CC_spriteEffect1"],
            this.curPage = 0
        }
        onOpened() {
            super.onOpened(),
            this.multilingualText1 = `${mgrI18n.getText("vIllustrateScene.1")}`,
            Layout.widget(0, 0, this.buttonClose.__node),
            this.buttonClose.fOnClick = this.onTouchButtonBack.bind(this),
            this.buttonLeft.fOnClick = this.onTouchButtonLeft.bind(this),
            this.buttonRight.fOnClick = this.onTouchButtonRight.bind(this),
            this.buttonDetail.fOnClick = this.onTouchButtonDetail.bind(this),
            this.buttonReward.fOnClick = this.onTouchButtonReward.bind(this),
            this.suitDatas = mgrPart.getSuitDatas(),
            this.buttonShare.fOnClick = this.onTouchButtonshare.bind(this),
            this.buttonReward.bTween = !1,
            this.buttonClose.__node.scale(0, 0),
            CustomTween.delayTime(this.buttonClose.__node, 300).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.init(),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_card_star, this.spriteEffect1, 0, .9),
            this.registerListeners({
                MSG_SHARE_SUCCESSFUL: this.refreshShare.bind(this),
                MSG_I18N_REFRESH: ()=>{
                    this.multilingualText1 = `${mgrI18n.getText("vIllustrateScene.1")}`
                }
            }),
            mgrSdk.staticPointEvent(7007),
            mgrI18n.trySetI18nImage(this.spriteTitle, "art80.png"),
            mgrI18n.trySetI18nImage(this.spriteGeted, "art03.png")
        }
        onClosed() {
            super.onClosed()
        }
        getPreLoadModelIds() {
            return [MODEL_ID.hzfd, MODEL_ID.ka_normal]
        }
        getPreLoadAnimationIds() {
            return [ANIMATION_ID.book_open]
        }
        init() {
            if (this.buildUi(),
            this.context.suitId) {
                let e = 0
                  , t = this.suitDatas;
                for (let a = 0; a < t.length; a++) {
                    if (t[a].id == this.context.suitId)
                        break;
                    e++
                }
                this.curPage = e
            }
            this.spriteTitle.scale(0, 0),
            this.hideCureSuit(),
            this.progressBar.__node.scale(0, 0),
            mgrMaterial.playAnimation(this.cardBookAnimator, ANIMATION_ID.book_open, 0, null, ()=>{
                CustomTween.to(this.spriteTitle, {
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).start(1),
                this.refreshCurSuit(),
                CustomTween.to(this.progressBar.__node, {
                    scaleX: 1,
                    scaleY: 1
                }, 300, Laya.Ease.backOut).start(1)
            }
            ),
            mgrAd.triggerAdEvent("in_illustrate_book"),
            mgrTip.showNativeBanner("ba_illustrateBook", this)
        }
        buildUi() {
            this.spriteBg.zOrder = -2,
            this.cardBook = mgrLoader.Pool.getModel(MODEL_ID.hzfd),
            mgrMaterial.setCartonShader(this.cardBook, MODEL_ID.hzfd),
            this.cardBookAnimator = this.cardBook.getComponent(Laya.Animator),
            this.add3DEffectAtBack(this.cardBook, 0),
            this.card = mgrLoader.Pool.getModel(MODEL_ID.ka_normal),
            mgrMaterial.setCartonShader(this.card, MODEL_ID.ka_normal),
            this.card.transform.position = new Laya.Vector3(.01,.18,1.2),
            this.card.transform.localRotationEulerZ = 4,
            this.card.transform.scale = new Laya.Vector3(.85,.85,.85),
            this.add3DEffectAtBack(this.card, 0),
            this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,.08,4.9),
            this.cameraBack.fieldOfView = 20
        }
        refreshCurSuit() {
            let e = this.suitDatas
              , t = e[this.curPage];
            this.labelPage.text = `${this.curPage + 1}/${e.length}`;
            let[a,i] = mgrPart.getSuitProgress(t.id);
            this.progressBar.progress = a / i,
            this.labelProgress.text = `${this.multilingualText1} ${a}/${i}`,
            a / i == 1 && (this.labelProgress.text = ""),
            this.labelSuitName.text = t.name,
            Tools.loadImg(this.spriteRewardIcon, mgrCfg.get_from_item_template_db(t.collectionRewards[0][0]).icon),
            this.labelRewardAmount.text = `${t.collectionRewards[0][1]}`,
            CustomTween.actionFloat(this.buttonLeft.__node, 0, 1, 300, e=>{
                this.buttonLeft.__node.alpha = e,
                this.buttonRight.__node.alpha = e
            }
            ).start(1),
            this.buttonLeft.__node.visible = !0,
            this.buttonRight.__node.visible = !0;
            let s = mgrPart.isSuitRewardGeted(t.id);
            a >= i && !s ? (CustomTween.to(this.spriteLight, {
                scaleX: 1,
                scaleY: 1
            }, 300).callback(()=>{
                CustomTween.rotateForever(this.spriteLight)
            }
            ).start(1),
            mgrTip.showBadgeWithNumber(this.buttonReward.__node, 1, new Laya.Point(15,15))) : (this.spriteLight.scale(0, 0),
            mgrTip.showBadgeWithNumber(this.buttonReward.__node, 0)),
            this.spriteGeted.visible = s,
            this.buttonDetail.__node.visible = !0,
            this.spriteSuitName.visible = !0,
            this.labelPage.visible = !0;
            let o = mgrChannel.canShare();
            s && o ? (this.buttonShare.__node.visible = !0,
            this.buttonReward.__node.visible = !1) : (this.buttonShare.__node.visible = !1,
            this.buttonReward.__node.visible = !0);
            let n = mgrChannel.getShareRewardAmount();
            n > 0 ? (this.labelShareAmount.text = `+${n}`,
            this.labelShareAmount.visible = !0,
            this.spriteShareIcon.visible = !0) : (this.labelShareAmount.visible = !1,
            this.spriteShareIcon.visible = !1),
            mgrLoader.Load2dRes(t.card, Laya.Loader.IMAGE, this, e=>{
                this.card.getChildAt(0).meshRenderer.sharedMaterials[0].albedoTexture = e,
                this.card.active = !0
            }
            );
            let r = !1
              , l = !1;
            for (let e = 0; e < this.suitDatas.length; e++) {
                const t = this.suitDatas[e];
                -1 != t.__order || mgrPart.isSuitRewardGeted(t.id) || (e - this.curPage > 0 ? (mgrTip.showBadgeWithNumber(this.spriteArrowRight, 1, new Laya.Point(0,this.spriteArrowRight.height / 2)),
                l = !0) : e - this.curPage < 0 && (mgrTip.showBadgeWithNumber(this.spriteArrowLeft, 1, new Laya.Point(this.spriteArrowLeft.width,this.spriteArrowLeft.height / 2)),
                r = !0))
            }
            r || mgrTip.showBadgeWithNumber(this.spriteArrowLeft, 0),
            l || mgrTip.showBadgeWithNumber(this.spriteArrowRight, 0)
        }
        hideCureSuit() {
            this.buttonDetail.__node.visible = !1,
            this.spriteLight.scale(0, 0),
            this.spriteSuitName.visible = !1,
            this.labelPage.visible = !1,
            CustomTween.actionFloat(this.buttonLeft.__node, 1, 0, 300, e=>{
                this.buttonLeft.__node.alpha = e,
                this.buttonRight.__node.alpha = e
            }
            ).callback(()=>{
                this.buttonLeft.__node.visible = !1,
                this.buttonRight.__node.visible = !1
            }
            ).start(1),
            this.card.active = !1
        }
        refreshShare() {
            this.buttonShare.__node.visible = mgrChannel.canShare();
            let e = mgrChannel.getShareRewardAmount();
            e > 0 ? (this.labelShareAmount.text = `+${e}`,
            this.labelShareAmount.visible = !0,
            this.spriteShareIcon.visible = !0) : (this.labelShareAmount.visible = !1,
            this.spriteShareIcon.visible = !1)
        }
        onTouchButtonBack() {
            let e = this.context.backSceneName || "vHubScene";
            mgrDirector.open2DScene(e, this.context.backSceneContext)
        }
        onTouchButtonReward() {
            let e = this.suitDatas[this.curPage].id;
            if (mgrPart.obtainSuitReward(e)) {
                mgrChannel.canShare() ? CustomTween.to(this.buttonReward.__node, {
                    scaleX: 0,
                    scaleY: 0
                }, 300).callback(()=>{
                    CustomTween.to(this.buttonShare.__node, {
                        scaleX: 1,
                        scaleY: 1
                    }, 300).callback(()=>{
                        this.refreshCurSuit()
                    }
                    ).start(1)
                }
                ).start(1) : this.refreshCurSuit()
            }
        }
        onTouchButtonLeft() {
            this.curPage--,
            this.curPage < 0 && (this.curPage = this.suitDatas.length - 1),
            this.hideCureSuit(),
            Timer.callLater(.5, ()=>{
                this.refreshCurSuit()
            }
            , this),
            mgrMaterial.playAnimation(this.cardBookAnimator, ANIMATION_ID.book_page_right, 0, null, ()=>{}
            )
        }
        onTouchButtonRight() {
            this.curPage++,
            this.curPage > this.suitDatas.length - 1 && (this.curPage = 0),
            Timer.callLater(.4, ()=>{
                this.hideCureSuit()
            }
            , this),
            Timer.callLater(.8, ()=>{
                this.refreshCurSuit()
            }
            , this),
            mgrMaterial.playAnimation(this.cardBookAnimator, ANIMATION_ID.book_page_left, 0, null, ()=>{}
            )
        }
        onTouchButtonDetail() {
            let e = this.suitDatas[this.curPage].id;
            mgrDirector.openDialog("vSuitPreviewDialog", {
                suitId: e,
                page: this.curPage
            }, !0)
        }
        onTouchButtonshare() {
            mgrSdk.openShare()
        }
    }
    const TIP_CION$2 = {
        learn: ["res/ui/common/tipIcon5.png"],
        motion: ["res/ui/common/tipIcon3.png", "res/ui/common/tipIcon4.png"],
        rest: ["res/ui/common/tipIcon2.png"],
        eat: ["res/ui/common/tipIcon1.png"]
    }
      , AD_EVENT_ID_POTION$4 = "free_motion_potion";
    class vMotionMainScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vMotionMainScene",
            this.exportNodeNames = ["CC_buttonBack", "CC_imageRopeArena", "CC_imageBallArena", "CC_imagePaopao1", "CC_imagePaopao2", "CC_imagePaopao3", "CC_buttonTipIcon", "CC_buttonLevel", "CC_progressBarLevel", "CC_labelLevel", "CC_boxButtons", "CC_buttonPotion", "CC_spritePotionWatchAd", "CC_spritePotionAmount", "CC_labelCount", "CC_buttonGameCenter", "CC_boxGameCenterReadPoint"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonBack.fOnClick = (()=>{
                mgrDirector.warpSceneWidthEffect("vHubScene")
            }
            ),
            this.progressBarLevel.barName = this.progressBarLevel.owner.name,
            this.progressBarLevel.style = ULPROGRESSBAR_STYLE.ver,
            this.buttonLevel.fOnClick = this.onTouchbuttonLevel.bind(this),
            this.buttonTipIcon.fOnClick = this.onTouchButtonTipIcon.bind(this),
            this.buttonPotion.fOnClick = this.onTouchButtonPotion.bind(this),
            this.buttonGameCenter.fOnClick = this.onTouchButtonGameCenter.bind(this),
            this.init(),
            this.fillData(),
            this.registerListeners({
                MSG_ROLE_EXP_CHANGED: this.fillData.bind(this),
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            }),
            this.tryShowExpGetEffect()
        }
        onClosed() {
            super.onClosed()
        }
        getPreLoadModelIds() {
            return [MODEL_ID.map_hudong, MODEL_ID.shadow, MODEL_ID.ball, MODEL_ID.rope]
        }
        getPreLoadAnimationIds() {
            return [ANIMATION_ID.idle]
        }
        init() {
            Layout.widget(10, 10, this.buttonBack.__node),
            Layout.widget(10, -1, this.buttonLevel.__node),
            Layout.widget(mgrDirector.width - 10, -1, this.boxButtons, {
                x: 1,
                y: 1
            }),
            Layout.widget(mgrDirector.width - 5, -1, this.buttonGameCenter.__node, {
                x: 1,
                y: 1
            }),
            mgrTip.showBadgeWithNumber(this.boxGameCenterReadPoint, 1, new Laya.Point(15,15)),
            this.imagePaopao1.scale(0, 0),
            this.imagePaopao2.scale(0, 0),
            this.imagePaopao3.scale(0, 0),
            this.buildScene(()=>{
                Tools.syncNodeWith3DPos(this.imageBallArena, this.ball.transform.position, this.cameraBack);
                let e = mgrInteraction.checkPlayBallCondition();
                if (2 == e.code)
                    this.roleAvatar.playAnimation(ANIMATION_ID.hungry01),
                    this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.ele01);
                else if (1 == e.code)
                    this.roleAvatar.playAnimation(ANIMATION_ID.tired01),
                    this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.haqian);
                else {
                    let e = ()=>{
                        Timer.callLater(Tools.random(3, 5), ()=>{
                            this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.qiwang2),
                            this.roleAvatar.playAnimation(ANIMATION_ID.motion.tip, .1, null, ()=>{
                                let t = mgrInteraction.checkPlayBallCondition();
                                2 == t.code ? (this.roleAvatar.playAnimation(ANIMATION_ID.hungry01),
                                this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.ele01)) : 1 == t.code ? (this.roleAvatar.playAnimation(ANIMATION_ID.tired01),
                                this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.haqian)) : (this.roleAvatar.playAnimation(ANIMATION_ID.motion.idle),
                                this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.qiwang1),
                                e())
                            }
                            )
                        }
                        , this)
                    }
                    ;
                    this.roleAvatar.playAnimation(ANIMATION_ID.motion.idle),
                    this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.qiwang1),
                    e()
                }
                Tools.active3dObjectRayCheck(this.scene3DBack, this.cameraBack, this.onMouseDown.bind(this)),
                Timer.callLoop(.016, ()=>{
                    this.update3DScene()
                }
                , this),
                mgrInteraction.restState == E_REST_STATE.rest ? (this.roleAvatar.active = !1,
                this.add3DEffectAtFront("e_sj", {
                    x: Laya.stage.width,
                    y: Laya.stage.height / 3 * 2
                }, 0, 5, e=>{
                    e.active = !0,
                    e.transform.rotationEuler = new Laya.Vector3(0,90,0)
                }
                )) : (this.roleAvatar.active = !0,
                this.ball.active = !0,
                this.rope.active = !0)
            }
            )
        }
        update3DScene() {
            this.fengche || (this.fengche = this._3dScene.getChildByName("fengche"),
            this.sky = this._3dScene.getChildByName("skybox")),
            this.fengche.transform.rotate(new Laya.Vector3(0,1,0), !0, !1),
            this.sky.transform.rotate(new Laya.Vector3(0,0,-.05), !0, !1)
        }
        buildScene(e) {
            mgrInteraction.bMotioned && (this.nearByRank = new vSmallNearbyRank({
                rankId: eNearbyRankId.ropeSkiping
            }),
            this.addChild(this.nearByRank),
            Layout.widget(0, .35, this.nearByRank, {
                x: 0,
                y: .5
            })),
            this.topBar = new vTopBar({}),
            this.addChild(this.topBar),
            Layout.widget(.5, 45, this.topBar, {
                x: .5,
                y: 0
            });
            let t = new vInteractionMainNode({
                sceneName: "vMotionMainScene"
            });
            if (this.addChild(t),
            this.bottomBar = t,
            1 == mgrSdk.getCopNumberValueByKey("ui_layout_down_motion") ? Layout.widget(.5, mgrDirector.height, t, {
                x: .5,
                y: 1
            }) : Layout.widget(.5, mgrDirector.height - 200, t, {
                x: .5,
                y: 1
            }),
            mgrGuide.isAllGuideFinished() && 1 == mgrSdk.getCopNumberValueByKey("ui_layout_down_motion")) {
                if (Tools.random(1, 100) <= mgrSdk.getCopNumberValueByKey("ui_pop_dialog_ratio_motion") && mgrPlayer.isPopBannerTipDialogCding())
                    if (mgrInteraction.restState == E_REST_STATE.rest)
                        mgrDirector.openDialog("vWeakupTipDialog");
                    else if (mgrInteraction.restState == E_REST_STATE.none) {
                        let e = mgrCfg.get_from_role_level_db(mgrInteraction.level)
                          , t = mgrInteraction.energy / e.restProgressValue
                          , a = mgrInteraction.eatFillValue / e.eatProgressValue
                          , i = mgrInteraction.motionProgress / e.motionProgressValue;
                        mgrInteraction.learnProgress,
                        e.learnProgressValue;
                        t < .2 ? mgrDirector.openDialog("vTiredTipDialog") : a < .2 ? mgrDirector.openDialog("vHungryTipDialog") : i > .95 ? mgrDirector.openDialog("vMotionFullTipDialog") : i > .7 ? mgrDirector.openDialog("vResttingTipDialog") : mgrDirector.openDialog("vFoodDiscountDialog")
                    }
            }
            this.add3DEffectAtBack(MODEL_ID.effect.e_rainbow, 0),
            this.roleAvatar = new RoleAvatar,
            this.roleAvatar.fillByPartIds([12099, 15099]),
            this.roleAvatar.transform.scale = new Laya.Vector3,
            this.add3DEffectAtBack(this.roleAvatar, 0),
            this.roleAvatar.registerLoadEndCallback(()=>{
                this.roleAvatar.playAnimation(ANIMATION_ID.idle),
                this.roleAvatar.transform.position = new Laya.Vector3(0,0,6.5),
                this.roleAvatar.transform.scale = new Laya.Vector3(1,1,1),
                this.roleAvatar.hideWings(),
                e()
            }
            ),
            this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,.88,9.33),
            this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-10,0,0),
            this.cameraBack.transform.position = new Laya.Vector3(0,.88,9.33),
            this.cameraBack.transform.rotationEuler = new Laya.Vector3(-10,0,0),
            this.cameraBack.fieldOfView = 60,
            this._3dScene = mgrLoader.Pool.getModel(MODEL_ID.map_hudong),
            this.add3DEffectAtBack(this._3dScene, 0),
            this.ball = mgrLoader.Pool.getModel(MODEL_ID.ball);
            let a = this.ball.getComponent(Laya.Animator);
            if (Timer.callLater(1, ()=>{
                mgrMaterial.playAnimation(a, ANIMATION_ID.ball_idle, 0)
            }
            , this),
            this.add3DEffectAtBack(this.ball, 0),
            this.ball.transform.position = new Laya.Vector3(.4,.2,7),
            this.ball.transform.rotationEuler = new Laya.Vector3,
            !this.ball.getChildByName("shadow")) {
                let e = mgrLoader.Pool.getModel(MODEL_ID.shadow);
                e.transform.scale = new Laya.Vector3(.5,.5,.5),
                e.name = "shadow",
                this.ball.addChild(e),
                e.addComponent(ShadowFollow).__target = this.ball
            }
            if (this.rope = mgrLoader.Pool.getModel(MODEL_ID.rope),
            this.rope.name = "rope",
            this.add3DEffectAtBack(this.rope, 0),
            this.rope.transform.scale = new Laya.Vector3(1,1,1),
            this.rope.transform.position = new Laya.Vector3(-.4,.2,7),
            !this.rope.getChildByName("shadow")) {
                let e = mgrLoader.Pool.getModel(MODEL_ID.shadow);
                e.transform.scale = new Laya.Vector3(.5,.5,.5),
                e.name = "shadow",
                this.rope.addChild(e),
                e.addComponent(ShadowFollow).__target = this.rope
            }
            this.bottomBar.context.fOnLoadingFinished = (()=>{
                console.log("bar加载完毕!"),
                this.tryGuide()
            }
            )
        }
        onMouseDown(e) {
            if (!(DialogBase.ShowingDialog.length > 0 && -1 == DialogBase.ShowingDialog.indexOf("vGuideMaskDialog")) && e.succeeded) {
                if (mgrInteraction.restState == E_REST_STATE.rest)
                    return void mgrDirector.openDialog("vWeakupTipDialog");
                let t = e.collider.owner.name;
                if ("ball" == t) {
                    let e = mgrInteraction.checkPlayBallCondition();
                    2 == e.code ? (this.roleAvatar.playAnimation(ANIMATION_ID.hungry01),
                    this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.ele01),
                    this.playPaopaoTip(TIP_CION$2.eat[0]),
                    mgrDirector.openDialog("vHungryTipDialog")) : 1 == e.code ? (this.roleAvatar.playAnimation(ANIMATION_ID.tired01),
                    this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.haqian),
                    this.playPaopaoTip(TIP_CION$2.rest[0]),
                    mgrDirector.openDialog("vTiredTipDialog")) : 3 == e.code ? (this.roleAvatar.playAnimation(ANIMATION_ID.refuse),
                    this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.weiqu01),
                    mgrDirector.openDialog("vMotionFullTipDialog")) : 0 == e.code && (mgrInteraction.startRopeSkipping(),
                    this.cameraBack.getComponent(CameraFollow).__target = this.ball,
                    this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,0,1),
                    Timer.callLater(.3, ()=>{
                        mgrDirector.warpSceneWidthEffectWhite("vMotionPlayBallScene")
                    }
                    , this),
                    this.sendMsg("MSG_GUIDE_EVENT", {
                        id: "vMotionMainScene.clickBallArena"
                    }))
                } else if ("rope" == t) {
                    if (mgrGuide.isGuiding())
                        return;
                    let e = mgrInteraction.checkRopeSkippingCondition();
                    2 == e.code ? (this.roleAvatar.playAnimation(ANIMATION_ID.hungry01),
                    this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.ele01),
                    this.playPaopaoTip(TIP_CION$2.eat[0]),
                    mgrDirector.openDialog("vHungryTipDialog")) : 1 == e.code ? (this.roleAvatar.playAnimation(ANIMATION_ID.tired01),
                    this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.haqian),
                    this.playPaopaoTip(TIP_CION$2.rest[0]),
                    mgrDirector.openDialog("vTiredTipDialog")) : 3 == e.code ? (this.roleAvatar.playAnimation(ANIMATION_ID.refuse),
                    this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.weiqu01),
                    mgrDirector.openDialog("vMotionFullTipDialog")) : 0 == e.code && (mgrInteraction.startRopeSkipping(),
                    Timer.callLater(.3, ()=>{
                        mgrDirector.warpSceneWidthEffectWhite("vMotionRopeSkippingScene")
                    }
                    , this),
                    this.cameraBack.getComponent(CameraFollow).__target = this.rope,
                    this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,0,1),
                    this.sendMsg("MSG_GUIDE_EVENT", {
                        id: "vMotionMainScene.clickRopeArena"
                    }))
                }
            }
        }
        fillData() {
            this.labelLevel.text = `${mgrInteraction.level}`,
            this.progressBarLevel.progress = mgrInteraction.levelProgress;
            let e = mgrPlayer.getItemAmount(Const.ITEM_ID_INTERACTION_MOTION);
            if (e > 0)
                this.spritePotionWatchAd.visible = !1,
                this.spritePotionAmount.visible = !0,
                this.labelCount.text = `${e}`,
                this.buttonPotion.__node.visible = !0;
            else {
                this.spritePotionAmount.visible = !1;
                let e = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID_POTION$4);
                this.spritePotionWatchAd.visible = e,
                this.buttonPotion.__node.visible = e
            }
        }
        tryShowExpGetEffect() {
            let e = this.context.resultInfo;
            if (e && e.items && !(e.items.length < 0))
                for (let t = 0; t < e.items.length; t++) {
                    const a = e.items[t];
                    if (a.itemId == Const.ITEM_ID_INTERACTION_EXP) {
                        let e = mgrPlayer.getItemAmount(Const.ITEM_ID_INTERACTION_EXP) - a.amount
                          , t = mgrInteraction.calcLevel(e)
                          , i = mgrInteraction.calcLevelProgress(e);
                        this.labelLevel.text = `${t}`,
                        this.progressBarLevel.progress = i;
                        let s = mgrInteraction.level
                          , o = mgrInteraction.levelProgress;
                        return void CustomTween.actionFloat(this.labelLevel, i, o, 500, e=>{
                            this.progressBarLevel.progress = e
                        }
                        ).callback(()=>{
                            this.labelLevel.text = `${s}`
                        }
                        ).start(1)
                    }
                }
        }
        tryGuide() {
            if (console.log("检查是否可以引导!!"),
            mgrInteraction.bMotioned)
                this.bottomBar.showEatingButton(),
                this.bottomBar.showPlayButton(),
                this.bottomBar.showSleepButton(),
                this.bottomBar.showStudyButton();
            else {
                mgrGuide.registerGuideNode("vMotionMainScene.ropeArena", this.imageRopeArena),
                mgrGuide.registerGuideNode("vMotionMainScene.ballArena", this.imageBallArena);
                let e = this.context.gameName;
                e ? "playBall" == e && Timer.callLoop(.016, e=>{
                    DialogBase.ShowingDialog.length <= 0 && (e.stop(),
                    mgrInteraction.bMotioned = !0,
                    this.bottomBar.showPlayButton(),
                    this.bottomBar.fadeInEatingButton(),
                    this.bottomBar.unactivePlayButton(),
                    mgrGuide.startGuide(301))
                }
                , this) : (this.bottomBar.fadeInPlayButton(),
                mgrGuide.startGuide(201))
            }
        }
        playPaopaoTip(e) {
            Tools.loadImg(this.buttonTipIcon.__node, e),
            this.imagePaopao1.scale(0, 0),
            this.imagePaopao2.scale(0, 0),
            this.imagePaopao3.scale(0, 0),
            CustomTween.to(this.imagePaopao1, {
                scaleX: 1,
                scaleY: 1
            }, 500).callback(()=>{
                CustomTween.to(this.imagePaopao2, {
                    scaleX: 1,
                    scaleY: 1
                }, 500).callback(()=>{
                    CustomTween.to(this.imagePaopao3, {
                        scaleX: 1,
                        scaleY: 1
                    }, 500, Laya.Ease.backOut).delayTime(3e3).callback(()=>{
                        CustomTween.to(this.imagePaopao3, {
                            scaleX: 0,
                            scaleY: 0
                        }, 250).start(1),
                        CustomTween.delayTime(this.imagePaopao2, 250).to({
                            scaleX: 0,
                            scaleY: 0
                        }, 250).start(1),
                        CustomTween.delayTime(this.imagePaopao1, 500).to({
                            scaleX: 0,
                            scaleY: 0
                        }, 250).start(1)
                    }
                    ).start(1)
                }
                ).start(1)
            }
            ).start(1)
        }
        onTouchbuttonLevel() {
            mgrGuide.isGuiding() || mgrDirector.openDialog("vSettingDialog")
        }
        onTouchButtonTipIcon() {
            let e = mgrInteraction.checkPlayBallCondition();
            1 == e.code ? mgrDirector.warpSceneWidthEffect("vRestScene") : 2 == e.code && mgrDirector.warpSceneWidthEffect("vEatingScene")
        }
        onTouchButtonPotion() {
            let e = mgrCfg.get_from_role_level_db(mgrInteraction.level);
            if (mgrInteraction.motionProgress / e.motionProgressValue < .1)
                return this.roleAvatar.playAnimation(ANIMATION_ID.refuse),
                void this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.kaixin01);
            if (mgrPlayer.getItemAmount(Const.ITEM_ID_INTERACTION_MOTION) > 0) {
                mgrPlayer.addItemAmount(Const.ITEM_ID_INTERACTION_MOTION, -1, "使用运动药水"),
                mgrTip.addGotItemTip(Const.ITEM_ID_INTERACTION_MOTION, -1);
                let e = mgrCfg.get_from_food_db(Const.ITEM_ID_INTERACTION_MOTION)
                  , t = mgrCfg.get_from_role_level_db(mgrInteraction.level);
                mgrInteraction.motionProgress -= Math.floor(t.motionProgressValue * e.subMotionProgress),
                this.roleAvatar.playAnimation(ANIMATION_ID.STAGE.WIN1),
                this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.kaixin02),
                this.fillData()
            } else
                mgrAd.triggerAdEvent(AD_EVENT_ID_POTION$4, null, !0)
        }
        onTouchButtonGameCenter() {
            mgrGuide.isAllGuideFinished() && mgrDirector.warpSceneWidthEffect("vGameCenterScene")
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID_POTION$4 && (mgrPlayer.addItemAmount(Const.ITEM_ID_INTERACTION_MOTION, 1, "看广告获得"),
            mgrInteraction.eatFood(Const.ITEM_ID_INTERACTION_MOTION),
            this.roleAvatar.playAnimation(ANIMATION_ID.STAGE.WIN1),
            this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.kaixin02),
            this.fillData(),
            this.sendMsg("MSG_INTERACTION_MOTION_JUMP"))
        }
    }
    var E_PLAY_BALL_STATE, E_ROPE_SKIPPING_STATE, E_GAME01_ST, E_GAME02_ST, REST_ROLE_STATE;
    !function(e) {
        e[e.READY = 1] = "READY",
        e[e.BATTING = 2] = "BATTING",
        e[e.CATCH = 3] = "CATCH",
        e[e.SETTLEMENT = 4] = "SETTLEMENT"
    }(E_PLAY_BALL_STATE || (E_PLAY_BALL_STATE = {}));
    class vMotionPlayBallScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vMotionPlayBallScene",
            this.exportNodeNames = ["CC_buttonBack", "CC_progressBar", "CC_buttonBox1", "CC_labelBox1", "CC_buttonBox2", "CC_labelBox2", "CC_buttonBox3", "CC_labelBox3", "CC_imageTitle", "CC_spriteScoreIcon", "CC_labelScore", "CC_imageBallArena", "CC_labelEvaluate"],
            this.score = -1,
            this.perfactCount = 0,
            this.ballInitY = 1.04,
            this.ballInitZ = 8.2,
            this.avatarInitZ = 1.7,
            this.g = 2,
            this.randomDir = new Laya.Vector3,
            this.roleMoveSpeed = 2,
            this.timeArena1 = .5,
            this.timeArena2 = .75,
            this.timeArena3 = 7 / 8,
            this.bReborn = !1
        }
        onOpened() {
            super.onOpened(),
            this.multilingualText1 = `${mgrI18n.getText("vMotionPlayBallScene.1")}`,
            this.multilingualText2 = `${mgrI18n.getText("vMotionPlayBallScene.2")}`,
            this.multilingualText3 = `${mgrI18n.getText("vMotionPlayBallScene.3")}`,
            this.multilingualText4 = `${mgrI18n.getText("vMotionPlayBallScene.4")}`,
            this.buttonBack.fOnClick = this.onTouchButtonBack.bind(this),
            mgrLoader.loadFont("ropeSkippingEvaluate", this.labelEvaluate),
            this.labelEvaluate.scale(.75, .75),
            this.init(),
            mgrGuide.isGuiding() && (this.buttonBack.__node.visible = !1),
            this.registerListeners({
                MSG_PAUSE_PLAY_BALL: this.pauseGame.bind(this),
                MSG_RESUME_PLAY_BALL: this.resueGame.bind(this),
                MSG_I18N_REFRESH: ()=>{
                    this.multilingualText1 = `${mgrI18n.getText("vMotionPlayBallScene.1")}`,
                    this.multilingualText2 = `${mgrI18n.getText("vMotionPlayBallScene.2")}`,
                    this.multilingualText3 = `${mgrI18n.getText("vMotionPlayBallScene.3")}`,
                    this.multilingualText4 = `${mgrI18n.getText("vMotionPlayBallScene.4")}`
                }
            }),
            this.context.videoStartTime = Tools.time(),
            mgrChannel.canUseVideoRecord() && mgrSdk.recordGameVideo("start"),
            mgrSdk.staticPointEvent(5002)
        }
        onClosed() {
            super.onClosed()
        }
        getPreLoadModelIds() {
            return []
        }
        getPreLoadAnimationIds() {
            return []
        }
        init() {
            this.progressBar.style = ULPROGRESSBAR_STYLE.ver,
            this.progressBar.progress = 0,
            this.labelScore.text = "0",
            Layout.widget(10, 10, this.buttonBack.__node),
            Layout.widget(5, -1, this.progressBar.__node);
            let e = mgrCfg.get_from_interaction_config_db(1);
            this.labelBox1.text = e.playBallChestScores[0],
            this.labelBox2.text = e.playBallChestScores[1],
            this.labelBox3.text = e.playBallChestScores[2],
            this.buildScene(()=>{
                this.timeScale = .9,
                this.stManager = new FSMObject,
                this.stManager.registerState(E_PLAY_BALL_STATE.READY, this.enterReady.bind(this), this.exeReady.bind(this), this.outReady.bind(this)),
                this.stManager.registerState(E_PLAY_BALL_STATE.BATTING, this.enterBatting.bind(this), this.exeBatting.bind(this), this.outBatting.bind(this)),
                this.stManager.registerState(E_PLAY_BALL_STATE.CATCH, this.enterCatch.bind(this), this.exeCatch.bind(this), this.outCatch.bind(this)),
                this.stManager.registerState(E_PLAY_BALL_STATE.SETTLEMENT, this.enterSettlement.bind(this), this.exeSettlement.bind(this), this.outSettlement.bind(this)),
                Timer.callLoop(.016, ()=>{
                    this.stManager.update(),
                    this.update3DScene(),
                    Tools.syncNodeWith3DPos(this.imageBallArena, this.ball.transform.position, this.cameraBack)
                }
                , this),
                this.stManager && this.stManager.setNextState(E_PLAY_BALL_STATE.READY),
                mgrTip.showLoadingTip("vMotionPlayBallScene_loaded"),
                mgrLoader.batchLoadResources(["e_ball_ring_golden", "e_ball_ring_blue", "e_ball_ring_white", "e_ball_star_white", "e_ball_star_golden", "e_ball_star_blue", MODEL_ID.effect.eff_ui_perfect_glow, MODEL_ID.effect.eff_ui_good_glow], [ANIMATION_ID.motion.move_ball_right, ANIMATION_ID.motion.move_ball_left, ANIMATION_ID.motion.catch_ball_top, ANIMATION_ID.motion.catch_ball_bottom], ()=>{
                    this.destroyed || (mgrTip.hideLoadingTip("vMotionPlayBallScene_loaded"),
                    this.blueRing = mgrLoader.Pool.getModel("e_ball_ring_blue"),
                    this.whiteRing = mgrLoader.Pool.getModel("e_ball_ring_white"),
                    this.goldenRing = mgrLoader.Pool.getModel("e_ball_ring_golden"),
                    this.link2Node(this.ball, this.blueRing, this.ball.name),
                    this.link2Node(this.ball, this.whiteRing, this.ball.name),
                    this.link2Node(this.ball, this.goldenRing, this.ball.name),
                    this.blueRing.transform.scale = new Laya.Vector3(.9,.9,.9),
                    this.whiteRing.transform.scale = new Laya.Vector3(.9,.9,.9),
                    this.goldenRing.transform.scale = new Laya.Vector3(.9,.9,.9),
                    this.blueRing.active = !1,
                    this.whiteRing.active = !1,
                    Tools.active3dObjectRayCheck(this.scene3DBack, this.cameraBack, this.onMouseDown.bind(this)),
                    mgrGuide.registerGuideNode("vMotionPlayBallScene.ballArena", this.imageBallArena))
                }
                )
            }
            )
        }
        update3DScene() {
            this.fengche || (this.fengche = this._3dScene.getChildByName("fengche"),
            this.sky = this._3dScene.getChildByName("skybox")),
            this.fengche.transform.rotate(new Laya.Vector3(0,1,0), !0, !1),
            this.sky.transform.rotate(new Laya.Vector3(0,0,-.05), !0, !1)
        }
        buildScene(e) {
            this.add3DEffectAtBack(MODEL_ID.effect.e_rainbow, 0),
            this.roleAvatar = new RoleAvatar,
            this.roleAvatar.fillByPartIds([12099, 15099]),
            this.roleAvatar.transform.scale = new Laya.Vector3,
            this.add3DEffectAtBack(this.roleAvatar, 0),
            this.cameraBack.fieldOfView = 60,
            this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,1.4,9.28),
            this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-7,0,0),
            this.cameraBack.transform.position = new Laya.Vector3(0,1.4,9),
            this.cameraBack.transform.rotationEuler = new Laya.Vector3(-7,0,0);
            let t = ["ball", "map_hudong"]
              , a = new TaskManager
              , i = [];
            for (let e = 0; e < t.length; e++) {
                const a = t[e];
                i.push(e=>{
                    mgrLoader.loadModeWithModeId(a, ()=>{
                        e()
                    }
                    , this, 1)
                }
                )
            }
            i.push(e=>{
                this.roleAvatar.registerLoadEndCallback(()=>{
                    this.roleAvatar.playAnimation(ANIMATION_ID.idle),
                    e()
                }
                )
            }
            ),
            a.push(i),
            a.start(()=>{
                this.ball = mgrLoader.Pool.getModel("ball");
                let t = this.ball.getComponent(Laya.Animator);
                mgrMaterial.playAnimation(t, ANIMATION_ID.ball_stop, 0),
                mgrMaterial.setCartonShader(this.ball, "ball"),
                this.add3DEffectAtBack(this.ball, 0),
                this.ball.transform.scale = new Laya.Vector3,
                this._3dScene = mgrLoader.Pool.getModel("map_hudong"),
                this.add3DEffectAtBack(this._3dScene, 0),
                e()
            }
            , this)
        }
        onMouseDown(e, t) {
            if (e.succeeded && "ball" == e.collider.owner.name)
                if (this.stManager.getCurState() == E_PLAY_BALL_STATE.READY)
                    this.stManager.setNextState(E_PLAY_BALL_STATE.BATTING);
                else if (this.stManager.getCurState() == E_PLAY_BALL_STATE.CATCH && this.deltaTime > this.t / 2) {
                    let e = this.globalToLocal(new Laya.Point(t.x,t.y));
                    this.labelEvaluate.pos(e.x + 50, e.y - 70),
                    1 == this.goldenRing.active ? (this.score += 8,
                    this.add3DEffectAtFront("e_ball_star_golden", {
                        x: t.x,
                        y: t.y
                    }, 1, 3),
                    this.playScoreAdd(8, new Laya.Point(t.x,t.y)),
                    this.perfactCount++,
                    this.labelEvaluate.text = `px ${this.perfactCount}`,
                    this.labelEvaluate.alpha = 1,
                    this.labelEvaluate.scale(0, 0),
                    this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_perfect_glow, this.labelEvaluate, 1.5, -1),
                    CustomTween.to(this.labelEvaluate, {
                        scaleX: 1,
                        scaleY: 1
                    }, 150, Laya.Ease.backOut).delayTime(300).to({
                        alpha: 0
                    }, 300).start(1),
                    mgrSound.play(118)) : 1 == this.blueRing.active ? (this.perfactCount = 0,
                    this.score += 5,
                    this.add3DEffectAtFront("e_ball_star_blue", {
                        x: t.x,
                        y: t.y
                    }, 1, 3),
                    this.playScoreAdd(5, new Laya.Point(t.x,t.y)),
                    this.labelEvaluate.text = "g",
                    this.labelEvaluate.alpha = 1,
                    this.labelEvaluate.scale(0, 0),
                    this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_good_glow, this.labelEvaluate, 1.5, -1),
                    CustomTween.to(this.labelEvaluate, {
                        scaleX: 1,
                        scaleY: 1
                    }, 150, Laya.Ease.backOut).delayTime(300).to({
                        alpha: 0
                    }, 300).start(1),
                    mgrSound.play(117)) : (this.whiteRing.active = !0) && (this.perfactCount = 0,
                    this.score += 3,
                    this.add3DEffectAtFront("e_ball_star_white", {
                        x: t.x,
                        y: t.y
                    }, 1, 3),
                    this.playScoreAdd(3, new Laya.Point(t.x,t.y)),
                    mgrSound.play(117)),
                    this.tryStartThrowBomb(),
                    this.labelScore.text = `${this.score}`,
                    this.updateProgress(),
                    this.stManager.setNextState(E_PLAY_BALL_STATE.BATTING)
                }
        }
        updateProgress() {
            let e = mgrCfg.get_from_interaction_config_db(1)
              , [t,a,i] = e.playBallChestScores
              , s = .5 * Math.max(0, (this.score - a) / (i - a)) + .25 * Math.max(0, (Math.min(a, this.score) - t) / (a - t)) + .25 * Math.max(0, Math.min(t, this.score) / t);
            CustomTween.actionFloat(this.progressBar.__node, this.progressBar.progress, s, 500, e=>{
                this.progressBar.progress = e
            }
            , Laya.Ease.sineIn).start(1)
        }
        enterReady() {
            this.roleAvatar.transform.position = new Laya.Vector3(0,0,this.avatarInitZ),
            this.roleAvatar.transform.scale = new Laya.Vector3(1,1,1),
            this.roleAvatar.hideWings(),
            this.cameraBack.fieldOfView = 60,
            this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,1.4,9.28),
            this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-7,0,0),
            this.cameraBack.transform.position = new Laya.Vector3(0,1.4,9),
            this.cameraBack.transform.rotationEuler = new Laya.Vector3(-7,0,0),
            this.ball.transform.scale = new Laya.Vector3(1,1,1),
            this.ball.transform.position = new Laya.Vector3(0,this.ballInitY,this.ballInitZ),
            this.roleAvatar.playAnimation(ANIMATION_ID.motion.idle_ball),
            this.goldenRing && (this.goldenRing.active = !0)
        }
        exeReady() {}
        outReady() {}
        enterBatting() {
            -1 == this.score && (this.score = 0),
            this.timeScale += .05,
            this.timeScale = Math.min(this.timeScale, 2),
            this.blueRing.active = !1,
            this.whiteRing.active = !1,
            this.goldenRing.active = !1;
            let e = new Laya.Vector3;
            e.x = 3 * Math.random() - 1.5;
            let t = Tools.random(1, 2);
            e.y = 1 == t ? .5 : 1.75,
            e.z = 1 == t ? this.avatarInitZ + .25 : this.avatarInitZ,
            this.targetPos = e,
            this.t = 2;
            let a = this.t;
            this.ballSpeedX = (e.x - this.ball.transform.position.x) / a,
            this.ballSpeedY = (e.y - this.ball.transform.position.y + .5 * this.g * a * a) / a,
            this.ballSpeedZ = (e.z - this.ball.transform.position.z) / a,
            this.startPos = this.ball.transform.position.clone(),
            this.deltaTime = 0,
            this.bRoleArrived = !1,
            this.bRolePlayHit = !1,
            this.targetRolePos = new Laya.Vector3(e.x,0,this.avatarInitZ),
            this.startRolePos = this.roleAvatar.transform.position.clone(),
            this.randomDir.x = (Math.random() - .5) / 10,
            this.randomDir.y = (Math.random() - .5) / 10,
            this.randomDir.z = (Math.random() - .5) / 10,
            this.targetRolePos.x - this.startRolePos.x > 0 ? (this.roleAvatar.playAnimation(ANIMATION_ID.motion.move_ball_right, .05),
            mgrSound.play(109)) : (this.roleAvatar.playAnimation(ANIMATION_ID.motion.move_ball_left, .05),
            mgrSound.play(109)),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vMotionPlayBallScene.clickBallArena"
            })
        }
        exeBatting() {
            this.ball.transform.rotate(this.randomDir),
            this.deltaTime += Tools.delta();
            let e = this.deltaTime
              , t = this.ballSpeedX * e + this.startPos.x
              , a = this.ballSpeedY * e - .5 * this.g * e * e + this.startPos.y
              , i = this.ballSpeedZ * e + this.startPos.z;
            if (this.ball.transform.position = new Laya.Vector3(t,a,i),
            e > this.t && this.stManager && this.stManager.setNextState(E_PLAY_BALL_STATE.CATCH),
            this.bRolePlayHit)
                return;
            if (this.t - e < .65 * this.timeScale && (this.bRolePlayHit = !0,
            this.targetPos.y > 1 ? (mgrSound.play(245),
            this.roleAvatar.playAnimation(ANIMATION_ID.motion.catch_ball_top, .1, null, ()=>{
                this.roleAvatar.playAnimation(ANIMATION_ID.motion.idle_ball),
                mgrSound.stopSound(109)
            }
            )) : (mgrSound.play(245),
            this.roleAvatar.playAnimation(ANIMATION_ID.motion.catch_ball_bottom, .1, null, ()=>{
                this.roleAvatar.playAnimation(ANIMATION_ID.motion.idle_ball),
                mgrSound.stopSound(109)
            }
            ))),
            this.bRoleArrived)
                return;
            let s = this.roleMoveSpeed * e
              , o = this.targetRolePos.x - this.startRolePos.x;
            if (s *= o / Math.abs(o),
            Math.abs(s) > Math.abs(o))
                this.roleAvatar.transform.position = this.targetRolePos,
                this.bRoleArrived = !0;
            else {
                let e = new Laya.Vector3(this.startRolePos.x + s,this.startRolePos.y,this.startRolePos.z);
                this.roleAvatar.transform.position = e
            }
            this.bRoleArrived && (this.roleAvatar.playAnimation(ANIMATION_ID.motion.idle_ball),
            mgrSound.stopSound(109))
        }
        outBatting() {}
        enterCatch() {
            let e = new Laya.Vector3;
            e.x = 0,
            e.y = this.ballInitY,
            e.z = this.ballInitZ,
            this.bTipArena1 = !1,
            this.bTipArena2 = !1,
            this.bTipArena3 = !1,
            this.t = 2;
            let t = this.t;
            this.ballSpeedX = (e.x - this.ball.transform.position.x) / t,
            this.ballSpeedY = (e.y - this.ball.transform.position.y + .5 * this.g * t * t) / t,
            this.ballSpeedZ = (e.z - this.ball.transform.position.z) / t,
            this.startPos = this.ball.transform.position.clone(),
            this.deltaTime = 0,
            this.randomDir.x = (Math.random() - .5) / 10,
            this.randomDir.y = (Math.random() - .5) / 10,
            this.randomDir.z = (Math.random() - .5) / 10
        }
        exeCatch() {
            this.ball.transform.rotate(this.randomDir),
            this.deltaTime += Tools.delta();
            let e = this.deltaTime
              , t = this.ballSpeedX * e + this.startPos.x
              , a = this.ballSpeedY * e - .5 * this.g * e * e + this.startPos.y
              , i = this.ballSpeedZ * e + this.startPos.z;
            this.ball.transform.position = new Laya.Vector3(t,a,i),
            this.deltaTime > this.t * this.timeArena3 ? (this.goldenRing.active = !0,
            this.blueRing.active = !1,
            this.bTipArena3 || (this.bTipArena3 = !0,
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vMotionPlayBallScene.willClickBallArena3"
            }))) : this.deltaTime > this.t * this.timeArena2 ? (this.blueRing.active = !0,
            this.whiteRing.active = !1,
            this.bTipArena2 || (this.bTipArena2 = !0,
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vMotionPlayBallScene.willClickBallArena2"
            }))) : this.deltaTime > this.t * this.timeArena1 && (this.whiteRing.active = !0,
            this.bTipArena1 || (this.bTipArena1 = !0,
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vMotionPlayBallScene.willClickBallArena1"
            }))),
            e > this.t + 1 && this.stManager && this.stManager.setNextState(E_PLAY_BALL_STATE.SETTLEMENT)
        }
        outCatch() {}
        enterSettlement() {
            this.bombTimer && this.bombTimer.stop(),
            this.bombTimer = null,
            this.bomb && (this.bomb.visible = !1);
            let e = ()=>{
                this.stManager && this.stManager.setNextState(E_PLAY_BALL_STATE.READY),
                this.bReborn = !0,
                this.resueGame()
            }
              , t = ()=>{
                this.resueGame(),
                console.log("==== 进入结算状态 ======"),
                this.cameraBack.getComponent(CameraFollow).__target = this.roleAvatar,
                this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,.8,3.5),
                this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-4,0,0),
                mgrSound.stopSound(109),
                Math.random() > .5 ? mgrSound.play(230) : mgrSound.play(231),
                this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.kaixin02),
                this.roleAvatar.playAnimation(ANIMATION_ID.STAGE.WIN2, .05, null, ()=>{
                    mgrChannel.canUseVideoRecord() && mgrSdk.recordGameVideo("stop");
                    let e = Tools.time() - this.context.videoStartTime
                      , t = e > 15 && e < 120 && mgrChannel.canUseVideoRecord()
                      , a = mgrInteraction.settlementPlayBall(this.score);
                    this.score >= 200 ? mgrSdk.staticPointEvent(5008) : this.score >= 50 ? mgrSdk.staticPointEvent(5007) : this.score >= 20 && mgrSdk.staticPointEvent(5006),
                    a.fOnClose = (()=>{
                        mgrDirector.open2DScene("vMotionMainScene", {
                            gameName: "playBall",
                            resultInfo: a
                        })
                    }
                    ),
                    a.rankId = eNearbyRankId.playBall,
                    a.bCanShareVideo = t,
                    mgrDirector.openDialog("vSmallGameSettlementDialog", a)
                }
                )
            }
            ;
            this.pauseGame();
            let a = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.playBallTryAgain);
            if (!this.bReborn && a) {
                let a = mgrCfg.get_from_interaction_config_db(1);
                mgrGuide.isGuiding() ? t() : mgrDirector.openDialog("vTryAgainDialog", {
                    buyCallback: e.bind(this),
                    onAdCallback: e.bind(this),
                    cancleCallback: t.bind(this),
                    adEventId: AD_EVENT_ID.VIDEO.playBallTryAgain,
                    consume: {
                        itemId: a.motion2RebornConsume[0],
                        amount: a.motion2RebornConsume[1]
                    }
                })
            } else
                t()
        }
        exeSettlement() {}
        outSettlement() {}
        onTouchButtonBack() {
            mgrTip.alertPrompt2(`${this.multilingualText1}`, `${this.multilingualText2}`, `${this.multilingualText3}`, `${this.multilingualText4}`, ()=>{
                mgrDirector.open2DScene("vMotionMainScene")
            }
            )
        }
        pauseGame() {
            Tools.timeScale = 0,
            this.roleAvatar.pause()
        }
        resueGame() {
            Tools.timeScale = 1,
            this.roleAvatar.resume()
        }
        get timeScale() {
            return Tools.timeScale
        }
        set timeScale(e) {
            Tools.timeScale = e
        }
        playScoreAdd(e, t) {
            let a = new Laya.Label(`+${e}`);
            mgrLoader.loadFont("ropeSkippingScore", a),
            a.fontSize = 30,
            a.anchorX = .5,
            a.anchorY = .5,
            3 == e ? a.color = "#ffffff" : 5 == e ? a.color = "#4fbaeb" : 8 == e && (a.color = "#fff45c");
            let i = mgrDirector.getTipRoot();
            i.addChild(a);
            let s = i.globalToLocal(t);
            a.pos(s.x, s.y),
            CustomTween.to(a, {
                y: s.y - 50
            }, 1e3).to({
                y: s.y - 70,
                alpha: 0
            }, 500).callback(()=>{
                a.destroy()
            }
            ).start(1)
        }
        tryStartThrowBomb() {
            this.bomb || (this.bomb = new Laya.Image("res/ui/interaction/smallGame/bomb.png"),
            this.addChild(this.bomb),
            this.bomb.visible = !1,
            this.bomb.anchorX = .5,
            this.bomb.anchorY = .5,
            this.bomb.scale(.85, .85),
            this.bomb.zOrder = 0,
            Tools.registerTouchHander(this.bomb, this.onTouchBombBegin.bind(this)));
            let e = mgrCfg.get_from_interaction_config_db(1);
            this.score >= e.playBallChestScores[1] && !this.bombTimer && this.startThrowBomb()
        }
        startThrowBomb() {
            this.bombG = 200,
            this.bombVH = 200,
            this.bombVV = Tools.random(-600, -400),
            this.bomb.pos(0, mgrDirector.height + 100),
            this.bombRatate = 0 == Tools.random(0, 1) ? 360 : -360,
            this.bomb.visible = !0,
            this.bombTimer = Timer.callLoop(.016, ()=>{
                this.bomb.x += this.bombVH * Tools.delta(),
                this.bomb.y += this.bombVV * Tools.delta(),
                this.bombVV += this.bombG * Tools.delta(),
                this.bomb.rotation += this.bombRatate * Tools.delta(),
                this.bomb.y > mgrDirector.height + 100 && (this.bombTimer.stop(),
                this.startThrowBomb())
            }
            , this)
        }
        onTouchBombBegin(e) {
            e.isBegin && (this.add3DEffectAtFront("e_zhadan_boom", {
                x: e.pos.x,
                y: e.pos.y
            }, 2, 3),
            this.bomb.visible = !1,
            Timer.callLater(.5, ()=>{
                this.stManager && this.stManager.setNextState(E_PLAY_BALL_STATE.SETTLEMENT)
            }
            , this))
        }
    }
    !function(e) {
        e[e.IDLE = 1] = "IDLE",
        e[e.WAITTING = 2] = "WAITTING",
        e[e.JUMPING = 3] = "JUMPING",
        e[e.SETTLEMENT = 4] = "SETTLEMENT"
    }(E_ROPE_SKIPPING_STATE || (E_ROPE_SKIPPING_STATE = {}));
    class vMotionRopeSkippingScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vMotionRopeSkippingScene",
            this.exportNodeNames = ["CC_buttonBack", "CC_progressBar", "CC_buttonBox1", "CC_labelBox1", "CC_buttonBox2", "CC_labelBox2", "CC_buttonBox3", "CC_labelBox3", "CC_imageTitle", "CC_spriteScoreIcon", "CC_labelScore", "CC_buttonStart", "CC_buttonJump", "CC_labelTip", "CC_imageOperation", "CC_imageTipArena", "CC_imagePoint", "CC_labelEvaluate"],
            this.perfactCount = 0,
            this.fieldPass = .35,
            this.offsetPass = 0,
            this.fieldPerfect = .1,
            this.score = 0,
            this.bTip = !1,
            this.bThisCycleClick = !1,
            this.bReborn = !1
        }
        onOpened() {
            super.onOpened(),
            this.multilingualText2 = `${mgrI18n.getText("vMotionRopeSkippingScene.2")}`,
            this.multilingualText3 = `${mgrI18n.getText("vMotionRopeSkippingScene.3")}`,
            this.multilingualText4 = `${mgrI18n.getText("vMotionRopeSkippingScene.4")}`,
            this.multilingualText5 = `${mgrI18n.getText("vMotionRopeSkippingScene.5")}`,
            this.buttonStart.fOnClick = this.onTouchButtonStart.bind(this),
            this.buttonStart.__node.scale(0, 0),
            this.buttonJump.onTouchBegin = this.onTouchButtonJump.bind(this),
            this.buttonBack.fOnClick = this.onTouchButtonBack.bind(this),
            this.init(),
            this.registerListeners({
                MSG_PAUSE_ROPE_SKIPPING: this.pauseGame.bind(this),
                MSG_RESUME_ROPE_SKIPPING: this.resueGame.bind(this),
                MSG_I18N_REFRESH: ()=>{
                    this.multilingualText2 = `${mgrI18n.getText("vMotionRopeSkippingScene.2")}`,
                    this.multilingualText3 = `${mgrI18n.getText("vMotionRopeSkippingScene.3")}`,
                    this.multilingualText4 = `${mgrI18n.getText("vMotionRopeSkippingScene.4")}`,
                    this.multilingualText5 = `${mgrI18n.getText("vMotionRopeSkippingScene.5")}`
                }
            }),
            CustomTween.to(this.imageTipArena, {
                scaleX: .1
            }, 500, Laya.Ease.sineIn).to({
                scaleX: 1
            }, 500, Laya.Ease.sineOut).start(0),
            this.context.videoStartTime = Tools.time(),
            mgrChannel.canUseVideoRecord() && mgrSdk.recordGameVideo("start"),
            mgrSdk.staticPointEvent(5001)
        }
        onClosed() {
            super.onClosed()
        }
        getPreLoadModelIds() {
            return ["e_ball_star_golden", "e_ball_star_blue", MODEL_ID.effect.eff_ui_perfect_glow, MODEL_ID.effect.eff_ui_good_glow, MODEL_ID.effect.e_tiaosheng_smoke]
        }
        init() {
            this.progressBar.style = ULPROGRESSBAR_STYLE.ver,
            this.progressBar.progress = 0,
            this.labelScore.text = "0",
            this.buttonJump.__node.visible = !1,
            this.buttonStart.__node.visible = !1,
            this.imageOperation.alpha = 0,
            mgrLoader.loadFont("ropeSkippingEvaluate", this.labelEvaluate),
            this.labelEvaluate.scale(.75, .75),
            Layout.widget(10, 10, this.buttonBack.__node),
            Layout.widget(5, -1, this.progressBar.__node),
            mgrGuide.isGuiding() && (this.buttonBack.__node.visible = !1),
            this.imageTipArena.width = this.imageOperation.width * this.fieldPass,
            this.imageTipArena.x = (1 - this.fieldPass - this.offsetPass) * this.imageOperation.width + this.imageTipArena.width / 2;
            let e = mgrCfg.get_from_interaction_config_db(1);
            this.labelBox1.text = e.ropeSkippingChestScores[0],
            this.labelBox2.text = e.ropeSkippingChestScores[1],
            this.labelBox3.text = e.ropeSkippingChestScores[2],
            this.buildScene(()=>{
                this.stManager = new FSMObject,
                this.stManager.registerState(E_ROPE_SKIPPING_STATE.IDLE, this.enterIdle.bind(this), this.exeIdle.bind(this), this.outIdle.bind(this)),
                this.stManager.registerState(E_ROPE_SKIPPING_STATE.WAITTING, this.enterWatting.bind(this), this.exeWatting.bind(this), this.outWatting.bind(this)),
                this.stManager.registerState(E_ROPE_SKIPPING_STATE.JUMPING, this.enterJumping.bind(this), this.exeJumping.bind(this), this.outJumping.bind(this)),
                this.stManager.registerState(E_ROPE_SKIPPING_STATE.SETTLEMENT, this.enterSettlement.bind(this), this.exeSettlement.bind(this), this.outSettlement.bind(this)),
                this.stManager.setNextState(E_ROPE_SKIPPING_STATE.IDLE),
                Timer.callLoop(.016, ()=>{
                    this.stManager.update(),
                    this.update3DScene()
                }
                , this),
                this.stManager.update(),
                this.onTouchButtonStart()
            }
            ),
            mgrGuide.registerGuideNode("vMotionRopeSkippingScene.startButton", this.buttonStart.__node),
            mgrGuide.registerGuideNode("vMotionRopeSkippingScene.jumpButton", this.buttonJump.__node)
        }
        update3DScene() {
            this.fengche || (this.fengche = this._3dScene.getChildByName("fengche"),
            this.sky = this._3dScene.getChildByName("skybox")),
            this.fengche.transform.rotate(new Laya.Vector3(0,1,0), !0, !1),
            this.sky.transform.rotate(new Laya.Vector3(0,0,-.05), !0, !1)
        }
        buildScene(e) {
            this.add3DEffectAtBack(MODEL_ID.effect.e_rainbow, 0),
            this.roleAvatar = new RoleAvatar,
            this.roleAvatar.fillByPartIds([12099, 15099]),
            this.roleAvatar.transform.scale = new Laya.Vector3,
            this.add3DEffectAtBack(this.roleAvatar, 0);
            let t = ["item_tiaosheng_02", "map_hudong"]
              , a = new TaskManager
              , i = [];
            for (let e = 0; e < t.length; e++) {
                const a = t[e];
                i.push(e=>{
                    mgrLoader.loadModeWithModeId(a, ()=>{
                        e()
                    }
                    , this, 1)
                }
                )
            }
            i.push(e=>{
                this.roleAvatar.registerLoadEndCallback(()=>{
                    e()
                }
                )
            }
            ),
            a.push(i),
            a.start(()=>{
                this.rope = mgrLoader.Pool.getModel("item_tiaosheng_02"),
                this.rope && (this.rope.active = !0,
                mgrMaterial.setCartonShader(this.rope, "item_tiaosheng_02"),
                this.rope.name = "rope",
                this.add3DEffectAtBack(this.rope, 0),
                this.rope.transform.scale = new Laya.Vector3),
                this._3dScene = mgrLoader.Pool.getModel("map_hudong"),
                this._3dScene && this.add3DEffectAtBack(this._3dScene, 0),
                e()
            }
            , this)
        }
        onTouchButtonJump() {
            if (this.stManager.getCurState() == E_ROPE_SKIPPING_STATE.WAITTING) {
                this.stManager.setNextState(E_ROPE_SKIPPING_STATE.JUMPING),
                mgrSound.play(116),
                Timer.callLater(.2, ()=>{
                    Math.random() > .5 ? mgrSound.play(234) : mgrSound.play(235)
                }
                , this),
                this.bThisCycleClick = !0;
                let e = this.ropeAnimator.getCurrentAnimatorPlayState().normalizedTime % 1
                  , t = 1 - this.fieldPass - this.offsetPass + this.fieldPass / 2 - this.fieldPerfect / 2
                  , a = 1 - this.fieldPass - this.offsetPass + this.fieldPass / 2 + this.fieldPerfect / 2
                  , i = 1 - this.fieldPass - this.offsetPass
                  , s = 1 - this.offsetPass;
                e > t && e < a ? (this.perfactCount++,
                this.labelEvaluate.text = `px ${this.perfactCount}`,
                this.score += 8,
                this.labelScore.text = `${this.score}`,
                this.playScoreAdd(8, this.imagePoint.localToGlobal(new Laya.Point(this.imagePoint.width / 2,this.imagePoint.height / 2))),
                this.updateProgress(),
                this.timeScale += .01,
                this.timeScale = Math.min(this.timeScale, .8),
                this.labelEvaluate.alpha = 1,
                this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_perfect_glow, this.labelEvaluate, 1.5, -1),
                CustomTween.delayTime(this.labelEvaluate, 300).to({
                    alpha: 0
                }, 300).start(1)) : e > i && e < s ? (this.perfactCount = 0,
                this.labelEvaluate.text = "g",
                this.score += 5,
                this.labelScore.text = `${this.score}`,
                this.playScoreAdd(5, this.imagePoint.localToGlobal(new Laya.Point(this.imagePoint.width / 2,this.imagePoint.height / 2))),
                this.updateProgress(),
                this.timeScale += .03,
                this.timeScale = Math.min(this.timeScale, 1.2),
                this.labelEvaluate.alpha = 1,
                this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_good_glow, this.labelEvaluate, 1.5, -1),
                CustomTween.delayTime(this.labelEvaluate, 300).to({
                    alpha: 0
                }, 300).start(1)) : (this.labelEvaluate.text = "m",
                this.labelEvaluate.alpha = 1,
                CustomTween.delayTime(this.labelEvaluate, 300).to({
                    alpha: 0
                }, 300).start(1));
                let o = new Laya.Image;
                o.skin = "res/ui/interaction/smallGame/art22.png",
                o.anchorX = .5,
                o.anchorY = .5,
                this.imageOperation.addChild(o),
                o.pos(this.imagePoint.x, this.imagePoint.y),
                CustomTween.to(o, {
                    alpha: 0
                }, 500).callback(()=>{
                    o.destroy()
                }
                ).start(1),
                this.sendMsg("MSG_GUIDE_EVENT", {
                    id: "vMotionRopeSkippingScene.clickJumpButton"
                })
            }
        }
        updateProgress() {
            let e = mgrCfg.get_from_interaction_config_db(1)
              , [t,a,i] = e.ropeSkippingChestScores
              , s = .5 * Math.max(0, (this.score - a) / (i - a)) + .25 * Math.max(0, (Math.min(a, this.score) - t) / (a - t)) + .25 * Math.max(0, Math.min(t, this.score) / t);
            CustomTween.actionFloat(this.progressBar.__node, this.progressBar.progress, s, 500, e=>{
                this.progressBar.progress = e
            }
            , Laya.Ease.sineIn).start(1)
        }
        onTouchButtonStart() {
            if (this.stManager.getCurState() == E_ROPE_SKIPPING_STATE.IDLE) {
                this.buttonStart.__node.visible = !1,
                this.sendMsg("MSG_GUIDE_EVENT", {
                    id: "vMotionRopeSkippingScene.ClickStartButton"
                }),
                CustomTween.to(this.imageOperation, {
                    alpha: 1
                }, 500).start(1),
                mgrSound.play(119);
                let e = 4;
                this.labelTip.text = `${e - 1}`,
                Timer.callLoop(1, t=>{
                    0 != --e ? this.labelTip.text = 1 == e ? `${mgrI18n.getText("vMotionRopeSkippingScene.1")}` : `${e - 1}` : (t.stop(),
                    this.labelTip.text = "",
                    this.startGame())
                }
                , this)
            }
        }
        startGame() {
            this.stManager && this.stManager.setNextState(E_ROPE_SKIPPING_STATE.WAITTING),
            this.stManager.update();
            let e = this.rope.getComponent(Laya.Animator);
            this.ropeAnimator = e,
            this.timeScale = .4,
            mgrMaterial.playAnimation(e, "item_tiaosheng_02-tiaosheng02", 0, ()=>{
                let t = 0;
                Timer.callLoop(.016, a=>{
                    let i = e.getCurrentAnimatorPlayState()
                      , s = i.normalizedTime % 1
                      , o = i.normalizedTime - s;
                    console.log(`state.normalizedTime: ${i.normalizedTime} %1= ${s}`),
                    this.imagePoint.pos(this.imageOperation.width * s, this.imagePoint.y),
                    s > 1 - this.fieldPass - this.offsetPass + this.fieldPass / 2 ? this.bTip || (this.bTip = !0,
                    this.sendMsg("MSG_GUIDE_EVENT", {
                        id: "vMotionRopeSkippingScene.willClickJumpButton"
                    })) : this.bTip = !1,
                    this.stManager.getCurState() != E_ROPE_SKIPPING_STATE.SETTLEMENT && this.stManager.getCurState() != E_ROPE_SKIPPING_STATE.IDLE || a.stop(),
                    t < o && (this.bThisCycleClick && this.stManager.getCurState() != E_ROPE_SKIPPING_STATE.JUMPING && (this.stManager.setNextState(E_ROPE_SKIPPING_STATE.SETTLEMENT),
                    this.stManager.update(),
                    a.stop()),
                    this.bThisCycleClick || (this.stManager.setNextState(E_ROPE_SKIPPING_STATE.SETTLEMENT),
                    this.stManager.update(),
                    a.stop()),
                    t = o,
                    this.bThisCycleClick = !1)
                }
                , this)
            }
            )
        }
        enterIdle() {
            this.buttonJump.__node.visible = !1,
            this.buttonStart.__node.visible = !0,
            this.imageOperation.alpha = 0,
            this.roleAvatar.transform.position = new Laya.Vector3(0,0,4.59),
            this.roleAvatar.transform.scale = new Laya.Vector3(1,1,1),
            this.roleAvatar.hideWings(),
            this.cameraBack.fieldOfView = 60,
            this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,1,8.21),
            this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-5,0,0),
            this.cameraBack.transform.position = new Laya.Vector3(0,1,8),
            this.cameraBack.transform.rotationEuler = new Laya.Vector3(-5,0,0),
            this.rope.transform.position = new Laya.Vector3(0,.05,4.59),
            this.rope.transform.scale = new Laya.Vector3(2,2,2);
            let e = this.rope.getComponent(Laya.Animator);
            mgrMaterial.playAnimation(e, "item_tiaosheng_02-tiaosheng01", .1),
            this.roleAvatar.playAnimation(ANIMATION_ID.motion.idle_rope)
        }
        exeIdle() {}
        outIdle() {}
        enterWatting() {
            this.roleAvatar.playAnimation(ANIMATION_ID.motion.idle_rope),
            this.buttonJump.__node.visible = !0
        }
        exeWatting() {}
        outWatting() {}
        enterJumping() {
            this.buttonJump.__node.visible = !1;
            this.roleAvatar.playAnimation(["tiaosheng_play-ts_play01", "tiaosheng_play-ts_play02"][Tools.random(0, 1)], .1, null, ()=>{
                this.stManager && this.stManager.setNextState(E_ROPE_SKIPPING_STATE.WAITTING)
            }
            )
        }
        exeJumping() {}
        outJumping() {}
        enterSettlement() {
            let e = ()=>{
                this.stManager && this.stManager.setNextState(E_ROPE_SKIPPING_STATE.IDLE),
                this.stManager.update(),
                this.bReborn = !0,
                this.rope.active = !0,
                this.resueGame(),
                this.onTouchButtonStart()
            }
              , t = ()=>{
                this.resueGame(),
                this.rope.active = !1,
                Math.random() > .5 ? mgrSound.play(230) : mgrSound.play(231),
                this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.kaixin01),
                this.roleAvatar.playAnimation(ANIMATION_ID.STAGE.WIN1, .05, null, ()=>{
                    console.log("==== 进入结算状态 ======");
                    let e = Tools.time() - this.context.videoStartTime
                      , t = e > 15 && e < 120 && mgrChannel.canUseVideoRecord();
                    mgrChannel.canUseVideoRecord() && mgrSdk.recordGameVideo("stop");
                    let a = mgrInteraction.settlementRopeSkipping(this.score);
                    this.score >= 200 ? mgrSdk.staticPointEvent(5005) : this.score >= 50 ? mgrSdk.staticPointEvent(5004) : this.score >= 20 && mgrSdk.staticPointEvent(5003),
                    a.fOnClose = (()=>{
                        mgrDirector.open2DScene("vMotionMainScene", {
                            gameName: "ropeSkipping",
                            resultInfo: a
                        })
                    }
                    ),
                    a.rankId = eNearbyRankId.ropeSkiping,
                    a.bCanShareVideo = t,
                    mgrDirector.openDialog("vSmallGameSettlementDialog", a)
                }
                )
            }
            ;
            this.imagePoint.pos(1e4, this.imagePoint.y),
            this.labelEvaluate.text = "",
            this.pauseGame();
            let a = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.ropeSkippingTryAgain);
            !this.bReborn && a ? (this.rope.active = !1,
            this.roleAvatar.timeScale = 1,
            mgrSound.play(229),
            this.roleAvatar.playFaceAnimation(ANIMATION_ID.face.weiqu01),
            this.roleAvatar.playAnimation(ANIMATION_ID.STAGE.FAILED1, .1, null, ()=>{
                let a = mgrCfg.get_from_interaction_config_db(1);
                mgrDirector.openDialog("vTryAgainDialog", {
                    buyCallback: e.bind(this),
                    onAdCallback: e.bind(this),
                    cancleCallback: t.bind(this),
                    adEventId: AD_EVENT_ID.VIDEO.ropeSkippingTryAgain,
                    consume: {
                        itemId: a.motion1RebornConsume[0],
                        amount: a.motion1RebornConsume[1]
                    }
                })
            }
            )) : t()
        }
        exeSettlement() {}
        outSettlement() {}
        onTouchButtonBack() {
            mgrTip.alertPrompt2(`${this.multilingualText2}`, `${this.multilingualText3}`, `${this.multilingualText4}`, `${this.multilingualText5}`, ()=>{
                mgrDirector.open2DScene("vMotionMainScene")
            }
            )
        }
        pauseGame() {
            Tools.timeScale = 0,
            this.roleAvatar.timeScale = 0,
            this.ropeAnimator.speed = 0
        }
        resueGame() {
            this.timeScale = .4
        }
        set timeScale(e) {
            Tools.timeScale = e,
            this.roleAvatar.timeScale = 2 * e,
            this.ropeAnimator.speed = e
        }
        get timeScale() {
            return Tools.timeScale
        }
        playScoreAdd(e, t) {
            let a = new Laya.Label(`+${e}`);
            a.fontSize = 30,
            a.anchorX = .5,
            a.anchorY = .5,
            mgrLoader.loadFont("ropeSkippingScore", a),
            3 == e ? a.color = "#ffffff" : 5 == e ? a.color = "#4fbaeb" : 8 == e && (a.color = "#fff45c");
            let i = mgrDirector.getTipRoot();
            i.addChild(a);
            let s = i.globalToLocal(t);
            a.pos(s.x, s.y),
            CustomTween.to(a, {
                y: s.y - 30,
                scaleX: 1,
                scaleY: 1
            }, 300).to({
                y: s.y - 40,
                alpha: 0
            }, 500).callback(()=>{
                a.destroy()
            }
            ).start(1)
        }
    }
    class ColliderBase extends Script2dEvent {
        constructor() {
            super(),
            this.elasticity = 1,
            this.group = 0,
            this.bStatic = !0
        }
        distance(e) {
            return 0
        }
        calcNormalDir(e) {
            return new Laya.Vector2
        }
    }
    class RigibodyBase extends Script2dEvent {
    }
    class RigibodyCircular extends RigibodyBase {
        constructor() {
            super(),
            this.zeroSpeedCallbacks = [],
            this.mass = 1,
            this.speed = new Laya.Vector2(0,0),
            this.g = 980,
            this.momentumLossFactorVertical = 0,
            this.momentumMinLossCountVertical = 0,
            this.momentumLossFactorHorizontal = 0,
            this.momentumMinLossCountHorizontal = 0,
            this.rotateSpeed = 0,
            this.group = 0
        }
        get pos() {
            return this.node ? new Laya.Point(this.node.x,this.node.y) : new Laya.Point
        }
        set pos(e) {
            this.node && (this.node.x = e.x,
            this.node.y = e.y)
        }
        onStart() {
            this.node = this.owner,
            this.radius = this.node.width / 2
        }
        tryUpdate(e, t, a) {
            if (e.length > 0 || t.length > 0) {
                if (e.length > 0) {
                    let t = new Laya.Vector2
                      , a = 0;
                    for (let i = 0; i < e.length; i++) {
                        const s = e[i];
                        let o = s.calcNormalDir(this);
                        t.x += o.x,
                        t.y += o.y,
                        a += s.elasticity / e.length
                    }
                    let i = new Laya.Vector2;
                    Laya.Vector2.normalize(t, i);
                    let s = new Laya.Vector2;
                    Laya.Vector2.normalize(this.speed, s);
                    let o, n = this.calcPerpendicular(i), r = new Laya.Vector2(s.x + i.x,s.y + i.y);
                    o = Laya.Vector2.dot(r, n[0]) >= 0 ? n[0] : n[1];
                    let l = Laya.Vector2.dot(s, i)
                      , h = new Laya.Vector3;
                    Laya.Vector3.cross(new Laya.Vector3(s.x,s.y,0), new Laya.Vector3(i.x,i.y,0), h);
                    let d = Laya.Vector3.scalarLength(h)
                      , c = Laya.Vector2.scalarLength(this.speed)
                      , g = new Laya.Vector2(o.x * d,o.y * d)
                      , _ = new Laya.Vector2(-i.x * l,-i.y * l)
                      , m = Laya.Vector2.scalarLength(new Laya.Vector2(_.x * c,_.y * c))
                      , u = Laya.Vector2.scalarLength(new Laya.Vector2(g.x * c,g.y * c));
                    m *= a;
                    let p = Math.max(this.momentumLossFactorVertical * m, this.momentumMinLossCountVertical);
                    m -= p = Math.min(m, p);
                    let C = Math.max(this.momentumLossFactorHorizontal * u, this.momentumMinLossCountHorizontal);
                    u -= C = Math.min(u, C),
                    this.speed = new Laya.Vector2(g.x * u + _.x * m,g.y * u + _.y * m),
                    Laya.Vector2.dot(g, new Laya.Vector2(1,0)) < 0 ? this.rotateSpeed = -u / this.radius * (180 / Math.PI) : this.rotateSpeed = u / this.radius * (180 / Math.PI)
                }
                let i = [];
                i = (i = (i = i.concat(e)).concat(t)).sort((e,t)=>{
                    let a = e.calcNormalDir(this)
                      , i = t.calcNormalDir(this)
                      , s = Laya.Vector2.dot(a, new Laya.Vector2(0,-1))
                      , o = Laya.Vector2.dot(i, new Laya.Vector2(0,-1));
                    return s > o ? -1 : s == o ? 0 : s < o ? 1 : void 0
                }
                );
                let s = new Laya.Vector2
                  , o = !1
                  , n = !1;
                for (let e = 0; e < i.length; e++) {
                    let t = i[e].calcNormalDir(this);
                    Laya.Vector2.normalize(t, t),
                    s.x += t.x,
                    s.y += t.y;
                    let a = new Laya.Vector3;
                    Laya.Vector3.cross(new Laya.Vector3(t.x,t.y,0), new Laya.Vector3(0,-1,0), a),
                    a.z > 0 ? o = !0 : n = !0
                }
                if (o && n)
                    ;
                else {
                    let e = new Laya.Vector2(0,1)
                      , t = new Laya.Vector2(0,1);
                    Laya.Vector2.normalize(s, s);
                    let i, o = this.calcPerpendicular(s);
                    i = Laya.Vector2.dot(e, o[0]) >= 0 ? o[0] : o[1];
                    let n = new Laya.Vector3;
                    Laya.Vector3.cross(new Laya.Vector3(t.x,t.y,0), new Laya.Vector3(s.x,s.y,0), n);
                    let r = Laya.Vector3.scalarLength(n);
                    t = new Laya.Vector2(i.x * r,i.y * r);
                    let l = Laya.Vector2.scalarLength(t) * a * this.g;
                    Laya.Vector2.dot(t, new Laya.Vector2(1,0)) > 0 ? (Laya.Vector2.dot(this.speed, t) && this.rotateSpeed < 0 && (this.rotateSpeed = 0),
                    this.rotateSpeed += l / this.radius * (180 / Math.PI)) : this.rotateSpeed -= l / this.radius * (180 / Math.PI),
                    this.speed.x += t.x * a * this.g,
                    this.speed.y += t.y * a * this.g
                }
            } else
                this.speed.y += this.g * a;
            if (this.node.x += this.speed.x * a,
            this.node.y += this.speed.y * a,
            this.node.rotation += this.rotateSpeed * a,
            0 == Laya.Vector2.scalarLength(this.speed)) {
                for (let e = 0; e < this.zeroSpeedCallbacks.length; e++) {
                    const t = this.zeroSpeedCallbacks[e];
                    t && t()
                }
                this.zeroSpeedCallbacks = []
            }
        }
        registerZeroSpeedCallback(e) {
            this.zeroSpeedCallbacks.push(e)
        }
        calcPerpendicular(e) {
            if (0 == e.x)
                return [new Laya.Vector2(1,0), new Laya.Vector2(-1,0)];
            if (0 == e.y)
                return [new Laya.Vector2(0,1), new Laya.Vector2(0,-1)];
            {
                let t = new Laya.Vector2;
                t.x = 1,
                t.y = -t.x * e.x / e.y;
                let a = new Laya.Vector2;
                return a.x = -1,
                a.y = -a.x * e.x / e.y,
                Laya.Vector2.normalize(t, t),
                Laya.Vector2.normalize(a, a),
                [t, a]
            }
        }
    }
    class Physics2dManager extends Script2dEvent {
        constructor() {
            super(...arguments),
            this.allColliders = [],
            this.allRigibodys = [],
            this.bInited = !1,
            this.frameUpadateCount = 5
        }
        onStart() {
            this.node = this.owner
        }
        onUpdate() {
            this.bInited || this.init();
            for (let e = 0; e < this.allRigibodys.length; e++) {
                const t = this.allRigibodys[e];
                for (let e = 1; e <= this.frameUpadateCount; e++)
                    this.updateRigibody(t, Tools.delta() / this.frameUpadateCount)
            }
        }
        init() {
            this.bInited = !0;
            for (let e = 0; e < this.node.numChildren; e++) {
                let t = this.node.getChildAt(e)
                  , a = t.getComponent(ColliderBase);
                a && this.allColliders.push(a);
                let i = t.getComponent(RigibodyCircular);
                i && this.allRigibodys.push(i)
            }
        }
        updateRigibody(e, t) {
            if (0 == e.enabled)
                return;
            let a = []
              , i = [];
            for (let t = 0; t < this.allColliders.length; t++) {
                const s = this.allColliders[t];
                if (0 == s.enabled)
                    continue;
                if (s.group != e.group)
                    continue;
                if (s.distance(e) <= 0) {
                    let t = s.calcNormalDir(e);
                    Laya.Vector2.dot(t, e.speed) >= 0 ? i.push(s) : a.push(s)
                }
            }
            a.length > 0 && this.sendMsg("MSG_PHYSICS2D_COLLIDED", {
                colliders: a
            }),
            e.tryUpdate(a, i, t)
        }
    }
    class ColliderBox extends ColliderBase {
        constructor() {
            super(...arguments),
            this.staticGolbalFourLines = []
        }
        get width() {
            return this.node ? this.node.width : 0
        }
        get height() {
            return this.node ? this.node.height : 0
        }
        get pos() {
            return this.node ? new Laya.Point(this.node.x,this.node.y) : new Laya.Point
        }
        get roation() {
            return this.node ? this.node.rotation : 0
        }
        onStart() {
            this.node = this.owner
        }
        distance(e) {
            let t = this.getCrossLine(e);
            if (!t)
                return 0;
            let a = this.calcNormalDir(e, t)
              , i = new Laya.Vector2(t.p1.x - e.node.x,t.p1.y - e.node.y)
              , s = new Laya.Vector2(t.p2.x - e.node.x,t.p2.y - e.node.y)
              , o = Laya.Vector2.dot(i, s)
              , n = Laya.Vector2.dot(i, a)
              , r = Laya.Vector2.dot(s, a);
            if (n >= o && r >= o)
                return this.calcDistancePoint2Line(e.pos, t) - e.radius;
            return Math.min(Laya.Vector2.scalarLength(i), Laya.Vector2.scalarLength(s)) - e.radius
        }
        calcNormalDir(e, t) {
            let a = t || this.getCrossLine(e);
            if (!a)
                return new Laya.Vector2(0,1);
            let i = new Laya.Vector2(a.p1.x - a.p2.x,a.p1.y - a.p2.y)
              , s = new Laya.Vector2
              , o = new Laya.Vector2;
            0 == i.y ? (s.x = 0,
            s.y = 1,
            o.x = 0,
            o.y = -1) : (s.x = 1,
            s.y = -s.x * i.x / i.y,
            o.x = -1,
            o.y = -o.x * i.x / i.y);
            let n = new Laya.Vector2(e.pos.x - this.pos.x,e.pos.y - this.pos.y);
            return n.x * s.x + n.y * s.y > 0 ? s : o
        }
        getFourPointsBeforeRotation() {
            return [new Laya.Point(0,0), new Laya.Point(this.width,0), new Laya.Point(this.width,this.height), new Laya.Point(0,this.height)]
        }
        getFourPointsAfterRotation() {
            let e = this.getFourPointsBeforeRotation()
              , t = this.node.parent;
            for (let a = 0; a < e.length; a++) {
                let i = e[a];
                i = t.globalToLocal(this.node.localToGlobal(i))
            }
            return e
        }
        getFourLines() {
            if (this.bStatic && this.staticGolbalFourLines.length > 0)
                return this.staticGolbalFourLines;
            let e = []
              , t = this.getFourPointsAfterRotation();
            e.push({
                A: 0,
                B: 0,
                p1: t[0],
                p2: t[1]
            }),
            e.push({
                A: 0,
                B: 0,
                p1: t[1],
                p2: t[2]
            }),
            e.push({
                A: 0,
                B: 0,
                p1: t[2],
                p2: t[3]
            }),
            e.push({
                A: 0,
                B: 0,
                p1: t[3],
                p2: t[0]
            });
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                a.A = (a.p1.y - a.p2.y) / (a.p1.x - a.p2.x),
                a.B = a.p1.y - a.A * a.p1.x
            }
            return this.bStatic && (this.staticGolbalFourLines = e),
            e
        }
        getCrossLine(e) {
            let t = this.getFourLines()
              , a = {
                A: 0,
                B: 0,
                p1: this.pos,
                p2: e.pos
            };
            a.A = (a.p1.y - a.p2.y) / (a.p1.x - a.p2.x),
            a.B = a.p1.y - a.A * a.p1.x;
            for (let e = 0; e < t.length; e++) {
                const i = t[e];
                if (this.calcCrossPoint(a, i))
                    return i
            }
        }
        calcCrossPoint(e, t) {
            let a = new Laya.Point;
            if (Math.abs(e.A) == 1 / 0 && Math.abs(t.A) == 1 / 0)
                return null;
            if (t.A - e.A == 0)
                return null;
            Math.abs(e.A) == 1 / 0 ? (a.x = e.p1.x,
            a.y = t.A * a.x + t.B) : Math.abs(t.A) == 1 / 0 ? (a.x = t.p1.x,
            a.y = e.A * a.x + e.B) : (a.x = (e.B - t.B) / (t.A - e.A),
            a.y = e.A * a.x + e.B);
            let i = Math.max(e.p1.x, e.p2.x)
              , s = Math.min(e.p1.x, e.p2.x)
              , o = Math.max(t.p1.x, t.p2.x)
              , n = Math.min(t.p1.x, t.p2.x)
              , r = Math.max(e.p1.y, e.p2.y)
              , l = Math.min(e.p1.y, e.p2.y)
              , h = Math.max(t.p1.y, t.p2.y)
              , d = Math.min(t.p1.y, t.p2.y);
            if (i == s || o == n) {
                if (a.y >= l && a.y <= r && a.y >= d && a.y <= h)
                    return a
            } else if (r == l || o == n) {
                if (a.x >= s && a.x <= i && a.x >= n && a.x <= o)
                    return a
            } else if (a.x >= s && a.x <= i && a.x >= n && a.x <= o)
                return a;
            return null
        }
        calcDistancePoint2Line(e, t) {
            let a = new Laya.Vector3(t.p1.x - e.x,t.p1.y - e.y,0)
              , i = new Laya.Vector3(t.p2.x - e.x,t.p2.y - e.y,0)
              , s = new Laya.Vector3(t.p2.x - t.p1.x,t.p2.y - t.p1.y,0)
              , o = new Laya.Vector3;
            return Laya.Vector3.cross(a, i, o),
            Laya.Vector3.scalarLength(o) / Laya.Vector3.scalarLength(s)
        }
    }
    class ColliderCircular extends ColliderBase {
        get radius() {
            return this.node ? this.node.width / 2 : 0
        }
        get pos() {
            return this.node ? new Laya.Point(this.node.x,this.node.y) : new Laya.Point
        }
        onStart() {
            this.node = this.owner
        }
        distance(e) {
            let t = new Laya.Vector2(this.pos.x - e.pos.x,this.pos.y - e.pos.y);
            return Laya.Vector2.scalarLength(t) - this.radius - e.radius
        }
        calcNormalDir(e) {
            return new Laya.Vector2(e.pos.x - this.pos.x,e.pos.y - this.pos.y)
        }
    }
    !function(e) {
        e[e.readyed = 1] = "readyed",
        e[e.operating = 2] = "operating",
        e[e.gaming = 3] = "gaming",
        e[e.finished = 4] = "finished",
        e[e.readying = 5] = "readying"
    }(E_GAME01_ST || (E_GAME01_ST = {}));
    class vNewGame01Scene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vNewGame01Scene",
            this.exportNodeNames = ["CC_spriteOperation", "CC_spriteOperationUnactive", "CC_boxOperationEffect", "CC_spriteBg", "CC_spriteRatioLight1", "CC_labelRatio1", "CC_spriteRatioLight2", "CC_labelRatio2", "CC_spriteRatioLight3", "CC_labelRatio3", "CC_spriteRatioLight4", "CC_labelRatio4", "CC_spriteRatioLight5", "CC_labelRatio5", "CC_spriteRatioLight6", "CC_labelRatio6", "CC_spriteRatioLight7", "CC_labelRatio7", "CC_spriteRatioLight8", "CC_labelRatio8", "CC_spriteRatioLight9", "CC_labelRatio9", "CC_imageCollider01", "CC_imageCollider02", "CC_imageCollider03", "CC_imageCollider04", "CC_imageCollider05", "CC_imageCollider06", "CC_imageCollider07", "CC_imageCollider08", "CC_imageCollider09", "CC_imageCollider10", "CC_imageCollider11", "CC_imageCollider12", "CC_imageCollider13", "CC_imageCollider14", "CC_imageCollider15", "CC_imageCollider16", "CC_imageCollider17", "CC_imageCollider18", "CC_imageCollider19", "CC_imageCollider20", "CC_imageCollider21", "CC_imageCollider22", "CC_imageCollider23", "CC_imageCollider24", "CC_imageCollider25", "CC_imageCollider26", "CC_imageCollider27", "CC_imageCollider101", "CC_imageCollider102", "CC_imageCollider103", "CC_imageCollider104", "CC_imageCollider105", "CC_imageCollider106", "CC_imageCollider107", "CC_imageCollider108", "CC_imageCollider109", "CC_spriteDoor", "CC_imageBall", "CC_boxCollider01", "CC_boxCollider02", "CC_boxCollider03", "CC_boxCollider04", "CC_boxCollider05", "CC_boxCollider06", "CC_boxCollider07", "CC_boxCollider08", "CC_boxCollider09", "CC_boxCollider101", "CC_boxCollider102", "CC_boxCollider103", "CC_boxCollider104", "CC_boxCollider105", "CC_boxCollider106", "CC_boxCollider107", "CC_boxCollider108", "CC_imageCollider201", "CC_imageCollider202", "CC_imageCollider203", "CC_imageCollider204", "CC_imageCollider205", "CC_imageCollider206", "CC_imageCollider207", "CC_imageCollider208", "CC_boxReawardBornPoint", "CC_boxCollider201", "CC_boxCollider202", "CC_boxCollider203", "CC_progressBar", "CC_imageOperation", "CC_buttonBack", "CC_buttonGold", "CC_imageGoldIcon", "CC_labelGoldCount", "CC_spriteAdd", "CC_imageGameCoin", "CC_imageGameCoinIcon", "CC_labelGameCoinCount", "CC_labelCountTip", "CC_spriteIconTip", "CC_labelConsume", "CC_spriteTurnLightRoot", "CC_spriteTurnLight1", "CC_spriteTurnLight2", "CC_spriteTurnLight3", "CC_spriteTurnLight4", "CC_spriteTurnLight5", "CC_spriteTurnLight6", "CC_spriteTurnLight7", "CC_spriteTurnLight8", "CC_spriteTurnLight9", "CC_spriteTurnLight10", "CC_spriteTurnLight11", "CC_spriteTurnLight12", "CC_spriteTurnLight13", "CC_spriteTurnLight14", "CC_spriteTurnLight15", "CC_spriteTurnLight16", "CC_spriteTurnLight17", "CC_spriteTurnLight18", "CC_spriteTurnLight19", "CC_spriteTurnLight20", "CC_spriteTurnLight21", "CC_spriteTurnLight22", "CC_spriteTurnLight23", "CC_spriteTurnLight24", "CC_spriteTurnLight25", "CC_spriteTurnLight26", "CC_spriteTurnLight27", "CC_spriteTurnLight28", "CC_spriteTurnLight29", "CC_spriteTurnLight30", "CC_spriteTurnLight31", "CC_spriteTurnLight32", "CC_spriteTurnLight33", "CC_spriteTurnLight34", "CC_spriteTurnLight35", "CC_spriteTurnLight36", "CC_spriteTurnLight37", "CC_spriteTurnLight38", "CC_spriteTurnLight39", "CC_spriteTurnLight40", "CC_spriteTurnLight41", "CC_spriteTurnLight42", "CC_spriteTurnLight43", "CC_spriteTurnLight44"],
            this.bPhysicsEnable = !1,
            this.holes = {}
        }
        onOpened() {
            super.onOpened(),
            mgrI18n.trySetI18nImage(this.spriteBg, "art25.png"),
            this.init(),
            mgrSdk.staticPointEvent(9004)
        }
        onClosed() {
            super.onClosed()
        }
        init() {
            for (let e = 1; e <= 27; e++)
                this[`imageCollider ${ul.format("%02d", e)}`].addComponent(ColliderCircular);
            for (let e = 101; e <= 109; e++)
                this[`imageCollider ${e}`].addComponent(ColliderCircular);
            for (let e = 201; e <= 208; e++)
                this[`imageCollider ${e}`].addComponent(ColliderCircular);
            for (let e = 1; e <= 9; e++)
                this[`boxCollider ${ul.format("%02d", e)}`].addComponent(ColliderBox);
            for (let e = 101; e <= 108; e++)
                this[`boxCollider ${e}`].addComponent(ColliderBox);
            for (let e = 201; e <= 203; e++) {
                this[`boxCollider ${e}`].addComponent(ColliderBox).group = 1
            }
            let e = this.spriteDoor.addComponent(ColliderBox);
            e.elasticity = 0,
            (e = this.boxCollider05.getComponent(ColliderBox)).elasticity = 0,
            (e = this.boxCollider06.getComponent(ColliderBox)).elasticity = 0,
            (e = this.boxCollider07.getComponent(ColliderBox)).elasticity = 0,
            this.rigibody = this.imageBall.addComponent(RigibodyCircular),
            this.rigibody.momentumLossFactorVertical = .2,
            this.rigibody.momentumMinLossCountVertical = 1,
            this.rigibody.momentumLossFactorHorizontal = 0,
            this.rigibody.momentumMinLossCountHorizontal = 0,
            this.progressBar.style = ULPROGRESSBAR_STYLE.ver,
            this.progressBar.barName = this.progressBar.__node.name,
            this.spriteOperation.__originY__ = this.spriteOperation.y,
            this.stManager = new FSMObject,
            this.stManager.registerState(E_GAME01_ST.readyed, this.inReadyed.bind(this), this.exeReadyed.bind(this), this.outReadyed.bind(this)),
            this.stManager.registerState(E_GAME01_ST.operating, this.inOperating.bind(this), this.exeOperating.bind(this), this.outOperating.bind(this)),
            this.stManager.registerState(E_GAME01_ST.gaming, this.inGaming.bind(this), this.exeGaming.bind(this), this.outGaming.bind(this)),
            this.stManager.registerState(E_GAME01_ST.finished, this.inFinished.bind(this), this.exeFinished.bind(this), this.outFinished.bind(this)),
            this.stManager.registerState(E_GAME01_ST.readying, this.inReadying.bind(this), this.exeReadying.bind(this), this.outReadying.bind(this)),
            this.stManager.setNextState(E_GAME01_ST.readying),
            Timer.callLoop(.016, this.onTimerLoop.bind(this), this),
            this.registerListeners({
                MSG_PHYSICS2D_COLLIDED: this.onMsgPhysics2dCollided.bind(this),
                MSG_ITEM_AMOUNT_CHANGED: this.onMsgItemAmountChanged.bind(this),
                MSG_GOLD_FLY_END: this.onMsgGoldFlyEnd.bind(this),
                MSG_Diamond_FLY_END: this.onMsgDiamondFlyEnd.bind(this)
            }),
            this.buttonGold.fOnClick = this.onTouchButtonGold.bind(this),
            this.buttonBack.fOnClick = this.onTouchButtonBack.bind(this),
            this.buttonGold.bTween = !1,
            Layout.widget(10, 10, this.buttonBack.__node),
            Layout.widget(-1, 10, this.buttonGold.__node, {
                x: .5,
                y: 0
            }),
            Layout.widget(-1, 10, this.imageGameCoin, {
                x: .5,
                y: 0
            }),
            this.fillData()
        }
        fillData() {
            Tools.loadImg(this.imageGoldIcon, mgrCfg.get_from_item_template_db(Const.ITEM_ID_GOLD).icon),
            Tools.loadImg(this.imageGameCoinIcon, mgrCfg.get_from_item_template_db(Const.ITEM_ID_GAME_COIN).icon),
            this.labelGameCoinCount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_GAME_COIN)}`,
            this.labelGoldCount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_GOLD)}`;
            let e = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.free_food);
            if (this.spriteAdd.visible = e,
            mgrGameCenter.game01GetFreeCount() > 0)
                this.spriteIconTip.visible = !1,
                this.labelConsume.visible = !1,
                mgrI18n.trySetI18nText(this.labelCountTip, "vNewGame01Scene.2");
            else {
                this.spriteIconTip.visible = !0,
                this.labelConsume.visible = !0,
                mgrI18n.trySetI18nText(this.labelCountTip, "vNewGame01Scene.1");
                let e = mgrCfg.get_from_small_game_center_config_db("game01EveryPrice").value;
                this.labelConsume.text = `${e}`
            }
        }
        onTimerLoop() {
            this.bPhysicsEnable || (this.bPhysicsEnable = !0,
            this.physics2dManager = this.spriteBg.addComponent(Physics2dManager)),
            this.stManager.update();
            for (let e = 1; e <= 44; e++)
                this[`spriteTurnLight ${e}`].alpha = Math.sin(Tools.time() * Math.PI + e)
        }
        inReadying() {
            this.labelRatio1.text = "",
            this.labelRatio2.text = "",
            this.labelRatio3.text = "",
            this.labelRatio4.text = "",
            this.labelRatio5.text = "",
            this.labelRatio6.text = "",
            this.labelRatio7.text = "",
            this.labelRatio8.text = "",
            this.labelRatio9.text = "";
            let e = mgrCfg.get_from_small_game_center_config_db("game01EveryHoleCount").value
              , t = mgrCfg.get_from_small_game_center_config_db("game01EveryRewardCount").value
              , a = Tools.random(1, e)
              , i = [1, 2, 3, 4, 5, 6, 7, 8, 9]
              , s = {};
            for (let e = 1; e <= a; e++) {
                let e = Tools.random(0, i.length - 1);
                s[i[e]] = {
                    holeIndex: i[e],
                    count: 1,
                    weight: 1
                },
                i.splice(e, 1)
            }
            for (let e = 1; e <= t - ul.length(s); e++) {
                let e = Tools.RoundTableProbability(s, "weight");
                e && e.count++
            }
            this.holes = s;
            for (let e = 1; e <= 9; e++) {
                let t = this[`spriteRatioLight ${e}`];
                Timer.callLater(.1 * (e - 1), ()=>{
                    CustomTween.to(t, {
                        alpha: 1
                    }, 100).delayTime(100).to({
                        alpha: 0
                    }, 100).start(1)
                }
                , this)
            }
            Timer.callLater(1, ()=>{
                for (let e = 1; e <= 9; e++) {
                    let t = this[`spriteRatioLight ${e}`]
                      , a = this[`labelRatio ${e}`];
                    Timer.callLater(.1 * (e - 1), ()=>{
                        s[e] ? (a.text = `${s[e].count}`,
                        CustomTween.to(t, {
                            alpha: 1
                        }, 100).delayTime(100).start(1)) : CustomTween.to(t, {
                            alpha: 1
                        }, 100).delayTime(100).to({
                            alpha: 0
                        }, 100).start(1)
                    }
                    , this)
                }
            }
            , this),
            this.spriteDoor.getComponent(ColliderBox).enabled = !1,
            CustomTween.to(this.spriteDoor, {
                alpha: 0
            }, 50).callback(()=>{}
            ).delayTime(500).to({
                alpha: 1
            }, 500).callback(()=>{
                this.spriteDoor.getComponent(ColliderBox).enabled = !0,
                this.stManager && this.stManager.setNextState(E_GAME01_ST.readyed)
            }
            ).start(1)
        }
        exeReadying() {}
        outReadying() {}
        inReadyed() {
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_yindao_ring, this.boxOperationEffect, 3, .75),
            CustomTween.to(this.spriteOperationUnactive, {
                alpha: 0
            }, 100).start(1),
            Tools.registerTouchHander(this.imageOperation, e=>{
                if (!mgrGameCenter.game01CanOperation())
                    return void (0 == DialogBase.ShowingDialog.length && mgrShop.tipItemNotEnough(Const.ITEM_ID_GOLD));
                let t = this.spriteOperation.__originY__
                  , a = this.nodeResource.globalToLocal(new Laya.Point(e.pos.x,e.pos.y));
                if (a.x = this.spriteOperation.x,
                a.y = ul.clamp(a.y, t, t + 50),
                this.progressBar.progress = (a.y - t) / 50,
                this.spriteOperation.y = a.y,
                e.isEnd || e.isCancel) {
                    Tools.unRegisterTouchHander(this.imageOperation),
                    this.stManager && this.stManager.setNextState(E_GAME01_ST.operating);
                    let e = this.progressBar.progress;
                    CustomTween.to(this.spriteOperation, {
                        y: t
                    }, 50).callback(()=>{
                        if (e > .1) {
                            let t = -1800
                              , a = -900;
                            this.rigibody.speed = new Laya.Vector2(0,a * (1 - e) + t * e),
                            mgrSound.play(124)
                        }
                    }
                    ).delayTime(500).callback(()=>{
                        e > .1 ? this.stManager && this.stManager.setNextState(E_GAME01_ST.gaming) : this.stManager && this.stManager.setNextState(E_GAME01_ST.readyed)
                    }
                    ).start(1),
                    CustomTween.actionFloat(this.progressBar.__node, e, 0, 50, e=>{
                        this.progressBar.progress = e
                    }
                    ).start(1)
                }
            }
            )
        }
        exeReadyed() {}
        outReadyed() {}
        inOperating() {
            CustomTween.to(this.spriteOperationUnactive, {
                alpha: 1
            }, 300).start(1)
        }
        exeOperating() {}
        outOperating() {}
        inGaming() {
            mgrGameCenter.game01Operation()
        }
        exeGaming() {
            if (!(this.rigibody.node.y < this.spriteRatioLight1.y)) {
                this.context.rewardCount = 0;
                for (let e = 1; e <= 9; e++) {
                    let t = this[`spriteRatioLight ${e}`];
                    Laya.Vector2.scalarLength(new Laya.Vector2(t.x - this.rigibody.node.x,t.y - this.rigibody.node.y)) <= 30 && this.holes[e] && (this.context.rewardCount = this.holes[e].count)
                }
                this.stManager && this.stManager.setNextState(E_GAME01_ST.finished)
            }
        }
        outGaming() {}
        inFinished() {
            for (let e = 1; e <= this.context.rewardCount; e++)
                Timer.callLater(.3 * (e - 1), ()=>{
                    mgrSound.play(125);
                    let e = new Laya.Image;
                    e.size(30, 30),
                    e.anchorX = .5,
                    e.anchorY = .5,
                    Tools.loadImg(e, mgrCfg.get_from_item_template_db(Const.ITEM_ID_GAME_COIN).icon),
                    this.spriteBg.addChild(e),
                    e.pos(this.boxReawardBornPoint.x, this.boxReawardBornPoint.y);
                    let t = e.addComponent(RigibodyCircular);
                    t.speed = new Laya.Vector2(0,100),
                    t.momentumLossFactorVertical = 1,
                    t.momentumMinLossCountHorizontal = 5,
                    t.group = 1,
                    this.physics2dManager.allRigibodys.push(t),
                    Timer.callLater(2, ()=>{
                        let a = this.physics2dManager.allRigibodys.indexOf(t);
                        this.physics2dManager.allRigibodys.splice(a, 1);
                        let i = new Laya.Point(e.x,e.y)
                          , s = this.imageGameCoinIcon.localToGlobal(new Laya.Point(17.5,17.5));
                        s = this.spriteBg.globalToLocal(s);
                        let o = new Laya.Vector2((i.x + s.x) / 2 + 500,(i.y + s.y) / 2);
                        CustomTween.bezierCurveMotion(i, o, s, e, 1e3).start(1),
                        CustomTween.to(e, {
                            scaleX: .5,
                            scaleY: .5,
                            alpha: .8
                        }, 1e3).callback(()=>{
                            this.sendMsg("MSG_Diamond_FLY_END"),
                            e.destroy(),
                            mgrPlayer.addItemAmount(Const.ITEM_ID_GAME_COIN, 1, "游戏1获得游戏币")
                        }
                        ).start(1)
                    }
                    , this)
                }
                , this)
        }
        exeFinished() {
            Laya.Vector2.scalarLength(new Laya.Vector2(this.spriteDoor.x - this.rigibody.node.x,this.spriteDoor.y - this.rigibody.node.y)) <= 40 && this.stManager && this.stManager.setNextState(E_GAME01_ST.readying),
            Laya.Vector2.scalarLength(new Laya.Vector2(this.spriteOperation.x - this.rigibody.node.x,this.spriteOperation.y - this.rigibody.node.y)) > 1500 && (this.rigibody.node.x = 484,
            this.rigibody.node.y = 668,
            this.rigibody.speed = new Laya.Vector2)
        }
        outFinished() {}
        onMsgPhysics2dCollided(e) {
            let t = e.colliders || [];
            for (let e = 0; e < t.length; e++) {
                const a = t[e];
                a instanceof ColliderCircular && CustomTween.to(a.node, {
                    scaleX: 1.05,
                    scaleY: 1.05
                }, 25).to({
                    scaleX: 1,
                    scaleY: 1
                }, 50).start(1)
            }
        }
        onTouchButtonGold() {
            this.spriteAdd.visible && mgrDirector.openDialog("vLuckGoldDialog")
        }
        onTouchButtonBack() {
            mgrDirector.warpSceneWidthEffect("vGameCenterScene")
        }
        onMsgGoldFlyEnd() {
            CustomTween.to(this.imageGoldIcon, {
                scaleX: 1.1,
                scaleY: 1.1
            }, 100).to({
                scaleX: 1,
                scaleY: 1
            }, 100).start(1)
        }
        onMsgDiamondFlyEnd() {
            CustomTween.to(this.imageGameCoinIcon, {
                scaleX: 1.1,
                scaleY: 1.1
            }, 100).to({
                scaleX: 1,
                scaleY: 1
            }, 100).start(1)
        }
        onMsgItemAmountChanged(e) {
            this.fillData()
        }
    }
    !function(e) {
        e[e.initGame = 1] = "initGame",
        e[e.gameing = 2] = "gameing",
        e[e.reborning = 3] = "reborning",
        e[e.settlement = 4] = "settlement"
    }(E_GAME02_ST || (E_GAME02_ST = {}));
    class vNewGame02Scene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vNewGame02Scene",
            this.exportNodeNames = ["CC_spriteBg", "CC_buttonBack", "CC_buttonGold", "CC_imageGoldIcon", "CC_labelGoldCount", "CC_spriteAdd", "CC_imageGameCoin", "CC_imageGameCoinIcon", "CC_labelGameCoinCount", "CC_progressBarReward", "CC_labelProgressReward", "CC_spriteLight1", "CC_spriteLight2", "CC_spriteRewardBg", "CC_spriteRewardIcon", "CC_labelReardAmount", "CC_spriteKnifeBg", "CC_spriteKnifeCountBg", "CC_labelKnifeCount", "CC_labelCountTip", "CC_spriteIconTip", "CC_labelConsume", "CC_spriteTargetContainer", "CC_spriteTargetOrange", "CC_spriteTargetSweet", "CC_spriteTargetWatermelon", "CC_spriteKnifeSource1", "CC_spriteKnifeSource2", "CC_spriteKnifeSource3", "CC_spriteKnifeSource4", "CC_spriteKnifeSource5", "CC_spriteKnifeSource6", "CC_spriteKnifeSource7", "CC_spriteKnifeSource8", "CC_spriteKnifeSource9", "CC_spriteKnifeSource10", "CC_spriteKnifeSource11", "CC_spriteKnifeSource12", "CC_spriteKnifeSource13", "CC_spriteKnifeSource14", "CC_spriteKnifeSource15", "CC_spriteKnifeSource16", "CC_spriteKnifeSource17", "CC_spriteKnifeSource18", "CC_spriteKnifeSource19", "CC_spriteKnifeSource20", "CC_spriteKnifeSource21", "CC_spriteKnifeSource22", "CC_spriteKnifeSource23", "CC_spriteKnifeSource24", "CC_spriteKnifeSource25", "CC_spriteKnifeSource26", "CC_spriteKnifeSource27", "CC_spriteKnifeSource28", "CC_spriteKnifeSource29", "CC_spriteKnifeSource30"],
            this.knifePool = [],
            this.rotateSpeed = 0,
            this.allActiveKnifes = [],
            this.allInKinfes = [],
            this.allCrowns = [],
            this.allBomb = [],
            this.rebornCount = 0
        }
        onOpened() {
            super.onOpened(),
            this.init(),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_yindao_ring, this.spriteKnifeBg, 5, .75),
            mgrSdk.staticPointEvent(9006)
        }
        onClosed() {
            super.onClosed()
        }
        getKnifeFromPool() {
            return this.knifePool.length > 0 ? this.knifePool.shift() : null
        }
        recoverKnifeFromPool(e) {
            e.parent.removeChild(e),
            this.nodeResource.addChild(e),
            e.pos(1e4, 0),
            e.rotation = 0,
            this.knifePool.push(e)
        }
        init() {
            Tools.loadImg(this.spriteRewardIcon, mgrCfg.get_from_item_template_db(Const.ITEM_ID_GAME_COIN).icon);
            for (let e = 1; e <= 30; e++) {
                let t = this[`spriteKnifeSource ${e}`];
                this.knifePool.push(t)
            }
            Tools.loadImg(this.imageGoldIcon, mgrCfg.get_from_item_template_db(Const.ITEM_ID_GOLD).icon),
            Tools.loadImg(this.imageGameCoinIcon, mgrCfg.get_from_item_template_db(Const.ITEM_ID_GAME_COIN).icon),
            this.spriteTargetOrange.zOrder = 1e3,
            this.spriteTargetWatermelon.zOrder = 1e3,
            this.spriteTargetSweet.zOrder = 1e3,
            Layout.widget(10, 10, this.buttonBack.__node),
            Layout.widget(-1, 10, this.buttonGold.__node, {
                x: .5,
                y: 0
            }),
            Layout.widget(-1, 10, this.imageGameCoin, {
                x: .5,
                y: 0
            }),
            this.progressBarReward.progress = 0,
            this.progressBarReward.__node.scale(0, 0),
            this.spriteKnifeBg.scale(0, 0),
            this.spriteTargetContainer.scale(0, 0),
            CustomTween.rotateForever(this.spriteLight2, 8e3),
            CustomTween.heartBeat(this.spriteKnifeCountBg),
            this.stManager = new FSMObject,
            this.stManager.registerState(E_GAME02_ST.initGame, this.inInitGame.bind(this), this.exeInitGame.bind(this), this.outInitGame.bind(this)),
            this.stManager.registerState(E_GAME02_ST.gameing, this.inGaming.bind(this), this.exeGaming.bind(this), this.outGaming.bind(this)),
            this.stManager.registerState(E_GAME02_ST.reborning, this.inReborning.bind(this), this.exeReborning.bind(this), this.outReborning.bind(this)),
            this.stManager.registerState(E_GAME02_ST.settlement, this.inSettlement.bind(this), this.exeSettlement.bind(this), this.outSettlement.bind(this)),
            this.stManager.setNextState(E_GAME02_ST.initGame),
            Timer.callLoop(.016, this.onTimerLoop.bind(this), this),
            this.registerListeners({
                MSG_ITEM_AMOUNT_CHANGED: this.onMsgItemAmountChanged.bind(this),
                MSG_GOLD_FLY_END: this.onMsgGoldFlyEnd.bind(this),
                MSG_Diamond_FLY_END: this.onMsgDiamondFlyEnd.bind(this)
            }),
            this.buttonGold.fOnClick = this.onTouchButtonGold.bind(this),
            this.buttonBack.fOnClick = this.onTouchButtonBack.bind(this),
            this.buttonGold.bTween = !1,
            this.fillData()
        }
        fillData() {
            this.labelGameCoinCount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_GAME_COIN)}`,
            this.labelGoldCount.text = `${mgrPlayer.getItemAmount(Const.ITEM_ID_GOLD)}`;
            let e = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.free_food);
            this.spriteAdd.visible = e;
            let t = mgrGameCenter.game02GetFreeCount();
            if (t > 0)
                this.spriteIconTip.visible = !1,
                this.labelConsume.visible = !1,
                mgrI18n.trySetI18nText(this.labelCountTip, "vNewGame01Scene.2");
            else {
                this.spriteIconTip.visible = !0,
                this.labelConsume.visible = !0,
                mgrI18n.trySetI18nText(this.labelCountTip, "vNewGame01Scene.1");
                let e = mgrCfg.get_from_small_game_center_config_db("game02EveryPrice").value;
                this.labelConsume.text = `${e}`
            }
            if (this.labelKnifeCount.text = `${t}`,
            this.spriteKnifeCountBg.visible = t > 0,
            !this.gameData)
                return;
            let a = this.allInKinfes.length / this.gameData.gameNeedProgress;
            this.progressBarReward.progress = .95 * this.progressBarReward.progress + .05 * a,
            this.labelProgressReward.text = `${this.allInKinfes.length}/${this.gameData.gameNeedProgress}`
        }
        onTimerLoop() {
            this.updateContainer(),
            this.updateGame(),
            this.stManager.update(),
            this.fillData()
        }
        updateContainer() {
            this.rotateSpeed = 60 * Math.sin(Tools.time() / 2) * 3,
            this.spriteTargetContainer.rotation += this.rotateSpeed * Tools.delta()
        }
        updateGame() {
            for (let e = 0; e < this.allActiveKnifes.length; e++) {
                const t = this.allActiveKnifes[e];
                let a = 4800 * Tools.delta()
                  , i = Laya.Vector2.scalarLength(new Laya.Vector2(this.spriteTargetContainer.x - t.x,this.spriteTargetContainer.y - t.y));
                i -= this.spriteTargetContainer.width / 2;
                let s = !1;
                for (let o = 0; o < this.allInKinfes.length; o++) {
                    const n = this.allInKinfes[o];
                    let r = n.localToGlobal(new Laya.Point)
                      , l = n.localToGlobal(new Laya.Point(0,-1))
                      , h = new Laya.Vector2(l.x - r.x,l.y - r.y);
                    Laya.Vector2.normalize(h, h);
                    let d = Laya.Vector2.dot(h, new Laya.Vector2(0,-1));
                    if (Math.acos(d) / Math.PI * 180 <= 8) {
                        let o = i - 100;
                        if (a > o) {
                            t.y -= o,
                            s = !0,
                            this.allActiveKnifes.splice(e, 1),
                            CustomTween.to(t, {
                                rotation: 1800,
                                y: t.y + 1e3,
                                x: t.x - 300
                            }, 3e3).callback(()=>{
                                this.recoverKnifeFromPool(t)
                            }
                            ).start(1),
                            this.stManager && this.stManager.setNextState(E_GAME02_ST.reborning),
                            mgrSound.play(123);
                            break
                        }
                    }
                }
                for (let o = 0; o < this.allBomb.length; o++) {
                    const n = this.allBomb[o];
                    let r = n.localToGlobal(new Laya.Point)
                      , l = n.localToGlobal(new Laya.Point(0,-1))
                      , h = new Laya.Vector2(l.x - r.x,l.y - r.y);
                    Laya.Vector2.normalize(h, h);
                    let d = Laya.Vector2.dot(h, new Laya.Vector2(0,-1));
                    if (Math.abs(Math.acos(d) / Math.PI * 180 - 180) <= 8) {
                        let r = i - 50;
                        if (a > r) {
                            t.y -= r,
                            s = !0,
                            this.allActiveKnifes.splice(e, 1),
                            CustomTween.to(t, {
                                rotation: 1800,
                                y: t.y + 1e3,
                                x: t.x - 300
                            }, 3e3).callback(()=>{
                                this.recoverKnifeFromPool(t)
                            }
                            ).start(1),
                            this.allBomb.splice(o, 1),
                            n.destroy(),
                            this.stManager && this.stManager.setNextState(E_GAME02_ST.reborning),
                            mgrSound.play(123);
                            break
                        }
                    }
                }
                if (!s) {
                    for (let e = 0; e < this.allCrowns.length; e++) {
                        const t = this.allCrowns[e];
                        let s = t.localToGlobal(new Laya.Point)
                          , o = t.localToGlobal(new Laya.Point(0,-1))
                          , n = new Laya.Vector2(o.x - s.x,o.y - s.y);
                        Laya.Vector2.normalize(n, n);
                        let r = Laya.Vector2.dot(n, new Laya.Vector2(0,-1));
                        if (Math.abs(Math.acos(r) / Math.PI * 180 - 180) <= 10) {
                            if (a > i - 50) {
                                let a = mgrCfg.get_from_small_game_center_config_db("game02MinCrownRewardCount").value
                                  , i = mgrCfg.get_from_small_game_center_config_db("game02MaxCrownRewardCount").value
                                  , s = Tools.random(a, i);
                                mgrPlayer.addItemAmount(Const.ITEM_ID_GAME_COIN, s, "皇冠奖励"),
                                this.playCoinGetEffect(t.localToGlobal(new Laya.Point(24,24)), s),
                                this.allCrowns.splice(e, 1),
                                t.destroy();
                                break
                            }
                        }
                    }
                    if (a >= i) {
                        t.y -= i,
                        this.allActiveKnifes.splice(e, 1),
                        this.allInKinfes.push(t);
                        let a = t.localToGlobal(new Laya.Point(t.pivotX,t.pivotY))
                          , s = this.spriteTargetContainer.globalToLocal(a);
                        this.nodeResource.removeChild(t),
                        t.zOrder = 1,
                        this.spriteTargetContainer.addChild(t),
                        t.pos(s.x, s.y),
                        t.rotation = 360 - this.spriteTargetContainer.rotation % 360,
                        mgrSound.play(123)
                    } else
                        t.y -= a
                }
            }
        }
        inInitGame() {
            this.rebornCount = 0,
            this.gameData = mgrGameCenter.randomOneGame02();
            let e = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
              , t = [];
            for (let a = 1; a <= this.gameData.gameCrownCount; a++) {
                let a = Tools.random(0, e.length - 1);
                t.push(e[a]),
                e.splice(a, 1)
            }
            let a = this.spriteTargetContainer.width / 2
              , i = this.spriteTargetContainer.height / 2
              , s = this.spriteTargetContainer.width / 2 - 20;
            for (let e = 0; e < t.length; e++) {
                let o = t[e] / 16 * 2 * Math.PI
                  , n = a + s * Math.cos(o)
                  , r = i + s * Math.sin(o)
                  , l = o / Math.PI * 180
                  , h = new Laya.Image;
                h.size(48, 45),
                h.anchorX = .5,
                h.anchorY = 1,
                Tools.loadImg(h, "res/ui/gameCenter/game02/art10.png"),
                this.spriteTargetContainer.addChild(h),
                h.pos(n, r),
                h.rotation = l + 90,
                this.allCrowns.push(h)
            }
            let o = [];
            for (let t = 1; t <= this.gameData.gameBombCount; t++) {
                let t = Tools.random(0, e.length - 1);
                o.push(e[t]),
                e.splice(t, 1)
            }
            for (let e = 0; e < o.length; e++) {
                let t = o[e] / 16 * 2 * Math.PI
                  , n = a + s * Math.cos(t)
                  , r = i + s * Math.sin(t)
                  , l = t / Math.PI * 180
                  , h = new Laya.Image;
                h.size(48, 45),
                h.anchorX = .5,
                h.anchorY = 1,
                Tools.loadImg(h, "res/ui/gameCenter/game02/art11.png"),
                this.spriteTargetContainer.addChild(h),
                h.pos(n, r),
                h.rotation = l + 90,
                this.allBomb.push(h)
            }
            this.labelReardAmount.text = `x ${this.gameData.gameRewardCount}`,
            CustomTween.to(this.progressBarReward.__node, {
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1);
            let n = [this.spriteTargetOrange, this.spriteTargetWatermelon, this.spriteTargetSweet]
              , r = Tools.random(0, n.length - 1);
            for (let e = 0; e < n.length; e++) {
                const t = n[e];
                t.alpha = 0,
                e == r && CustomTween.to(t, {
                    alpha: 1
                }, 300).start(1)
            }
            CustomTween.to(this.spriteTargetContainer, {
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1);
            let l = ()=>{
                this.curKnife = this.getKnifeFromPool(),
                this.curKnife.pos(this.spriteKnifeBg.x, this.spriteKnifeBg.y - 30),
                this.curKnife.alpha = 0,
                this.curKnife.y += 30,
                CustomTween.to(this.curKnife, {
                    alpha: 1,
                    y: this.curKnife.y - 30
                }, 200).start(1)
            }
            ;
            CustomTween.to(this.spriteKnifeBg, {
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).callback(()=>{
                l(),
                Tools.unRegisterTouchHander(this.spriteKnifeBg),
                Tools.registerTouchHander(this.spriteKnifeBg, e=>{
                    e.isBegin && (mgrGameCenter.game02CanOperation() ? (mgrGameCenter.game02Operation(),
                    this.allActiveKnifes.push(this.curKnife),
                    l(),
                    mgrSound.play(122)) : mgrShop.tipItemNotEnough(Const.ITEM_ID_GOLD))
                }
                ),
                this.stManager.setNextState(E_GAME02_ST.gameing)
            }
            ).start(1)
        }
        exeInitGame() {}
        outInitGame() {}
        inGaming() {}
        exeGaming() {
            this.allInKinfes.length >= this.gameData.gameNeedProgress && this.stManager && this.stManager.setNextState(E_GAME02_ST.settlement)
        }
        outGaming() {}
        inReborning() {
            let e = mgrCfg.get_from_small_game_center_config_db("game02EveryRebornPrice").value;
            mgrDirector.openDialog("vTryAgainDialog", {
                buyCallback: ()=>{
                    this.rebornCount++,
                    this.stManager && this.stManager.setNextState(E_GAME02_ST.gameing),
                    mgrSdk.staticPointEvent(9008)
                }
                ,
                onAdCallback: ()=>{
                    this.rebornCount++,
                    this.stManager && this.stManager.setNextState(E_GAME02_ST.gameing),
                    mgrSdk.staticPointEvent(9008)
                }
                ,
                cancleCallback: ()=>{
                    this.stManager && this.stManager.setNextState(E_GAME02_ST.settlement)
                }
                ,
                adEventId: AD_EVENT_ID.VIDEO.ad_game02_reborn,
                consume: {
                    itemId: Const.ITEM_ID_GOLD,
                    amount: e * (1 + this.rebornCount)
                }
            })
        }
        exeReborning() {}
        outReborning() {}
        inSettlement() {
            this.allInKinfes.length >= this.gameData.gameNeedProgress ? (mgrPlayer.addItemAmount(Const.ITEM_ID_GAME_COIN, this.gameData.gameRewardCount, "插飞镖单局奖励"),
            this.playCoinGetEffect(this.spriteRewardIcon.localToGlobal(new Laya.Point(15,15)), this.gameData.gameRewardCount),
            CustomTween.to(this.spriteTargetContainer, {
                scaleX: 0,
                scaleY: 0
            }, 300).callback(()=>{
                for (let e = 0; e < this.allInKinfes.length; e++) {
                    const t = this.allInKinfes[e];
                    this.recoverKnifeFromPool(t)
                }
                for (let e = 0; e < this.allActiveKnifes.length; e++) {
                    const t = this.allActiveKnifes[e];
                    this.recoverKnifeFromPool(t)
                }
                for (let e = 0; e < this.allBomb.length; e++) {
                    this.allBomb[e].destroy()
                }
                for (let e = 0; e < this.allCrowns.length; e++) {
                    this.allCrowns[e].destroy()
                }
                this.curKnife && this.recoverKnifeFromPool(this.curKnife),
                this.allInKinfes = [],
                this.allActiveKnifes = [],
                this.allBomb = [],
                this.allCrowns = [],
                this.stManager && this.stManager.setNextState(E_GAME02_ST.initGame)
            }
            ).start(1)) : CustomTween.to(this.spriteTargetContainer, {
                scaleX: 0,
                scaleY: 0
            }, 300).callback(()=>{
                for (let e = 0; e < this.allInKinfes.length; e++) {
                    const t = this.allInKinfes[e];
                    this.recoverKnifeFromPool(t)
                }
                for (let e = 0; e < this.allActiveKnifes.length; e++) {
                    const t = this.allActiveKnifes[e];
                    this.recoverKnifeFromPool(t)
                }
                for (let e = 0; e < this.allBomb.length; e++) {
                    this.allBomb[e].destroy()
                }
                for (let e = 0; e < this.allCrowns.length; e++) {
                    this.allCrowns[e].destroy()
                }
                this.curKnife && this.recoverKnifeFromPool(this.curKnife),
                this.allInKinfes = [],
                this.allActiveKnifes = [],
                this.allBomb = [],
                this.allCrowns = [],
                this.stManager && this.stManager.setNextState(E_GAME02_ST.initGame)
            }
            ).start(1)
        }
        exeSettlement() {}
        outSettlement() {}
        onMsgGoldFlyEnd() {
            CustomTween.to(this.imageGoldIcon, {
                scaleX: 1.1,
                scaleY: 1.1
            }, 100).to({
                scaleX: 1,
                scaleY: 1
            }, 100).start(1)
        }
        onMsgDiamondFlyEnd() {
            CustomTween.to(this.imageGameCoinIcon, {
                scaleX: 1.1,
                scaleY: 1.1
            }, 100).to({
                scaleX: 1,
                scaleY: 1
            }, 100).start(1)
        }
        onMsgItemAmountChanged(e) {
            this.fillData()
        }
        onTouchButtonGold() {
            this.spriteAdd.visible && mgrDirector.openDialog("vLuckGoldDialog")
        }
        onTouchButtonBack() {
            mgrDirector.warpSceneWidthEffect("vGameCenterScene")
        }
        playCoinGetEffect(e, t) {
            for (let a = 1; a <= t; a++) {
                let t = new Laya.Image(mgrCfg.get_from_item_template_db(Const.ITEM_ID_GAME_COIN).icon);
                t.size(30, 30),
                t.anchorX = .5,
                t.anchorY = .5;
                let a = this.nodeResource;
                this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_jinbi_loop, t),
                a.addChild(t);
                let i = this.imageGameCoinIcon
                  , s = a.globalToLocal(e, !0);
                t.pos(s.x, s.y),
                t.zOrder = 1e3;
                let o = new Laya.Vector2(s.x + Tools.random(-70, 70),s.y + Tools.random(60, 80))
                  , n = new Laya.Vector2((s.x + o.x) / 2,(s.y + o.y) / 2 - 200)
                  , r = i.localToGlobal(new Laya.Point(i.width / 2,i.height / 2));
                r = a.globalToLocal(r);
                let l = new Laya.Vector2((o.x + r.x) / 2 + Tools.random(-200, 200),(o.y + r.y) / 2);
                CustomTween.bezierCurveMotion(s, n, o, t, 500).bezierCurveMotion(o, new Laya.Vector2(o.x,o.y - 30), o, 300).delayTime(300).callback(()=>{
                    CustomTween.bezierCurveMotion(o, l, r, t, 500).start(1),
                    CustomTween.to(t, {
                        scaleX: .5,
                        scaleY: .5,
                        alpha: 0
                    }, 500).callback(()=>{
                        t.destroy()
                    }
                    ).start(1)
                }
                ).start(1)
            }
        }
    }
    class vPvpScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vPvpScene",
            this.exportNodeNames = ["CC_spriteBg", "CC_buttonBack", "CC_spriteNameBg", "CC_labelName", "CC_labelScore", "CC_buttonRank", "CC_spriteRank", "CC_buttonUnLike", "CC_buttonLike", "CC_spriteLikeCount", "CC_labelLeftLikeCount", "CC_spriteRecoverTime", "CC_labelRecoverRemainTime", "CC_buttonAdd", "CC_spriteMask", "CC_spriteRewardBg", "CC_buttonReward", "CC_spriteLight", "CC_progressBarReward", "CC_labelRewardcount", "CC_buttonJoin", "CC_spriteJoin", "CC_spriteEffect1", "CC_spriteEffect2"],
            this.canOpenReward = !1
        }
        onOpened() {
            super.onOpened(),
            this.multilingualText1 = `${mgrI18n.getText("vPvpScene.1")}`,
            this.multilingualText2 = `${mgrI18n.getText("vPvpScene.2")}`,
            this.multilingualText3 = `${mgrI18n.getText("vPvpScene.3")}`,
            this.multilingualText4 = `${mgrI18n.getText("vPvpScene.4")}`,
            this.buttonBack.fOnClick = this.onTouchButtonBack.bind(this),
            this.buttonUnLike.fOnClick = this.onTouchButtonUnlike.bind(this),
            this.buttonLike.fOnClick = this.onTouchbuttonLike.bind(this),
            this.buttonReward.fOnClick = this.onTouchButtonReward.bind(this),
            this.buttonRank.fOnClick = this.onTouchButtonRank.bind(this),
            this.buttonJoin.fOnClick = this.onTouchButtonJoin.bind(this),
            this.buttonAdd.fOnClick = this.onTouchButtonAd.bind(this),
            Tools.registerTouchHander(this.spriteBg, this.onTouchSpriteBg.bind(this)),
            this.buttonReward.bTween = !1,
            this.progressBarReward.style = ULPROGRESSBAR_STYLE.ver,
            this.fadeIn(),
            this.refresh(),
            this.buildUi(),
            this.randomOnePlayer(),
            mgrGuide.isGuiding() && (this.buttonBack.__node.visible = !1),
            Timer.callLoop(1, this.refreshTime.bind(this), this),
            this.registerListeners({
                MSG_PVP_BACK_BUTTON_HIDE: this.onMsgPvpBackButtonHide.bind(this),
                MSG_PVP_BACK_BUTTON_SHOW: this.onMsgPvpBackButtonShow.bind(this),
                MSG_I18N_REFRESH: ()=>{
                    this.multilingualText1 = `${mgrI18n.getText("vPvpScene.1")}`,
                    this.multilingualText2 = `${mgrI18n.getText("vPvpScene.2")}`,
                    this.multilingualText3 = `${mgrI18n.getText("vPvpScene.3")}`,
                    this.multilingualText4 = `${mgrI18n.getText("vPvpScene.4")}`
                }
            }),
            mgrGuide.registerGuideNode("vPvpScene.buttonReward", this.buttonReward.__node),
            mgrTip.showJumpOtherGameDrag(this),
            mgrSdk.staticPointEvent(7001),
            mgrI18n.trySetI18nImage(this.spriteRank, "btn_rank.png"),
            mgrI18n.trySetI18nImage(this.spriteRewardBg, "art86.png"),
            mgrI18n.trySetI18nImage(this.spriteJoin, "art82.png")
        }
        onClosed() {
            super.onClosed()
        }
        fadeIn() {
            Layout.widget(10, 10, this.buttonBack.__node),
            Layout.widget(30, -1, this.buttonRank.__node),
            Layout.widget(30, -1, this.buttonReward.__node),
            Layout.widget(Laya.stage.width - 30, -1, this.buttonJoin.__node, {
                x: 1,
                y: .5
            }),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_cansai_glow, this.buttonJoin.__node),
            CustomTween.rotateForever(this.spriteLight, 8e3)
        }
        refresh() {
            let[e,t] = mgrOfflinePvp.getLikeCount();
            this.labelLeftLikeCount.text = `${this.multilingualText2} ${e}/${t}`;
            let[a,i] = mgrOfflinePvp.getRewardCount();
            this.labelRewardcount.text = `${a}/${i}`;
            let s = a / i;
            CustomTween.actionFloat(this.progressBarReward.__node, this.progressBarReward.progress, s, 500, e=>{
                this.progressBarReward.progress = e
            }
            ).start(1),
            this.context.tempReardTween && this.context.tempReardTween.clear(),
            a >= i ? (mgrSound.play(104),
            Timer.callLater(3, ()=>{
                this.spriteLight.alpha = 1,
                CustomTween.jumpTo(this.buttonReward.__node, new Laya.Point(Laya.stage.width / 2,Laya.stage.height / 2 - 100), 2).callback(()=>{
                    this.context.tempReardTween = CustomTween.heartBeat(this.buttonReward.__node),
                    this.sendMsg("MSG_GUIDE_EVENT", {
                        id: "vPvpScene.rewardAnimationFinised"
                    }),
                    this.canOpenReward = !0
                }
                ),
                CustomTween.to(this.spriteMask, {
                    alpha: .4
                }, 300).start(1)
            }
            , this)) : (this.spriteLight.alpha = 0,
            this.buttonReward.__node.pos(56, 61),
            CustomTween.to(this.buttonReward.__node, {
                scaleX: 1,
                scaleY: 1
            }, 0).start(1),
            CustomTween.to(this.spriteMask, {
                alpha: 0
            }, 300).start(1)),
            this.buttonAdd.__node.visible = e <= 0 && mgrAd.preCheckCanTriggerAdEvent("pvp_like_count")
        }
        refreshTime() {
            let e = mgrPlayer.getRecoverRemainTime(Const.ITEM_ID_PVP_LIKE_COUNT);
            e <= 0 ? (this.labelRecoverRemainTime.text = "",
            this.spriteRecoverTime.visible = !1) : (this.labelRecoverRemainTime.text = Tools.formatTime(e, "%M:%S"),
            this.spriteRecoverTime.visible = !0)
        }
        buildUi() {
            this.spriteNameBg.scale(0, 0),
            this.buttonUnLike.__node.scale(0, 1),
            this.buttonLike.__node.scale(0, 1),
            this.topBar = new vTopBar({}),
            this.addChild(this.topBar),
            Layout.widget(.5, 45, this.topBar, {
                x: .5,
                y: 0
            }),
            this.curRoleAvatar = new RoleAvatar,
            this.curRoleAvatar.transform.scale = new Laya.Vector3(.65,.65,.65),
            this.add3DEffectAtBack(this.curRoleAvatar, 0),
            this.curRoleAvatar.transform.scale = new Laya.Vector3,
            this.oldRoleAvatar = new RoleAvatar,
            this.oldRoleAvatar.transform.scale = new Laya.Vector3(.65,.65,.65),
            this.add3DEffectAtBack(this.oldRoleAvatar, 0),
            this.oldRoleAvatar.transform.scale = new Laya.Vector3,
            this.spriteBg.zOrder = -2,
            this.cameraBack.fieldOfView = 25,
            this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,1.1,4.1),
            this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-10),
            this.cameraBack.transform.position = new Laya.Vector3(0,1.1,4.1),
            this.cameraBack.transform.rotationEuler = new Laya.Vector3(-10)
        }
        randomOnePlayer() {
            let e = mgrOfflinePvp.getPkList()[0];
            if (mgrGuide.isGuiding()) {
                e.data = mgrPart.getLastClothes();
                for (let t = 0; t < e.data.length; t++) {
                    const a = e.data[t];
                    mgrCfg.get_from_part_db(a).type == PartType.hair && e.data.splice(t, 1)
                }
            }
            this.playerInfo = e,
            this.curRoleAvatar.fillByPartIds(e.data),
            this.labelName.text = e.name,
            this.labelScore.text = `${this.multilingualText1}???`;
            let t = ()=>{
                this.sendMsg("MSG_GUIDE_EVENT", {
                    id: "vPvpScene.palyerComeActionFinished"
                }),
                mgrGuide.registerGuideNode("vPvpScene.buttonLike", this.buttonLike.__node),
                Timer.callLater(.3, ()=>{
                    CustomTween.to(this.spriteNameBg, {
                        scaleX: 1,
                        scaleY: 1
                    }, 300, Laya.Ease.backOut).start(1),
                    this.buttonUnLike.enabled = !0,
                    this.buttonLike.enabled = !0,
                    CustomTween.to(this.buttonUnLike.__node, {
                        scaleX: 1,
                        scaleY: 1
                    }, 300, Laya.Ease.backOut).start(1),
                    CustomTween.to(this.buttonLike.__node, {
                        scaleX: 1,
                        scaleY: 1
                    }, 300, Laya.Ease.backOut).start(1)
                }
                , this)
            }
            ;
            this.curRoleAvatar.registerLoadEndCallback(()=>{
                this.curRoleAvatar.playAnimation(ANIMATION_ID.PVP.COME, 0, ()=>{
                    this.curRoleAvatar.transform.scale = new Laya.Vector3(.65,.65,.65),
                    this.curRoleAvatar.transform.position = new Laya.Vector3,
                    this.curRoleAvatar.transform.rotationEuler = new Laya.Vector3,
                    this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_zhoubisai_show, this.spriteEffect2, 3)
                }
                , ()=>{
                    t(),
                    this.curRoleAvatar.playAnimation(ANIMATION_ID.STAGE.fly_idle)
                }
                )
            }
            )
        }
        onTouchButtonAd() {
            mgrDirector.openDialog("vPvpCountAdDialog", {
                fOnClose: ()=>{
                    this.refresh()
                }
            })
        }
        onTouchButtonBack() {
            mgrDirector.warpSceneWidthEffect("vHubScene"),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vPvpScene.clickButtonBack"
            })
        }
        onTouchButtonUnlike() {
            this.like(this.playerInfo, !1),
            this.refresh()
        }
        onTouchbuttonLike() {
            this.like(this.playerInfo, !0),
            this.refresh(),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vPvpScene.clickButtonLike"
            })
        }
        like(e, t) {
            let[a,i] = mgrOfflinePvp.getLikeCount();
            if (a <= 0)
                return mgrTip.showMsgTip(`${this.multilingualText3}`),
                void (mgrAd.preCheckCanTriggerAdEvent("pvp_like_count") && mgrDirector.openDialog("vPvpCountAdDialog"));
            this.buttonUnLike.enabled = !1,
            this.buttonLike.enabled = !1,
            t ? mgrOfflinePvp.like(e.uid) : mgrOfflinePvp.noLike(e.uid);
            let s = ()=>{
                CustomTween.to(this.spriteNameBg, {
                    scaleX: 0,
                    scaleY: 0
                }, 300).start(1),
                this.curRoleAvatar.playAnimation(ANIMATION_ID.STAGE.flying),
                this.curRoleAvatar.playWingAnimation(ANIMATION_ID.wing_fly);
                let e = 1;
                t && (e = -1),
                CustomTween.actionFloat(this.curRoleAvatar, 0, -60 * e, 300, e=>{
                    this.curRoleAvatar.transform.rotationEuler = new Laya.Vector3(0,e,0)
                }
                ).callback(()=>{
                    let t = this.curRoleAvatar;
                    this.curRoleAvatar = this.oldRoleAvatar,
                    this.oldRoleAvatar = t,
                    CustomTween.actionFloat(this.curRoleAvatar, 0, -1.55 * e, 2001, e=>{
                        this.oldRoleAvatar.transform.position = new Laya.Vector3(e)
                    }
                    ).start(1),
                    Timer.callLater(1, ()=>{
                        this.randomOnePlayer()
                    }
                    , this)
                }
                ).start(1)
            }
            ;
            CustomTween.to(this.buttonUnLike.__node, {
                scaleX: 0
            }, 300).start(1),
            CustomTween.to(this.buttonLike.__node, {
                scaleX: 0
            }, 300).callback(()=>{
                if (t) {
                    mgrSound.play(238),
                    this.playerInfo = mgrOfflinePvp.getPvpDataByUid(this.playerInfo.uid);
                    let e = Math.random() > .5 ? ANIMATION_ID.PVP.LIKE1 : ANIMATION_ID.PVP.LIKE2
                      , t = Math.random() > .5 ? ANIMATION_ID.face.kaixin01 : ANIMATION_ID.face.kaixin02;
                    this.curRoleAvatar.playFaceAnimation(t),
                    this.curRoleAvatar.playAnimation(e, .1, ()=>{
                        Timer.callLater(.3, ()=>{
                            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_zhoubisai_win, this.spriteEffect1, 3)
                        }
                        , this)
                    }
                    , ()=>{
                        s()
                    }
                    ),
                    CustomTween.actionFloat(this.labelScore, 0, this.playerInfo.score, 200, e=>{
                        this.labelScore.text = `${this.multilingualText1}${Math.ceil(e)}`
                    }
                    ).start(1)
                } else {
                    mgrSound.play(239),
                    this.playerInfo = mgrOfflinePvp.getPvpDataByUid(this.playerInfo.uid);
                    let e = Math.random() > .5 ? ANIMATION_ID.PVP.UNLIKE1 : ANIMATION_ID.PVP.UNLIKE2;
                    this.curRoleAvatar.playFaceAnimation(ANIMATION_ID.face.weiqu01),
                    this.curRoleAvatar.playAnimation(e, .1, null, ()=>{
                        s()
                    }
                    )
                }
            }
            ).start(1)
        }
        onTouchButtonReward() {
            let[e,t] = mgrOfflinePvp.getRewardCount();
            e < t ? mgrTip.showMsgTip(`${this.multilingualText4}`) : this.canOpenReward && (this.canOpenReward = !1,
            mgrPlayer.addItemAmount(Const.ITEM_ID_DIAMONDS, 30, "点赞奖励"),
            mgrTip.addGotItemTip(Const.ITEM_ID_DIAMONDS, 30),
            mgrOfflinePvp.resetRewardCount(),
            this.refresh(),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vPvpScene.clickButtonReward"
            }))
        }
        onTouchButtonRank() {
            mgrGuide.isGuiding() || mgrDirector.open2DScene("vRankScene", {
                tag: ERankSceneTag.pvp,
                backSceneName: "vPvpScene"
            })
        }
        onTouchButtonJoin() {
            mgrGuide.isGuiding() || mgrDirector.warpSceneWidthEffect("vRoomScene", {
                bJoin: !0
            })
        }
        onTouchSpriteBg(e) {
            if (e.isBegin && (this.bTouchBg = !0,
            this.lastTouchBgPos = e.pos),
            (e.isCancel || e.isEnd) && (this.bTouchBg = !1),
            this.bTouchBg) {
                let t = e.pos.x - this.lastTouchBgPos.x;
                this.lastTouchBgPos = e.pos,
                this.curRoleAvatar && this.curRoleAvatar.transform.rotate(new Laya.Vector3(0,t,0), !0, !1)
            }
        }
        onMsgPvpBackButtonHide() {
            this.buttonBack.__node.visible = !1
        }
        onMsgPvpBackButtonShow() {
            this.buttonBack.__node.visible = !0,
            Timer.callLoop(.016, e=>{
                0 == DialogBase.ShowingDialog.length && (e.stop(),
                mgrGuide.registerGuideNode("vPvpScene.buttonBack", this.buttonBack.__node))
            }
            , this)
        }
    }
    !function(e) {
        e[e.idle = 1] = "idle",
        e[e.resting = 2] = "resting",
        e[e.hungry = 3] = "hungry",
        e[e.tired = 4] = "tired",
        e[e.listen = 5] = "listen",
        e[e.speeking = 6] = "speeking",
        e[e.interacting = 7] = "interacting",
        e[e.turnOnLight = 8] = "turnOnLight",
        e[e.turnOffLight = 9] = "turnOffLight",
        e[e.wanna_motion = 10] = "wanna_motion",
        e[e.wanna_learn = 11] = "wanna_learn"
    }(REST_ROLE_STATE || (REST_ROLE_STATE = {}));
    const TIP_CION$3 = {
        learn: ["res/ui/common/tipIcon5.png"],
        motion: ["res/ui/common/tipIcon3.png", "res/ui/common/tipIcon4.png"],
        rest: ["res/ui/common/tipIcon2.png"],
        eat: ["res/ui/common/tipIcon1.png"]
    }
      , MASK_NIGHT_ALPHA$1 = 0
      , AD_EVENT_ID_ENERGY_POTION$1 = "free_energy_potion";
    class vRestScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vRestScene",
            this.exportNodeNames = ["CC_spriteBg", "CC_spriteBgBlack", "CC_spriteMask", "CC_buttonLevel", "CC_progressBarLevel", "CC_labelLevel", "CC_buttonBack", "CC_boxButtons", "CC_buttonTurnOnTheLight", "CC_buttonTurnOffTheLight", "CC_buttonEnergyPotion", "CC_spriteEnergyWatchAd", "CC_spriteEnergyAmount", "CC_labelCount", "CC_imagePaopao1", "CC_imagePaopao2", "CC_imagePaopao3", "CC_buttonTipIcon", "CC_spriteRecordTip", "CC_progressBarRecord", "CC_spriteEffect1", "CC_buttonRecord", "CC_buttonFreeWear", "CC_spriteFreeWear", "CC_buttonGameCenter", "CC_boxGameCenterReadPoint"],
            this.lastIndex = -1
        }
        onOpened() {
            if (super.onOpened(),
            this.multilingualText1 = `${mgrI18n.getText("vRestScene.1")}`,
            this.buttonTurnOffTheLight.fOnClick = this.onTouchButtonTurnOffTheLight.bind(this),
            this.buttonTurnOnTheLight.fOnClick = this.onTouchButtonTurnOnTheLight.bind(this),
            this.buttonBack.fOnClick = (()=>{
                this.sendMsg("MSG_GUIDE_EVENT", {
                    id: "vRestScene.clickButtonBack"
                }),
                mgrDirector.warpSceneWidthEffect("vHubScene")
            }
            ),
            this.buttonEnergyPotion.fOnClick = this.onTouchButtonEnergyPotion.bind(this),
            this.buttonLevel.fOnClick = this.onTouchbuttonLevel.bind(this),
            this.buttonTipIcon.fOnClick = this.onTouchButtonTipIcon.bind(this),
            this.buttonRecord.onTouchBegin = this.onTouchButtonBegin.bind(this),
            this.buttonRecord.onTouchEnd = this.onTouchButtonEnd.bind(this),
            this.buttonRecord.onTouchCancle = this.onTouchButtonCancle.bind(this),
            this.buttonFreeWear.fOnClick = this.onTouchButtonFreeWear.bind(this),
            this.spriteRecordTip.scale(0, 0),
            this.buttonRecord.__node.scale(0, 0),
            this.progressBarRecord.style = ULPROGRESSBAR_STYLE.fan,
            this.buttonTurnOffTheLight.bTween = !1,
            this.buttonTurnOnTheLight.bTween = !1,
            this.buttonGameCenter.fOnClick = this.onTouchButtonGameCenter.bind(this),
            this.progressBarLevel.barName = this.progressBarLevel.owner.name,
            this.progressBarLevel.style = ULPROGRESSBAR_STYLE.ver,
            this.buttonRecord.bPlaySoundEffect = !1,
            window.conch || !SoundLibary.bCanRecord ? this.buttonRecord.__node.visible = !1 : this.buttonRecord.__node.visible = !0,
            this.init(),
            this.fillData(),
            mgrGuide.isAllGuideFinished() && 1 == mgrSdk.getCopNumberValueByKey("ui_layout_down_rest")) {
                if (Tools.random(1, 100) <= mgrSdk.getCopNumberValueByKey("ui_pop_dialog_ratio_rest") && mgrPlayer.isPopBannerTipDialogCding())
                    if (mgrInteraction.restState == E_REST_STATE.rest)
                        mgrDirector.openDialog("vRestWeakUpDialog");
                    else if (mgrInteraction.restState == E_REST_STATE.none) {
                        let e = mgrCfg.get_from_role_level_db(mgrInteraction.level)
                          , t = mgrInteraction.energy / e.restProgressValue
                          , a = mgrInteraction.eatFillValue / e.eatProgressValue;
                        mgrInteraction.motionProgress,
                        e.motionProgressValue,
                        mgrInteraction.learnProgress,
                        e.learnProgressValue;
                        t < .2 ? mgrDirector.openDialog("vTiredTipDialog") : a < .2 ? mgrDirector.openDialog("vHungryTipDialog") : mgrDirector.openDialog("vBoringTipDialog")
                    }
            }
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_kaideng_star, this.buttonTurnOffTheLight.__node),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_kaideng_star, this.buttonTurnOnTheLight.__node),
            this.registerListeners({
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this),
                MSG_REST_SCENE_HIDE_BACK: this.onMsgRestSceneHideBack.bind(this),
                MSG_REST_SCENE_SHOW_BACK: this.onMsgRestSceneShowBack.bind(this),
                MSG_WEAK_UP: this.onMsgWeakup.bind(this),
                MSG_I18N_REFRESH: ()=>{
                    this.multilingualText1 = `${mgrI18n.getText("vRestScene.1")}`
                }
            }),
            mgrTip.showJumpOtherGameDrag(this),
            mgrSdk.staticPointEvent(5039),
            mgrI18n.trySetI18nImage(this.spriteFreeWear, "btn_freeWear.png")
        }
        onMsgRestSceneHideBack() {
            this.buttonBack.__node.visible = !1,
            this.buttonEnergyPotion.__node.visible = !1,
            this.buttonRecord.__node.visible = !1
        }
        onMsgRestSceneShowBack() {
            this.buttonBack.__node.visible = !0
        }
        onMsgWeakup() {
            this.onTouchButtonTurnOnTheLight()
        }
        onClosed() {
            super.onClosed()
        }
        init() {
            this.imagePaopao1.scale(0, 0),
            this.imagePaopao2.scale(0, 0),
            this.imagePaopao3.scale(0, 0),
            Layout.widget(10, 10, this.buttonBack.__node),
            Layout.widget(10, -1, this.buttonLevel.__node),
            Layout.widget(mgrDirector.width - 5, -1, this.buttonGameCenter.__node, {
                x: 1,
                y: 1
            }),
            mgrTip.showBadgeWithNumber(this.boxGameCenterReadPoint, 1, new Laya.Point(15,15)),
            Tools.registerTouchHander(this.spriteBg, this.onTouchSpriteBg.bind(this)),
            this.buildScene(()=>{
                this.roleStManager = new FSMObject,
                this.roleStManager.registerState(REST_ROLE_STATE.idle, this.inIdle.bind(this), this.exeIdle.bind(this), this.outIdle.bind(this)),
                this.roleStManager.registerState(REST_ROLE_STATE.resting, this.inResting.bind(this), this.exeResting.bind(this), this.outResting.bind(this)),
                this.roleStManager.registerState(REST_ROLE_STATE.tired, this.inTired.bind(this), this.exeTired.bind(this), this.outTired.bind(this)),
                this.roleStManager.registerState(REST_ROLE_STATE.hungry, this.inHungry.bind(this), this.exeHungry.bind(this), this.outHungry.bind(this)),
                this.roleStManager.registerState(REST_ROLE_STATE.listen, this.inListen.bind(this), this.exeListen.bind(this), this.outListen.bind(this)),
                this.roleStManager.registerState(REST_ROLE_STATE.speeking, this.inSpeaking.bind(this), this.exeSpeaking.bind(this), this.outSpeaking.bind(this)),
                this.roleStManager.registerState(REST_ROLE_STATE.interacting, this.inInteracting.bind(this), this.exeInteracting.bind(this), this.outInteracting.bind(this)),
                this.roleStManager.registerState(REST_ROLE_STATE.turnOnLight, this.inTurnOnLight.bind(this), this.exeTurnOnLight.bind(this), this.outTurnOnLight.bind(this)),
                this.roleStManager.registerState(REST_ROLE_STATE.turnOffLight, this.inTurnOffLight.bind(this), this.exeTurnOffLight.bind(this), this.outTurnOffLight.bind(this)),
                this.roleStManager.registerState(REST_ROLE_STATE.wanna_motion, this.inWannaMotion.bind(this), this.exeWannaMotion.bind(this), this.outWannaMotion.bind(this)),
                this.roleStManager.registerState(REST_ROLE_STATE.wanna_learn, this.inWannaLearn.bind(this), this.exeWannaLearn.bind(this), this.outWannaLearn.bind(this)),
                mgrInteraction.restState == E_REST_STATE.rest ? (this.roleStManager.setNextState(REST_ROLE_STATE.resting),
                this.flowerCollider.active = !0) : mgrInteraction.restState == E_REST_STATE.none && (this.roleStManager.setNextState(REST_ROLE_STATE.idle),
                this.flowerCollider.active = !1),
                Timer.callLoop(.016, ()=>{
                    this.roleStManager.update()
                }
                , this),
                this.roleStManager.update(),
                !mgrGuide.isGuiding() && Tools.active3dObjectRayCheck(this.scene3DBack, this.cameraBack, this.onRaycastResult.bind(this))
            }
            ),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_zhujiemian_night, this.spriteEffect1, 0, .97, e=>{
                this.nightEffect = e,
                e.active = mgrInteraction.restState == E_REST_STATE.rest
            }
            ),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_zhujiemian_bgstar, this.spriteEffect1, 0, .97, e=>{
                this.dayEffect = e,
                e.active = mgrInteraction.restState == E_REST_STATE.none
            }
            ),
            this.scene3DFront.zOrder = -3,
            mgrInteraction.restState == E_REST_STATE.rest ? (this.spriteMask.alpha = MASK_NIGHT_ALPHA$1,
            this.spriteBgBlack.alpha = 1) : mgrInteraction.restState == E_REST_STATE.none && (this.spriteMask.alpha = 0,
            this.spriteBgBlack.alpha = 0),
            mgrGuide.registerGuideNode("vRestScene.buttonTurnOffLight", this.buttonTurnOffTheLight.__node),
            mgrGuide.registerGuideNode("vRestScene.turnOnButton", this.buttonTurnOnTheLight.__node),
            mgrGuide.registerGuideNode("vRestScene.buttonBack", this.buttonBack.__node)
        }
        startListen() {
            SoundLibary.recoderVaildVoice(1.5, ()=>{}
            , ()=>{
                this.roleStManager && this.roleStManager.setNextState(HUB_ROLE_STATE.speeking)
            }
            , ()=>{
                this.roleStManager && this.roleStManager.setNextState(HUB_ROLE_STATE.idle),
                mgrSound.resumeSound("vHubScene_Record")
            }
            ),
            mgrSound.pauseSound("vHubScene_Record")
        }
        stopListen() {
            try {
                SoundLibary.stopRecord()
            } catch (e) {
                console.log(e)
            }
        }
        buildScene(e) {
            this.spriteBg.zOrder = -4,
            this.topBar = new vTopBar({}),
            this.addChild(this.topBar),
            Layout.widget(.5, 45, this.topBar, {
                x: .5,
                y: 0
            }),
            Layout.widget(mgrDirector.width - 10, mgrDirector.height - 400, this.boxButtons, {
                x: 1,
                y: 1
            }),
            Layout.widget(mgrDirector.width - 10, mgrDirector.height - 600, this.buttonFreeWear.__node, {
                x: 1,
                y: 1
            });
            let t = new vInteractionMainNode({
                sceneName: "vRestScene"
            });
            this.addChild(t),
            1 == mgrSdk.getCopNumberValueByKey("ui_layout_down_rest") ? Layout.widget(.5, mgrDirector.height, t, {
                x: .5,
                y: 1
            }) : Layout.widget(.5, mgrDirector.height - 200, t, {
                x: .5,
                y: 1
            }),
            t.context.fOnLoadingFinished = (()=>{
                console.log("bar加载完毕!"),
                this.tryGuide()
            }
            ),
            this.bottomBar = t;
            let a = new TaskManager
              , i = [];
            this.avatar = new RoleAvatar,
            this.add3DEffectAtBack(this.avatar, 0),
            this.avatar.fillByPartIds(mgrPart.getLastClothes()),
            this.avatar.transform.scale = new Laya.Vector3,
            i.push(e=>{
                this.avatar.registerLoadEndCallback(e)
            }
            );
            i.push(e=>{
                mgrLoader.loadModeWithModeId("item_huabao", ()=>{
                    e()
                }
                , this, 1)
            }
            );
            i.push(e=>{
                mgrLoader.loadModeWithModeId("e_sj", ()=>{
                    let t = mgrLoader.Pool.getModel("e_sj");
                    this.add3DEffectAtBack(t, 0),
                    t.transform.position = new Laya.Vector3(0,1.1,0),
                    t.transform.scale = new Laya.Vector3(1,1,1),
                    t.transform.rotationEuler = new Laya.Vector3(0,90,0),
                    this.zzzModel = t,
                    e()
                }
                , this, 1)
            }
            ),
            a.push(i),
            a.start(()=>{
                this.flower = mgrLoader.Pool.getModel("item_huabao"),
                this.flowerAnimator = this.flower.getComponent(Laya.Animator),
                this.flowerCollider = this.flower.getChildByName("flower");
                let[t] = mgrMaterial.setCartonShader(this.flower, "item_huabao");
                mgrInteraction.restState == E_REST_STATE.rest ? t.albedoColor = new Laya.Vector4(190 / 255,212 / 255,246 / 255,1) : t.albedoColor = new Laya.Vector4(1,1,1,1),
                this.flowerMaterial = t,
                this.add3DEffectAtBack(this.flower, 0),
                this.flower.transform.scale = new Laya.Vector3(1,1,1),
                this.avatar.transform.position = new Laya.Vector3(0,.25,0),
                this.avatar.transform.scale = new Laya.Vector3(.65,.65,.65),
                e()
            }
            , this)
        }
        fillData() {
            this.labelLevel.text = `${mgrInteraction.level}`,
            this.progressBarLevel.progress = mgrInteraction.levelProgress,
            mgrInteraction.restState == E_REST_STATE.rest ? (this.buttonTurnOnTheLight.__node.scale(1, 1),
            this.buttonTurnOffTheLight.__node.scale(0, 0),
            this.cameraBack.fieldOfView = 30,
            this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,1.2,5.2),
            this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-6),
            this.cameraBack.transform.position = new Laya.Vector3(0,1.2,5.2),
            this.cameraBack.transform.rotationEuler = new Laya.Vector3(-6),
            this.cameraBack.getComponent(CameraFollow).lerpValue = .025,
            CustomTween.to(this.buttonRecord.__node, {
                scaleX: 0,
                scaleY: 0
            }, 300).start(1),
            this.flowerCollider && (this.flowerCollider.active = !0),
            mgrSound.play(7)) : (this.buttonTurnOnTheLight.__node.scale(0, 0),
            this.buttonTurnOffTheLight.__node.scale(1, 1),
            this.buttonRecord.__node.scale(0, 0),
            CustomTween.delayTime(this.buttonRecord.__node, 500).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.cameraBack.fieldOfView = 30,
            this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,.95,3.25),
            this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-6),
            this.cameraBack.transform.position = new Laya.Vector3(0,.95,3.25),
            this.cameraBack.transform.rotationEuler = new Laya.Vector3(-6),
            this.cameraBack.getComponent(CameraFollow).lerpValue = .025,
            this.flowerCollider && (this.flowerCollider.active = !1),
            mgrSound.play(1));
            let e = mgrPlayer.getItemAmount(Const.ITEM_ID_INTERACTION_ENERGY);
            if (e > 0)
                this.spriteEnergyWatchAd.visible = !1,
                this.spriteEnergyAmount.visible = !0,
                this.labelCount.text = `${e}`,
                this.buttonEnergyPotion.__node.visible = !0;
            else {
                this.spriteEnergyAmount.visible = !1;
                let e = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID_ENERGY_POTION$1);
                this.spriteEnergyWatchAd.visible = e,
                this.buttonEnergyPotion.__node.visible = e
            }
        }
        tryGuide() {
            console.log("检查是否可以引导!!"),
            mgrInteraction.bRested ? (this.bottomBar.showEatingButton(),
            this.bottomBar.showPlayButton(),
            this.bottomBar.showSleepButton(),
            this.bottomBar.showStudyButton()) : (this.bottomBar.showEatingButton(),
            this.bottomBar.showPlayButton(),
            this.bottomBar.showSleepButton(),
            this.bottomBar.showStudyButton(),
            this.bottomBar.unactiveStudyButton(),
            this.bottomBar.unactiveEatingButton(),
            this.bottomBar.unactivePlayButton())
        }
        onRaycastResult(e) {
            if (DialogBase.ShowingDialog.length > 0)
                return;
            if (this.roleStManager.getCurState() == REST_ROLE_STATE.listen || this.roleStManager.getCurState() == REST_ROLE_STATE.speeking)
                return;
            if (!e.succeeded)
                return;
            if (this.roleStManager.getCurState() == REST_ROLE_STATE.resting || this.roleStManager.getCurState() == REST_ROLE_STATE.turnOffLight || this.roleStManager.getCurState() == REST_ROLE_STATE.turnOnLight)
                return void mgrDirector.openDialog("vResttingTipDialog");
            let t;
            if ("Click_head" == e.collider.owner.name ? t = 1 : "Click_body" == e.collider.owner.name ? t = 2 : "Click_foot" == e.collider.owner.name && (t = 3),
            !t)
                return;
            let a = mgrCfg.get_from_click_feedback_db(t);
            if (-1 == this.lastIndex)
                this.lastIndex = 0;
            else
                for (; ; ) {
                    let e = Tools.random(a.length) - 1;
                    if (e != this.lastIndex) {
                        this.lastIndex = e;
                        break
                    }
                }
            this.sendMsg("MSG_CLICK_ROLE", {
                pos: t
            });
            let i = a[this.lastIndex];
            mgrSound.play(i.soundId),
            this.avatar.playFaceAnimation(i.faceAnimaitonIds[Tools.random(0, i.faceAnimaitonIds.length - 1)]),
            this.avatar.playAnimation(i.animationId, .1, null, ()=>{
                this.roleStManager && this.roleStManager.setNextState(REST_ROLE_STATE.idle)
            }
            )
        }
        inIdle() {
            this.avatar.playAnimation("idle-idle"),
            mgrMaterial.playAnimation(this.flowerAnimator, ANIMATION_ID.hua.openIdle, 0);
            let e = mgrCfg.get_from_role_level_db(mgrInteraction.level);
            this.avatar.wingScale = e.wingScale,
            this.avatar.wingOffset = e.wingOffset,
            this.avatar.transform.scale = new Laya.Vector3(.65,.65,.65),
            this.zzzModel.active = !1,
            this.spriteMask.alpha = 0;
            let t = ()=>{
                Timer.callLater(3, ()=>{
                    if (this.roleStManager.getCurState() != REST_ROLE_STATE.idle)
                        return;
                    let e = mgrCfg.get_from_role_level_db(mgrInteraction.level);
                    mgrInteraction.energy / e.restProgressValue < .1 ? this.roleStManager.setNextState(REST_ROLE_STATE.tired) : mgrInteraction.eatFillValue / e.eatProgressValue < .1 ? this.roleStManager.setNextState(REST_ROLE_STATE.hungry) : mgrInteraction.motionProgress / e.motionProgressValue < .1 ? this.roleStManager.setNextState(REST_ROLE_STATE.wanna_motion) : mgrInteraction.learnProgress / e.learnProgressValue < .1 ? this.roleStManager.setNextState(REST_ROLE_STATE.wanna_learn) : t()
                }
                , this)
            }
            ;
            t()
        }
        exeIdle() {}
        outIdle() {}
        inResting() {
            this.avatar.playAnimation("shuijiao02-shuijiao02_idle"),
            mgrMaterial.playAnimation(this.flowerAnimator, ANIMATION_ID.hua.closeIdle, 0),
            this.avatar.transform.scale = new Laya.Vector3(.325,.325,.325),
            this.zzzModel.active = !0,
            this.spriteMask.alpha = MASK_NIGHT_ALPHA$1;
            let e = mgrCfg.get_from_role_level_db(mgrInteraction.level);
            this.avatar.wingScale = .65 * e.wingScale,
            this.avatar.wingOffset = e.wingOffset / .65;
            let t = e=>{
                this.roleStManager.getCurState() == REST_ROLE_STATE.resting ? mgrSound.play(237) : e.stop()
            }
            ;
            t(null),
            Timer.callLoop(6, t, this)
        }
        exeResting() {}
        outResting() {}
        inTired() {
            mgrSound.play(236),
            this.avatar.playFaceAnimation(ANIMATION_ID.face.haqian),
            this.playPaopaoTip(),
            this.avatar.playAnimation(ANIMATION_ID.tired01, .1, null, ()=>{
                this.roleStManager && this.roleStManager.setNextState(REST_ROLE_STATE.idle)
            }
            )
        }
        exeTired() {}
        outTired() {}
        inHungry() {
            mgrSound.play(233),
            this.avatar.playAnimation(ANIMATION_ID.hungry01),
            this.avatar.playFaceAnimation(ANIMATION_ID.face.ele01),
            this.playPaopaoTip(),
            Timer.callLater(3, ()=>{
                this.roleStManager.getCurState() == REST_ROLE_STATE.hungry && this.roleStManager.setNextState(REST_ROLE_STATE.idle)
            }
            , this)
        }
        exeHungry() {}
        outHungry() {}
        inListen() {
            let e = ["lingting01-lingting01", "lingting02-lingting02"];
            this.avatar.playAnimation(e[Tools.random(e.length) - 1], .05)
        }
        exeListen() {}
        outListen() {}
        inSpeaking() {
            let e = ["shuohua01-shuohua01", "shuohua02-shuohua02", "shuohua03-shuohua03"];
            this.avatar.playAnimation(e[Tools.random(e.length) - 1], .25),
            this.avatar.playFaceAnimation(ANIMATION_ID.face.shuohua)
        }
        exeSpeaking() {}
        outSpeaking() {}
        inInteracting() {}
        exeInteracting() {}
        outInteracting() {}
        inTurnOnLight() {}
        exeTurnOnLight() {}
        outTurnOnLight() {}
        inTurnOffLight() {}
        exeTurnOffLight() {}
        outTurnOffLight() {}
        inWannaMotion() {
            this.avatar.playFaceAnimation(ANIMATION_ID.face.kaixin01),
            this.avatar.playAnimation(ANIMATION_ID.motion.idle),
            this.playPaopaoTip(),
            Timer.callLater(3, ()=>{
                this.roleStManager.getCurState() == REST_ROLE_STATE.wanna_motion && this.roleStManager.setNextState(REST_ROLE_STATE.idle)
            }
            , this)
        }
        exeWannaMotion() {}
        outWannaMotion() {}
        inWannaLearn() {
            this.avatar.playFaceAnimation(ANIMATION_ID.face.kaixin01),
            this.avatar.playAnimation(ANIMATION_ID.idle),
            this.playPaopaoTip(),
            Timer.callLater(3, ()=>{
                this.roleStManager.getCurState() == REST_ROLE_STATE.wanna_learn && this.roleStManager.setNextState(REST_ROLE_STATE.idle)
            }
            , this)
        }
        exeWannaLearn() {}
        outWannaLearn() {}
        playPaopaoTip() {
            let e = ""
              , t = this.roleStManager.getCurState();
            t == REST_ROLE_STATE.hungry ? e = TIP_CION$3.eat[Tools.random(TIP_CION$3.eat.length) - 1] : t == REST_ROLE_STATE.tired ? e = TIP_CION$3.rest[Tools.random(TIP_CION$3.rest.length) - 1] : t == REST_ROLE_STATE.wanna_learn ? e = TIP_CION$3.learn[Tools.random(TIP_CION$3.learn.length) - 1] : t == REST_ROLE_STATE.wanna_motion && (e = TIP_CION$3.motion[Tools.random(TIP_CION$3.motion.length) - 1]),
            Tools.loadImg(this.buttonTipIcon.__node, e),
            this.imagePaopao1.scale(0, 0),
            this.imagePaopao2.scale(0, 0),
            this.imagePaopao3.scale(0, 0),
            CustomTween.to(this.imagePaopao1, {
                scaleX: 1,
                scaleY: 1
            }, 500).callback(()=>{
                CustomTween.to(this.imagePaopao2, {
                    scaleX: 1,
                    scaleY: 1
                }, 500).callback(()=>{
                    CustomTween.to(this.imagePaopao3, {
                        scaleX: 1,
                        scaleY: 1
                    }, 500, Laya.Ease.backOut).delayTime(3e3).callback(()=>{
                        CustomTween.to(this.imagePaopao3, {
                            scaleX: 0,
                            scaleY: 0
                        }, 250).start(1),
                        CustomTween.delayTime(this.imagePaopao2, 250).to({
                            scaleX: 0,
                            scaleY: 0
                        }, 250).start(1),
                        CustomTween.delayTime(this.imagePaopao1, 500).to({
                            scaleX: 0,
                            scaleY: 0
                        }, 250).start(1)
                    }
                    ).start(1)
                }
                ).start(1)
            }
            ).start(1)
        }
        onTouchButtonTipIcon() {
            let e = this.roleStManager.getCurState();
            e == REST_ROLE_STATE.hungry ? mgrDirector.warpSceneWidthEffect("vEatingScene") : e == REST_ROLE_STATE.tired || (e == REST_ROLE_STATE.wanna_learn ? mgrDirector.warpSceneWidthEffect("vAnswerQuestionScene") : e == REST_ROLE_STATE.wanna_motion && mgrDirector.warpSceneWidthEffect("vMotionMainScene"))
        }
        onTouchButtonTurnOffTheLight() {
            mgrSound.play(7),
            mgrGuide.isGuiding(),
            CustomTween.to(this.buttonRecord.__node, {
                alpha: 0
            }, 300).start(1),
            this.roleStManager && this.roleStManager.setNextState(REST_ROLE_STATE.turnOffLight),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vRestScene.clickButtonTurnOffLight"
            }),
            CustomTween.to(this.buttonTurnOffTheLight.__node, {
                scaleX: 0,
                scaleY: 0
            }, 300).start(1),
            CustomTween.to(this.buttonTurnOffTheLight.__node, {
                scaleX: 0,
                scaleY: 0
            }, 0).start(1),
            mgrSdk.staticPointEvent(5040),
            mgrInteraction.restState = E_REST_STATE.rest,
            this.avatar.playFaceAnimation(ANIMATION_ID.face.shuijiao, 0, null, ()=>{
                this.avatar.playFaceAnimation(ANIMATION_ID.face.shuijiao_idle)
            }
            ),
            this.avatar.playAnimation("shuijiao02-shuijiao02", .1, ()=>{
                let e = mgrCfg.get_from_role_level_db(mgrInteraction.level);
                CustomTween.actionFloat(this.avatar, 1, .65, 3e3, t=>{
                    this.avatar.wingScale = t * e.wingScale,
                    this.avatar.wingOffset = e.wingOffset / t
                }
                ).start(1),
                Timer.callLater(1.5, ()=>{
                    this.cameraBack.fieldOfView = 30,
                    this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,1.2,5.2),
                    this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-6),
                    this.cameraBack.getComponent(CameraFollow).lerpValue = .025,
                    CustomTween.actionFloat(this.avatar, .65, .325, 3e3, e=>{
                        this.avatar.transform.scale = new Laya.Vector3(e,e,e)
                    }
                    ).start(1),
                    CustomTween.to(this.spriteBgBlack, {
                        alpha: 1
                    }, 800).start(1),
                    CustomTween.to(this.spriteMask, {
                        alpha: MASK_NIGHT_ALPHA$1
                    }, 800).start(1),
                    CustomTween.actionFloat(this.flower, 0, 1, 800, e=>{
                        this.flowerMaterial.albedoColor = new Laya.Vector4((190 * e + 255 * (1 - e)) / 255,(212 * e + 255 * (1 - e)) / 255,(246 * e + 255 * (1 - e)) / 255,1)
                    }
                    ).start(1),
                    mgrMaterial.playAnimation(this.flowerAnimator, ANIMATION_ID.hua.close, .1, ()=>{}
                    , ()=>{
                        this && (this.destroyed || (mgrMaterial.playAnimation(this.flowerAnimator, ANIMATION_ID.hua.closeIdle, .1),
                        this.roleStManager && this.roleStManager.setNextState(REST_ROLE_STATE.resting),
                        this.fillData(),
                        this.dayEffect.active = !1,
                        this.nightEffect.active = !0,
                        this.sendMsg("MSG_GUIDE_EVENT", {
                            id: "vRestScene.turnOffActionFinished"
                        }),
                        mgrInteraction.bRested || (mgrInteraction.bRested = !0,
                        mgrDirector.openDialog("vRoleLevelUpDialog"))))
                    }
                    )
                }
                , this)
            }
            , ()=>{
                this.avatar.playAnimation("shuijiao02-shuijiao02_idle"),
                this.zzzModel.active = !0
            }
            )
        }
        onTouchButtonTurnOnTheLight() {
            mgrSound.play(1),
            mgrInteraction.restState = E_REST_STATE.none,
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vRestScene.clickTurnOnButton"
            }),
            CustomTween.to(this.buttonTurnOffTheLight.__node, {
                scaleX: 0,
                scaleY: 0
            }, 0).start(1),
            CustomTween.to(this.buttonTurnOffTheLight.__node, {
                scaleX: 0,
                scaleY: 0
            }, 300).start(1),
            this.zzzModel.active = !1,
            this.roleStManager && this.roleStManager.setNextState(REST_ROLE_STATE.turnOnLight),
            CustomTween.to(this.buttonRecord.__node, {
                alpha: 1
            }, 300).start(1),
            CustomTween.actionFloat(this.flower, 1, 0, 800, e=>{
                this.flowerMaterial.albedoColor = new Laya.Vector4((190 * e + 255 * (1 - e)) / 255,(212 * e + 255 * (1 - e)) / 255,(246 * e + 255 * (1 - e)) / 255,1)
            }
            ).start(1),
            this.cameraBack.fieldOfView = 30,
            this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(0,.95,3.25),
            this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-6),
            this.cameraBack.getComponent(CameraFollow).lerpValue = .025,
            CustomTween.to(this.spriteBgBlack, {
                alpha: 0
            }, 500).start(1),
            CustomTween.to(this.spriteMask, {
                alpha: 0
            }, 500).start(1),
            mgrSdk.staticPointEvent(5041),
            this.avatar.playFaceAnimation(ANIMATION_ID.face.shuijiao_idle, 0),
            this.add3DEffectAtBack(MODEL_ID.effect.e_huabao_star, 5),
            mgrMaterial.playAnimation(this.flowerAnimator, ANIMATION_ID.hua.open, .1, ()=>{
                CustomTween.actionFloat(this.avatar, .325, .65, 1e3, e=>{
                    this.avatar.transform.scale = new Laya.Vector3(e,e,e)
                }
                ).callback(()=>{
                    let e = mgrCfg.get_from_role_level_db(mgrInteraction.level);
                    CustomTween.actionFloat(this.avatar, .65, 1, 2500, t=>{
                        this.avatar.wingScale = t * e.wingScale,
                        this.avatar.wingOffset = e.wingOffset / t
                    }
                    ).start(1)
                }
                ).start(1),
                Timer.callLater(1, ()=>{
                    this.avatar.playFaceAnimation(ANIMATION_ID.face.weakup),
                    this.avatar.playAnimation("shuijiao02-come01", .05),
                    Timer.callLater(2, ()=>{
                        mgrGuide.isGuiding()
                    }
                    , this)
                }
                , this)
            }
            , ()=>{
                this && (this.destroyed || (mgrMaterial.playAnimation(this.flowerAnimator, ANIMATION_ID.hua.openIdle, 0),
                this.sendMsg("MSG_GUIDE_EVENT", {
                    id: "vRestScene.turnOnActionFinished"
                }),
                this.fillData(),
                this.dayEffect.active = !0,
                this.nightEffect.active = !1,
                this.roleStManager && this.roleStManager.setNextState(REST_ROLE_STATE.idle)))
            }
            )
        }
        onTouchButtonEnergyPotion() {
            let e = mgrCfg.get_from_role_level_db(mgrInteraction.level);
            if (mgrInteraction.energy >= e.restProgressValue)
                mgrTip.showMsgTip(`${this.multilingualText1}`);
            else if (mgrPlayer.getItemAmount(Const.ITEM_ID_INTERACTION_ENERGY) > 0) {
                mgrPlayer.addItemAmount(Const.ITEM_ID_INTERACTION_ENERGY, -1, "使用体力药水"),
                mgrTip.addGotItemTip(Const.ITEM_ID_INTERACTION_ENERGY, -1);
                let e = mgrCfg.get_from_food_db(Const.ITEM_ID_INTERACTION_ENERGY)
                  , t = mgrCfg.get_from_role_level_db(mgrInteraction.level);
                mgrInteraction.energy += Math.floor(t.restProgressValue * e.addEnergy),
                this.avatar.playAnimation(ANIMATION_ID.STAGE.WIN1),
                this.avatar.playFaceAnimation(ANIMATION_ID.face.kaixin02),
                this.fillData()
            } else
                mgrAd.triggerAdEvent(AD_EVENT_ID_ENERGY_POTION$1, null, !0)
        }
        onTouchSpriteBg(e) {
            if (e.isBegin && (this.bTouchBg = !0,
            this.lastTouchBgPos = e.pos),
            (e.isCancel || e.isEnd) && (this.bTouchBg = !1),
            this.bTouchBg) {
                let t = e.pos.x - this.lastTouchBgPos.x;
                this.lastTouchBgPos = e.pos,
                this.avatar && this.avatar.transform.rotate(new Laya.Vector3(0,t,0), !0, !1)
            }
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID_ENERGY_POTION$1 && (mgrPlayer.addItemAmount(Const.ITEM_ID_INTERACTION_ENERGY, 1, "看广告获得"),
            mgrInteraction.eatFood(Const.ITEM_ID_INTERACTION_ENERGY),
            this.avatar.playAnimation(ANIMATION_ID.STAGE.WIN1),
            this.avatar.playFaceAnimation(ANIMATION_ID.face.kaixin02),
            this.fillData(),
            this.sendMsg("MSG_INTERACTION_REST_JUMP"))
        }
        onTouchbuttonLevel() {
            mgrGuide.isGuiding() || mgrDirector.openDialog("vSettingDialog")
        }
        onTouchButtonBegin() {
            this.spriteRecordTip.scale(1, 1),
            CustomTween.actionFloat(this.spriteRecordTip, 1, 0, 5e3, e=>{
                this.progressBarRecord.progress = e
            }
            ).callback(()=>{
                this.onTouchButtonEnd()
            }
            ).start(1),
            this.roleStManager && this.roleStManager.setNextState(HUB_ROLE_STATE.listen),
            this.startListen()
        }
        onTouchButtonEnd() {
            this.spriteRecordTip.scale(0, 0),
            this.stopListen()
        }
        onTouchButtonCancle() {
            this.spriteRecordTip.scale(0, 0),
            this.roleStManager && this.roleStManager.setNextState(HUB_ROLE_STATE.idle),
            SoundLibary.destroyAllPcmQueue(),
            this.stopListen(),
            mgrSound.resumeSound("vHubScene_Record")
        }
        onTouchButtonFreeWear() {
            !mgrGuide.isGuiding() && mgrDirector.warpSceneWidthEffect("vRoomScene", {
                backSceneName: "vRestScene"
            })
        }
        onTouchButtonGameCenter() {
            mgrGuide.isAllGuideFinished() && mgrDirector.warpSceneWidthEffect("vGameCenterScene")
        }
    }
    const AD_EVENT_ID_STAGE_TRY = "stage_try";
    class vRoomScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vRoomScene",
            this.exportNodeNames = ["CC_spriteBg", "CC_buttonBack", "CC_buttonShop", "CC_imageShop", "CC_spriteTitle", "CC_boxTitleTag", "CC_buttonReset", "CC_buttonSure", "CC_spritePart", "CC_boxPartList", "CC_buttonHavent", "CC_spriteProgressBg", "CC_progressBarScore", "CC_spriteScoreCursor", "CC_spriteScoreStandard", "CC_spriteFailed", "CC_spriteSuccessful", "CC_spriteScoreBg", "CC_labelScore", "CC_boxMenu", "CC_buttonTagHair", "CC_spriteNew1", "CC_buttonTagHeadWear", "CC_spriteNew2", "CC_buttonTagMakeup", "CC_spriteNew3", "CC_buttonTagCloth", "CC_spriteNew4", "CC_buttonTagSock", "CC_spriteNew5", "CC_buttonTagShoe", "CC_spriteNew6", "CC_buttonTagHandWear", "CC_spriteNew7", "CC_buttonTagWing", "CC_spriteNew8", "CC_spriteTargetScoreBg", "CC_progressBarTargeScore", "CC_spriteTargetScoreEffect", "CC_spriteTarget", "CC_labelTageScore", "CC_labelTM1", "CC_labelTM2", "CC_labelTM3", "CC_labelTM4", "CC_labelTM5", "CC_labelTM6", "CC_boxLike", "CC_spriteLike", "CC_labelLikeCount"],
            this.avatar = null,
            this.reuseList = null,
            this.cameraParam = {
                [-2]: {
                    pos: new Laya.Vector3(0,.789,2.53),
                    rot: new Laya.Vector3(-1,0,0)
                },
                [-1]: {
                    pos: new Laya.Vector3(0,.789,2.229),
                    rot: new Laya.Vector3(-1,0,0)
                },
                [PartType.hair]: {
                    pos: new Laya.Vector3(.15,.839,1.894),
                    rot: new Laya.Vector3(1,0,0)
                },
                [PartType.headDec]: {
                    pos: new Laya.Vector3(.15,.889,1.89),
                    rot: new Laya.Vector3(1,0,0)
                },
                [PartType.face]: {
                    pos: new Laya.Vector3(.1,.839,1.444),
                    rot: new Laya.Vector3(3,0,0)
                },
                [PartType.cloth]: {
                    pos: new Laya.Vector3(.15,.8389,2.12),
                    rot: new Laya.Vector3(-3,0,0)
                },
                [PartType.sock]: {
                    pos: new Laya.Vector3(.1,.6827,1.729),
                    rot: new Laya.Vector3(-6,0,0)
                },
                [PartType.shoe]: {
                    pos: new Laya.Vector3(.05,.582,1.379),
                    rot: new Laya.Vector3(-9,0,0)
                },
                [PartType.handDec]: {
                    pos: new Laya.Vector3(.15,.839,1.83),
                    rot: new Laya.Vector3(-6,0,0)
                },
                [PartType.wing]: {
                    pos: new Laya.Vector3(.15,1.035,2.669),
                    rot: new Laya.Vector3(-3,0,0)
                }
            },
            this.tryPartIds = []
        }
        onOpened() {
            super.onOpened(),
            this.startTime = Tools.time(),
            this.buttonBack.fOnClick = this.onTouchButtonBack.bind(this),
            this.buttonTagHair.fOnClick = this.onTouchButtonTagHair.bind(this),
            this.buttonTagHeadWear.fOnClick = this.onTouchButtonTagHeadWear.bind(this),
            this.buttonTagMakeup.fOnClick = this.onTouchButtonTagMakeup.bind(this),
            this.buttonTagCloth.fOnClick = this.onTouchButtonTagCloth.bind(this),
            this.buttonTagWing.fOnClick = this.onTouchButtonTagWibuttonTagWing.bind(this),
            this.buttonTagHandWear.fOnClick = this.onTouchButtonTagHandWear.bind(this),
            this.buttonTagSock.fOnClick = this.onTouchButtonTagSock.bind(this),
            this.buttonTagShoe.fOnClick = this.onTouchButtonTagShoe.bind(this),
            this.buttonTagHair.__partType = PartType.hair,
            this.buttonTagMakeup.__partType = PartType.face,
            this.buttonTagHeadWear.__partType = PartType.headDec,
            this.buttonTagCloth.__partType = PartType.cloth,
            this.buttonTagWing.__partType = PartType.wing,
            this.buttonTagHandWear.__partType = PartType.handDec,
            this.buttonTagSock.__partType = PartType.sock,
            this.buttonTagShoe.__partType = PartType.shoe,
            this.buttonReset.fOnClick = (()=>{
                this.avatar.clear(),
                mgrPart.setLastClothes(this.avatar.getPartIds())
            }
            ),
            this.buttonSure.fOnClick = this.onTouchButtonSure.bind(this),
            this.buttonShop.fOnClick = (()=>{
                mgrDirector.openDialog("vShopDialog")
            }
            ),
            Tools.registerTouchHander(this.spriteBg, this.onTouchSpriteBg.bind(this)),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_guanka_glow, this.buttonSure.__node),
            this.buttonHavent.fOnClick = (()=>{
                mgrDirector.open2DScene("vGardenMainScene")
            }
            ),
            mgrLoader.loadFont("smallGameSettlement", this.labelTageScore),
            this.labelTageScore.scale(.8, .8),
            this.progressBarTargeScore.style = ULPROGRESSBAR_STYLE.ver,
            this.fadeIn(),
            this.buildUi(),
            this.fillData(),
            mgrGuide.registerGuideNode("vRoomScene.buttonHairType", this.buttonTagHair.__node),
            mgrGuide.registerGuideNode("vRoomScene.buttonHeadwearType", this.buttonTagHeadWear.__node),
            mgrGuide.registerGuideNode("vRoomScene.buttonClothType", this.buttonTagCloth.__node),
            mgrGuide.registerGuideNode("vRoomScene.buttonDressType", this.buttonTagWing.__node),
            mgrGuide.registerGuideNode("vRoomScene.buttonSockType", this.buttonTagSock.__node),
            mgrGuide.registerGuideNode("vRoomScene.buttonSummit", this.buttonSure.__node),
            mgrGuide.registerGuideNode("vRoomScene.buttonBack", this.buttonBack.__node),
            this.context.stageId ? (999 == mgrStage.calcChapterIdByStageId(this.context.stageId) && Timer.callLater(.1, ()=>{
                this.sendMsg("MSG_GUIDE_EVENT", {
                    id: "vArenaScene.clickChallenge"
                })
            }
            , this),
            mgrChannel.canUseVideoRecord() && mgrSdk.recordGameVideo("start")) : this.context.stageId || this.context.bJoin || mgrSdk.staticPointEvent(7010),
            this.context.bJoin && (mgrPlayer.bRenamePlayerName || mgrDirector.openDialog("vIntitleDialog")),
            this.registerListeners({
                MSG_AD_ROOM_TRY_SUCCESSED: this.onMsgAdRoomTrySuccessed.bind(this),
                MSG_AD_FAILED_TRY_SUCCESSED: this.onMsgAdFailedTrySuccessed.bind(this),
                MSG_CLOASE_FAILED_TRY_DIALOG: this.onMsgCloseFailedTryDialog.bind(this),
                MSG_SHOP_BUY_SUCCESSED: this.onMsgShopBuySuccessed.bind(this),
                MSG_AD_EVENT_SUCCESSD: this.onMsgAdEventSuccessed.bind(this)
            });
            for (let e = 0; e < 8; e++)
                mgrI18n.trySetI18nImage(this[`spriteNew ${e + 1}`], "art89.png");
            mgrI18n.trySetI18nImage(this.spriteFailed, "art19.png"),
            mgrI18n.trySetI18nImage(this.spriteSuccessful, "art22.png")
        }
        onClosed() {
            this.avatar.destroy(),
            super.onClosed()
        }
        getPreLoadModelIds() {
            return [MODEL_ID.map_room]
        }
        onTouchButtonBack() {
            if (this.context.bJoin)
                mgrDirector.warpSceneWidthEffect("vPvpScene");
            else if (this.context.stageId)
                mgrDirector.open2DScene("vHubScene"),
                mgrSdk.statisOnStageEnd(this.context.stageId, 0, "退出", 100),
                mgrChannel.canUseVideoRecord() && mgrSdk.recordGameVideo("stop");
            else {
                let e = this.context.backSceneName || "vHubScene";
                mgrDirector.warpSceneWidthEffect(e, this.context.backSceneContext)
            }
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vRoomScene.clickButtonBack"
            })
        }
        onTouchButtonTagHair() {
            this.onSelectType(PartType.hair),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vRoomScene.clickHairType"
            })
        }
        onTouchButtonTagHeadWear() {
            this.onSelectType(PartType.headDec),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vRoomScene.clickHeadwearType"
            })
        }
        onTouchButtonTagMakeup() {
            this.onSelectType(PartType.face)
        }
        onTouchButtonTagCloth() {
            this.onSelectType(PartType.cloth),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vRoomScene.clickClothType"
            })
        }
        onTouchButtonTagWibuttonTagWing() {
            this.onSelectType(PartType.wing),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vRoomScene.clickDressType"
            })
        }
        onTouchButtonTagHandWear() {
            this.onSelectType(PartType.handDec)
        }
        onTouchButtonTagSock() {
            this.onSelectType(PartType.sock),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vRoomScene.clickSockType"
            })
        }
        onTouchButtonTagShoe() {
            this.onSelectType(PartType.shoe)
        }
        onTouchButtonSure() {
            if (this.context.stageId) {
                mgrPart.setLastClothes(this.avatar.getPartIds());
                let e = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID.VIDEO.stage_ad_settlement);
                if (mgrGuide.isGuiding() || !e)
                    this.playSettlementAnimation();
                else {
                    let e = ()=>{
                        this.playSettlementAnimationNormal()
                    }
                      , t = ()=>{
                        this.playSettlementAnimation()
                    }
                    ;
                    mgrDirector.openDialog("vStageBianshenAdDialog", {
                        settlementNormal: e,
                        settlementAd: t
                    }, !0)
                }
            } else {
                mgrPart.setLastClothes(this.avatar.getPartIds()),
                CustomTween.to(this.buttonBack.__node, {
                    x: this.buttonBack.__node.x - 200
                }, 300).start(1),
                CustomTween.to(this.buttonReset.__node, {
                    x: this.buttonReset.__node.x - 200
                }, 300).start(1),
                CustomTween.to(this.buttonSure.__node, {
                    x: this.buttonSure.__node.x - 200
                }, 300).start(1),
                CustomTween.to(this.boxMenu, {
                    x: this.boxMenu.x + 500
                }, 300).start(1),
                CustomTween.to(this.spritePart, {
                    x: this.spritePart._orgPosX + 300
                }, 300).start(1);
                let e = this.cameraParam[-1];
                this.cameraFollow.distance = e.pos,
                this.cameraFollow.endRotation = e.rot,
                this.context.bJoin ? this.playJoinAnimation() : this.avatar.playAnimation(ANIMATION_ID.STAGE.SETTLEMENTTINGS[1], .02, null, ()=>{
                    let e = this.context.backSceneName || "vHubScene";
                    mgrDirector.warpSceneWidthEffect(e, this.context.backSceneContext),
                    this.sendMsg("MSG_FREE_WEAR")
                }
                )
            }
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vRoomScene.clickButtonSummit"
            })
        }
        onTouchSpriteBg(e) {
            if (e.isBegin && (this.bTouchBg = !0,
            this.lastTouchBgPos = e.pos),
            (e.isCancel || e.isEnd) && (this.bTouchBg = !1),
            this.bTouchBg) {
                let t = e.pos.x - this.lastTouchBgPos.x
                  , a = e.pos.y - this.lastTouchBgPos.y;
                if (this.lastTouchBgPos = e.pos,
                this.avatar && this.avatar.transform.rotate(new Laya.Vector3(0,t,0), !0, !1),
                Math.abs(t) < 20 && Math.abs(a) < 20) {
                    CustomTween.to(this.spritePart, {
                        x: this.spritePart._orgPosX + 300
                    }, 300).start(1);
                    let e = this.cameraParam[-1];
                    this.cameraFollow.distance = e.pos,
                    this.cameraFollow.endRotation = e.rot
                }
            }
        }
        onMsgShopBuySuccessed() {
            this.selectedType && this.onSelectType(this.selectedType)
        }
        fadeIn() {
            this.spriteScoreBg.visible = !1,
            this.spriteFailed.visible = !1,
            this.spriteSuccessful.visible = !1,
            this.spriteProgressBg.visible = !1;
            let e = 0;
            mgrDirector.isDeviceOverHeight() && (e = 75),
            Layout.widget(10, 10, this.buttonBack.__node),
            Layout.widget(.5, 10 + e, this.spriteTitle, {
                x: .5,
                y: 0
            }),
            Layout.widget(1, .5, this.spritePart, {
                x: 1,
                y: .5
            }),
            Layout.widget(1, .5, this.boxMenu, {
                x: 1,
                y: .5
            }),
            Layout.widget(20, -1, this.spriteTargetScoreBg),
            Layout.widget(10, -1, this.buttonSure.__node),
            Layout.widget(10, -1, this.buttonReset.__node),
            this.buttonShop.__node.pos(this.buttonBack.__node.x, this.buttonBack.__node.y + 100, !0),
            this.spritePart._orgPosX = this.spritePart.x,
            this.spritePart.x += 300,
            CustomTween.from(this.buttonBack.__node, {
                alpha: 0
            }, 1e3, Laya.Ease.backOut).start(1),
            this.buttonReset.__node.scale(0, 0),
            this.buttonSure.__node.scale(0, 0),
            this.spriteTargetScoreBg.scale(0, 0),
            CustomTween.delayTime(this.buttonReset.__node, 500).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            CustomTween.delayTime(this.buttonSure.__node, 600).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            CustomTween.delayTime(this.spriteTargetScoreBg, 700).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.buttonTagHair.__node.scale(0, 0),
            this.buttonTagHeadWear.__node.scale(0, 0),
            this.buttonTagMakeup.__node.scale(0, 0),
            this.buttonTagCloth.__node.scale(0, 0),
            this.buttonTagWing.__node.scale(0, 0),
            this.buttonTagHandWear.__node.scale(0, 0),
            this.buttonTagSock.__node.scale(0, 0),
            this.buttonTagShoe.__node.scale(0, 0),
            CustomTween.delayTime(this.buttonTagHair.__node, 500).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            CustomTween.delayTime(this.buttonTagHeadWear.__node, 600).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            CustomTween.delayTime(this.buttonTagMakeup.__node, 700).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            CustomTween.delayTime(this.buttonTagCloth.__node, 800).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            CustomTween.delayTime(this.buttonTagSock.__node, 900).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            CustomTween.delayTime(this.buttonTagShoe.__node, 1e3).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            CustomTween.delayTime(this.buttonTagHandWear.__node, 1100).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            CustomTween.delayTime(this.buttonTagWing.__node, 1200).to({
                scaleX: 1,
                scaleY: 1
            }, 300, Laya.Ease.backOut).start(1),
            this.boxLike.visible = !1,
            this.labelTM1.visible = !1,
            this.labelTM2.visible = !1,
            this.labelTM3.visible = !1,
            this.labelTM4.visible = !1,
            this.labelTM5.visible = !1,
            this.labelTM6.visible = !1
        }
        buildUi() {
            let e = mgrLoader.Pool.getModel(MODEL_ID.map_room);
            this.add3DEffectAtBack(e, 0),
            this.room = e,
            this.avatar = new RoleAvatar,
            this.add3DEffectAtBack(this.avatar, 0),
            this.avatar.transform.scale = new Laya.Vector3(1.1,1.1,1.1),
            this.avatar.registerLoadEndCallback(()=>{
                this.avatar.playAnimation("idle-idle"),
                this.avatar.timeScale = 1
            }
            ),
            this.cameraBack.fieldOfView = 55,
            this.cameraBack.transform.position = this.cameraParam[-2].pos,
            this.cameraBack.transform.rotationEuler = this.cameraParam[-2].rot;
            let t = this.cameraBack.getComponent(CameraFollow);
            t.__target = this.avatar,
            t.distance = this.cameraParam[-1].pos,
            t.endRotation = this.cameraParam[-1].rot,
            this.cameraFollow = t,
            this.spriteBg.zOrder = -2,
            this.reuseList = new ReuseList(1,0,10),
            this.reuseList.size(this.boxPartList.width, this.boxPartList.height),
            this.boxPartList.addChild(this.reuseList),
            this.reuseList.setItemClass(vRoomPart),
            !mgrGuide.isGuiding() && this.reuseList.setVerticalMoveEnable(!0),
            this.reuseList.setSpaceY(10)
        }
        fillData() {
            if (this.avatar.fillByPartIds(mgrPart.getLastClothes(!0)),
            this.avatar.transform.scale = new Laya.Vector3,
            mgrTip.showLoadingTip("vRoomScene_loadingAvatar"),
            this.avatar.registerLoadEndCallback(()=>{
                this.avatar.transform.scale = new Laya.Vector3(1,1,1),
                mgrTip.hideLoadingTip("vRoomScene_loadingAvatar")
            }
            ),
            this.context.stageId) {
                this.spriteTitle.visible = !0,
                this.spriteTargetScoreBg.visible = !0;
                let e = mgrStage.getRecommendTagsByStageId(this.context.stageId);
                for (let t = 0; t < e.length; t++) {
                    const a = e[t];
                    let i = new Laya.Image;
                    i.size(34, 34),
                    i.pivot(i.width / 2, i.height / 2),
                    Tools.loadImg(i, a.icon),
                    this.boxTitleTag.addChild(i)
                }
                let t = mgrCfg.get_from_stage_db(this.context.stageId);
                this.spriteScoreStandard.y = this.progressBarScore.__node.height - this.progressBarScore.__node.height * t.passScore / 100,
                this.labelTageScore.text = `${t.passScore}`
            } else
                this.spriteTitle.visible = !1,
                this.spriteTargetScoreBg.visible = !1;
            Timer.callLater(.1, ()=>{
                this.refreshTargetScore(100)
            }
            , this),
            this.refreshTag()
        }
        refreshTargetScore(e) {
            this.context.stageId && this.avatar.registerAllLoadEndCallback(()=>{
                let t = mgrCfg.get_from_stage_db(this.context.stageId)
                  , a = mgrStage.calcScore(this.context.stageId, this.avatar.getPartIds()) / t.passScore;
                CustomTween.actionFloat(this.progressBarTargeScore.__node, this.progressBarTargeScore.progress, a, e, e=>{
                    this.progressBarTargeScore.progress = e,
                    this.spriteTargetScoreEffect.y = 284 * (1 - e) + 3
                }
                ).start(1)
            }
            )
        }
        onSelectType(e) {
            let t = e == this.selectedType;
            this.selectedType = e,
            CustomTween.to(this.spritePart, {
                x: this.spritePart._orgPosX
            }, 300).start(1);
            let a = this.cameraParam[e] || this.cameraParam[-1];
            this.cameraFollow.distance = a.pos,
            this.cameraFollow.endRotation = a.rot;
            let i = []
              , s = mgrStage.getRecommendPartByStageAndType(this.context.stageId, e)
              , o = mgrAd.preCheckCanTriggerAdEvent(AD_EVENT_ID_STAGE_TRY);
            if (this.context.stageId && o && this.tryPartIds.length <= 2)
                for (let e = 0; e < s.length; e++) {
                    const t = s[e];
                    mgrPlayer.getItemAmount(t.partId) <= 0 && this.tryPartIds.indexOf(t.partId) < 0 && i.push({
                        partId: t.partId,
                        score: t.score,
                        fOnClickPart: this.onSelectPart.bind(this),
                        fIsSelected: this.isSelectPart.bind(this),
                        fIsRecommend: this.isRecommmend.bind(this),
                        fIsTry: this.isTry.bind(this)
                    })
                }
            let n = 1;
            mgrCfg.forDb_from_part_db((t,a)=>{
                let s = mgrCfg.get_from_part_type_db(a.type);
                if (a.type == e && (mgrPlayer.getItemAmount(a.id) > 0 || !this.context.stageId && o && n <= 2 && this.tryPartIds.length <= 2 && n++ || this.tryPartIds.indexOf(a.id) >= 0) && a.id != s.defaultPartId && a.id % 100 != 99) {
                    let e = 0;
                    this.context.stageId && (e = mgrStage.calcScore(this.context.stageId, [a.id])),
                    i.push({
                        partId: a.id,
                        score: e,
                        fOnClickPart: this.onSelectPart.bind(this),
                        fIsSelected: this.isSelectPart.bind(this),
                        fIsRecommend: this.isRecommmend.bind(this),
                        fIsTry: this.isTry.bind(this)
                    })
                }
            }
            ),
            this.context.stageId && (i = Tools.sortArrayByField(i, "-score"));
            let r = this.reuseList.scrollValue;
            t || (r = 0),
            this.reuseList.setDatas(i),
            this.reuseList.setScroll(r || 0),
            this.buttonHavent.__node.visible = i.length <= 0,
            this.refreshTag()
        }
        refreshTag() {
            let e = [this.buttonTagHair, this.buttonTagMakeup, this.buttonTagHeadWear, this.buttonTagCloth, this.buttonTagWing, this.buttonTagHandWear, this.buttonTagSock, this.buttonTagShoe];
            for (let t = 0; t < e.length; t++) {
                const a = e[t];
                let i = a.__partType == this.selectedType;
                a.__node.getChildByName("fg").visible = i,
                this[`spriteNew ${t + 1}`].visible = mgrPart.isNewType(a.__partType)
            }
        }
        isRecommmend(e) {
            if (!this.context.stageId)
                return !1;
            let t = mgrCfg.get_from_part_db(e)
              , a = mgrStage.getRecommendPartByStageAndType(this.context.stageId, t.type);
            for (let t = 0; t < a.length; t++) {
                if (e == a[t].partId)
                    return !0
            }
            return !1
        }
        isTry(e) {
            return this.tryPartIds.indexOf(e) >= 0
        }
        onSelectPart(e) {
            if (mgrPlayer.getItemAmount(e) <= 0 && !this.isTry(e))
                return void (0 == mgrSdk.getCopNumberValueByKey("b_room_try_ad_tip") ? mgrAd.triggerAdEvent(AD_EVENT_ID_STAGE_TRY, {
                    partId: e
                }, !0) : mgrDirector.openDialog("vRoomPartTryDialog", {
                    itemId: e,
                    adEventId: AD_EVENT_ID_STAGE_TRY
                }));
            let t = mgrCfg.get_from_part_db(e).type
              , a = mgrCfg.get_from_part_type_db(t);
            this.isSelectPart(e) ? (a.defaultPartId ? this.avatar.fillByPartIds([a.defaultPartId]) : this.avatar.removePart(e),
            this.reuseList.refresh(),
            this.refreshTag()) : (mgrSound.play(115),
            this.avatar.fillByPartIds([e]),
            mgrTip.showLoadingTip("vRoomScene_loadingPart"),
            this.avatar.registerAllLoadEndCallback(()=>{
                mgrTip.hideLoadingTip("vRoomScene_loadingPart"),
                this.reuseList.refresh(),
                this.refreshTag(),
                t == PartType.hair ? this.avatar.playAnimation(ANIMATION_ID.room.head, .1, null, null, !1) : t == PartType.headDec ? this.avatar.playAnimation(ANIMATION_ID.room.head, .1, null, null, !1) : t == PartType.cloth ? this.avatar.playAnimation(ANIMATION_ID.room.cloth, .1, null, null, !1) : t == PartType.handDec ? this.avatar.playAnimation(ANIMATION_ID.room.cloth, .1, null, null, !1) : t == PartType.shoe ? this.avatar.playAnimation(ANIMATION_ID.room.shoes, .1, null, null, !1) : t == PartType.sock ? this.avatar.playAnimation(ANIMATION_ID.room.shoes, .1, null, null, !1) : t == PartType.wing ? this.avatar.playAnimation(ANIMATION_ID.room.wing, .1, null, null, !1) : t == PartType.face && this.avatar.playFaceAnimation(ANIMATION_ID.face.zhayan)
            }
            )),
            this.refreshTargetScore(500)
        }
        isSelectPart(e) {
            return this.avatar.getPartIds().indexOf(e) >= 0
        }
        playSettlementAnimationNormal() {
            this.buttonSure.__node.visible = !1,
            this.buttonReset.__node.visible = !1,
            this.buttonBack.__node.visible = !1,
            this.buttonShop.__node.visible = !1,
            this.spriteTargetScoreBg.visible = !1,
            this.spritePart.visible = !1,
            this.boxMenu.visible = !1,
            this.avatar.playAnimation(ANIMATION_ID.STAGE.SETTLEMENTTINGS[1], .05, null, ()=>{
                e.rating == EStageRating.pass ? (mgrSound.play(105),
                this.spriteSuccessful.visible = !0,
                this.spriteSuccessful.scale(0, 0),
                CustomTween.to(this.spriteSuccessful, {
                    scaleX: 1,
                    scaleY: 1
                }, 500, Laya.Ease.backOut).callback(()=>{}
                ).start(1)) : (mgrSound.play(106),
                this.spriteFailed.visible = !0,
                this.spriteFailed.scale(0, 0),
                CustomTween.to(this.spriteFailed, {
                    scaleX: 1,
                    scaleY: 1
                }, 500, Laya.Ease.backOut).callback(()=>{}
                ).start(1)),
                this.settlement(e)
            }
            ),
            this.spriteProgressBg.visible = !0,
            this.spriteScoreBg.visible = !0,
            this.progressBarScore.progress = 0,
            this.progressBarScore.style = ULPROGRESSBAR_STYLE.ver,
            this.labelScore.text = "0",
            mgrLoader.loadFont("stageSettlement", this.labelScore);
            let e = mgrStage.finishStage(this.context.stageId, mgrPart.getLastClothes());
            CustomTween.actionFloat(this.progressBarScore.__node, 0, e.score, 2e3, e=>{
                this.progressBarScore.progress = e / 100,
                this.labelScore.text = Math.floor(e).toString(),
                this.labelScore.fontSize = 30,
                this.spriteScoreCursor.y = this.progressBarScore.__node.height - this.progressBarScore.__node.height * this.progressBarScore.progress - 10
            }
            ).start(1)
        }
        playSettlementAnimation() {
            mgrTip.showLoadingTip("playSettlementAnimation"),
            mgrLoader.batchLoadResources([MODEL_ID.camera_bianshen, MODEL_ID.jiesuan_sky], [ANIMATION_ID.STAGE.bianshen], ()=>{
                if (this.destroyed)
                    return;
                this.sky || (this.sky = mgrLoader.Pool.getModel(MODEL_ID.jiesuan_sky),
                mgrMaterial.setCartonShader(this.sky, MODEL_ID.jiesuan_sky),
                this.sky.transform.scale = new Laya.Vector3(4,4,4),
                this.add3DEffectAtBack(this.sky, 0),
                this.sky.active = !1),
                mgrSound.play(5);
                let e = this.avatar.getPartIds()
                  , t = {};
                for (let a = 0; a < e.length; a++) {
                    const i = e[a];
                    let s = mgrCfg.get_from_part_db(i);
                    t[s.type] = i
                }
                let a = this.avatar.wingScale;
                this.avatar.wingScale = 0;
                let i = [];
                mgrCfg.forDb_from_part_type_db((e,t)=>{
                    t.defaultPartId && i.push(t.defaultPartId)
                }
                ),
                this.avatar.fillByPartIds(i),
                this.avatar.registerLoadEndCallback(()=>{
                    this.avatar.clear(),
                    this.buttonSure.__node.visible = !1,
                    this.buttonReset.__node.visible = !1,
                    this.buttonBack.__node.visible = !1,
                    this.buttonShop.__node.visible = !1,
                    this.spriteTargetScoreBg.visible = !1,
                    this.spritePart.visible = !1,
                    this.boxMenu.visible = !1,
                    this.room.active = !1,
                    this.avatar.transform.scale = new Laya.Vector3,
                    this.sky.active = !0,
                    mgrTip.hideLoadingTip("playSettlementAnimation"),
                    this.playScoreAdd(10, new Laya.Point(Laya.stage.width / 2,Laya.stage.height / 2)),
                    this.avatar.transform.scale = new Laya.Vector3(1,1,1),
                    t[PartType.face] && Timer.callLater(16 / 30, ()=>{
                        this.avatar.fillByPartIds([t[PartType.face]])
                    }
                    , this),
                    t[PartType.hair] && Timer.callLater(16 / 30, ()=>{
                        this.avatar.fillByPartIds([t[PartType.hair]])
                    }
                    , this),
                    t[PartType.headDec] && Timer.callLater(16 / 30, ()=>{
                        this.avatar.fillByPartIds([t[PartType.headDec]])
                    }
                    , this),
                    t[PartType.shoe] && Timer.callLater(52 / 30, ()=>{
                        this.avatar.fillByPartIds([t[PartType.shoe]])
                    }
                    , this),
                    t[PartType.sock] && Timer.callLater(2.5, ()=>{
                        this.avatar.fillByPartIds([t[PartType.sock]])
                    }
                    , this),
                    t[PartType.wing] && Timer.callLater(95 / 30, ()=>{
                        this.avatar.fillByPartIds([t[PartType.wing]]),
                        this.avatar.loadPart(),
                        this.avatar.wingScale = a
                    }
                    , this),
                    t[PartType.handDec] && Timer.callLater(142 / 30, ()=>{
                        this.avatar.fillByPartIds([t[PartType.handDec]])
                    }
                    , this),
                    t[PartType.cloth] && Timer.callLater(142 / 30, ()=>{
                        this.avatar.fillByPartIds([t[PartType.cloth]])
                    }
                    , this),
                    this.add3DEffectAtBack(MODEL_ID.effect.eff_ui_jiesuan_bianshen, 9);
                    let e = mgrLoader.Pool.getModel(MODEL_ID.camera_bianshen);
                    this.add3DEffectAtBack(e, 0);
                    let i = e.getChildAt(0).getChildAt(0).getChildAt(0);
                    i || ((i = new Laya.Camera).clearFlag = 2,
                    i.fieldOfView = 70,
                    e.getChildAt(0).getChildAt(0).addChild(i));
                    let s = e.getComponent(Laya.Animator);
                    mgrMaterial.playAnimation(s, ANIMATION_ID.camera.bianshen, 0),
                    this.cameraBack.active = !1,
                    this.avatar.playFaceAnimation(ANIMATION_ID.face.bianshen, 0),
                    this.avatar.playAnimation(ANIMATION_ID.STAGE.bianshen, 0, null, ()=>{
                        mgrLoader.Pool.recoverModel(e),
                        o.rating == EStageRating.pass ? (mgrSound.play(105),
                        this.spriteSuccessful.visible = !0,
                        this.spriteSuccessful.scale(0, 0),
                        CustomTween.to(this.spriteSuccessful, {
                            scaleX: 1,
                            scaleY: 1
                        }, 500, Laya.Ease.backOut).callback(()=>{}
                        ).start(1)) : (mgrSound.play(106),
                        this.spriteFailed.visible = !0,
                        this.spriteFailed.scale(0, 0),
                        CustomTween.to(this.spriteFailed, {
                            scaleX: 1,
                            scaleY: 1
                        }, 500, Laya.Ease.backOut).callback(()=>{}
                        ).start(1)),
                        this.settlement(o),
                        this.sky.active = !1,
                        this.room.active = !0
                    }
                    ),
                    this.spriteProgressBg.visible = !0,
                    this.spriteScoreBg.visible = !0,
                    this.progressBarScore.progress = 0,
                    this.progressBarScore.style = ULPROGRESSBAR_STYLE.ver,
                    this.labelScore.text = "0",
                    mgrLoader.loadFont("stageSettlement", this.labelScore);
                    let o = mgrStage.finishStage(this.context.stageId, mgrPart.getLastClothes(), 10);
                    CustomTween.actionFloat(this.progressBarScore.__node, 0, o.score, 8e3, e=>{
                        this.progressBarScore.progress = e / 100,
                        this.labelScore.text = Math.floor(e).toString(),
                        this.labelScore.fontSize = 30,
                        this.spriteScoreCursor.y = this.progressBarScore.__node.height - this.progressBarScore.__node.height * this.progressBarScore.progress - 10
                    }
                    ).start(1)
                }
                )
            }
            )
        }
        settlement(e) {
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vRoomScene.settlementAnimationFinished"
            }),
            this.cameraBack.active = !0;
            let t = this.cameraParam[-1];
            if (this.cameraFollow.distance = t.pos,
            this.cameraFollow.endRotation = t.rot,
            this.avatar.transform.scale = new Laya.Vector3(1.1,1.1,1.1),
            e.rating == EStageRating.pass) {
                let t = Math.random() > .5 ? ANIMATION_ID.STAGE.WIN1 : ANIMATION_ID.STAGE.WIN2;
                this.avatar.playAnimation(t, 0, null, ()=>{
                    let t = Tools.time() - this.startTime;
                    mgrSdk.statisOnStageEnd(this.context.stageId, 1, "关卡", t),
                    mgrChannel.canUseVideoRecord() && mgrSdk.recordGameVideo("stop");
                    for (let a = 0; a < e.rewards.length; a++) {
                        const i = e.rewards[a];
                        mgrTip.addGotItemTip(i.itemId, i.amount, null, {
                            bCanShareVideo: t >= 15 && t <= 120 && mgrChannel.canUseVideoRecord()
                        })
                    }
                    Timer.callLoop(.016, ()=>{
                        (0 == DialogBase.ShowingDialog.length || DialogBase.ShowingDialog.indexOf("vGuideMaskDialog") >= 0) && mgrDirector.open2DScene("vStageScene", {
                            bFromWin: !0
                        })
                    }
                    , this)
                }
                )
            } else {
                let e = Math.random() > .5
                  , t = e ? ANIMATION_ID.face.weiqu01 : ANIMATION_ID.face.weiqu02;
                this.avatar.playFaceAnimation(t);
                let a = e ? ANIMATION_ID.STAGE.FAILED1 : ANIMATION_ID.STAGE.FAILED2;
                this.avatar.playAnimation(a, 0, null, ()=>{
                    if (mgrAd.preCheckCanTriggerAdEvent("stage_failed_try")) {
                        let e = 0
                          , t = this.avatar.getPartIds()
                          , a = [PartType.cloth, PartType.hair, PartType.wing, PartType.face, PartType.sock, PartType.shoe, PartType.headDec, PartType.handDec];
                        for (let i = 0; i < a.length; i++) {
                            const s = a[i];
                            let o = mgrStage.getRecommendPartByStageAndType(this.context.stageId, s);
                            for (let a = 0; a < 1; a++) {
                                const i = o[a];
                                if (t.indexOf(i.partId) < 0) {
                                    e = i.partId;
                                    break
                                }
                            }
                        }
                        e ? mgrDirector.openDialog("vStageFailedTryDialog", {
                            itemId: e,
                            adEventId: "stage_failed_try"
                        }) : mgrGuide.isGuiding() ? mgrDirector.open2DScene("vHubScene") : mgrDirector.open2DScene("vStageScene");
                        let i = Tools.time() - this.startTime;
                        mgrSdk.statisOnStageEnd(this.context.stageId, 0, "关卡", i),
                        mgrChannel.canUseVideoRecord() && mgrSdk.recordGameVideo("stop")
                    } else
                        mgrGuide.isGuiding() ? mgrDirector.open2DScene("vHubScene") : mgrDirector.open2DScene("vStageScene")
                }
                )
            }
        }
        onMsgAdRoomTrySuccessed(e) {
            this.tryPartIds.indexOf(e.partId) >= 0 || (this.tryPartIds.push(e.partId),
            this.onSelectType(this.selectedType),
            this.onSelectPart(e.partId))
        }
        onMsgAdFailedTrySuccessed(e) {
            -1 == this.tryPartIds.indexOf(e.partId) && this.tryPartIds.push(e.partId),
            this.reuseList.refresh(),
            this.onSelectPart(e.partId),
            this.spriteScoreBg.visible = !1,
            this.spriteFailed.visible = !1,
            this.spriteSuccessful.visible = !1,
            this.spriteProgressBg.visible = !1,
            this.buttonSure.__node.visible = !0,
            this.buttonReset.__node.visible = !0,
            this.buttonBack.__node.visible = !0,
            this.buttonShop.__node.visible = !0,
            this.spritePart.visible = !0,
            this.boxMenu.visible = !0,
            this.spriteTargetScoreBg.visible = !0
        }
        onMsgCloseFailedTryDialog() {
            mgrGuide.isGuiding() ? mgrDirector.open2DScene("vHubScene") : mgrDirector.open2DScene("vStageScene")
        }
        playScoreAdd(e, t) {
            let a = new Laya.Label(`+${e}`);
            a.fontSize = 30,
            a.anchorX = .5,
            a.anchorY = .5,
            mgrLoader.loadFont("ropeSkippingScore", a),
            3 == e ? a.color = "#ffffff" : 5 == e ? a.color = "#4fbaeb" : 8 == e && (a.color = "#fff45c");
            let i = mgrDirector.getTipRoot();
            i.addChild(a);
            let s = i.globalToLocal(t);
            a.pos(s.x, s.y),
            CustomTween.to(a, {
                y: s.y - 30,
                scaleX: 1,
                scaleY: 1
            }, 300).to({
                y: s.y - 40,
                alpha: 0
            }, 500).callback(()=>{
                a.destroy()
            }
            ).start(1)
        }
        playJoinAnimation() {
            this.avatar.playAnimation(ANIMATION_ID.PVP.JOINSHOW, .02, null, ()=>{
                mgrSound.play(120),
                this.add3DEffectAtBack(MODEL_ID.effect.e_caidai, 5);
                let e = this.avatar.getPartIds();
                mgrOfflinePvp.replacePlayerData(e, mgrPart.calcWeight(e));
                let t = mgrOfflinePvp.getPlayerData();
                this.labelLikeCount.text = `${t.score}`,
                this.boxLike.visible = !0,
                this.boxLike.scale(0, 0),
                CustomTween.to(this.boxLike, {
                    scaleX: 1.3,
                    scaleY: 1.3
                }, 300).callback(()=>{
                    let e = mgrOfflinePvp.getRanomVoteCount()
                      , a = t.score
                      , i = t.score + e;
                    CustomTween.actionFloat(this.labelLikeCount, a, i, 300, e=>{
                        this.labelLikeCount.text = `${Math.floor(e)}`,
                        t.score = e
                    }
                    ).start(1)
                }
                ).delayTime(550).to({
                    scaleX: 1,
                    scaleY: 1
                }, 300).delayTime(500).callback(()=>{
                    mgrDirector.warpSceneWidthEffect("vPvpScene")
                }
                ).start(1)
            }
            )
        }
        onMsgAdEventSuccessed(e) {
            e.adEventId == AD_EVENT_ID_STAGE_TRY && this.sendMsg("MSG_AD_ROOM_TRY_SUCCESSED", {
                partId: e.userData.partId
            })
        }
    }
    var E_STAGE_SCENE_STATE;
    !function(e) {
        e[e.idle = 1] = "idle",
        e[e.spell = 2] = "spell",
        e[e.turnBack = 3] = "turnBack",
        e[e.flying = 4] = "flying",
        e[e.draging = 5] = "draging",
        e[e.autoScrolling = 6] = "autoScrolling"
    }(E_STAGE_SCENE_STATE || (E_STAGE_SCENE_STATE = {}));
    class vStageScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vStageScene",
            this.exportNodeNames = ["CC_spriteBg", "CC_boxList", "CC_buttonBack"],
            this.stagePos = {
                1: {
                    x: 558,
                    y: 1159
                },
                2: {
                    x: 205,
                    y: 1009
                },
                3: {
                    x: 579,
                    y: 798
                },
                4: {
                    x: 168,
                    y: 760
                },
                5: {
                    x: 598,
                    y: 479
                },
                6: {
                    x: 168,
                    y: 349
                },
                7: {
                    x: 598,
                    y: 165
                },
                0: {
                    x: 226,
                    y: 119
                }
            },
            this.bCanUpdateFlying = !1,
            this.backCountDown = 0
        }
        onOpened() {
            super.onOpened(),
            this.multilingualText1 = `${mgrI18n.getText("vStageScene.1")}`,
            this.multilingualText2 = `${mgrI18n.getText("vStageScene.2")}`,
            Layout.widget(10, 10, this.buttonBack.__node),
            this.buttonBack.fOnClick = this.onTouchButtonBack.bind(this),
            Tools.registerTouchHander(this.boxList, this.onTouchBox.bind(this)),
            this.init(),
            this.addButterFlyEffect(),
            mgrGuide.registerGuideNode("vStageScene.buttonBack", this.buttonBack.__node),
            mgrSound.play(4),
            mgrSdk.staticPointEvent(7e3),
            this.registerListeners({
                MSG_I18N_REFRESH: ()=>{
                    this.multilingualText1 = `${mgrI18n.getText("vStageScene.1")}`,
                    this.multilingualText2 = `${mgrI18n.getText("vStageScene.2")}`
                }
            })
        }
        onClosed() {
            super.onClosed()
        }
        canOperateCamera() {
            return !1
        }
        customWait(e) {
            Timer.callLater(.3, ()=>{
                e && e()
            }
            , this)
        }
        init() {
            this.buildScene(()=>{
                this.stManager = new FSMObject,
                this.stManager.registerState(E_STAGE_SCENE_STATE.idle, this.inIdle.bind(this), this.exeIdle.bind(this), this.outIdle.bind(this)),
                this.stManager.registerState(E_STAGE_SCENE_STATE.spell, this.inSpell.bind(this), this.exeSpell.bind(this), this.outSpell.bind(this)),
                this.stManager.registerState(E_STAGE_SCENE_STATE.turnBack, this.inTurnBack.bind(this), this.exeTurnBack.bind(this), this.outTurnBack.bind(this)),
                this.stManager.registerState(E_STAGE_SCENE_STATE.flying, this.inFlying.bind(this), this.exeFlying.bind(this), this.outFlying.bind(this)),
                this.stManager.registerState(E_STAGE_SCENE_STATE.draging, this.inDraging.bind(this), this.exeDraging.bind(this), this.outDraging.bind(this)),
                this.stManager.registerState(E_STAGE_SCENE_STATE.autoScrolling, this.inAutoScrolling.bind(this), this.exeAutoScrolling.bind(this), this.outAutoScrolling.bind(this)),
                Timer.callLoop(.016, ()=>{
                    this.stManager.update()
                }
                , this),
                this.context.bFromWin ? this.stManager.setNextState(E_STAGE_SCENE_STATE.spell) : this.stManager.setNextState(E_STAGE_SCENE_STATE.idle)
            }
            ),
            this.fillData()
        }
        buildScene(e) {
            mgrGuide.isGuiding() || (this.nearByRank = new vSmallNearbyRank({
                rankId: eNearbyRankId.stage
            }),
            this.addChild(this.nearByRank),
            Layout.widget(0, .2, this.nearByRank, {
                x: 0,
                y: .5
            }),
            this.nearByRank.x -= 300,
            CustomTween.delayTime(this.nearByRank, 500).to({
                x: this.nearByRank.x + 300
            }, 500, Laya.Ease.backOut).start(1)),
            this.boxList.size(this.boxList.width, mgrDirector.height),
            this.reuseList = new ReuseList(1,0,1),
            this.reuseList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseList),
            this.reuseList.setItemClass(vChapterNode),
            this.reuseList.setVerticalMoveEnable(!0),
            this.boxList.zOrder = -2,
            this.spriteBg.zOrder = -2,
            this.colliderBox = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(20, 40, .01)),
            this.colliderBox.meshRenderer.enable = !1;
            let t = this.colliderBox.addComponent(Laya.PhysicsCollider)
              , a = new Laya.BoxColliderShape(20,40,.01);
            t.colliderShape = a,
            this.add3DEffectAtBack(this.colliderBox, 0),
            this.cameraBack.transform.position = new Laya.Vector3(0,0,28),
            this.cameraBack.fieldOfView = 45,
            this.roleAvatar = new RoleAvatar,
            this.roleAvatar.transform.scale = new Laya.Vector3,
            this.roleAvatar.transform.position = new Laya.Vector3(1e4),
            this.add3DEffectAtBack(this.roleAvatar, 0),
            this.roleAvatar.fillByPartIds(mgrPart.getLastClothes()),
            this.roleAvatar.registerLoadEndCallback(()=>{
                this.roleAvatar.playAnimation(ANIMATION_ID.idle),
                this.roleAvatar.hideShadow(),
                this.roleAvatar.transform.scale = new Laya.Vector3(2.5,2.5,2.5),
                e()
            }
            )
        }
        fillData() {
            let e = [];
            mgrCfg.forDb_from_stage_chapter_db((t,a)=>{
                a.id < 100 && e.push({
                    chapterId: a.id,
                    onClickStage: this.onClickStage.bind(this),
                    onReviewStage: this.onReviewStage.bind(this)
                })
            }
            ),
            e = Tools.sortArrayByField(e, "-chapterId"),
            this.reuseList.setDatas(e),
            this.skipToCurrStage()
        }
        skipToCurrStage(e=0, t) {
            let a = this.calcStageCenterScrollOffset(mgrStage.getCurrentStageId());
            e > 0 ? CustomTween.actionFloat(this.boxList, this.reuseList.scrollValue, a, e, e=>{
                this.reuseList.setScroll(e)
            }
            , Laya.Ease.sineOut).callback(()=>{
                t && t()
            }
            ).start(1) : (this.reuseList.setScroll(a),
            t && t())
        }
        calcStageCenterScrollOffset(e) {
            let t = this.stagePos[e % 8].y
              , a = 1280 * (8 - mgrStage.calcChapterIdByStageId(e))
              , i = mgrDirector.height / 2 * -1
              , s = 1280 - mgrDirector.height + 8960
              , o = t + a + i;
            return ul.clamp(o, 0, s)
        }
        calcStageCurGlobalPos(e) {
            let t = this.reuseList.scrollValue
              , a = this.stagePos[e % 8].y + 1280 * (8 - mgrStage.calcChapterIdByStageId(e)) - t
              , i = this.stagePos[e % 8].x + (mgrDirector.width - 768) / 2;
            return i += 10,
            a += 30,
            new Laya.Vector2(i,a)
        }
        inIdle() {
            this.roleAvatar.playAnimation(ANIMATION_ID.STAGE.fly_zuo, .2),
            this.roleAvatar.playWingAnimation(ANIMATION_ID.wing_idle),
            this.roleAvatar.transform.scale = new Laya.Vector3(2.5,2.5,2.5)
        }
        exeIdle() {
            this.syncRoleWithStage(mgrStage.getCurrentStageId())
        }
        outIdle() {}
        inSpell() {
            this.syncRoleWithStage(mgrStage.getCurrentStageId() - 1),
            this.sendMsg("MSG_PLAY_FINISH_ANIMATION", {
                stageId: mgrStage.getCurrentStageId() - 1
            });
            let e = ["fly_shifa-shifa01", "fly_shifa-shifa02"];
            this.roleAvatar.playAnimation(e[Tools.random(e.length) - 1], .05, ()=>{
                CustomTween.actionFloat(this.roleAvatar, this.roleAvatar.transform.localPositionY, this.roleAvatar.transform.localPositionY + .5, 1e3, e=>{
                    this.roleAvatar.transform.localPositionY = e
                }
                ).start(1)
            }
            , ()=>{
                this.roleAvatar.playAnimation(ANIMATION_ID.STAGE.fly_idle),
                this.roleAvatar.playWingAnimation(ANIMATION_ID.wing_fly),
                this.stManager && this.stManager.setNextState(E_STAGE_SCENE_STATE.turnBack)
            }
            )
        }
        exeSpell() {}
        outSpell() {}
        inTurnBack() {
            let e = 60;
            mgrStage.getCurrentStageId() % 2 == 0 && (e = -60),
            CustomTween.actionFloat(this.boxList, this.roleAvatar.transform.rotationEuler.y, e, 300, e=>{
                let t = this.roleAvatar.transform.rotationEuler.clone();
                t.y = e,
                console.log(t),
                this.roleAvatar.transform.rotationEuler = t
            }
            ).callback(()=>{
                this.stManager && this.stManager.setNextState(E_STAGE_SCENE_STATE.flying)
            }
            ).start(1)
        }
        exeTurnBack() {}
        outTurnBack() {}
        inFlying() {
            this.bCanUpdateFlying = !0,
            this.roleAvatar.playAnimation(ANIMATION_ID.STAGE.flying, .05),
            Timer.callLater(2, ()=>{
                this.bCanUpdateFlying = !1;
                this.roleOrighPos = this.roleAvatar.transform.position,
                CustomTween.actionFloat(this.boxList, this.roleAvatar.transform.rotationEuler.y, 0, 300, e=>{
                    let t = this.roleAvatar.transform.rotationEuler.clone();
                    t.y = e,
                    console.log(t),
                    this.roleAvatar.transform.rotationEuler = t
                }
                ).callback(()=>{
                    this.roleAvatar.playAnimation(ANIMATION_ID.STAGE.ease_zuo, .05, null, ()=>{
                        this.stManager && this.stManager.setNextState(E_STAGE_SCENE_STATE.idle)
                    }
                    )
                }
                ).start(1)
            }
            , this),
            this.flyingXFactor = 0,
            this.roleOrighPos = this.roleAvatar.transform.position.clone()
        }
        exeFlying() {
            if (!this.bCanUpdateFlying)
                return;
            this.flyingXFactor += Tools.delta() / 2,
            this.flyingXFactor = Math.min(1, this.flyingXFactor);
            let e = this.calcStageCurGlobalPos(mgrStage.getCurrentStageId());
            e.y;
            let t = Tools.castRayFromScreenPos(this.scene3DBack, this.cameraBack, e);
            t.succeeded && (this.roleAvatar.transform.position = new Laya.Vector3(t.point.x * this.flyingXFactor + this.roleOrighPos.x * (1 - this.flyingXFactor),t.point.y * this.flyingXFactor + this.roleOrighPos.y * (1 - this.flyingXFactor),t.point.z * this.flyingXFactor + this.roleOrighPos.z * (1 - this.flyingXFactor)))
        }
        outFlying() {}
        inDraging() {
            this.roleAvatar.transform.scale = new Laya.Vector3
        }
        exeDraging() {
            this.backCountDown -= Tools.delta(),
            this.backCountDown < 0 && this.stManager && this.stManager.setNextState(E_STAGE_SCENE_STATE.autoScrolling)
        }
        outDraging() {}
        inAutoScrolling() {
            this.skipToCurrStage(2e3),
            Timer.callLater(2, ()=>{
                this.stManager && this.stManager.setNextState(E_STAGE_SCENE_STATE.idle)
            }
            , this)
        }
        exeAutoScrolling() {}
        outAutoScrolling() {}
        syncRoleWithStage(e) {
            let t = this.calcStageCurGlobalPos(e)
              , a = Tools.castRayFromScreenPos(this.scene3DBack, this.cameraBack, t);
            a.succeeded && (this.roleAvatar.transform.position = new Laya.Vector3(a.point.x,a.point.y,a.point.z))
        }
        onTouchButtonBack() {
            mgrDirector.warpSceneWidthEffect("vHubScene"),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "vStageScene.clickButtonBack"
            })
        }
        onTouchBox() {
            let e = this.calcStageCenterScrollOffset(mgrStage.getCurrentStageId());
            Math.abs(this.reuseList.scrollValue - e) > 50 && (this.backCountDown = 1,
            this.stManager.getCurState() == E_STAGE_SCENE_STATE.idle && this.stManager.setNextState(E_STAGE_SCENE_STATE.draging))
        }
        onReviewStage() {}
        onClickStage(e) {
            mgrStage.isStageUnlocked(e) ? mgrStage.getStageRating(e) != EStageRating.pass ? mgrDirector.openDialog("vStagePreviewDialog", {
                stageId: e
            }) : mgrTip.showMsgTip(`${this.multilingualText2}`) : mgrTip.showMsgTip(`${this.multilingualText1}`)
        }
        addButterFlyEffect() {
            let e = ()=>{
                let e = [{
                    x: [-100, 0],
                    y: [0, mgrDirector.height],
                    widget: 1
                }, {
                    x: [mgrDirector.width, mgrDirector.width + 100],
                    y: [0, mgrDirector.height],
                    widget: 1
                }]
                  , t = Tools.RoundTableProbability(e, "widget")
                  , a = Tools.random(t.x[0], t.x[1])
                  , i = Tools.random(t.y[0], t.y[1])
                  , s = new Laya.Vector2(Tools.random(100, mgrDirector.width - 100),Tools.random(200, mgrDirector.height - 200))
                  , o = Tools.RoundTableProbability(e, "widget")
                  , n = Tools.random(o.x[0], o.x[1])
                  , r = Tools.random(o.y[0], o.y[1])
                  , l = ULSkeleton.create(`80hudie_ ${Tools.random(1, 3)}`);
                this.addChild(l),
                l.pos(a, i),
                l.playAnimation("fly");
                let h = .25 * Math.random() + .2;
                l.scale(h, h),
                s.x - a > 0 ? l.scaleX = h : l.scaleX = -h,
                CustomTween.to(l, {
                    x: s.x,
                    y: s.y
                }, 1e3 * Tools.random(5, 8)).callback(()=>{
                    l.playAnimation("idle")
                }
                ).callback(()=>{
                    l.playAnimation("fly"),
                    n - s.x > 0 ? l.scaleX = h : l.scaleX = -h
                }
                ).to({
                    x: n,
                    endPosY: r
                }, 1e3 * Tools.random(3, 4)).callback(()=>{
                    l.destroy()
                }
                ).start(1)
            }
            ;
            Timer.callLoop(5, ()=>{
                e()
            }
            , this),
            e(),
            e(),
            e(),
            e()
        }
    }
    class mgrStory extends Manager {
        static onLoad() {
            super.onLoad(),
            this.loadRecord()
        }
        static loadRecord() {
            super.loadRecord()
        }
        static saveRecord() {
            super.saveRecord()
        }
        static startWithStoryId(e, t={
            bShowSkip: !0,
            skipCallback: null,
            finishCallback: null
        }) {
            mgrDirector.openDialog("vStoryDialog", {
                storyId: e,
                bShowSkip: t.bShowSkip,
                skipCallback: t.skipCallback,
                finishCallback: t.finishCallback
            })
        }
    }
    class vStoryDebugScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vStoryDebugScene",
            this.exportNodeNames = ["CC_boxBg", "CC_boxList"]
        }
        onOpened() {
            super.onOpened();
            let e = new ReuseList(1,0,100);
            e.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(e),
            e.setItemClass(vStoryDebugItem),
            e.setVerticalMoveEnable(!0);
            let t = [];
            mgrCfg.forDb_from_story_db((e,a)=>{
                t.push({
                    storyId: a.id
                })
            }
            ),
            e.setDatas(t),
            e.list.scrollBar.setScroll(0, 1091, 1e3)
        }
        onClosed() {
            super.onClosed()
        }
    }
    class vStoryDebugItem extends ReuseListItem {
        constructor() {
            super();
            this.size(124, 30),
            this.anchorX = 0,
            this.anchorY = 0,
            this.label = new Laya.Label,
            this.label.fontSize = 24,
            this.label.color = "#ffffff",
            this.addChild(this.label),
            this.button = this.label.addComponent(ScaleButton),
            this.button.fOnClick = this.onTouchButton.bind(this)
        }
        onTouchButton() {
            this.data && mgrStory.startWithStoryId(this.data.storyId)
        }
        fillByData(e) {
            this.data = e,
            this.label.text = `剧情Id: ${e.storyId}`,
            console.log(this._parent.parent.scrollBar.min, this._parent.parent.scrollBar.max, this._parent.parent.scrollBar.value)
        }
    }
    class vSuitPreviewDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vSuitPreviewDialog",
            this.exportNodeNames = ["CC_spriteBg", "CC_buttonBack", "CC_spriteTitle", "CC_labelTitle", "CC_spritePartIconBg", "CC_boxPartList", "CC_buttonLeft", "CC_buttonRight"],
            this.avatar = null,
            this.reuseList = null,
            this.aniIndex = 0
        }
        onOpened() {
            super.onOpened(),
            this.buttonBack.fOnClick = this.onTouchButtonBack.bind(this),
            Tools.registerTouchHander(this.spriteBg, this.onTouchSpriteBg.bind(this)),
            this.buttonLeft.fOnClick = this.onTouchButtonLeft.bind(this),
            this.buttonRight.fOnClick = this.onTouchButtonRight.bind(this),
            this.buttonLeft.bTween = !1,
            this.buttonRight.bTween = !1,
            this.buildUi(),
            this.fillData(),
            this.fadeIn()
        }
        onClosed() {
            super.onClosed()
        }
        getPreLoadAnimationIds() {
            return ANIMATION_ID.STAGE.SETTLEMENTTINGS
        }
        fadeIn() {
            Layout.widget(0, 0, this.buttonBack.__node),
            this.spritePartIconBg.x += 500,
            CustomTween.from(this.spriteTitle, {
                y: this.spriteTitle.y - 300
            }, 500, Laya.Ease.backOut).start(1),
            CustomTween.from(this.buttonLeft.__node, {
                alpha: 0,
                x: this.buttonLeft.__node.x + 50
            }, 500).start(1),
            CustomTween.from(this.buttonRight.__node, {
                alpha: 0,
                x: this.buttonRight.__node.x - 50
            }, 500).delayTime(500).callback(()=>{
                Layout.widget(1, -1, this.spritePartIconBg, {
                    x: 1,
                    y: .5
                }),
                CustomTween.from(this.spritePartIconBg, {
                    x: this.spritePartIconBg.x + 200
                }, 500, Laya.Ease.backOut).start(1)
            }
            ).start(1)
        }
        onTouchButtonBack() {
            this.closeDialog(!0)
        }
        onTouchSpriteBg(e) {
            if (e.isBegin && (this.bTouchBg = !0,
            this.lastTouchBgPos = e.pos),
            (e.isCancel || e.isEnd) && (this.bTouchBg = !1),
            this.bTouchBg) {
                let t = e.pos.x - this.lastTouchBgPos.x;
                this.lastTouchBgPos = e.pos,
                this.avatar && this.avatar.transform.rotate(new Laya.Vector3(0,t,0), !0, !1)
            }
        }
        buildUi() {
            this.avatar = new RoleAvatar,
            this.add3DEffectAtBack(this.avatar, 0),
            this.spriteBg.zOrder = -2,
            this.avatar.transform.scale = new Laya.Vector3(.85,.85,.85),
            this.cameraBack.fieldOfView = 25,
            this.cameraBack.getComponent(CameraFollow).distance = new Laya.Vector3(.1,.8,5),
            this.cameraBack.getComponent(CameraFollow).endRotation = new Laya.Vector3(-4,0,0),
            this.reuseList = new ReuseList(1,0,10),
            this.reuseList.size(this.boxPartList.width, this.boxPartList.height),
            this.boxPartList.addChild(this.reuseList),
            this.reuseList.setItemClass(vSuitPreviewPart),
            this.reuseList.setVerticalMoveEnable(!0),
            this.reuseList.setSpaceY(10)
        }
        fillData() {
            let e = this.context.suitId
              , t = mgrCfg.get_from_suit_db(e)
              , a = t.partIds;
            this.avatar.fillByPartIds(a),
            this.avatar.transform.position = new Laya.Vector3(1e3),
            mgrTip.showLoadingTip("vSuitPreviewScene_loadingAvatar"),
            this.avatar.registerLoadEndCallback(()=>{
                this.avatar.transform.position = new Laya.Vector3,
                this.avatar.playAnimation(ANIMATION_ID.STAGE.SETTLEMENTTINGS[this.aniIndex], 0),
                this.aniIndex += Tools.random(1, 2),
                this.aniIndex %= 3,
                this.avatar.playFaceAnimation(ANIMATION_ID.face.kaixin01),
                mgrTip.hideLoadingTip("vSuitPreviewScene_loadingAvatar")
            }
            ),
            this.labelTitle.text = t.name;
            let i = [];
            for (let e = 0; e < a.length; e++) {
                const t = a[e];
                i.push({
                    partId: t,
                    fOnClickPart: this.onClickPart.bind(this)
                })
            }
            this.reuseList.setDatas(i),
            this.reuseList.setScroll(0)
        }
        onClickPart(e) {
            mgrTip.showItemDetailDialog(e, !1, ()=>{
                this.closeDialog()
            }
            )
        }
        onTouchButtonLeft() {
            let e = [];
            mgrCfg.forDb_from_suit_db((t,a)=>{
                e.push(a.id)
            }
            );
            let t = e.indexOf(this.context.suitId);
            --t < 0 && (t = e.length - 1),
            this.context.suitId = e[t],
            this.fillData(),
            CustomTween.actionFloat(this.buttonLeft.__node, 1, 0, 300, e=>{
                this.buttonLeft.__node.alpha = e,
                this.buttonRight.__node.alpha = e
            }
            ).actionFloat(0, 1, 300, e=>{
                this.buttonLeft.__node.alpha = e,
                this.buttonRight.__node.alpha = e
            }
            ).start(1)
        }
        onTouchButtonRight() {
            let e = [];
            mgrCfg.forDb_from_suit_db((t,a)=>{
                e.push(a.id)
            }
            );
            let t = e.indexOf(this.context.suitId);
            ++t >= e.length && (t = 0),
            this.context.suitId = e[t],
            this.fillData(),
            CustomTween.actionFloat(this.buttonLeft.__node, 1, 0, 300, e=>{
                this.buttonLeft.__node.alpha = e,
                this.buttonRight.__node.alpha = e
            }
            ).actionFloat(0, 1, 300, e=>{
                this.buttonLeft.__node.alpha = e,
                this.buttonRight.__node.alpha = e
            }
            ).start(1)
        }
    }
    class vTestScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vTestScene",
            this.exportNodeNames = ["CC_button1", "CC_button2", "CC_button3", "CC_boxList", "CC_labelArtNumber", "CC_buttonMulti3dSceneTest", "CC_labelMulti3dSceneTest", "CC_buttonBackEffect", "CC_buttonFrontEffect", "CC_buttonGlobalEffect"],
            this.reuseList = null,
            this.sceneCount = 1
        }
        onOpened() {
            super.onOpened(),
            this.button1.fOnClick = this.onClickButton1.bind(this),
            this.button2.fOnClick = this.onClickButton2.bind(this),
            this.button3.fOnClick = this.onClickButton3.bind(this),
            this.buttonMulti3dSceneTest.fOnClick = this.onClickButtonMulti3dSceneTest.bind(this),
            this.buttonBackEffect.fOnClick = this.onTouchButtonBackEffect.bind(this),
            this.buttonFrontEffect.fOnClick = this.onTouchButtonFrontEffect.bind(this),
            this.buttonGlobalEffect.fOnClick = this.onTouchButtonGolbalEffect.bind(this),
            this.buildUi(),
            this.fillData()
        }
        onClosed() {
            super.onClosed()
        }
        onClickButton1() {
            console.log("点击按钮1")
        }
        onClickButton2() {
            mgrTip.showMsgTip("点击按钮2")
        }
        onClickButton3() {
            mgrDirector.openDialog("vTestDialog", {
                parm1: "参数1"
            })
        }
        buildUi() {
            this.reuseList = new ReuseList(1,0,5),
            this.reuseList.size(this.boxList.width, this.boxList.height),
            this.boxList.addChild(this.reuseList),
            this.reuseList.setItemClass(vTestReuseListItem),
            this.reuseList.setVerticalMoveEnable(!0)
        }
        fillData() {
            this.reuseList.setDatas(["第一条item", "第二条item", "第三条item", "第四条item", "第5条item", "第6条item"]);
            let e = new Laya.BitmapFont;
            e.loadFont("res/font/score.fnt", new Laya.Handler(this,()=>{
                Laya.Text.registerBitmapFont("red", e),
                this.labelArtNumber.font = "red"
            }
            ))
        }
        onClickButtonMulti3dSceneTest() {
            mgrDirector.get2DLayer().addChild(new Laya.Scene3D);
            this.sceneCount++,
            this.labelMulti3dSceneTest.text = `3D场景数量: ${this.sceneCount}`
        }
        onTouchButtonBackEffect() {
            this.add3DEffectAtBack("body_skin", 3)
        }
        onTouchButtonFrontEffect() {
            this.add3DEffectAtFront("E_shaizi", this.buttonFrontEffect.__node, 3)
        }
        onTouchButtonGolbalEffect() {
            mgrDirector.add3DEffectAtFront("E_ui_dianji", this.buttonGlobalEffect.__node, 3)
        }
    }
    const AD_EVENT_ID_WISH$1 = "free_wish";
    class vWishPoolMianScene extends SceneBase {
        constructor(e) {
            super(e),
            this.sourceName = "scene/vWishPoolMianScene",
            this.exportNodeNames = ["CC_spriteBg", "CC_spriteRoleLeft", "CC_buttonWishLeft", "CC_labelLeftAdWish", "CC_spriteLeftName", "CC_spriteLeftTip", "CC_spriteRoleRight", "CC_buttonWishRight", "CC_labelRightFreeWish", "CC_spriteRightName", "CC_spriteRightTip", "CC_buttonBack", "CC_spriteEffect", "CC_spriteTitle"]
        }
        onOpened() {
            super.onOpened(),
            this.buttonWishLeft.fOnClick = this.onTouchButtonWishLeft.bind(this),
            this.buttonWishRight.fOnClick = this.onTouchButtonWishRight.bind(this),
            this.buttonBack.fOnClick = (()=>{
                mgrDirector.open2DScene("vHubScene")
            }
            ),
            this.fillData(),
            Timer.callLoop(1, ()=>{
                this.fillData()
            }
            , this),
            this.fadeIn(),
            this.registerListeners({}),
            this.add3DEffectAtFront(MODEL_ID.effect.eff_ui_xuyuan_bgstar, this.spriteEffect, 0, .97),
            this.scene3DFront.zOrder = -3,
            this.spriteBg.zOrder = -4,
            mgrSound.play(3),
            mgrTip.showJumpOtherGameDrag(this),
            mgrSdk.staticPointEvent(7008),
            mgrI18n.trySetI18nImage(this.spriteLeftTip, "main_art04.png"),
            mgrI18n.trySetI18nImage(this.spriteRightTip, "main_art08.png"),
            mgrI18n.trySetI18nImage(this.spriteTitle, "art04.png")
        }
        onClosed() {
            super.onClosed()
        }
        fadeIn() {
            Layout.widget(10, 10, this.buttonBack.__node, {
                x: 0,
                y: 0
            }),
            this.spriteRoleLeft.x -= 500,
            this.spriteRoleRight.x += 500,
            this.spriteTitle.y -= 500,
            this.buttonBack.__node.scale(0, 0),
            CustomTween.to(this.spriteRoleLeft, {
                x: this.spriteRoleLeft.x + 500
            }, 500, Laya.Ease.backOut).callback(()=>{
                CustomTween.to(this.spriteRoleRight, {
                    x: this.spriteRoleRight.x - 500
                }, 500, Laya.Ease.backOut).delayTime(300).callback(()=>{
                    CustomTween.to(this.spriteTitle, {
                        y: this.spriteTitle.y + 500
                    }, 300, Laya.Ease.backOut).start(1)
                }
                ).delayTime(300).callback(()=>{
                    CustomTween.to(this.buttonBack.__node, {
                        scaleX: 1,
                        scaleY: 1
                    }, 300, Laya.Ease.backOut).start(1),
                    this.addButterFlyEffect()
                }
                ).start(1)
            }
            ).start(1)
        }
        fillData() {
            let[e,t] = mgrWishPool.getFreeWishCount(1)
              , [a,i] = mgrWishPool.getFreeWishCount(2);
            mgrTip.showBadgeWithNumber(this.buttonWishLeft.__node, t - e),
            mgrTip.showBadgeWithNumber(this.buttonWishRight.__node, i - a)
        }
        onTouchButtonWishLeft() {
            mgrDirector.open2DScene("vWishPoolScene", {
                poolId: 1
            })
        }
        onTouchButtonWishRight() {
            mgrDirector.open2DScene("vWishPoolScene", {
                poolId: 2
            })
        }
        addButterFlyEffect() {
            let e = e=>{
                let t = [{
                    x: [-100, 0],
                    y: [0, mgrDirector.height],
                    widget: 1
                }, {
                    x: [mgrDirector.width, mgrDirector.width + 100],
                    y: [0, mgrDirector.height],
                    widget: 1
                }]
                  , a = Tools.RoundTableProbability(t, "widget")
                  , i = Tools.random(a.x[0], a.x[1])
                  , s = Tools.random(a.y[0], a.y[1])
                  , o = Tools.RoundTableProbability(t, "widget")
                  , n = Tools.random(o.x[0], o.x[1])
                  , r = Tools.random(o.y[0], o.y[1])
                  , l = ULSkeleton.create(`80hudie_ ${Tools.random(1, 3)}`);
                this.addChild(l),
                l.pos(i, s),
                l.playAnimation("fly");
                let h = .5 * Math.random() + .25;
                l.scale(h, h),
                e.x - i > 0 ? l.scaleX = h : l.scaleX = -h,
                CustomTween.to(l, {
                    x: e.x,
                    y: e.y
                }, 1e3 * Tools.random(5, 8)).callback(()=>{
                    l.playAnimation("idle")
                }
                ).delayTime(1e3 * Tools.random(3, 10)).callback(()=>{
                    l.playAnimation("fly"),
                    n - e.x > 0 ? l.scaleX = h : l.scaleX = -h
                }
                ).to({
                    x: n,
                    endPosY: r
                }, 1e3 * Tools.random(3, 4)).callback(()=>{
                    l.destroy()
                }
                ).start(1)
            }
            ;
            e(this.globalToLocal(this.buttonWishLeft.__node.localToGlobal(new Laya.Point(Tools.random(10, this.buttonWishLeft.__node.width - 10),0)))),
            e(this.globalToLocal(this.buttonWishRight.__node.localToGlobal(new Laya.Point(Tools.random(10, this.buttonWishRight.__node.width - 10),0)))),
            Timer.callLoop(8, ()=>{
                e(this.globalToLocal(this.buttonWishLeft.__node.localToGlobal(new Laya.Point(Tools.random(10, this.buttonWishLeft.__node.width - 10),0)))),
                e(this.globalToLocal(this.buttonWishRight.__node.localToGlobal(new Laya.Point(Tools.random(10, this.buttonWishRight.__node.width - 10),0))))
            }
            , this)
        }
    }
    class vGuideMaskDialog extends DialogBase {
        constructor(e) {
            super(e),
            this.sourceName = null,
            this.exportNodeNames = [],
            this.name = "vGuideMaskDialog",
            this.imageMaskTop = new Laya.Image,
            this.imageMaskTop.skin = "res/ui/common/mask.png",
            this.addChild(this.imageMaskTop),
            this.imageMaskTop.alpha = 0,
            this.imageMaskBottom = new Laya.Image,
            this.imageMaskBottom.skin = "res/ui/common/mask.png",
            this.addChild(this.imageMaskBottom),
            this.imageMaskBottom.alpha = 0,
            this.imageMaskLeft = new Laya.Image,
            this.imageMaskLeft.skin = "res/ui/common/mask.png",
            this.addChild(this.imageMaskLeft),
            this.imageMaskLeft.alpha = 0,
            this.imageMaskRight = new Laya.Image,
            this.imageMaskRight.skin = "res/ui/common/mask.png",
            this.addChild(this.imageMaskRight),
            this.imageMaskRight.alpha = 0,
            this.imageMaskCenter = new Laya.Image,
            this.imageMaskCenter.skin = "res/ui/common/mask_01.png",
            this.addChild(this.imageMaskCenter),
            this.imageMaskCenter.sizeGrid = "10,10,10,10,0",
            this.imageMaskCenter.alpha = 0,
            this.size(Laya.stage.width, Laya.stage.height),
            Tools.registerTouchHander(this, this.onTouchNodeBg.bind(this))
        }
        onOpened() {
            super.onOpened(),
            Tools.registerTouchHander(this.imageMaskTop, e=>{
                e.isClick && this.onTouchMask()
            }
            ),
            Tools.registerTouchHander(this.imageMaskLeft, e=>{
                e.isClick && this.onTouchMask()
            }
            ),
            Tools.registerTouchHander(this.imageMaskRight, e=>{
                e.isClick && this.onTouchMask()
            }
            ),
            Tools.registerTouchHander(this.imageMaskBottom, e=>{
                e.isClick && this.onTouchMask()
            }
            ),
            this.target = this.context.target,
            this.extraArena = this.context.extraArena,
            this.content = this.context.content,
            this.widget = this.context.widget,
            this.parent.hitArea = new Laya.HitArea,
            this.parent.hitArea.hit.drawRect(0, 0, Laya.stage.width, Laya.stage.height, "#000000"),
            this.hitArea = new Laya.HitArea,
            this.hitArea.hit.drawRect(0, 0, Laya.stage.width, Laya.stage.width, "#000000"),
            this.context.content && this.addChild(new vGuideTipNode({
                content: this.content,
                widget: this.widget,
                type: this.context.type,
                tipDelayTime: this.context.tipDelayTime
            })),
            this.target && this.target.width > 0 && (this.skeleton = ULSkeleton.create("xingshouyingdao"),
            this.skeleton.scale(.85, .85),
            this.addChild(this.skeleton),
            this.skeleton.playAnimation("l1")),
            this.refresh(),
            Timer.callLoop(.016, ()=>{
                this.refresh()
            }
            , this)
        }
        onClosed() {
            super.onClosed()
        }
        refresh() {
            if (!this.target || this.target.destroyed)
                return;
            let e = this.target.localToGlobal(new Laya.Point(0,0))
              , t = this.globalToLocal(e)
              , a = t.x
              , i = t.y
              , s = this.target.width * this.target.scaleX
              , o = this.target.height * this.target.scaleY;
            this.imageMaskTop.pivot(0, 0),
            this.imageMaskTop.x = 0,
            this.imageMaskTop.y = 0,
            this.imageMaskTop.width = 768,
            this.imageMaskTop.height = i,
            this.imageMaskLeft.pivot(0, 0),
            this.imageMaskLeft.x = 0,
            this.imageMaskLeft.y = i,
            this.imageMaskLeft.width = a,
            this.imageMaskLeft.height = o,
            this.imageMaskRight.pivot(0, 0),
            this.imageMaskRight.x = a + s,
            this.imageMaskRight.y = i,
            this.imageMaskRight.width = 768 - (a + s),
            this.imageMaskRight.height = o,
            this.imageMaskBottom.pivot(0, 0),
            this.imageMaskBottom.x = 0,
            this.imageMaskBottom.y = i + o,
            this.imageMaskBottom.width = 768,
            this.imageMaskBottom.height = 1280 - i - o,
            this.imageMaskCenter.pivot(0, 0),
            this.imageMaskCenter.pos(a, i),
            this.imageMaskCenter.size(s, o);
            this.imageMaskTop.alpha = 0,
            this.imageMaskBottom.alpha = 0,
            this.imageMaskLeft.alpha = 0,
            this.imageMaskRight.alpha = 0,
            this.imageMaskCenter.alpha = 0,
            this.parent.hitArea.unHit.clear(),
            this.parent.hitArea.unHit.drawRect(a, i, s, o, "#000000"),
            this.hitArea.unHit.clear(),
            this.hitArea.unHit.drawRect(a, i, s, o, "#000000"),
            this.skeleton && this.skeleton.pos(a + s / 2, i + o / 2)
        }
        onTouchMask() {
            this.__bClosing || (console.log("onTouchGuideMask"),
            this.sendMsg("MSG_GUIDE_EVENT", {
                id: "clickGuideMask"
            }))
        }
        isShadowBlock() {
            return !1
        }
        isShowShadow() {
            return !1
        }
        closeDialog() {
            this._bChildClosing || (this._bChildClosing = !0,
            CustomTween.to(this.imageMaskTop, {
                alpha: 0
            }, 300).start(1),
            CustomTween.to(this.imageMaskBottom, {
                alpha: 0
            }, 300).start(1),
            CustomTween.to(this.imageMaskLeft, {
                alpha: 0
            }, 300).start(1),
            CustomTween.to(this.imageMaskRight, {
                alpha: 0
            }, 300).start(1),
            CustomTween.to(this.imageMaskCenter, {
                alpha: 0
            }, 300).start(1),
            Timer.callLater(.3, ()=>{
                super.closeDialog(!0)
            }
            ))
        }
        onTouchNodeBg(e) {
            if (e.isBegin)
                this._b_drag_to_right = !0,
                this._turn_count = 0,
                this._b_poped = !1,
                this._v_start_pos = e.pos;
            else if (e.isMove) {
                let t = this._v_start_pos
                  , a = e.pos;
                this._b_drag_to_right ? a.x < t.x - 20 && (this._b_drag_to_right = !1,
                this._turn_count++,
                console.log("turn left", this._turn_count)) : a.x > t.x + 20 && (this._b_drag_to_right = !0,
                this._turn_count++,
                console.log("turn right", this._turn_count)),
                this._b_poped || this._turn_count >= 20 && (mgrGuide.endGuide(),
                this._b_poped = !0)
            }
        }
    }
    class require {
        static requireModule(e) {
            switch (e) {
            case "vBoringTipDialog":
                return vBoringTipDialog;
            case "vCardDetailDialog":
                return vCardDetailDialog;
            case "vCardIllstrateBookDialog":
                return vCardIllstrateBookDialog;
            case "vCardSelectedDialog":
                return vCardSelectedDialog;
            case "vDailyTaskDialog":
                return vDailyTaskDialog;
            case "vDebugDialog":
                return vDebugDialog;
            case "vEatFullTipDialog":
                return vEatFullTipDialog;
            case "vEditorColorDialog":
                return vEditorColorDialog;
            case "vExtractDialog":
                return vExtractDialog;
            case "vFanceRewardDialog":
                return vFanceRewardDialog;
            case "vFindMeDialogBaidu":
                return vFindMeDialogBaidu;
            case "vFindMeDialogDouyin":
                return vFindMeDialogDouyin;
            case "vFindMeDialogToutiao":
                return vFindMeDialogToutiao;
            case "vFindMeDialogWeixin":
                return vFindMeDialogWeixin;
            case "vFoodDiscountDialog":
                return vFoodDiscountDialog;
            case "vFoodShopDialog":
                return vFoodShopDialog;
            case "vFreeUnlockFlowerpotDialog":
                return vFreeUnlockFlowerpotDialog;
            case "vGardenAchievementDialog":
                return vGardenAchievementDialog;
            case "vGardenAdHarvestDialog":
                return vGardenAdHarvestDialog;
            case "vGetItemWatchAdDialog":
                return vGetItemWatchAdDialog;
            case "vGotCardPackDialog":
                return vGotCardPackDialog;
            case "vGotItemAdvertisementDialog":
                return vGotItemAdvertisementDialog;
            case "vGotItemDialog":
                return vGotItemDialog;
            case "vGotPartDialog":
                return vGotPartDialog;
            case "vHubRestingTipDialog":
                return vHubRestingTipDialog;
            case "vHungryTipDialog":
                return vHungryTipDialog;
            case "vIntitleDialog":
                return vIntitleDialog;
            case "vItemGotEffectDialog":
                return vItemGotEffectDialog;
            case "vLearnFullTipDialog":
                return vLearnFullTipDialog;
            case "vLuckGoldDialog":
                return vLuckGoldDialog;
            case "vMoreGameDialog":
                return vMoreGameDialog;
            case "vMotionFullTipDialog":
                return vMotionFullTipDialog;
            case "vNativeDialogBig":
                return vNativeDialogBig;
            case "vNativeDialogSmall":
                return vNativeDialogSmall;
            case "vNearbyRankDialog":
                return vNearbyRankDialog;
            case "vOfflineDialog":
                return vOfflineDialog;
            case "vOpenCardDialog":
                return vOpenCardDialog;
            case "vOpenCardWithNewPartDialog":
                return vOpenCardWithNewPartDialog;
            case "vPartDetailDialog":
                return vPartDetailDialog;
            case "vPlantProgressDialog":
                return vPlantProgressDialog;
            case "vPlayerDetailDialy":
                return vPlayerDetailDialy;
            case "vPromptDialog":
                return vPromptDialog;
            case "vPvpCountAdDialog":
                return vPvpCountAdDialog;
            case "vPvpLikeRewardDialog":
                return vPvpLikeRewardDialog;
            case "vResttingTipDialog":
                return vResttingTipDialog;
            case "vRestWeakUpDialog":
                return vRestWeakUpDialog;
            case "vRewardMoreGame":
                return vRewardMoreGame;
            case "vRewardMoreGameItem":
                return vRewardMoreGameItem;
            case "vRoleLevelUpDialog":
                return vRoleLevelUpDialog;
            case "vRoomPartTryDialog":
                return vRoomPartTryDialog;
            case "vSeedSelectDialog":
                return vSeedSelectDialog;
            case "vSetLanguageDialog":
                return vSetLanguageDialog;
            case "vSettingDialog":
                return vSettingDialog;
            case "vShopDialog":
                return vShopDialog;
            case "vSignDialog":
                return vSignDialog;
            case "vSmallGameSettlementDialog":
                return vSmallGameSettlementDialog;
            case "vStageBianshenAdDialog":
                return vStageBianshenAdDialog;
            case "vStageCountAdDialog":
                return vStageCountAdDialog;
            case "vStageFailedTryDialog":
                return vStageFailedTryDialog;
            case "vStagePreviewDialog":
                return vStagePreviewDialog;
            case "vStoryDialog":
                return vStoryDialog;
            case "vTestDialog":
                return vTestDialog;
            case "vTiredTipDialog":
                return vTiredTipDialog;
            case "vTryAgainDialog":
                return vTryAgainDialog;
            case "vWeakupTipDialog":
                return vWeakupTipDialog;
            case "vWebViewDialog":
                return vWebViewDialog;
            case "vWishDialog":
                return vWishDialog;
            case "vCardDetailPart":
                return vCardDetailPart;
            case "vCardIllustrateBookItem":
                return vCardIllustrateBookItem;
            case "vChapterNode":
                return vChapterNode;
            case "vDailyTaskItem":
                return vDailyTaskItem;
            case "vEatingFoood":
                return vEatingFoood;
            case "vEditorCartonMaterialPart":
                return vEditorCartonMaterialPart;
            case "vEditorDynamicBoneAnimationItem":
                return vEditorDynamicBoneAnimationItem;
            case "vEditorDynamicBoneChild":
                return vEditorDynamicBoneChild;
            case "vEditorDynamicBonePart":
                return vEditorDynamicBonePart;
            case "vFoodShopItem":
                return vFoodShopItem;
            case "vGameCenterShopPart":
                return vGameCenterShopPart;
            case "vGardeAchievementRewardItem":
                return vGardeAchievementRewardItem;
            case "vGardenAchievementItem":
                return vGardenAchievementItem;
            case "vGardenAchievementRewardDetailNode":
                return vGardenAchievementRewardDetailNode;
            case "vGardenFlowerpot":
                return vGardenFlowerpot;
            case "vGuideTipNode":
                return vGuideTipNode;
            case "vIllustrateBookCard":
                return vIllustrateBookCard;
            case "vInteractionMainNode":
                return vInteractionMainNode;
            case "vItemTip":
                return vItemTip;
            case "vJumpOtherDrag":
                return vJumpOtherDrag;
            case "vJumpOtherGameBanner":
                return vJumpOtherGameBanner;
            case "vLanguageItem":
                return vLanguageItem;
            case "vMsgTip":
                return vMsgTip;
            case "vNativeBanner":
                return vNativeBanner;
            case "vNearbyRankItem":
                return vNearbyRankItem;
            case "vQuestionTime":
                return vQuestionTime;
            case "vRankItem":
                return vRankItem;
            case "vRoleLevelUpRewardItem":
                return vRoleLevelUpRewardItem;
            case "vRoomPart":
                return vRoomPart;
            case "vSeedSelectItem":
                return vSeedSelectItem;
            case "vShopPartItem":
                return vShopPartItem;
            case "vShopPropItem":
                return vShopPropItem;
            case "vShopSeedItem":
                return vShopSeedItem;
            case "vSmallGameSettlementItem":
                return vSmallGameSettlementItem;
            case "vSmallGameSettlementRankItem":
                return vSmallGameSettlementRankItem;
            case "vSmallNearbyRank":
                return vSmallNearbyRank;
            case "vSmallNearbyRankItem":
                return vSmallNearbyRankItem;
            case "vStageSceneBigItem":
                return vStageSceneBigItem;
            case "vStageSceneSmallItem":
                return vStageSceneSmallItem;
            case "vStarLevelItem":
                return vStarLevelItem;
            case "vSuitPreviewPart":
                return vSuitPreviewPart;
            case "vTestReuseListItem":
                return vTestReuseListItem;
            case "vTopBar":
                return vTopBar;
            case "vWarpSceneNode":
                return vWarpSceneNode;
            case "vWarpSceneNodeWhite":
                return vWarpSceneNodeWhite;
            case "vWishPoolPart":
                return vWishPoolPart;
            case "vAnswerQuestionScene":
                return vAnswerQuestionScene;
            case "vBornScene":
                return vBornScene;
            case "vCartonShaderDemo":
                return vCartonShaderDemo;
            case "vEatingScene":
                return vEatingScene;
            case "vEditorDynamicBone":
                return vEditorDynamicBone;
            case "vEditorPartCheck":
                return vEditorPartCheck;
            case "vEditorSpineCheckScene":
                return vEditorSpineCheckScene;
            case "vEditorStagePassCheck":
                return vEditorStagePassCheck;
            case "vGameCenterScene":
                return vGameCenterScene;
            case "vGameCenterShopDialog":
                return vGameCenterShopDialog;
            case "vGardenMainScene":
                return vGardenMainScene;
            case "vHubScene":
                return vHubScene;
            case "vI18nTestScene":
                return vI18nTestScene;
            case "vIllustrateScene":
                return vIllustrateScene;
            case "vLoadingScene":
                return vLoadingScene;
            case "vMotionMainScene":
                return vMotionMainScene;
            case "vMotionPlayBallScene":
                return vMotionPlayBallScene;
            case "vMotionRopeSkippingScene":
                return vMotionRopeSkippingScene;
            case "vNewGame01Scene":
                return vNewGame01Scene;
            case "vNewGame02Scene":
                return vNewGame02Scene;
            case "vPvpScene":
                return vPvpScene;
            case "vRankScene":
                return vRankScene;
            case "vRestScene":
                return vRestScene;
            case "vRoomScene":
                return vRoomScene;
            case "vStageScene":
                return vStageScene;
            case "vStoryDebugScene":
                return vStoryDebugScene;
            case "vSuitPreviewDialog":
                return vSuitPreviewDialog;
            case "vTestScene":
                return vTestScene;
            case "vWishPoolMianScene":
                return vWishPoolMianScene;
            case "vWishPoolScene":
                return vWishPoolScene;
            case "vGuideMaskDialog":
                return vGuideMaskDialog;
            case "SceneBase":
                return SceneBase;
            case "DialogBase":
                return DialogBase
            }
        }
    }
    class Start extends Laya.Script {
        constructor() {
            super()
        }
        onAwake() {
            console.log("---\x3e>:onAwake"),
            mgrNative.init(),
            Const.require = require;
            let e = Const.RESOLUTION_RANGE.minWidth
              , t = Const.RESOLUTION_RANGE.minHeight
              , a = Const.RESOLUTION_RANGE.maxWidth
              , i = Const.RESOLUTION_RANGE.maxHeight
              , s = e
              , o = t
              , n = Laya.Browser.width / Laya.Browser.height;
            n <= e / t ? n < e / i ? (console.log("超高", n),
            s = e,
            o = i) : (s = e,
            o = e / n) : n > a / t ? (console.log("超宽", n),
            s = a,
            o = t) : (o = t,
            s = t * n),
            Laya.stage.width = s,
            Laya.stage.height = o,
            Laya.stage.scaleMode = Laya.Stage.SCALE_SHOWALL,
            Laya.stage.screenMode = Laya.Stage.SCREEN_NONE,
            Laya.stage.alignH = Laya.Stage.ALIGN_MIDDLE,
            Laya.stage.alignV = Laya.Stage.ALIGN_MIDDLE,
            Tools.gameStartTime = Laya.timer.currTimer
        }
        onEnable() {
            console.log("---\x3e>:onEnable")
        }
        onStart() {
            console.log("---\x3e>:onStart"),
            Layout.widget(.5, .5, this.owner, {
                x: .5,
                y: .5
            }),
            mgrDirector.initScene(),
            Laya.loader.load("url_path.json", new Laya.Handler(this,e=>{
                e.path && !Laya.Browser.onPC && (Laya.URL.basePath = e.path),
                mgrDirector.open2DScene("vLoadingScene")
            }
            ))
        }
        onUpdate() {
            Tools.autoIncrementRuingTime();
            let e = Laya.loader._failRes || {}
              , t = 0
              , a = "";
            Tools.forEachMap(e, (e,i)=>{
                t += i,
                a += e
            }
            )
        }
        onLateUpdate() {}
        onDisable() {
            console.log("---\x3e>:onDisable")
        }
    }
    class CustomLayout extends Laya.Script {
        constructor() {
            super(),
            this.bHorizontalCenter = !0,
            this.bFrameRefresh = !0,
            this.space = 30,
            this.anchor = .5
        }
        onEnable() {
            this.bHorizontalCenter && Tools.layoutH(this.owner, this.space, this.anchor),
            this.bHorizontalCenter || Tools.layoutV(this.owner, this.space, this.anchor)
        }
        onUpdate() {
            this.bFrameRefresh && (this.bHorizontalCenter && Tools.layoutH(this.owner, this.space, this.anchor),
            this.bHorizontalCenter || Tools.layoutV(this.owner, this.space, this.anchor))
        }
        onDisable() {}
    }
    class GameConfig {
        constructor() {}
        static init() {
            var e = Laya.ClassUtils.regClass;
            e("Start.ts", Start),
            e("script/game/component/I18nComponent.ts", I18nComponent),
            e("script/ulframework/component/CustomLayout.ts", CustomLayout)
        }
    }
    GameConfig.width = 640,
    GameConfig.height = 1136,
    GameConfig.scaleMode = "fixedwidth",
    GameConfig.screenMode = "none",
    GameConfig.alignV = "top",
    GameConfig.alignH = "left",
    GameConfig.startScene = "MainScene.scene",
    GameConfig.sceneRoot = "",
    GameConfig.debug = !1,
    GameConfig.stat = !1,
    GameConfig.physicsDebug = !1,
    GameConfig.exportSceneToJson = !0,
    GameConfig.init();
    class Main {
        constructor() {
            window.notCacheList = [],
            console.log("LayaGame Initing"),
            window.Laya3D ? Laya3D.init(GameConfig.width, GameConfig.height) : Laya.init(GameConfig.width, GameConfig.height, Laya.WebGL),
            Laya.Physics && Laya.Physics.enable(),
            Laya.DebugPanel && Laya.DebugPanel.enable(),
            Laya.stage.scaleMode = GameConfig.scaleMode,
            Laya.stage.screenMode = GameConfig.screenMode,
            Laya.stage.alignV = GameConfig.alignV,
            Laya.stage.alignH = GameConfig.alignH,
            Laya.URL.exportSceneToJson = GameConfig.exportSceneToJson,
            Laya.MiniAdpter && (Laya.MiniAdpter.autoCacheFile = !0),
            Laya.MiniAdpter && (Laya.MiniAdpter.AutoCacheDownFile = !0),
            Laya.QGMiniAdapter && (Laya.QGMiniAdapter.autoCacheFile = !0),
            Laya.QGMiniAdapter && (Laya.QGMiniAdapter.AutoCacheDownFile = !0),
            Laya.VVMiniAdapter && (Laya.VVMiniAdapter.autoCacheFile = !0),
            Laya.VVMiniAdapter && (Laya.VVMiniAdapter.AutoCacheDownFile = !0),
            Laya.BMiniAdapter && (Laya.BMiniAdapter.autoCacheFile = !0),
            Laya.BMiniAdapter && (Laya.BMiniAdapter.AutoCacheDownFile = !0),
            Laya.KGMiniAdapter && (Laya.KGMiniAdapter.autoCacheFile = !0),
            Laya.KGMiniAdapter && (Laya.KGMiniAdapter.AutoCacheDownFile = !0),
            (GameConfig.debug || "true" == Laya.Utils.getQueryString("debug")) && Laya.enableDebugPanel(),
            GameConfig.physicsDebug && Laya.PhysicsDebugDraw && Laya.PhysicsDebugDraw.enable(),
            GameConfig.stat && Laya.Stat.show(),
            Laya.alertGlobalError = !0,
            Laya.ResourceVersion.enable("version-9d015d8cab.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION)
        }
        onVersionLoaded() {
            Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded))
        }
        onConfigLoaded() {
            GameConfig.startScene && Laya.Scene.open(GameConfig.startScene)
        }
    }
    new Main
}();
